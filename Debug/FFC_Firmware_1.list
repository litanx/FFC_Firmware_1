
FFC_Firmware_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800bf78  0800bf78  0000cf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c464  0800c464  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c464  0800c464  0000d464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c46c  0800c46c  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c46c  0800c46c  0000d46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c470  0800c470  0000d470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011d8  20000000  0800c474  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d8  2**0
                  CONTENTS
 10 .bss          00000820  200011d8  200011d8  0000f1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200019f8  200019f8  0000f1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013056  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d19  00000000  00000000  0002225e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00024f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3e  00000000  00000000  00026068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c02  00000000  00000000  00026da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001436b  00000000  00000000  0004c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df11c  00000000  00000000  00060d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fe2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005de4  00000000  00000000  0013fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00145c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200011d8 	.word	0x200011d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bf60 	.word	0x0800bf60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200011dc 	.word	0x200011dc
 80001ec:	0800bf60 	.word	0x0800bf60

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <ADS1220_writeRegister>:
 */

#include "ADS1220.h"
#include "main.h"
void ADS1220_writeRegister(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t value)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
 800104c:	4613      	mov	r3, r2
 800104e:	70bb      	strb	r3, [r7, #2]
	uint8_t arr[2] =
	{ ADS1220_WREG | (address << 2), value };
 8001050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	b25b      	sxtb	r3, r3
 8001058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800105c:	b25b      	sxtb	r3, r3
 800105e:	b2db      	uxtb	r3, r3
	uint8_t arr[2] =
 8001060:	733b      	strb	r3, [r7, #12]
 8001062:	78bb      	ldrb	r3, [r7, #2]
 8001064:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(hspi, arr, 2, 100);
 8001066:	f107 010c 	add.w	r1, r7, #12
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	2202      	movs	r2, #2
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f003 fc49 	bl	8004906 <HAL_SPI_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <ADS1220_readRegister>:

uint8_t ADS1220_readRegister(SPI_HandleTypeDef *hspi, uint8_t address)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] =
 8001088:	2300      	movs	r3, #0
 800108a:	81bb      	strh	r3, [r7, #12]
	{ 0, 0 };

	uint8_t txd[2] =
	{ (ADS1220_RREG | (address << 2)), 0xFF };
 800108c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	b25b      	sxtb	r3, r3
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	b25b      	sxtb	r3, r3
 800109a:	b2db      	uxtb	r3, r3
	uint8_t txd[2] =
 800109c:	723b      	strb	r3, [r7, #8]
 800109e:	23ff      	movs	r3, #255	@ 0xff
 80010a0:	727b      	strb	r3, [r7, #9]

	HAL_SPI_TransmitReceive(hspi, txd, data, 2, 1000); // When doing bidirectional, transmit a dummy byte(0xFF), 2 in total, received register is in [1]
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	f107 0108 	add.w	r1, r7, #8
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2302      	movs	r3, #2
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f003 fe74 	bl	8004da0 <HAL_SPI_TransmitReceive>
	return data[1];
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <ADS1220_reset>:

void ADS1220_reset(SPI_HandleTypeDef *hspi)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_RESET;
 80010ca:	2306      	movs	r3, #6
 80010cc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 80010ce:	f107 010f 	add.w	r1, r7, #15
 80010d2:	2364      	movs	r3, #100	@ 0x64
 80010d4:	2201      	movs	r2, #1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f003 fc15 	bl	8004906 <HAL_SPI_Transmit>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <ADS1220_init>:

uint8_t ADS1220_init(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	ADS1220_reset(hspi);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffe7 	bl	80010c2 <ADS1220_reset>
	HAL_Delay(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f001 ff7d 	bl	8002ff4 <HAL_Delay>

	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS, r->cfg_reg0);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	2100      	movs	r1, #0
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff9c 	bl	8001040 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	785b      	ldrb	r3, [r3, #1]
 800110c:	461a      	mov	r2, r3
 800110e:	2101      	movs	r1, #1
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff95 	bl	8001040 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS, r->cfg_reg2);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	789b      	ldrb	r3, [r3, #2]
 800111a:	461a      	mov	r2, r3
 800111c:	2102      	movs	r1, #2
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff8e 	bl	8001040 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS, r->cfg_reg3);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	78db      	ldrb	r3, [r3, #3]
 8001128:	461a      	mov	r2, r3
 800112a:	2103      	movs	r1, #3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff87 	bl	8001040 <ADS1220_writeRegister>

	uint8_t CR0 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS);
 8001132:	2100      	movs	r1, #0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffa1 	bl	800107c <ADS1220_readRegister>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]
	uint8_t CR1 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS);
 800113e:	2101      	movs	r1, #1
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff9b 	bl	800107c <ADS1220_readRegister>
 8001146:	4603      	mov	r3, r0
 8001148:	73bb      	strb	r3, [r7, #14]
	uint8_t CR2 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS);
 800114a:	2102      	movs	r1, #2
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff95 	bl	800107c <ADS1220_readRegister>
 8001152:	4603      	mov	r3, r0
 8001154:	737b      	strb	r3, [r7, #13]
	uint8_t CR3 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS);
 8001156:	2103      	movs	r1, #3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff8f 	bl	800107c <ADS1220_readRegister>
 800115e:	4603      	mov	r3, r0
 8001160:	733b      	strb	r3, [r7, #12]

	return (CR0 == r->cfg_reg0 && CR1 == r->cfg_reg1 && CR2 == r->cfg_reg2 && CR3 == r->cfg_reg3);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	429a      	cmp	r2, r3
 800116a:	d110      	bne.n	800118e <ADS1220_init+0xaa>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	7bba      	ldrb	r2, [r7, #14]
 8001172:	429a      	cmp	r2, r3
 8001174:	d10b      	bne.n	800118e <ADS1220_init+0xaa>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	789b      	ldrb	r3, [r3, #2]
 800117a:	7b7a      	ldrb	r2, [r7, #13]
 800117c:	429a      	cmp	r2, r3
 800117e:	d106      	bne.n	800118e <ADS1220_init+0xaa>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	78db      	ldrb	r3, [r3, #3]
 8001184:	7b3a      	ldrb	r2, [r7, #12]
 8001186:	429a      	cmp	r2, r3
 8001188:	d101      	bne.n	800118e <ADS1220_init+0xaa>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <ADS1220_init+0xac>
 800118e:	2300      	movs	r3, #0
 8001190:	b2db      	uxtb	r3, r3
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <ADS1220_start_conversion>:

void ADS1220_start_conversion(SPI_HandleTypeDef *hspi)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_START;
 80011a2:	2308      	movs	r3, #8
 80011a4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 80011a6:	f107 010f 	add.w	r1, r7, #15
 80011aa:	2364      	movs	r3, #100	@ 0x64
 80011ac:	2201      	movs	r2, #1
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f003 fba9 	bl	8004906 <HAL_SPI_Transmit>
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <ADS1220_set_conv_mode_single_shot>:
	r->cfg_reg1 |= _BV(2);
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
}

void ADS1220_set_conv_mode_single_shot(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	r->cfg_reg1 &= ~_BV(2);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	705a      	strb	r2, [r3, #1]
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	461a      	mov	r2, r3
 80011da:	2101      	movs	r1, #1
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff2f 	bl	8001040 <ADS1220_writeRegister>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ADS1220_read_nblocking>:
//
//	return result32;
//}


uint8_t ADS1220_read_nblocking(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, int32_t* pData){
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b088      	sub	sp, #32
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]
	uint8_t SPIbuf[3] = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2100      	movs	r1, #0
 8001200:	460a      	mov	r2, r1
 8001202:	801a      	strh	r2, [r3, #0]
 8001204:	460a      	mov	r2, r1
 8001206:	709a      	strb	r2, [r3, #2]
	int32_t result32 = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
	long int bit24;

	if(HAL_GPIO_ReadPin(DRDY_PORT, DRDY_PIN) == GPIO_PIN_SET)	return 0;
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4619      	mov	r1, r3
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f002 fda3 	bl	8003d5c <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <ADS1220_read_nblocking+0x36>
 800121c:	2300      	movs	r3, #0
 800121e:	e01c      	b.n	800125a <ADS1220_read_nblocking+0x70>

	HAL_SPI_Receive(hspi, SPIbuf, 3, 100);
 8001220:	f107 0114 	add.w	r1, r7, #20
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	2203      	movs	r2, #3
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f003 fca8 	bl	8004b7e <HAL_SPI_Receive>

	bit24 = SPIbuf[0];
 800122e:	7d3b      	ldrb	r3, [r7, #20]
 8001230:	61bb      	str	r3, [r7, #24]
	bit24 = (bit24 << 8) | SPIbuf[1];
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	7d7a      	ldrb	r2, [r7, #21]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
	bit24 = (bit24 << 8) | SPIbuf[2]; //Converting 3 bytes to a 24 bit int
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	7dba      	ldrb	r2, [r7, #22]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]

	bit24 = (bit24 << 8);
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	61bb      	str	r3, [r7, #24]
	result32 = (bit24 >> 8); //Converting 24 bit two's complement to 32 bit two's complement
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	121b      	asrs	r3, r3, #8
 8001250:	61fb      	str	r3, [r7, #28]

	*pData = result32;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	601a      	str	r2, [r3, #0]
	return 1;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <ADS1220_read_singleshot>:


uint8_t ADS1220_read_singleshot(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, int32_t* pData, uint32_t timeout){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	80fb      	strh	r3, [r7, #6]

	static uint8_t status = 1;
	static uint32_t timeStamp = 0;

	switch(status){
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <ADS1220_read_singleshot+0x8c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <ADS1220_read_singleshot+0x1e>
 800127c:	2b01      	cmp	r3, #1
 800127e:	d020      	beq.n	80012c2 <ADS1220_read_singleshot+0x5e>
 8001280:	e02b      	b.n	80012da <ADS1220_read_singleshot+0x76>

	case 0:
		if( !ADS1220_read_nblocking(hspi, DRDY_PORT, DRDY_PIN, pData) ){
 8001282:	88fa      	ldrh	r2, [r7, #6]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff ffae 	bl	80011ea <ADS1220_read_nblocking>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10c      	bne.n	80012ae <ADS1220_read_singleshot+0x4a>
			if (HAL_GetTick() > (timeStamp + timeout)) 	status = 1; // Timeout, reTry
 8001294:	f001 fea2 	bl	8002fdc <HAL_GetTick>
 8001298:	4601      	mov	r1, r0
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <ADS1220_read_singleshot+0x90>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4413      	add	r3, r2
 80012a2:	4299      	cmp	r1, r3
 80012a4:	d91d      	bls.n	80012e2 <ADS1220_read_singleshot+0x7e>
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <ADS1220_read_singleshot+0x8c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e009      	b.n	80012c2 <ADS1220_read_singleshot+0x5e>
			else 			break;									// Still waiting
		}else{														// Data ready
			timeStamp = HAL_GetTick();
 80012ae:	f001 fe95 	bl	8002fdc <HAL_GetTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <ADS1220_read_singleshot+0x90>)
 80012b6:	6013      	str	r3, [r2, #0]
			ADS1220_start_conversion(hspi);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff ff6e 	bl	800119a <ADS1220_start_conversion>
			return 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	e011      	b.n	80012e6 <ADS1220_read_singleshot+0x82>
		}

	case 1:
		timeStamp = HAL_GetTick();
 80012c2:	f001 fe8b 	bl	8002fdc <HAL_GetTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <ADS1220_read_singleshot+0x90>)
 80012ca:	6013      	str	r3, [r2, #0]
		ADS1220_start_conversion(hspi);
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff ff64 	bl	800119a <ADS1220_start_conversion>
		status = 0;
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <ADS1220_read_singleshot+0x8c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		break;
 80012d8:	e004      	b.n	80012e4 <ADS1220_read_singleshot+0x80>

	default:
		status = 1;
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <ADS1220_read_singleshot+0x8c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
		break;
 80012e0:	e000      	b.n	80012e4 <ADS1220_read_singleshot+0x80>
			else 			break;									// Still waiting
 80012e2:	bf00      	nop
	}

	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000
 80012f4:	200011f4 	.word	0x200011f4

080012f8 <Compute_PI>:
 *
 * */


//https://uk.mathworks.com/help/sps/ref/discretepicontroller.html
float Compute_PI(piCon_t *con, float setpoint, float input){
 80012f8:	b480      	push	{r7}
 80012fa:	b08b      	sub	sp, #44	@ 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	ed87 0a02 	vstr	s0, [r7, #8]
 8001304:	edc7 0a01 	vstr	s1, [r7, #4]

	float dt = (float)con->dt / 1000000;	// Convert dt to (s)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001314:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80013d4 <Compute_PI+0xdc>
 8001318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Calculate the error term
    float error = setpoint - input;
 8001320:	ed97 7a02 	vldr	s14, [r7, #8]
 8001324:	edd7 7a01 	vldr	s15, [r7, #4]
 8001328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Calculate the integral term
    float temp_iTerm = con->iTerm + (con->ki * dt * error);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	ed93 7a05 	vldr	s14, [r3, #20]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	edd3 6a02 	vldr	s13, [r3, #8]
 800133c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001340:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001344:	edd7 7a08 	vldr	s15, [r7, #32]
 8001348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate the output
    float u = (con->kp * error) + con->iTerm;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	ed93 7a01 	vldr	s14, [r3, #4]
 800135a:	edd7 7a08 	vldr	s15, [r7, #32]
 800135e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	edd3 7a05 	vldr	s15, [r3, #20]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136c:	edc7 7a06 	vstr	s15, [r7, #24]

    // Saturate the output
    float u_sat = CONSTRAIN( u, con->outMin, con->outMax );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	edd3 7a04 	vldr	s15, [r3, #16]
 8001376:	ed97 7a06 	vldr	s14, [r7, #24]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d502      	bpl.n	800138a <Compute_PI+0x92>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	e00d      	b.n	80013a6 <Compute_PI+0xae>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001390:	ed97 7a06 	vldr	s14, [r7, #24]
 8001394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	dd02      	ble.n	80013a4 <Compute_PI+0xac>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	e000      	b.n	80013a6 <Compute_PI+0xae>
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	617b      	str	r3, [r7, #20]

    if(u_sat == u) con->iTerm = temp_iTerm; 	// If output clipping, do not update controller iTerm
 80013a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b0:	eeb4 7a67 	vcmp.f32	s14, s15
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	d102      	bne.n	80013c0 <Compute_PI+0xc8>
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	615a      	str	r2, [r3, #20]

    return u_sat;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	ee07 3a90 	vmov	s15, r3

}
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	372c      	adds	r7, #44	@ 0x2c
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	49742400 	.word	0x49742400

080013d8 <refModel_Tick>:
/*
 * Mass-spring-damper model with stick/slip friction
 * Compute system status for a given input force and position
 */

void refModel_Tick(rMod_t *mod, double iForce){
 80013d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013dc:	b090      	sub	sp, #64	@ 0x40
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	ed87 0b00 	vstr	d0, [r7]

	float frictionForce = 0;
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t stuck = 0;			/* = 1 when velocity is under dynamic friction velocity threshold (dfv) */
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	//double dt = (double)mod->dt / 1000000;	// Convert dt to (s)

	// Compute ref Velocity
	mod->vel = mod->vel_1 + ((mod->dt * mod->acc_1) / 1000000); // Convert dt to (s)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800140a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800140e:	ed9f 6aa2 	vldr	s12, [pc, #648]	@ 8001698 <refModel_Tick+0x2c0>
 8001412:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Limit Velocity Hard Stops
	mod->vSaturated = 0;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	if(mod->vel > mod->velMaxLim){
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd07      	ble.n	800144e <refModel_Tick+0x76>

		mod->vel = mod->velMaxLim;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	641a      	str	r2, [r3, #64]	@ 0x40
		mod->vSaturated = 1;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	}

	if(mod->vel < mod->velMinLim){
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800145a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d507      	bpl.n	8001474 <refModel_Tick+0x9c>

		mod->vel = mod->velMinLim;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40
		mod->vSaturated = 1;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	}

	// Compute ref Position
	mod->pos = mod->pos_1 + ((mod->dt * mod->vel) / 1000000); // Convert dt to (s)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800148c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001490:	ed9f 6a81 	vldr	s12, [pc, #516]	@ 8001698 <refModel_Tick+0x2c0>
 8001494:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	// Limit position Hard Stops
	mod->pSaturated = 0;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	
	if(mod->pos >= mod->posMaxLim){
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	db0b      	blt.n	80014d8 <refModel_Tick+0x100>

		mod->pos = mod->posMaxLim;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	645a      	str	r2, [r3, #68]	@ 0x44
		mod->vel = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	641a      	str	r2, [r3, #64]	@ 0x40
		mod->pSaturated = 1;		
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	}

	if(mod->pos <= mod->posMinLim){
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d80b      	bhi.n	8001506 <refModel_Tick+0x12e>

		mod->pos = mod->posMinLim;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
		mod->vel = 0;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
		mod->pSaturated = 1;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	}

	/* Calculate forces relative to the position of the system */
	double springForce = cMap_1d_Interpolate(mod->k_map, mod->k_mapSize, mod->pos);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	68dc      	ldr	r4, [r3, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	891d      	ldrh	r5, [r3, #8]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f828 	bl	8000568 <__aeabi_f2d>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	ec43 2b10 	vmov	d0, r2, r3
 8001520:	4629      	mov	r1, r5
 8001522:	4620      	mov	r0, r4
 8001524:	f000 f91a 	bl	800175c <cMap_1d_Interpolate>
 8001528:	ee10 3a10 	vmov	r3, s0
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f81b 	bl	8000568 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
//	double springForce = (mod->k * mod->pos);

	/* Calculate damping force */
	float c = cMap_1d_Interpolate(mod->c_map, mod->c_mapSize, mod->pos);  // Get damping const from map
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	699c      	ldr	r4, [r3, #24]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8a9d      	ldrh	r5, [r3, #20]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f80e 	bl	8000568 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	ec43 2b10 	vmov	d0, r2, r3
 8001554:	4629      	mov	r1, r5
 8001556:	4620      	mov	r0, r4
 8001558:	f000 f900 	bl	800175c <cMap_1d_Interpolate>
 800155c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	double dampingForce = ((c * mod->vel) / 1000); // Convert vel to (m/s)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001566:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800169c <refModel_Tick+0x2c4>
 8001572:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001576:	ee16 0a90 	vmov	r0, s13
 800157a:	f7fe fff5 	bl	8000568 <__aeabi_f2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	e9c7 2308 	strd	r2, r3, [r7, #32]

	/* Friction Model --------------------------------------------------------------------------------*/
	// F = u * N -> where N is the Normal force between the moving object and the sliding surface.

	/* Velocity - Hit crossing (threshold) */
	if( mod->vel < mod->dfv && mod->vel > (-mod->dfv)) stuck = 1;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d50f      	bpl.n	80015bc <refModel_Tick+0x1e4>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80015a8:	eef1 7a67 	vneg.f32	s15, s15
 80015ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	dd02      	ble.n	80015bc <refModel_Tick+0x1e4>
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	if(stuck){
 80015bc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d05e      	beq.n	8001682 <refModel_Tick+0x2aa>

		int8_t sign = ((iForce - springForce) > 0) ? 1 : -1; 	// Get the sign of the applied force (input-spring)
 80015c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015cc:	f7fe fe6c 	bl	80002a8 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f7ff faaa 	bl	8000b38 <__aeabi_dcmpgt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <refModel_Tick+0x216>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e001      	b.n	80015f2 <refModel_Tick+0x21a>
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	77bb      	strb	r3, [r7, #30]
		double modForce = fabs(iForce - springForce);			// Get the module of the applied force
 80015f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015fc:	f7fe fe54 	bl	80002a8 <__aeabi_dsub>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4611      	mov	r1, r2
 8001606:	6139      	str	r1, [r7, #16]
 8001608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800160c:	617b      	str	r3, [r7, #20]

		/* Choose the smallest force: [applied force] Vs [Static Friction] */
		frictionForce = (modForce < (mod->us * mod->N)) ? (sign) * modForce : (sign) * (mod->us * mod->N);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	ed93 7a07 	vldr	s14, [r3, #28]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	ee17 0a90 	vmov	r0, s15
 8001622:	f7fe ffa1 	bl	8000568 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800162e:	f7ff fa65 	bl	8000afc <__aeabi_dcmplt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d011      	beq.n	800165c <refModel_Tick+0x284>
 8001638:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff81 	bl	8000544 <__aeabi_i2d>
 8001642:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001646:	f7fe ffe7 	bl	8000618 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fad9 	bl	8000c08 <__aeabi_d2f>
 8001656:	ee07 0a90 	vmov	s15, r0
 800165a:	e00f      	b.n	800167c <refModel_Tick+0x2a4>
 800165c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	edd3 6a07 	vldr	s13, [r3, #28]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001680:	e023      	b.n	80016ca <refModel_Tick+0x2f2>

	}else{

		int8_t sign = (mod->vel > 0) ? 1 : -1;					// Get the sign of the velocity
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	dd06      	ble.n	80016a0 <refModel_Tick+0x2c8>
 8001692:	2301      	movs	r3, #1
 8001694:	e006      	b.n	80016a4 <refModel_Tick+0x2cc>
 8001696:	bf00      	nop
 8001698:	49742400 	.word	0x49742400
 800169c:	447a0000 	.word	0x447a0000
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	77fb      	strb	r3, [r7, #31]
		frictionForce = (sign) * (mod->ud * mod->N);			// Calculate dynamic friction
 80016a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	edd3 6a08 	vldr	s13, [r3, #32]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	/* Do I want to have mass dependent to the position? for instance I could emulate backslash */
	/* Do I want to have damping and friction dependent to the position? emulate different surfaces? */
	/* In a two axis controller the forces relatives to position will depend on a 2 dimensional array */

	// Compute ref Acceleration ->  ∑F = m * a
	mod->acc = ((1000 / (mod->m)) * (iForce - dampingForce - frictionForce - springForce )); // Convert acc to (mm/s2)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d0:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 800169c <refModel_Tick+0x2c4>
 80016d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016d8:	ee16 0a90 	vmov	r0, s13
 80016dc:	f7fe ff44 	bl	8000568 <__aeabi_f2d>
 80016e0:	4604      	mov	r4, r0
 80016e2:	460d      	mov	r5, r1
 80016e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ec:	f7fe fddc 	bl	80002a8 <__aeabi_dsub>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4690      	mov	r8, r2
 80016f6:	4699      	mov	r9, r3
 80016f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80016fa:	f7fe ff35 	bl	8000568 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4640      	mov	r0, r8
 8001704:	4649      	mov	r1, r9
 8001706:	f7fe fdcf 	bl	80002a8 <__aeabi_dsub>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001716:	f7fe fdc7 	bl	80002a8 <__aeabi_dsub>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7fe ff79 	bl	8000618 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa6b 	bl	8000c08 <__aeabi_d2f>
 8001732:	4602      	mov	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Store previous values
	mod->pos_1 = mod->pos;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	651a      	str	r2, [r3, #80]	@ 0x50
	mod->vel_1 = mod->vel;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	64da      	str	r2, [r3, #76]	@ 0x4c
	mod->acc_1 = mod->acc;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8001750:	bf00      	nop
 8001752:	3740      	adds	r7, #64	@ 0x40
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800175a:	bf00      	nop

0800175c <cMap_1d_Interpolate>:
 * Linear Interpolation (y) = y1 + [(x-x1) × (y2-y1)]/ (x2-x1)
 * Where (x1,y1) & (x2,y2) are coordinates
 * x is the point to perform interpolation
 * y is the interpolated value.
 * */
static float cMap_1d_Interpolate(cMap_1d_t *map, uint16_t len, double x){
 800175c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	460b      	mov	r3, r1
 8001768:	ed87 0b00 	vstr	d0, [r7]
 800176c:	817b      	strh	r3, [r7, #10]

	if(!len) 			return 0; // Empty vector
 800176e:	897b      	ldrh	r3, [r7, #10]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <cMap_1d_Interpolate+0x1e>
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e0c1      	b.n	80018fe <cMap_1d_Interpolate+0x1a2>
	if(map == NULL) 	return 0; // No vector defined
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <cMap_1d_Interpolate+0x2a>
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e0bb      	b.n	80018fe <cMap_1d_Interpolate+0x1a2>

	uint8_t last = len - 1; 	  // Compute it only once to save some time
 8001786:	897b      	ldrh	r3, [r7, #10]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	74fb      	strb	r3, [r7, #19]

	/* if pos < min known value > saturate */
	if(x < map[0].x)				return map[0].f;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fee8 	bl	8000568 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017a0:	f7ff f9ac 	bl	8000afc <__aeabi_dcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <cMap_1d_Interpolate+0x54>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	e0a6      	b.n	80018fe <cMap_1d_Interpolate+0x1a2>

	/* if pos > max known value > saturate */
	else if(x > map[last].x)		return map[last].f;
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fed4 	bl	8000568 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c8:	f7ff f9b6 	bl	8000b38 <__aeabi_dcmpgt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <cMap_1d_Interpolate+0x82>
 80017d2:	7cfb      	ldrb	r3, [r7, #19]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	e08f      	b.n	80018fe <cMap_1d_Interpolate+0x1a2>

	/* otherwise find the adjacent upper and lower points in the array to interpolate */
	for(int i=0; i<last; i++){
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e085      	b.n	80018f0 <cMap_1d_Interpolate+0x194>

		if( map[i].x <= x && map[i+1].x >= x)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feba 	bl	8000568 <__aeabi_f2d>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017fc:	f7ff f992 	bl	8000b24 <__aeabi_dcmpge>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d071      	beq.n	80018ea <cMap_1d_Interpolate+0x18e>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fea8 	bl	8000568 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001820:	f7ff f976 	bl	8000b10 <__aeabi_dcmple>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d05f      	beq.n	80018ea <cMap_1d_Interpolate+0x18e>
			return  map[i].f + ((x - map[i].x) * (map[i+1].f - map[i].f)) / (map[i+1].x - map[i].x);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4413      	add	r3, r2
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe97 	bl	8000568 <__aeabi_f2d>
 800183a:	4604      	mov	r4, r0
 800183c:	460d      	mov	r5, r1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe8d 	bl	8000568 <__aeabi_f2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001856:	f7fe fd27 	bl	80002a8 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4690      	mov	r8, r2
 8001860:	4699      	mov	r9, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	edd3 7a01 	vldr	s15, [r3, #4]
 800187c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001880:	ee17 0a90 	vmov	r0, s15
 8001884:	f7fe fe70 	bl	8000568 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4640      	mov	r0, r8
 800188e:	4649      	mov	r1, r9
 8001890:	f7fe fec2 	bl	8000618 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4690      	mov	r8, r2
 800189a:	4699      	mov	r9, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe53 	bl	8000568 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4640      	mov	r0, r8
 80018c8:	4649      	mov	r1, r9
 80018ca:	f7fe ffcf 	bl	800086c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fce9 	bl	80002ac <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f991 	bl	8000c08 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	e009      	b.n	80018fe <cMap_1d_Interpolate+0x1a2>
	for(int i=0; i<last; i++){
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	7cfb      	ldrb	r3, [r7, #19]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f6ff af75 	blt.w	80017e4 <cMap_1d_Interpolate+0x88>

	}

	return 0; /* The program should never reach this line */
 80018fa:	f04f 0300 	mov.w	r3, #0
}
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001910 <StepCon_GetPosition>:

static uint16_t stepLimit = 0; // anti-stall, prevents the motor running if the refModel is not ticking.


/* Returns actuator position in mm */
float StepCon_GetPosition(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	MotorPos = ((double)stepCount / MICROSTEP) * MM_PER_REV;
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <StepCon_GetPosition+0x58>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe13 	bl	8000544 <__aeabi_i2d>
 800191e:	a310      	add	r3, pc, #64	@ (adr r3, 8001960 <StepCon_GetPosition+0x50>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe ffa2 	bl	800086c <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <StepCon_GetPosition+0x5c>)
 8001936:	f7fe fe6f 	bl	8000618 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	490c      	ldr	r1, [pc, #48]	@ (8001970 <StepCon_GetPosition+0x60>)
 8001940:	e9c1 2300 	strd	r2, r3, [r1]
	return MotorPos;
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <StepCon_GetPosition+0x60>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f95b 	bl	8000c08 <__aeabi_d2f>
 8001952:	4603      	mov	r3, r0
 8001954:	ee07 3a90 	vmov	s15, r3
}
 8001958:	eeb0 0a67 	vmov.f32	s0, s15
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	00000000 	.word	0x00000000
 8001964:	40c38800 	.word	0x40c38800
 8001968:	200011fc 	.word	0x200011fc
 800196c:	40440000 	.word	0x40440000
 8001970:	20001200 	.word	0x20001200

08001974 <StepCon_Speed>:

// set linear actuator to a speed of speed mm/s
void StepCon_Speed(float speed){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	ed87 0a01 	vstr	s0, [r7, #4]

	//if (speed < sDeadBand && speed > -sDeadBand) mStop = 1; // Dead band

	//else
	if(speed < 0){
 800197e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d515      	bpl.n	80019b8 <StepCon_Speed+0x44>
		//mStop = 0;
		dir = 0;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <StepCon_Speed+0x7c>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
		StepCon_CCW; 			// CCW Direction
 8001992:	2200      	movs	r2, #0
 8001994:	2180      	movs	r1, #128	@ 0x80
 8001996:	4817      	ldr	r0, [pc, #92]	@ (80019f4 <StepCon_Speed+0x80>)
 8001998:	f002 f9f8 	bl	8003d8c <HAL_GPIO_WritePin>
		pulseTime = -4000/speed;
 800199c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80019f8 <StepCon_Speed+0x84>
 80019a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ac:	ee17 3a90 	vmov	r3, s15
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <StepCon_Speed+0x88>)
 80019b4:	801a      	strh	r2, [r3, #0]
 80019b6:	e014      	b.n	80019e2 <StepCon_Speed+0x6e>
	}
	else{
		//mStop = 0;
		dir = 1;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <StepCon_Speed+0x7c>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
		StepCon_CW; 			// CW Direction
 80019be:	2201      	movs	r2, #1
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <StepCon_Speed+0x80>)
 80019c4:	f002 f9e2 	bl	8003d8c <HAL_GPIO_WritePin>
		pulseTime = 4000/speed;
 80019c8:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001a00 <StepCon_Speed+0x8c>
 80019cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80019d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d8:	ee17 3a90 	vmov	r3, s15
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <StepCon_Speed+0x88>)
 80019e0:	801a      	strh	r2, [r3, #0]
	}

	stepLimit = 0; // Reste motor watchdog
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <StepCon_Speed+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	801a      	strh	r2, [r3, #0]

}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200011f8 	.word	0x200011f8
 80019f4:	40021800 	.word	0x40021800
 80019f8:	c57a0000 	.word	0xc57a0000
 80019fc:	20000002 	.word	0x20000002
 8001a00:	457a0000 	.word	0x457a0000
 8001a04:	20001208 	.word	0x20001208

08001a08 <StepCon_pulseTick>:

/*
 * Timer callback routine
 **/
extern uint16_t oddDrv;
void StepCon_pulseTick(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

	if(pulseTime < MIN_PULSE_TIME){
 8001a0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ad8 <StepCon_pulseTick+0xd0>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d80c      	bhi.n	8001a2e <StepCon_pulseTick+0x26>
		__HAL_TIM_SET_COUNTER(&htim2, MIN_PULSE_TIME);
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <StepCon_pulseTick+0xd4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	625a      	str	r2, [r3, #36]	@ 0x24
		pulseTime = MIN_PULSE_TIME;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <StepCon_pulseTick+0xd0>)
 8001a1e:	2205      	movs	r2, #5
 8001a20:	801a      	strh	r2, [r3, #0]
		oddDrv++;
 8001a22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <StepCon_pulseTick+0xd8>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <StepCon_pulseTick+0xd8>)
 8001a2c:	801a      	strh	r2, [r3, #0]
	}

	__HAL_TIM_SET_COUNTER(&htim2, pulseTime);
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <StepCon_pulseTick+0xd0>)
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <StepCon_pulseTick+0xd4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24

	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <StepCon_pulseTick+0xdc>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <StepCon_pulseTick+0x4e>
 8001a40:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <StepCon_pulseTick+0xe0>)
 8001a42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <StepCon_pulseTick+0xe4>)
 8001a4c:	f7ff f874 	bl	8000b38 <__aeabi_dcmpgt>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d139      	bne.n	8001aca <StepCon_pulseTick+0xc2>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001a56:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <StepCon_pulseTick+0xdc>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <StepCon_pulseTick+0x6c>
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <StepCon_pulseTick+0xe0>)
 8001a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <StepCon_pulseTick+0xe8>)
 8001a6a:	f7ff f847 	bl	8000afc <__aeabi_dcmplt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d12c      	bne.n	8001ace <StepCon_pulseTick+0xc6>

	if(stepLimit++ > 500) {
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <StepCon_pulseTick+0xec>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	b291      	uxth	r1, r2
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <StepCon_pulseTick+0xec>)
 8001a7e:	8011      	strh	r1, [r2, #0]
 8001a80:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a84:	d825      	bhi.n	8001ad2 <StepCon_pulseTick+0xca>
		//BKPT;
		return;
	}

	/*Send pulse */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, SET);
 8001a86:	2201      	movs	r2, #1
 8001a88:	2120      	movs	r1, #32
 8001a8a:	481b      	ldr	r0, [pc, #108]	@ (8001af8 <StepCon_pulseTick+0xf0>)
 8001a8c:	f002 f97e 	bl	8003d8c <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim2) > pulseTime);
 8001a90:	bf00      	nop
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <StepCon_pulseTick+0xd4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad8 <StepCon_pulseTick+0xd0>)
 8001a9a:	8812      	ldrh	r2, [r2, #0]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d8f8      	bhi.n	8001a92 <StepCon_pulseTick+0x8a>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	4814      	ldr	r0, [pc, #80]	@ (8001af8 <StepCon_pulseTick+0xf0>)
 8001aa6:	f002 f971 	bl	8003d8c <HAL_GPIO_WritePin>

	if(dir) stepCount++;		/* Track how many pulses have been sent to the stepper */
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <StepCon_pulseTick+0xdc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <StepCon_pulseTick+0xb6>
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <StepCon_pulseTick+0xf4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <StepCon_pulseTick+0xf4>)
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e00a      	b.n	8001ad4 <StepCon_pulseTick+0xcc>
	else 	stepCount--;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <StepCon_pulseTick+0xf4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <StepCon_pulseTick+0xf4>)
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e004      	b.n	8001ad4 <StepCon_pulseTick+0xcc>
	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001aca:	bf00      	nop
 8001acc:	e002      	b.n	8001ad4 <StepCon_pulseTick+0xcc>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <StepCon_pulseTick+0xcc>
		return;
 8001ad2:	bf00      	nop

}
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000002 	.word	0x20000002
 8001adc:	2000168c 	.word	0x2000168c
 8001ae0:	200017e2 	.word	0x200017e2
 8001ae4:	200011f8 	.word	0x200011f8
 8001ae8:	20001200 	.word	0x20001200
 8001aec:	405b8000 	.word	0x405b8000
 8001af0:	c05b8000 	.word	0xc05b8000
 8001af4:	20001208 	.word	0x20001208
 8001af8:	40021800 	.word	0x40021800
 8001afc:	200011fc 	.word	0x200011fc

08001b00 <UART1_Init>:

	/*----------------------------*/
}


void UART1_Init(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  HAL_UART_Receive_DMA(&huart1, (uint8_t *)UART1_Rx_Buf, UART1_BUF_LEN);  // Initializes DMA for UART1
 8001b04:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b08:	4902      	ldr	r1, [pc, #8]	@ (8001b14 <UART1_Init+0x14>)
 8001b0a:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <UART1_Init+0x18>)
 8001b0c:	f004 f9be 	bl	8005e8c <HAL_UART_Receive_DMA>

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000120c 	.word	0x2000120c
 8001b18:	2000171c 	.word	0x2000171c

08001b1c <UART1_Handler>:

/*@Brief Gets Commands from UART1 RingBuffer
 *
 */
void UART1_Handler(){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

	static uint8_t UART1_CMD_Buff[300];	/* Command Handler Buffer */
	static uint16_t UART1_cmdPtr = 0;

	while(UART1_DataAvailable()){
 8001b22:	e02a      	b.n	8001b7a <UART1_Handler+0x5e>

		uint8_t aux = UART1_getChar();
 8001b24:	f000 f8ac 	bl	8001c80 <UART1_getChar>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]

		if(aux == '\n' || aux == '\r' ) { // End Command
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d002      	beq.n	8001b38 <UART1_Handler+0x1c>
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b0d      	cmp	r3, #13
 8001b36:	d10f      	bne.n	8001b58 <UART1_Handler+0x3c>

				UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001b38:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <UART1_Handler+0x74>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <UART1_Handler+0x78>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	5453      	strb	r3, [r2, r1]
				UART1_Cmd_Callback(UART1_CMD_Buff, UART1_cmdPtr);
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <UART1_Handler+0x74>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4812      	ldr	r0, [pc, #72]	@ (8001b94 <UART1_Handler+0x78>)
 8001b4c:	f000 fd24 	bl	8002598 <UART1_Cmd_Callback>
				UART1_cmdPtr=0;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <UART1_Handler+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	801a      	strh	r2, [r3, #0]
 8001b56:	e010      	b.n	8001b7a <UART1_Handler+0x5e>

		}else{             				// Command body

		UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <UART1_Handler+0x74>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <UART1_Handler+0x78>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	5453      	strb	r3, [r2, r1]
		if (UART1_cmdPtr < 299) UART1_cmdPtr++;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <UART1_Handler+0x74>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001b6c:	d805      	bhi.n	8001b7a <UART1_Handler+0x5e>
 8001b6e:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <UART1_Handler+0x74>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <UART1_Handler+0x74>)
 8001b78:	801a      	strh	r2, [r3, #0]
	while(UART1_DataAvailable()){
 8001b7a:	f000 f843 	bl	8001c04 <UART1_DataAvailable>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1cf      	bne.n	8001b24 <UART1_Handler+0x8>

		}
	}
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20001404 	.word	0x20001404
 8001b94:	20001408 	.word	0x20001408

08001b98 <UART1_printf>:

void UART1_printf(const char *fmt, ...){
 8001b98:	b40f      	push	{r0, r1, r2, r3}
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
	static char tempBuff[256];

	//memset(tempBuff, 0, 256);
	va_list arg;

	va_start (arg, fmt);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	603b      	str	r3, [r7, #0]
	uint16_t len = vsprintf(tempBuff,fmt, arg);
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	4809      	ldr	r0, [pc, #36]	@ (8001bd0 <UART1_printf+0x38>)
 8001bac:	f006 f9f2 	bl	8007f94 <vsiprintf>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	80fb      	strh	r3, [r7, #6]
	va_end (arg);

	//HAL_UART_Transmit(&huart1, (const uint8_t*)tempBuff, len, 0xff); /* Transmit over uart */
	HAL_UART_Transmit_IT(&huart1, (const uint8_t*)tempBuff, len); /* Transmit over uart */
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4905      	ldr	r1, [pc, #20]	@ (8001bd0 <UART1_printf+0x38>)
 8001bba:	4806      	ldr	r0, [pc, #24]	@ (8001bd4 <UART1_printf+0x3c>)
 8001bbc:	f004 f921 	bl	8005e02 <HAL_UART_Transmit_IT>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bca:	b004      	add	sp, #16
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20001534 	.word	0x20001534
 8001bd4:	2000171c 	.word	0x2000171c

08001bd8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

    if(huart == &huart1){
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_UART_RxCpltCallback+0x24>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d102      	bne.n	8001bee <HAL_UART_RxCpltCallback+0x16>
      UART1_DMA_Ovrn = 1;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_UART_RxCpltCallback+0x28>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
    }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	2000171c 	.word	0x2000171c
 8001c00:	20001400 	.word	0x20001400

08001c04 <UART1_DataAvailable>:

static uint8_t UART1_DataAvailable() {
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  if (((UART1_oPtr < UART1_iPtr) && !UART1_DMA_Ovrn) || ((UART1_oPtr > UART1_iPtr) && UART1_DMA_Ovrn)) {
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <UART1_DataAvailable+0x70>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <UART1_DataAvailable+0x74>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d203      	bcs.n	8001c24 <UART1_DataAvailable+0x20>
 8001c1c:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <UART1_DataAvailable+0x78>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00d      	beq.n	8001c40 <UART1_DataAvailable+0x3c>
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <UART1_DataAvailable+0x70>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <UART1_DataAvailable+0x74>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d905      	bls.n	8001c44 <UART1_DataAvailable+0x40>
 8001c38:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <UART1_DataAvailable+0x78>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <UART1_DataAvailable+0x40>
    return 1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e012      	b.n	8001c6a <UART1_DataAvailable+0x66>
  } else if (UART1_DMA_Ovrn){
 8001c44:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <UART1_DataAvailable+0x78>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00d      	beq.n	8001c68 <UART1_DataAvailable+0x64>
    UART1_oPtr = UART1_iPtr;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <UART1_DataAvailable+0x74>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <UART1_DataAvailable+0x70>)
 8001c5c:	801a      	strh	r2, [r3, #0]
    UART1_DMA_Ovrn = 0;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <UART1_DataAvailable+0x78>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
    return 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <UART1_DataAvailable+0x66>
  }
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20001402 	.word	0x20001402
 8001c78:	20001760 	.word	0x20001760
 8001c7c:	20001400 	.word	0x20001400

08001c80 <UART1_getChar>:

static uint8_t UART1_getChar() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if (UART1_DataAvailable()) {
 8001c8a:	f7ff ffbb 	bl	8001c04 <UART1_DataAvailable>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d014      	beq.n	8001cbe <UART1_getChar+0x3e>
    ch = UART1_Rx_Buf[UART1_oPtr++];
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <UART1_getChar+0x48>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	b291      	uxth	r1, r2
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <UART1_getChar+0x48>)
 8001c9e:	8011      	strh	r1, [r2, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <UART1_getChar+0x4c>)
 8001ca4:	5c9b      	ldrb	r3, [r3, r2]
 8001ca6:	71fb      	strb	r3, [r7, #7]
    if (UART1_oPtr >= UART1_BUF_LEN) {
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <UART1_getChar+0x48>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cb0:	d305      	bcc.n	8001cbe <UART1_getChar+0x3e>
      UART1_oPtr = 0;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <UART1_getChar+0x48>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	801a      	strh	r2, [r3, #0]
      UART1_DMA_Ovrn = 0;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <UART1_getChar+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
    }
  }
  return ch;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20001402 	.word	0x20001402
 8001ccc:	2000120c 	.word	0x2000120c
 8001cd0:	20001400 	.word	0x20001400

08001cd4 <checkModelTimeout>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t checkModelTimeout(uint8_t rst, uint32_t dt){
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]

	static uint8_t ptr = 0;

	if (rst) {
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <checkModelTimeout+0x24>
		ptr = 0;
 8001ce6:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <checkModelTimeout+0xb8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
		memset(tMarks, 0, sizeof(tMarks));
 8001cec:	2214      	movs	r2, #20
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4827      	ldr	r0, [pc, #156]	@ (8001d90 <checkModelTimeout+0xbc>)
 8001cf2:	f006 f959 	bl	8007fa8 <memset>
 8001cf6:	e028      	b.n	8001d4a <checkModelTimeout+0x76>
	}else{
		if(ptr == 0) tMarks[ptr++] = __HAL_TIM_GET_COUNTER(&htim3);
 8001cf8:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <checkModelTimeout+0xb8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10e      	bne.n	8001d1e <checkModelTimeout+0x4a>
 8001d00:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <checkModelTimeout+0xc0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <checkModelTimeout+0xb8>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	b2d0      	uxtb	r0, r2
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d8c <checkModelTimeout+0xb8>)
 8001d10:	7010      	strb	r0, [r2, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	b289      	uxth	r1, r1
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <checkModelTimeout+0xbc>)
 8001d18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001d1c:	e015      	b.n	8001d4a <checkModelTimeout+0x76>
		else tMarks[ptr++] = __HAL_TIM_GET_COUNTER(&htim3) - tMarks[ptr-1];
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <checkModelTimeout+0xc0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	b299      	uxth	r1, r3
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <checkModelTimeout+0xb8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	4a18      	ldr	r2, [pc, #96]	@ (8001d90 <checkModelTimeout+0xbc>)
 8001d2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <checkModelTimeout+0xb8>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	1c58      	adds	r0, r3, #1
 8001d38:	b2c4      	uxtb	r4, r0
 8001d3a:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <checkModelTimeout+0xb8>)
 8001d3c:	7004      	strb	r4, [r0, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	1a8b      	subs	r3, r1, r2
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <checkModelTimeout+0xbc>)
 8001d46:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
	}
	  if(__HAL_TIM_GET_COUNTER(&htim3) > dt){
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <checkModelTimeout+0xc0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d214      	bcs.n	8001d80 <checkModelTimeout+0xac>
		  HAL_TIM_Base_Stop(&htim3);
 8001d56:	480f      	ldr	r0, [pc, #60]	@ (8001d94 <checkModelTimeout+0xc0>)
 8001d58:	f003 fbac 	bl	80054b4 <HAL_TIM_Base_Stop>
		  HAL_TIM_Base_Stop(&htim2);
 8001d5c:	480e      	ldr	r0, [pc, #56]	@ (8001d98 <checkModelTimeout+0xc4>)
 8001d5e:	f003 fba9 	bl	80054b4 <HAL_TIM_Base_Stop>
		  asm("NOP");
 8001d62:	bf00      	nop
		  timeouts++;
 8001d64:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <checkModelTimeout+0xc8>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <checkModelTimeout+0xc8>)
 8001d6e:	801a      	strh	r2, [r3, #0]
		  HAL_TIM_Base_Start(&htim3);
 8001d70:	4808      	ldr	r0, [pc, #32]	@ (8001d94 <checkModelTimeout+0xc0>)
 8001d72:	f003 fb37 	bl	80053e4 <HAL_TIM_Base_Start>
		  HAL_TIM_Base_Start(&htim2);
 8001d76:	4808      	ldr	r0, [pc, #32]	@ (8001d98 <checkModelTimeout+0xc4>)
 8001d78:	f003 fb34 	bl	80053e4 <HAL_TIM_Base_Start>
		  return 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <checkModelTimeout+0xae>
	  }
	  return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001854 	.word	0x20001854
 8001d90:	200017cc 	.word	0x200017cc
 8001d94:	200016d4 	.word	0x200016d4
 8001d98:	2000168c 	.word	0x2000168c
 8001d9c:	200017e0 	.word	0x200017e0

08001da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	ed2d 8b02 	vpush	{d8}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001daa:	f001 f8e1 	bl	8002f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dae:	f000 f985 	bl	80020bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db2:	f000 fb0d 	bl	80023d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001db6:	f000 faeb 	bl	8002390 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001dba:	f000 fabf 	bl	800233c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001dbe:	f000 fa23 	bl	8002208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001dc2:	f000 fa6d 	bl	80022a0 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001dc6:	f000 f9e9 	bl	800219c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001dca:	48a2      	ldr	r0, [pc, #648]	@ (8002054 <main+0x2b4>)
 8001dcc:	f003 fb0a 	bl	80053e4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001dd0:	48a1      	ldr	r0, [pc, #644]	@ (8002058 <main+0x2b8>)
 8001dd2:	f003 fb97 	bl	8005504 <HAL_TIM_Base_Start_IT>
  UART1_Init();
 8001dd6:	f7ff fe93 	bl	8001b00 <UART1_Init>
//  ADS1220_set_conv_mode_continuous(&hspi1, &regs);
//  ADS1220_set_voltage_ref(&hspi1, ADS1220_VREF_EXT_REF_1, &regs);
//  ADS1220_enable_PSW(&hspi1, &regs);
//  ADS1220_get_config(&hspi1, &regs);

  ADS1220_regs regs = { 0x3E, 0xD4, 0x88, 0x00 };
 8001dda:	4ba0      	ldr	r3, [pc, #640]	@ (800205c <main+0x2bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	607b      	str	r3, [r7, #4]
  ADS1220_init(&hspi1, &regs); // Optionally check for failure
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	4619      	mov	r1, r3
 8001de4:	489e      	ldr	r0, [pc, #632]	@ (8002060 <main+0x2c0>)
 8001de6:	f7ff f97d 	bl	80010e4 <ADS1220_init>
  ADS1220_set_conv_mode_single_shot(&hspi1, &regs);
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	489c      	ldr	r0, [pc, #624]	@ (8002060 <main+0x2c0>)
 8001df0:	f7ff f9e4 	bl	80011bc <ADS1220_set_conv_mode_single_shot>
  //ADS1220_start_conversion(&hspi1);


  	uint32_t timeStamp = 0; /* Timer for UART tx */
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]

  	//force emulation
	int32_t fOffset = 137;
 8001df8:	2389      	movs	r3, #137	@ 0x89
 8001dfa:	61bb      	str	r3, [r7, #24]
	float scalingFactor_N = 84.5;  // bits per Newton
 8001dfc:	4b99      	ldr	r3, [pc, #612]	@ (8002064 <main+0x2c4>)
 8001dfe:	617b      	str	r3, [r7, #20]

	hmod1.dt = 500; 	// us /* This can go lower than 500us due ADC timing limitations */
 8001e00:	4b99      	ldr	r3, [pc, #612]	@ (8002068 <main+0x2c8>)
 8001e02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e06:	601a      	str	r2, [r3, #0]

	hmod1.m = 1;
 8001e08:	4b97      	ldr	r3, [pc, #604]	@ (8002068 <main+0x2c8>)
 8001e0a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e0e:	605a      	str	r2, [r3, #4]
	hmod1.c = 20; 		// N.s/m
 8001e10:	4b95      	ldr	r3, [pc, #596]	@ (8002068 <main+0x2c8>)
 8001e12:	4a96      	ldr	r2, [pc, #600]	@ (800206c <main+0x2cc>)
 8001e14:	611a      	str	r2, [r3, #16]
	//hmod1.k = 50; 		// N/m

  hmod1.k_map = &Spring_Map;
 8001e16:	4b94      	ldr	r3, [pc, #592]	@ (8002068 <main+0x2c8>)
 8001e18:	4a95      	ldr	r2, [pc, #596]	@ (8002070 <main+0x2d0>)
 8001e1a:	60da      	str	r2, [r3, #12]
  hmod1.k_mapSize = Spring_Map_Points;
 8001e1c:	4b95      	ldr	r3, [pc, #596]	@ (8002074 <main+0x2d4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b91      	ldr	r3, [pc, #580]	@ (8002068 <main+0x2c8>)
 8001e24:	811a      	strh	r2, [r3, #8]

  hmod1.c_map = &Damping_Map;
 8001e26:	4b90      	ldr	r3, [pc, #576]	@ (8002068 <main+0x2c8>)
 8001e28:	4a93      	ldr	r2, [pc, #588]	@ (8002078 <main+0x2d8>)
 8001e2a:	619a      	str	r2, [r3, #24]
  hmod1.c_mapSize = Damping_Map_Points;
 8001e2c:	4b93      	ldr	r3, [pc, #588]	@ (800207c <main+0x2dc>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b8d      	ldr	r3, [pc, #564]	@ (8002068 <main+0x2c8>)
 8001e34:	829a      	strh	r2, [r3, #20]

	hmod1.us = 0.2; 		// Dynamic friction coefficient
 8001e36:	4b8c      	ldr	r3, [pc, #560]	@ (8002068 <main+0x2c8>)
 8001e38:	4a91      	ldr	r2, [pc, #580]	@ (8002080 <main+0x2e0>)
 8001e3a:	61da      	str	r2, [r3, #28]
	hmod1.ud = 0.2; 		// Static friction coefficient
 8001e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002068 <main+0x2c8>)
 8001e3e:	4a90      	ldr	r2, [pc, #576]	@ (8002080 <main+0x2e0>)
 8001e40:	621a      	str	r2, [r3, #32]
	hmod1.N = 5; 			// Normal Force (Weight)
 8001e42:	4b89      	ldr	r3, [pc, #548]	@ (8002068 <main+0x2c8>)
 8001e44:	4a8f      	ldr	r2, [pc, #572]	@ (8002084 <main+0x2e4>)
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24
	hmod1.dfv = 0.01;	// mm/s
 8001e48:	4b87      	ldr	r3, [pc, #540]	@ (8002068 <main+0x2c8>)
 8001e4a:	4a8f      	ldr	r2, [pc, #572]	@ (8002088 <main+0x2e8>)
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28

	hmod1.posMinLim = Spring_Map[0].x;
 8001e4e:	4b88      	ldr	r3, [pc, #544]	@ (8002070 <main+0x2d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a85      	ldr	r2, [pc, #532]	@ (8002068 <main+0x2c8>)
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
	hmod1.posMaxLim = Spring_Map[Spring_Map_Points-1].x;
 8001e56:	4b87      	ldr	r3, [pc, #540]	@ (8002074 <main+0x2d4>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a84      	ldr	r2, [pc, #528]	@ (8002070 <main+0x2d0>)
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a80      	ldr	r2, [pc, #512]	@ (8002068 <main+0x2c8>)
 8001e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

	hmod1.velMaxLim = 1500;	// Hardware max reachable speed.
 8001e68:	4b7f      	ldr	r3, [pc, #508]	@ (8002068 <main+0x2c8>)
 8001e6a:	4a88      	ldr	r2, [pc, #544]	@ (800208c <main+0x2ec>)
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
	hmod1.velMinLim = -1500;
 8001e6e:	4b7e      	ldr	r3, [pc, #504]	@ (8002068 <main+0x2c8>)
 8001e70:	4a87      	ldr	r2, [pc, #540]	@ (8002090 <main+0x2f0>)
 8001e72:	639a      	str	r2, [r3, #56]	@ 0x38

	hcon1.dt = hmod1.dt;
 8001e74:	4b7c      	ldr	r3, [pc, #496]	@ (8002068 <main+0x2c8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a86      	ldr	r2, [pc, #536]	@ (8002094 <main+0x2f4>)
 8001e7a:	6013      	str	r3, [r2, #0]
	hcon1.kp = 100;
 8001e7c:	4b85      	ldr	r3, [pc, #532]	@ (8002094 <main+0x2f4>)
 8001e7e:	4a86      	ldr	r2, [pc, #536]	@ (8002098 <main+0x2f8>)
 8001e80:	605a      	str	r2, [r3, #4]
	hcon1.ki = 0.25;
 8001e82:	4b84      	ldr	r3, [pc, #528]	@ (8002094 <main+0x2f4>)
 8001e84:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001e88:	609a      	str	r2, [r3, #8]
	hcon1.outMax = hmod1.velMaxLim;
 8001e8a:	4b77      	ldr	r3, [pc, #476]	@ (8002068 <main+0x2c8>)
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8e:	4a81      	ldr	r2, [pc, #516]	@ (8002094 <main+0x2f4>)
 8001e90:	60d3      	str	r3, [r2, #12]
	hcon1.outMin = hmod1.velMinLim;
 8001e92:	4b75      	ldr	r3, [pc, #468]	@ (8002068 <main+0x2c8>)
 8001e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e96:	4a7f      	ldr	r2, [pc, #508]	@ (8002094 <main+0x2f4>)
 8001e98:	6113      	str	r3, [r2, #16]

  while (1)
  {
	  __HAL_TIM_SET_COUNTER(&htim3, 0); // re-start monitoring timer
 8001e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002054 <main+0x2b4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24
/*N*/  checkModelTimeout(1, hmod1.dt);
 8001ea2:	4b71      	ldr	r3, [pc, #452]	@ (8002068 <main+0x2c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff ff13 	bl	8001cd4 <checkModelTimeout>

	  UART1_Handler();
 8001eae:	f7ff fe35 	bl	8001b1c <UART1_Handler>
	  /*1*/  checkModelTimeout(0, hmod1.dt);
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <main+0x2c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff ff0b 	bl	8001cd4 <checkModelTimeout>
	  int32_t sAux = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
	  if( ADS1220_read_singleshot(&hspi1, GPIOC, GPIO_PIN_4, &sAux, 10) ){
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	9200      	str	r2, [sp, #0]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4974      	ldr	r1, [pc, #464]	@ (800209c <main+0x2fc>)
 8001ecc:	4864      	ldr	r0, [pc, #400]	@ (8002060 <main+0x2c0>)
 8001ece:	f7ff f9c9 	bl	8001264 <ADS1220_read_singleshot>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d02d      	beq.n	8001f34 <main+0x194>

		  int16_t raw = ((sAux & 0x00FFFF00)>>8) + fOffset;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	121b      	asrs	r3, r3, #8
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	827b      	strh	r3, [r7, #18]
		  float nforce = (float)raw / scalingFactor_N;
 8001ee8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ef4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efc:	edc7 7a03 	vstr	s15, [r7, #12]

		  /*Debug Foce sensor*/
		  if(fabs((double)(nforce-force)) > th){
 8001f00:	4b67      	ldr	r3, [pc, #412]	@ (80020a0 <main+0x300>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f12:	4b64      	ldr	r3, [pc, #400]	@ (80020a4 <main+0x304>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	dd05      	ble.n	8001f2e <main+0x18e>
			fforce++;
 8001f22:	4b61      	ldr	r3, [pc, #388]	@ (80020a8 <main+0x308>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80020a8 <main+0x308>)
 8001f2c:	801a      	strh	r2, [r3, #0]
		  }

		  force = nforce;
 8001f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80020a0 <main+0x300>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6013      	str	r3, [r2, #0]
	  }

	  /*2*/  checkModelTimeout(0, hmod1.dt);
 8001f34:	4b4c      	ldr	r3, [pc, #304]	@ (8002068 <main+0x2c8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff feca 	bl	8001cd4 <checkModelTimeout>
	// Filter 1 Force
	  static float smoothForce = 0;
	  smoothForce = smoothForce - (LPF1_Beta * (smoothForce - force));
 8001f40:	4b5a      	ldr	r3, [pc, #360]	@ (80020ac <main+0x30c>)
 8001f42:	ed93 7a00 	vldr	s14, [r3]
 8001f46:	4b59      	ldr	r3, [pc, #356]	@ (80020ac <main+0x30c>)
 8001f48:	edd3 6a00 	vldr	s13, [r3]
 8001f4c:	4b54      	ldr	r3, [pc, #336]	@ (80020a0 <main+0x300>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f56:	4b56      	ldr	r3, [pc, #344]	@ (80020b0 <main+0x310>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f64:	4b51      	ldr	r3, [pc, #324]	@ (80020ac <main+0x30c>)
 8001f66:	edc3 7a00 	vstr	s15, [r3]
	  /*3*/  checkModelTimeout(0, hmod1.dt);
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002068 <main+0x2c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff feaf 	bl	8001cd4 <checkModelTimeout>
	// Reference model
	//------------------------------------------//
	 refModel_Tick(&hmod1, smoothForce);
 8001f76:	4b4d      	ldr	r3, [pc, #308]	@ (80020ac <main+0x30c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe faf4 	bl	8000568 <__aeabi_f2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	ec43 2b10 	vmov	d0, r2, r3
 8001f88:	4837      	ldr	r0, [pc, #220]	@ (8002068 <main+0x2c8>)
 8001f8a:	f7ff fa25 	bl	80013d8 <refModel_Tick>
	//------------------------------------------//
	 /*4*/  checkModelTimeout(0, hmod1.dt);
 8001f8e:	4b36      	ldr	r3, [pc, #216]	@ (8002068 <main+0x2c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff fe9d 	bl	8001cd4 <checkModelTimeout>
	// Position Controller
	//------------------------------------------//
	hcon1.dt = hmod1.dt;
 8001f9a:	4b33      	ldr	r3, [pc, #204]	@ (8002068 <main+0x2c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002094 <main+0x2f4>)
 8001fa0:	6013      	str	r3, [r2, #0]
	float refSpeed = Compute_PI(&hcon1, hmod1.pos, (StepCon_GetPosition()));
 8001fa2:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <main+0x2c8>)
 8001fa4:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 8001fa8:	f7ff fcb2 	bl	8001910 <StepCon_GetPosition>
 8001fac:	eef0 7a40 	vmov.f32	s15, s0
 8001fb0:	eef0 0a67 	vmov.f32	s1, s15
 8001fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8001fb8:	4836      	ldr	r0, [pc, #216]	@ (8002094 <main+0x2f4>)
 8001fba:	f7ff f99d 	bl	80012f8 <Compute_PI>
 8001fbe:	ed87 0a02 	vstr	s0, [r7, #8]
	/*5*/  checkModelTimeout(0, hmod1.dt);
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <main+0x2c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fe83 	bl	8001cd4 <checkModelTimeout>
	//------------------------------------------//

	 /* Drive motor Speed with corrected ref velocity */
	 speed = (hmod1.vel + refSpeed); // in mm/s
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <main+0x2c8>)
 8001fd0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001fd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fdc:	4b35      	ldr	r3, [pc, #212]	@ (80020b4 <main+0x314>)
 8001fde:	edc3 7a00 	vstr	s15, [r3]

	 StepCon_Speed(speed);
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <main+0x314>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fec:	f7ff fcc2 	bl	8001974 <StepCon_Speed>

	 // Console logs
	 if(timeStamp + 50 < HAL_GetTick()){
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8001ff6:	f000 fff1 	bl	8002fdc <HAL_GetTick>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	429c      	cmp	r4, r3
 8001ffe:	d219      	bcs.n	8002034 <main+0x294>
		 UART1_printf("cmd=%.4f, %.4f\r\n", (float)StepCon_GetPosition(), smoothForce);
 8002000:	f7ff fc86 	bl	8001910 <StepCon_GetPosition>
 8002004:	ee10 3a10 	vmov	r3, s0
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe faad 	bl	8000568 <__aeabi_f2d>
 800200e:	4604      	mov	r4, r0
 8002010:	460d      	mov	r5, r1
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <main+0x30c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe faa6 	bl	8000568 <__aeabi_f2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	e9cd 2300 	strd	r2, r3, [sp]
 8002024:	4622      	mov	r2, r4
 8002026:	462b      	mov	r3, r5
 8002028:	4823      	ldr	r0, [pc, #140]	@ (80020b8 <main+0x318>)
 800202a:	f7ff fdb5 	bl	8001b98 <UART1_printf>
		 timeStamp = HAL_GetTick();
 800202e:	f000 ffd5 	bl	8002fdc <HAL_GetTick>
 8002032:	61f8      	str	r0, [r7, #28]
//	//	 * You can compare the timer counter and trigger an alarm
//	//	 * if the time was already gone by the time the program
//	//	 * reached this point
//	//	 **/

/*6*/  checkModelTimeout(0, hmod1.dt);
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <main+0x2c8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fe4a 	bl	8001cd4 <checkModelTimeout>
	 while(__HAL_TIM_GET_COUNTER(&htim3) < hmod1.dt);
 8002040:	bf00      	nop
 8002042:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <main+0x2b4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002048:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <main+0x2c8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3f8      	bcc.n	8002042 <main+0x2a2>
  {
 8002050:	e723      	b.n	8001e9a <main+0xfa>
 8002052:	bf00      	nop
 8002054:	200016d4 	.word	0x200016d4
 8002058:	2000168c 	.word	0x2000168c
 800205c:	0800bf8c 	.word	0x0800bf8c
 8002060:	20001634 	.word	0x20001634
 8002064:	42a90000 	.word	0x42a90000
 8002068:	200017e4 	.word	0x200017e4
 800206c:	41a00000 	.word	0x41a00000
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000804 	.word	0x20000804
 8002078:	20000808 	.word	0x20000808
 800207c:	20001000 	.word	0x20001000
 8002080:	3e4ccccd 	.word	0x3e4ccccd
 8002084:	40a00000 	.word	0x40a00000
 8002088:	3c23d70a 	.word	0x3c23d70a
 800208c:	44bb8000 	.word	0x44bb8000
 8002090:	c4bb8000 	.word	0xc4bb8000
 8002094:	2000183c 	.word	0x2000183c
 8002098:	42c80000 	.word	0x42c80000
 800209c:	40020800 	.word	0x40020800
 80020a0:	200017c4 	.word	0x200017c4
 80020a4:	20000008 	.word	0x20000008
 80020a8:	200017c8 	.word	0x200017c8
 80020ac:	20001858 	.word	0x20001858
 80020b0:	20000004 	.word	0x20000004
 80020b4:	200017c0 	.word	0x200017c0
 80020b8:	0800bf78 	.word	0x0800bf78

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b094      	sub	sp, #80	@ 0x50
 80020c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	2230      	movs	r2, #48	@ 0x30
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 ff6c 	bl	8007fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <SystemClock_Config+0xd8>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002194 <SystemClock_Config+0xd8>)
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <SystemClock_Config+0xd8>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <SystemClock_Config+0xdc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <SystemClock_Config+0xdc>)
 8002106:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <SystemClock_Config+0xdc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002118:	2301      	movs	r3, #1
 800211a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800211c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002122:	2302      	movs	r3, #2
 8002124:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002126:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800212a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800212c:	2304      	movs	r3, #4
 800212e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002130:	23b4      	movs	r3, #180	@ 0xb4
 8002132:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002134:	2302      	movs	r3, #2
 8002136:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002138:	2303      	movs	r3, #3
 800213a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	4618      	mov	r0, r3
 8002142:	f001 fe8d 	bl	8003e60 <HAL_RCC_OscConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800214c:	f000 fc04 	bl	8002958 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002150:	f001 fe36 	bl	8003dc0 <HAL_PWREx_EnableOverDrive>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800215a:	f000 fbfd 	bl	8002958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215e:	230f      	movs	r3, #15
 8002160:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800216a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800216e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002170:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002174:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	2105      	movs	r1, #5
 800217c:	4618      	mov	r0, r3
 800217e:	f002 f8e7 	bl	8004350 <HAL_RCC_ClockConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002188:	f000 fbe6 	bl	8002958 <Error_Handler>
  }
}
 800218c:	bf00      	nop
 800218e:	3750      	adds	r7, #80	@ 0x50
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000

0800219c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021a0:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021a2:	4a18      	ldr	r2, [pc, #96]	@ (8002204 <MX_SPI1_Init+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021a6:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ae:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021d0:	2210      	movs	r2, #16
 80021d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021e8:	220a      	movs	r2, #10
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ec:	4804      	ldr	r0, [pc, #16]	@ (8002200 <MX_SPI1_Init+0x64>)
 80021ee:	f002 fb01 	bl	80047f4 <HAL_SPI_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021f8:	f000 fbae 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20001634 	.word	0x20001634
 8002204:	40013000 	.word	0x40013000

08002208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221c:	463b      	mov	r3, r7
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002224:	4b1d      	ldr	r3, [pc, #116]	@ (800229c <MX_TIM2_Init+0x94>)
 8002226:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800222a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <MX_TIM2_Init+0x94>)
 800222e:	2259      	movs	r2, #89	@ 0x59
 8002230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <MX_TIM2_Init+0x94>)
 8002234:	2210      	movs	r2, #16
 8002236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002238:	4b18      	ldr	r3, [pc, #96]	@ (800229c <MX_TIM2_Init+0x94>)
 800223a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800223e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002240:	4b16      	ldr	r3, [pc, #88]	@ (800229c <MX_TIM2_Init+0x94>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <MX_TIM2_Init+0x94>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800224c:	4813      	ldr	r0, [pc, #76]	@ (800229c <MX_TIM2_Init+0x94>)
 800224e:	f003 f879 	bl	8005344 <HAL_TIM_Base_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002258:	f000 fb7e 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	4619      	mov	r1, r3
 8002268:	480c      	ldr	r0, [pc, #48]	@ (800229c <MX_TIM2_Init+0x94>)
 800226a:	f003 fac3 	bl	80057f4 <HAL_TIM_ConfigClockSource>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002274:	f000 fb70 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002280:	463b      	mov	r3, r7
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	@ (800229c <MX_TIM2_Init+0x94>)
 8002286:	f003 fcdf 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002290:	f000 fb62 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000168c 	.word	0x2000168c

080022a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	463b      	mov	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <MX_TIM3_Init+0x94>)
 80022be:	4a1e      	ldr	r2, [pc, #120]	@ (8002338 <MX_TIM3_Init+0x98>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <MX_TIM3_Init+0x94>)
 80022c4:	2259      	movs	r2, #89	@ 0x59
 80022c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <MX_TIM3_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80022ce:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <MX_TIM3_Init+0x94>)
 80022d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80022d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <MX_TIM3_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <MX_TIM3_Init+0x94>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e2:	4814      	ldr	r0, [pc, #80]	@ (8002334 <MX_TIM3_Init+0x94>)
 80022e4:	f003 f82e 	bl	8005344 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80022ee:	f000 fb33 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	4619      	mov	r1, r3
 80022fe:	480d      	ldr	r0, [pc, #52]	@ (8002334 <MX_TIM3_Init+0x94>)
 8002300:	f003 fa78 	bl	80057f4 <HAL_TIM_ConfigClockSource>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800230a:	f000 fb25 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002316:	463b      	mov	r3, r7
 8002318:	4619      	mov	r1, r3
 800231a:	4806      	ldr	r0, [pc, #24]	@ (8002334 <MX_TIM3_Init+0x94>)
 800231c:	f003 fc94 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002326:	f000 fb17 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200016d4 	.word	0x200016d4
 8002338:	40000400 	.word	0x40000400

0800233c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002342:	4a12      	ldr	r2, [pc, #72]	@ (800238c <MX_USART1_UART_Init+0x50>)
 8002344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800234c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002372:	4805      	ldr	r0, [pc, #20]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002374:	f003 fcf8 	bl	8005d68 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800237e:	f000 faeb 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000171c 	.word	0x2000171c
 800238c:	40011000 	.word	0x40011000

08002390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_DMA_Init+0x3c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a0b      	ldr	r2, [pc, #44]	@ (80023cc <MX_DMA_Init+0x3c>)
 80023a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <MX_DMA_Init+0x3c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 6, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2106      	movs	r1, #6
 80023b6:	203a      	movs	r0, #58	@ 0x3a
 80023b8:	f000 fef8 	bl	80031ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023bc:	203a      	movs	r0, #58	@ 0x3a
 80023be:	f000 ff11 	bl	80031e4 <HAL_NVIC_EnableIRQ>

}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800

080023d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	@ 0x28
 80023d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b66      	ldr	r3, [pc, #408]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a65      	ldr	r2, [pc, #404]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b5f      	ldr	r3, [pc, #380]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a5e      	ldr	r2, [pc, #376]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b5c      	ldr	r3, [pc, #368]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b58      	ldr	r3, [pc, #352]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a57      	ldr	r2, [pc, #348]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b55      	ldr	r3, [pc, #340]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b51      	ldr	r3, [pc, #324]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a50      	ldr	r2, [pc, #320]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b4e      	ldr	r3, [pc, #312]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4b4a      	ldr	r3, [pc, #296]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a49      	ldr	r2, [pc, #292]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <MX_GPIO_Init+0x1b4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	2110      	movs	r1, #16
 8002476:	4844      	ldr	r0, [pc, #272]	@ (8002588 <MX_GPIO_Init+0x1b8>)
 8002478:	f001 fc88 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002482:	4842      	ldr	r0, [pc, #264]	@ (800258c <MX_GPIO_Init+0x1bc>)
 8002484:	f001 fc82 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_7|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	f246 01a0 	movw	r1, #24736	@ 0x60a0
 800248e:	4840      	ldr	r0, [pc, #256]	@ (8002590 <MX_GPIO_Init+0x1c0>)
 8002490:	f001 fc7c 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	2140      	movs	r1, #64	@ 0x40
 8002498:	483e      	ldr	r0, [pc, #248]	@ (8002594 <MX_GPIO_Init+0x1c4>)
 800249a:	f001 fc77 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80024a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	4835      	ldr	r0, [pc, #212]	@ (8002588 <MX_GPIO_Init+0x1b8>)
 80024b4:	f001 faa6 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b8:	2310      	movs	r3, #16
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	482e      	ldr	r0, [pc, #184]	@ (8002588 <MX_GPIO_Init+0x1b8>)
 80024d0:	f001 fa98 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024d4:	2310      	movs	r3, #16
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	482b      	ldr	r0, [pc, #172]	@ (8002594 <MX_GPIO_Init+0x1c4>)
 80024e8:	f001 fa8c 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4822      	ldr	r0, [pc, #136]	@ (800258c <MX_GPIO_Init+0x1bc>)
 8002502:	f001 fa7f 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002506:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	2301      	movs	r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4619      	mov	r1, r3
 800251e:	481b      	ldr	r0, [pc, #108]	@ (800258c <MX_GPIO_Init+0x1bc>)
 8002520:	f001 fa70 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002524:	2320      	movs	r3, #32
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002528:	2301      	movs	r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	4815      	ldr	r0, [pc, #84]	@ (8002590 <MX_GPIO_Init+0x1c0>)
 800253c:	f001 fa62 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LD3_Pin|LD4_Pin;
 8002540:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8002544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	480d      	ldr	r0, [pc, #52]	@ (8002590 <MX_GPIO_Init+0x1c0>)
 800255a:	f001 fa53 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800255e:	2340      	movs	r3, #64	@ 0x40
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4807      	ldr	r0, [pc, #28]	@ (8002594 <MX_GPIO_Init+0x1c4>)
 8002576:	f001 fa45 	bl	8003a04 <HAL_GPIO_Init>

}
 800257a:	bf00      	nop
 800257c:	3728      	adds	r7, #40	@ 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021800 	.word	0x40021800
 8002594:	40020800 	.word	0x40020800

08002598 <UART1_Cmd_Callback>:

/* USER CODE BEGIN 4 */


void UART1_Cmd_Callback(uint8_t* cmd, uint16_t len){
 8002598:	b580      	push	{r7, lr}
 800259a:	b09a      	sub	sp, #104	@ 0x68
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]

	/* Process your commands here */
	float aux = 0;
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]

	if(!len) return; /* Ignore empty commands */
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 819c 	beq.w	80028ea <UART1_Cmd_Callback+0x352>


	if( isCmd("fmap=") ) {
 80025b2:	2205      	movs	r2, #5
 80025b4:	4992      	ldr	r1, [pc, #584]	@ (8002800 <UART1_Cmd_Callback+0x268>)
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f005 fcfe 	bl	8007fb8 <strncmp>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 8091 	bne.w	80026e6 <UART1_Cmd_Callback+0x14e>

    cMap_1d_t* points = (cMap_1d_t*) hmod1.k_map;
 80025c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002804 <UART1_Cmd_Callback+0x26c>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	647b      	str	r3, [r7, #68]	@ 0x44

    // Skip the "cmap=" prefix
    const char* data_start = (const char*)cmd + 5;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3305      	adds	r3, #5
 80025ce:	643b      	str	r3, [r7, #64]	@ 0x40

    // Determine the number of pairs by counting commas
    uint16_t num_pairs = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    const char* ptr = data_start;
 80025d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d8:	663b      	str	r3, [r7, #96]	@ 0x60
    //while (*ptr) {
    for (int i=0;i<(len-5);i++){
 80025da:	2300      	movs	r3, #0
 80025dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025de:	e00e      	b.n	80025fe <UART1_Cmd_Callback+0x66>
      if (*ptr == ',') {
 80025e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80025e6:	d104      	bne.n	80025f2 <UART1_Cmd_Callback+0x5a>
        num_pairs++;
 80025e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80025ec:	3301      	adds	r3, #1
 80025ee:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
      }
      ptr++;
 80025f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025f4:	3301      	adds	r3, #1
 80025f6:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i=0;i<(len-5);i++){
 80025f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025fa:	3301      	adds	r3, #1
 80025fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	3b05      	subs	r3, #5
 8002602:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002604:	429a      	cmp	r2, r3
 8002606:	dbeb      	blt.n	80025e0 <UART1_Cmd_Callback+0x48>
    }

    // Each pair has two values, so number of pairs is half the commas
    num_pairs = (num_pairs + 1) / 2;
 8002608:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800260c:	3301      	adds	r3, #1
 800260e:	0fda      	lsrs	r2, r3, #31
 8002610:	4413      	add	r3, r2
 8002612:	105b      	asrs	r3, r3, #1
 8002614:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

    if (num_pairs > 255) return;
 8002618:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800261c:	2bff      	cmp	r3, #255	@ 0xff
 800261e:	f200 8166 	bhi.w	80028ee <UART1_Cmd_Callback+0x356>

    // Parse the data points using sscanf
    size_t index = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	65bb      	str	r3, [r7, #88]	@ 0x58
    ptr = data_start;
 8002626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002628:	663b      	str	r3, [r7, #96]	@ 0x60
    while (index < num_pairs && *ptr) {
 800262a:	e040      	b.n	80026ae <UART1_Cmd_Callback+0x116>
      float x, y;
      int scanned = sscanf(ptr, "%f,%f", &x, &y);
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	f107 0214 	add.w	r2, r7, #20
 8002634:	4974      	ldr	r1, [pc, #464]	@ (8002808 <UART1_Cmd_Callback+0x270>)
 8002636:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002638:	f005 fc24 	bl	8007e84 <siscanf>
 800263c:	63f8      	str	r0, [r7, #60]	@ 0x3c
      if (scanned == 2) {
 800263e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002640:	2b02      	cmp	r3, #2
 8002642:	d112      	bne.n	800266a <UART1_Cmd_Callback+0xd2>
        points[index].x = x;
 8002644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800264a:	4413      	add	r3, r2
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
        points[index].f = y;
 8002650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002656:	4413      	add	r3, r2
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	605a      	str	r2, [r3, #4]
        index++;
 800265c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800265e:	3301      	adds	r3, #1
 8002660:	65bb      	str	r3, [r7, #88]	@ 0x58
      }

      // Move pointer to the next pair
      while (*ptr && *ptr != ',') ptr++;
 8002662:	e002      	b.n	800266a <UART1_Cmd_Callback+0xd2>
 8002664:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002666:	3301      	adds	r3, #1
 8002668:	663b      	str	r3, [r7, #96]	@ 0x60
 800266a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <UART1_Cmd_Callback+0xe2>
 8002672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b2c      	cmp	r3, #44	@ 0x2c
 8002678:	d1f4      	bne.n	8002664 <UART1_Cmd_Callback+0xcc>
      if (*ptr == ',') ptr++;
 800267a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002680:	d106      	bne.n	8002690 <UART1_Cmd_Callback+0xf8>
 8002682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002684:	3301      	adds	r3, #1
 8002686:	663b      	str	r3, [r7, #96]	@ 0x60
      while (*ptr && *ptr != ',') ptr++;
 8002688:	e002      	b.n	8002690 <UART1_Cmd_Callback+0xf8>
 800268a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800268c:	3301      	adds	r3, #1
 800268e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002690:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <UART1_Cmd_Callback+0x108>
 8002698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b2c      	cmp	r3, #44	@ 0x2c
 800269e:	d1f4      	bne.n	800268a <UART1_Cmd_Callback+0xf2>
      if (*ptr == ',') ptr++;
 80026a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b2c      	cmp	r3, #44	@ 0x2c
 80026a6:	d102      	bne.n	80026ae <UART1_Cmd_Callback+0x116>
 80026a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026aa:	3301      	adds	r3, #1
 80026ac:	663b      	str	r3, [r7, #96]	@ 0x60
    while (index < num_pairs && *ptr) {
 80026ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80026b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d203      	bcs.n	80026c0 <UART1_Cmd_Callback+0x128>
 80026b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1b5      	bne.n	800262c <UART1_Cmd_Callback+0x94>
    }

    hmod1.k_mapSize = num_pairs;
 80026c0:	4a50      	ldr	r2, [pc, #320]	@ (8002804 <UART1_Cmd_Callback+0x26c>)
 80026c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80026c6:	8113      	strh	r3, [r2, #8]

    hmod1.posMinLim = points[0].x;
 80026c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002804 <UART1_Cmd_Callback+0x26c>)
 80026ce:	6313      	str	r3, [r2, #48]	@ 0x30
    hmod1.posMaxLim = points[num_pairs-1].x;
 80026d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80026d4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80026d8:	3b01      	subs	r3, #1
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026de:	4413      	add	r3, r2
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <UART1_Cmd_Callback+0x26c>)
 80026e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  }if( isCmd("cmap=") ) {
 80026e6:	2205      	movs	r2, #5
 80026e8:	4948      	ldr	r1, [pc, #288]	@ (800280c <UART1_Cmd_Callback+0x274>)
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f005 fc64 	bl	8007fb8 <strncmp>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 808c 	bne.w	8002810 <UART1_Cmd_Callback+0x278>

    cMap_1d_t* points = (cMap_1d_t*) hmod1.c_map;
 80026f8:	4b42      	ldr	r3, [pc, #264]	@ (8002804 <UART1_Cmd_Callback+0x26c>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24

    // Skip the "cmap=" prefix
    const char* data_start = (const char*)cmd + 5;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3305      	adds	r3, #5
 8002702:	623b      	str	r3, [r7, #32]

    // Determine the number of pairs by counting commas
    uint16_t num_pairs = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    const char* ptr = data_start;
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	653b      	str	r3, [r7, #80]	@ 0x50
    //while (*ptr) {
    for (int i=0;i<(len-5);i++){
 800270e:	2300      	movs	r3, #0
 8002710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002712:	e00e      	b.n	8002732 <UART1_Cmd_Callback+0x19a>
      if (*ptr == ',') {
 8002714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b2c      	cmp	r3, #44	@ 0x2c
 800271a:	d104      	bne.n	8002726 <UART1_Cmd_Callback+0x18e>
        num_pairs++;
 800271c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002720:	3301      	adds	r3, #1
 8002722:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
      }
      ptr++;
 8002726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002728:	3301      	adds	r3, #1
 800272a:	653b      	str	r3, [r7, #80]	@ 0x50
    for (int i=0;i<(len-5);i++){
 800272c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800272e:	3301      	adds	r3, #1
 8002730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	3b05      	subs	r3, #5
 8002736:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002738:	429a      	cmp	r2, r3
 800273a:	dbeb      	blt.n	8002714 <UART1_Cmd_Callback+0x17c>
    }

    // Each pair has two values, so number of pairs is half the commas
    num_pairs = (num_pairs + 1) / 2;
 800273c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002740:	3301      	adds	r3, #1
 8002742:	0fda      	lsrs	r2, r3, #31
 8002744:	4413      	add	r3, r2
 8002746:	105b      	asrs	r3, r3, #1
 8002748:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    if (num_pairs > 255) return;
 800274c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002750:	2bff      	cmp	r3, #255	@ 0xff
 8002752:	f200 80ce 	bhi.w	80028f2 <UART1_Cmd_Callback+0x35a>

    // Parse the data points using sscanf
    size_t index = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	64bb      	str	r3, [r7, #72]	@ 0x48
    ptr = data_start;
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	653b      	str	r3, [r7, #80]	@ 0x50
    while (index < num_pairs && *ptr) {
 800275e:	e040      	b.n	80027e2 <UART1_Cmd_Callback+0x24a>
      float x, y;
      int scanned = sscanf(ptr, "%f,%f", &x, &y);
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	f107 020c 	add.w	r2, r7, #12
 8002768:	4927      	ldr	r1, [pc, #156]	@ (8002808 <UART1_Cmd_Callback+0x270>)
 800276a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800276c:	f005 fb8a 	bl	8007e84 <siscanf>
 8002770:	61f8      	str	r0, [r7, #28]
      if (scanned == 2) {
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d112      	bne.n	800279e <UART1_Cmd_Callback+0x206>
        points[index].x = x;
 8002778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277e:	4413      	add	r3, r2
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	601a      	str	r2, [r3, #0]
        points[index].f = y;
 8002784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278a:	4413      	add	r3, r2
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	605a      	str	r2, [r3, #4]
        index++;
 8002790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002792:	3301      	adds	r3, #1
 8002794:	64bb      	str	r3, [r7, #72]	@ 0x48
      }

      // Move pointer to the next pair
      while (*ptr && *ptr != ',') ptr++;
 8002796:	e002      	b.n	800279e <UART1_Cmd_Callback+0x206>
 8002798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800279a:	3301      	adds	r3, #1
 800279c:	653b      	str	r3, [r7, #80]	@ 0x50
 800279e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <UART1_Cmd_Callback+0x216>
 80027a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b2c      	cmp	r3, #44	@ 0x2c
 80027ac:	d1f4      	bne.n	8002798 <UART1_Cmd_Callback+0x200>
      if (*ptr == ',') ptr++;
 80027ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80027b4:	d106      	bne.n	80027c4 <UART1_Cmd_Callback+0x22c>
 80027b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b8:	3301      	adds	r3, #1
 80027ba:	653b      	str	r3, [r7, #80]	@ 0x50
      while (*ptr && *ptr != ',') ptr++;
 80027bc:	e002      	b.n	80027c4 <UART1_Cmd_Callback+0x22c>
 80027be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c0:	3301      	adds	r3, #1
 80027c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80027c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <UART1_Cmd_Callback+0x23c>
 80027cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80027d2:	d1f4      	bne.n	80027be <UART1_Cmd_Callback+0x226>
      if (*ptr == ',') ptr++;
 80027d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80027da:	d102      	bne.n	80027e2 <UART1_Cmd_Callback+0x24a>
 80027dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027de:	3301      	adds	r3, #1
 80027e0:	653b      	str	r3, [r7, #80]	@ 0x50
    while (index < num_pairs && *ptr) {
 80027e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80027e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d203      	bcs.n	80027f4 <UART1_Cmd_Callback+0x25c>
 80027ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1b5      	bne.n	8002760 <UART1_Cmd_Callback+0x1c8>
    }

    hmod1.c_mapSize = num_pairs;
 80027f4:	4a03      	ldr	r2, [pc, #12]	@ (8002804 <UART1_Cmd_Callback+0x26c>)
 80027f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80027fa:	8293      	strh	r3, [r2, #20]
 80027fc:	e07a      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
 80027fe:	bf00      	nop
 8002800:	0800bf90 	.word	0x0800bf90
 8002804:	200017e4 	.word	0x200017e4
 8002808:	0800bf98 	.word	0x0800bf98
 800280c:	0800bfa0 	.word	0x0800bfa0

	}else if( isCmd("mass=") ) {
 8002810:	2205      	movs	r2, #5
 8002812:	493a      	ldr	r1, [pc, #232]	@ (80028fc <UART1_Cmd_Callback+0x364>)
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f005 fbcf 	bl	8007fb8 <strncmp>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10e      	bne.n	800283e <UART1_Cmd_Callback+0x2a6>

		int res = sscanf((const char*)cmd,"mass=%f", &aux);
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	461a      	mov	r2, r3
 8002826:	4936      	ldr	r1, [pc, #216]	@ (8002900 <UART1_Cmd_Callback+0x368>)
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f005 fb2b 	bl	8007e84 <siscanf>
 800282e:	62b8      	str	r0, [r7, #40]	@ 0x28
		if(res) {
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d05e      	beq.n	80028f4 <UART1_Cmd_Callback+0x35c>
			hmod1.m = aux;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4a32      	ldr	r2, [pc, #200]	@ (8002904 <UART1_Cmd_Callback+0x36c>)
 800283a:	6053      	str	r3, [r2, #4]
 800283c:	e05a      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
		}

	}else if( isCmd("damp=") ) {
 800283e:	2205      	movs	r2, #5
 8002840:	4931      	ldr	r1, [pc, #196]	@ (8002908 <UART1_Cmd_Callback+0x370>)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f005 fbb8 	bl	8007fb8 <strncmp>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <UART1_Cmd_Callback+0x2c8>
		int res = sscanf((const char*)cmd,"damp=%f", &aux);
 800284e:	f107 0318 	add.w	r3, r7, #24
 8002852:	461a      	mov	r2, r3
 8002854:	492d      	ldr	r1, [pc, #180]	@ (800290c <UART1_Cmd_Callback+0x374>)
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f005 fb14 	bl	8007e84 <siscanf>
 800285c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800285e:	e049      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
		if(res) {
			//hmod1.c = aux;
		}

	}else if( isCmd("frcn=") ) {
 8002860:	2205      	movs	r2, #5
 8002862:	492b      	ldr	r1, [pc, #172]	@ (8002910 <UART1_Cmd_Callback+0x378>)
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 fba7 	bl	8007fb8 <strncmp>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10e      	bne.n	800288e <UART1_Cmd_Callback+0x2f6>
		int res = sscanf((const char*)cmd,"frcn=%f", &aux);
 8002870:	f107 0318 	add.w	r3, r7, #24
 8002874:	461a      	mov	r2, r3
 8002876:	4927      	ldr	r1, [pc, #156]	@ (8002914 <UART1_Cmd_Callback+0x37c>)
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f005 fb03 	bl	8007e84 <siscanf>
 800287e:	6338      	str	r0, [r7, #48]	@ 0x30
		if(res) {
 8002880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002882:	2b00      	cmp	r3, #0
 8002884:	d036      	beq.n	80028f4 <UART1_Cmd_Callback+0x35c>
			hmod1.N = aux;
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4a1e      	ldr	r2, [pc, #120]	@ (8002904 <UART1_Cmd_Callback+0x36c>)
 800288a:	6253      	str	r3, [r2, #36]	@ 0x24
 800288c:	e032      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
		}

	}else if( isCmd("vmax=") ) {
 800288e:	2205      	movs	r2, #5
 8002890:	4921      	ldr	r1, [pc, #132]	@ (8002918 <UART1_Cmd_Callback+0x380>)
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f005 fb90 	bl	8007fb8 <strncmp>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10e      	bne.n	80028bc <UART1_Cmd_Callback+0x324>
		int res = sscanf((const char*)cmd,"vmax=%f", &aux);
 800289e:	f107 0318 	add.w	r3, r7, #24
 80028a2:	461a      	mov	r2, r3
 80028a4:	491d      	ldr	r1, [pc, #116]	@ (800291c <UART1_Cmd_Callback+0x384>)
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f005 faec 	bl	8007e84 <siscanf>
 80028ac:	6378      	str	r0, [r7, #52]	@ 0x34
		if(res) {
 80028ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01f      	beq.n	80028f4 <UART1_Cmd_Callback+0x35c>
			hmod1.velMaxLim = aux;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4a13      	ldr	r2, [pc, #76]	@ (8002904 <UART1_Cmd_Callback+0x36c>)
 80028b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80028ba:	e01b      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
		}

	}else if( isCmd("vmin=") ) {
 80028bc:	2205      	movs	r2, #5
 80028be:	4918      	ldr	r1, [pc, #96]	@ (8002920 <UART1_Cmd_Callback+0x388>)
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f005 fb79 	bl	8007fb8 <strncmp>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d113      	bne.n	80028f4 <UART1_Cmd_Callback+0x35c>
		int res = sscanf((const char*)cmd,"vmin=%f", &aux);
 80028cc:	f107 0318 	add.w	r3, r7, #24
 80028d0:	461a      	mov	r2, r3
 80028d2:	4914      	ldr	r1, [pc, #80]	@ (8002924 <UART1_Cmd_Callback+0x38c>)
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f005 fad5 	bl	8007e84 <siscanf>
 80028da:	63b8      	str	r0, [r7, #56]	@ 0x38
		if(res) {
 80028dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <UART1_Cmd_Callback+0x35c>
			hmod1.velMinLim = aux;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4a07      	ldr	r2, [pc, #28]	@ (8002904 <UART1_Cmd_Callback+0x36c>)
 80028e6:	6393      	str	r3, [r2, #56]	@ 0x38
 80028e8:	e004      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
	if(!len) return; /* Ignore empty commands */
 80028ea:	bf00      	nop
 80028ec:	e002      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
    if (num_pairs > 255) return;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <UART1_Cmd_Callback+0x35c>
    if (num_pairs > 255) return;
 80028f2:	bf00      	nop
		}
	}


	/*----------------------------*/
}
 80028f4:	3768      	adds	r7, #104	@ 0x68
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	0800bfa8 	.word	0x0800bfa8
 8002900:	0800bfb0 	.word	0x0800bfb0
 8002904:	200017e4 	.word	0x200017e4
 8002908:	0800bfb8 	.word	0x0800bfb8
 800290c:	0800bfc0 	.word	0x0800bfc0
 8002910:	0800bfc8 	.word	0x0800bfc8
 8002914:	0800bfd0 	.word	0x0800bfd0
 8002918:	0800bfd8 	.word	0x0800bfd8
 800291c:	0800bfe0 	.word	0x0800bfe0
 8002920:	0800bfe8 	.word	0x0800bfe8
 8002924:	0800bff0 	.word	0x0800bff0

08002928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002938:	d101      	bne.n	800293e <HAL_TIM_PeriodElapsedCallback+0x16>
		StepCon_pulseTick();
 800293a:	f7ff f865 	bl	8001a08 <StepCon_pulseTick>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8002948:	f000 fb34 	bl	8002fb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40001000 	.word	0x40001000

08002958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <Error_Handler+0x8>

08002964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a0f      	ldr	r2, [pc, #60]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_MspInit+0x4c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	@ 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <HAL_SPI_MspInit+0x84>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d12c      	bne.n	8002a30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_SPI_MspInit+0x88>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a17      	ldr	r2, [pc, #92]	@ (8002a3c <HAL_SPI_MspInit+0x88>)
 80029e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <HAL_SPI_MspInit+0x88>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <HAL_SPI_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	4a10      	ldr	r2, [pc, #64]	@ (8002a3c <HAL_SPI_MspInit+0x88>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <HAL_SPI_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8002a0e:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a20:	2305      	movs	r3, #5
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <HAL_SPI_MspInit+0x8c>)
 8002a2c:	f000 ffea 	bl	8003a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3728      	adds	r7, #40	@ 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40013000 	.word	0x40013000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a54:	d116      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x70>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x70>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x70>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	201c      	movs	r0, #28
 8002a78:	f000 fb98 	bl	80031ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a7c:	201c      	movs	r0, #28
 8002a7e:	f000 fbb1 	bl	80031e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a82:	e012      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x74>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10d      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x70>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x70>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9e:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x70>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a35      	ldr	r2, [pc, #212]	@ (8002bb0 <HAL_UART_MspInit+0xf4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d163      	bne.n	8002ba6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <HAL_UART_MspInit+0xf8>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	4a33      	ldr	r2, [pc, #204]	@ (8002bb4 <HAL_UART_MspInit+0xf8>)
 8002ae8:	f043 0310 	orr.w	r3, r3, #16
 8002aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aee:	4b31      	ldr	r3, [pc, #196]	@ (8002bb4 <HAL_UART_MspInit+0xf8>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb4 <HAL_UART_MspInit+0xf8>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb4 <HAL_UART_MspInit+0xf8>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <HAL_UART_MspInit+0xf8>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4619      	mov	r1, r3
 8002b32:	4821      	ldr	r0, [pc, #132]	@ (8002bb8 <HAL_UART_MspInit+0xfc>)
 8002b34:	f000 ff66 	bl	8003a04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b38:	4b20      	ldr	r3, [pc, #128]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b3a:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <HAL_UART_MspInit+0x104>)
 8002b3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b5a:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b60:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b7a:	4810      	ldr	r0, [pc, #64]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b7c:	f000 fb40 	bl	8003200 <HAL_DMA_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b86:	f7ff fee7 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <HAL_UART_MspInit+0x100>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2106      	movs	r1, #6
 8002b9a:	2025      	movs	r0, #37	@ 0x25
 8002b9c:	f000 fb06 	bl	80031ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ba0:	2025      	movs	r0, #37	@ 0x25
 8002ba2:	f000 fb1f 	bl	80031e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ba6:	bf00      	nop
 8002ba8:	3728      	adds	r7, #40	@ 0x28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40011000 	.word	0x40011000
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	20001760 	.word	0x20001760
 8002bc0:	40026440 	.word	0x40026440

08002bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	@ 0x38
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	4b33      	ldr	r3, [pc, #204]	@ (8002ca8 <HAL_InitTick+0xe4>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	4a32      	ldr	r2, [pc, #200]	@ (8002ca8 <HAL_InitTick+0xe4>)
 8002bde:	f043 0310 	orr.w	r3, r3, #16
 8002be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be4:	4b30      	ldr	r3, [pc, #192]	@ (8002ca8 <HAL_InitTick+0xe4>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bf0:	f107 0210 	add.w	r2, r7, #16
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fdc8 	bl	8004790 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f001 fd99 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8002c0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002c10:	e004      	b.n	8002c1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c12:	f001 fd95 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8002c16:	4603      	mov	r3, r0
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1e:	4a23      	ldr	r2, [pc, #140]	@ (8002cac <HAL_InitTick+0xe8>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	0c9b      	lsrs	r3, r3, #18
 8002c26:	3b01      	subs	r3, #1
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c2c:	4a21      	ldr	r2, [pc, #132]	@ (8002cb4 <HAL_InitTick+0xf0>)
 8002c2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c38:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c44:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4a:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c50:	4817      	ldr	r0, [pc, #92]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c52:	f002 fb77 	bl	8005344 <HAL_TIM_Base_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11b      	bne.n	8002c9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c64:	4812      	ldr	r0, [pc, #72]	@ (8002cb0 <HAL_InitTick+0xec>)
 8002c66:	f002 fc4d 	bl	8005504 <HAL_TIM_Base_Start_IT>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d111      	bne.n	8002c9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c78:	2036      	movs	r0, #54	@ 0x36
 8002c7a:	f000 fab3 	bl	80031e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d808      	bhi.n	8002c96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	2036      	movs	r0, #54	@ 0x36
 8002c8a:	f000 fa8f 	bl	80031ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <HAL_InitTick+0xf4>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e002      	b.n	8002c9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3738      	adds	r7, #56	@ 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	431bde83 	.word	0x431bde83
 8002cb0:	2000185c 	.word	0x2000185c
 8002cb4:	40001000 	.word	0x40001000
 8002cb8:	20001008 	.word	0x20001008

08002cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <NMI_Handler+0x4>

08002cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <HardFault_Handler+0x4>

08002ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <MemManage_Handler+0x4>

08002cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <BusFault_Handler+0x4>

08002cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <UsageFault_Handler+0x4>

08002ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d20:	4802      	ldr	r0, [pc, #8]	@ (8002d2c <TIM2_IRQHandler+0x10>)
 8002d22:	f002 fc5f 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000168c 	.word	0x2000168c

08002d30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d34:	4802      	ldr	r0, [pc, #8]	@ (8002d40 <USART1_IRQHandler+0x10>)
 8002d36:	f003 f8d9 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000171c 	.word	0x2000171c

08002d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d48:	4802      	ldr	r0, [pc, #8]	@ (8002d54 <TIM6_DAC_IRQHandler+0x10>)
 8002d4a:	f002 fc4b 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	2000185c 	.word	0x2000185c

08002d58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d5c:	4802      	ldr	r0, [pc, #8]	@ (8002d68 <DMA2_Stream2_IRQHandler+0x10>)
 8002d5e:	f000 fbe7 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20001760 	.word	0x20001760

08002d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return 1;
 8002d70:	2301      	movs	r3, #1
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_kill>:

int _kill(int pid, int sig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d86:	f005 f973 	bl	8008070 <__errno>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2216      	movs	r2, #22
 8002d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_exit>:

void _exit (int status)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffe7 	bl	8002d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dae:	bf00      	nop
 8002db0:	e7fd      	b.n	8002dae <_exit+0x12>

08002db2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e00a      	b.n	8002dda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	4601      	mov	r1, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	60ba      	str	r2, [r7, #8]
 8002dd0:	b2ca      	uxtb	r2, r1
 8002dd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	dbf0      	blt.n	8002dc4 <_read+0x12>
  }

  return len;
 8002de2:	687b      	ldr	r3, [r7, #4]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e009      	b.n	8002e12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	60ba      	str	r2, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dbf1      	blt.n	8002dfe <_write+0x12>
  }
  return len;
 8002e1a:	687b      	ldr	r3, [r7, #4]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_close>:

int _close(int file)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e4c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_isatty>:

int _isatty(int file)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e94:	4a14      	ldr	r2, [pc, #80]	@ (8002ee8 <_sbrk+0x5c>)
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <_sbrk+0x60>)
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea0:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <_sbrk+0x64>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <_sbrk+0x64>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <_sbrk+0x68>)
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <_sbrk+0x64>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d207      	bcs.n	8002ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ebc:	f005 f8d8 	bl	8008070 <__errno>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	e009      	b.n	8002ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <_sbrk+0x64>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <_sbrk+0x64>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <_sbrk+0x64>)
 8002edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20030000 	.word	0x20030000
 8002eec:	00000400 	.word	0x00000400
 8002ef0:	200018a4 	.word	0x200018a4
 8002ef4:	200019f8 	.word	0x200019f8

08002ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <SystemInit+0x20>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f02:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <SystemInit+0x20>)
 8002f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f20:	480d      	ldr	r0, [pc, #52]	@ (8002f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f22:	490e      	ldr	r1, [pc, #56]	@ (8002f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f24:	4a0e      	ldr	r2, [pc, #56]	@ (8002f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0b      	ldr	r2, [pc, #44]	@ (8002f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f38:	4c0b      	ldr	r4, [pc, #44]	@ (8002f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f46:	f7ff ffd7 	bl	8002ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f005 f897 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f4e:	f7fe ff27 	bl	8001da0 <main>
  bx  lr    
 8002f52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f5c:	200011d8 	.word	0x200011d8
  ldr r2, =_sidata
 8002f60:	0800c474 	.word	0x0800c474
  ldr r2, =_sbss
 8002f64:	200011d8 	.word	0x200011d8
  ldr r4, =_ebss
 8002f68:	200019f8 	.word	0x200019f8

08002f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC_IRQHandler>
	...

08002f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f74:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <HAL_Init+0x40>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <HAL_Init+0x40>)
 8002f7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_Init+0x40>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <HAL_Init+0x40>)
 8002f86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f8c:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a07      	ldr	r2, [pc, #28]	@ (8002fb0 <HAL_Init+0x40>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f98:	2003      	movs	r0, #3
 8002f9a:	f000 f8fc 	bl	8003196 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9e:	200f      	movs	r0, #15
 8002fa0:	f7ff fe10 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa4:	f7ff fcde 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00

08002fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_IncTick+0x20>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_IncTick+0x24>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <HAL_IncTick+0x24>)
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000100c 	.word	0x2000100c
 8002fd8:	200018a8 	.word	0x200018a8

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <HAL_GetTick+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	200018a8 	.word	0x200018a8

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff ffee 	bl	8002fdc <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d005      	beq.n	800301a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_Delay+0x44>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800301a:	bf00      	nop
 800301c:	f7ff ffde 	bl	8002fdc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	429a      	cmp	r2, r3
 800302a:	d8f7      	bhi.n	800301c <HAL_Delay+0x28>
  {
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000100c 	.word	0x2000100c

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	@ (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	@ (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	@ (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff4c 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031be:	f7ff ff61 	bl	8003084 <__NVIC_GetPriorityGrouping>
 80031c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	6978      	ldr	r0, [r7, #20]
 80031ca:	f7ff ffb1 	bl	8003130 <NVIC_EncodePriority>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff80 	bl	80030dc <__NVIC_SetPriority>
}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff54 	bl	80030a0 <__NVIC_EnableIRQ>
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff fee6 	bl	8002fdc <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e099      	b.n	8003350 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323c:	e00f      	b.n	800325e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323e:	f7ff fecd 	bl	8002fdc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b05      	cmp	r3, #5
 800324a:	d908      	bls.n	800325e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2203      	movs	r2, #3
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e078      	b.n	8003350 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e8      	bne.n	800323e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4b38      	ldr	r3, [pc, #224]	@ (8003358 <HAL_DMA_Init+0x158>)
 8003278:	4013      	ands	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	4313      	orrs	r3, r2
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0307 	bic.w	r3, r3, #7
 80032de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d117      	bne.n	8003322 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb01 	bl	800390c <DMA_CheckFifoParam>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2240      	movs	r2, #64	@ 0x40
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800331e:	2301      	movs	r3, #1
 8003320:	e016      	b.n	8003350 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fab8 	bl	80038a0 <DMA_CalcBaseAndBitshift>
 8003330:	4603      	mov	r3, r0
 8003332:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	223f      	movs	r2, #63	@ 0x3f
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	f010803f 	.word	0xf010803f

0800335c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_DMA_Start_IT+0x26>
 800337e:	2302      	movs	r3, #2
 8003380:	e040      	b.n	8003404 <HAL_DMA_Start_IT+0xa8>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d12f      	bne.n	80033f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fa4a 	bl	8003844 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	223f      	movs	r2, #63	@ 0x3f
 80033b6:	409a      	lsls	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0216 	orr.w	r2, r2, #22
 80033ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0208 	orr.w	r2, r2, #8
 80033e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e005      	b.n	8003402 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
 8003400:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800341a:	f7ff fddf 	bl	8002fdc <HAL_GetTick>
 800341e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d008      	beq.n	800343e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	@ 0x80
 8003430:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e052      	b.n	80034e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0216 	bic.w	r2, r2, #22
 800344c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800345c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_DMA_Abort+0x62>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348e:	e013      	b.n	80034b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003490:	f7ff fda4 	bl	8002fdc <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b05      	cmp	r3, #5
 800349c:	d90c      	bls.n	80034b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2203      	movs	r2, #3
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e015      	b.n	80034e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e4      	bne.n	8003490 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	223f      	movs	r2, #63	@ 0x3f
 80034cc:	409a      	lsls	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2280      	movs	r2, #128	@ 0x80
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00c      	b.n	8003524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2205      	movs	r2, #5
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800353c:	4b8e      	ldr	r3, [pc, #568]	@ (8003778 <HAL_DMA_IRQHandler+0x248>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a8e      	ldr	r2, [pc, #568]	@ (800377c <HAL_DMA_IRQHandler+0x24c>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355a:	2208      	movs	r2, #8
 800355c:	409a      	lsls	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01a      	beq.n	800359c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	2208      	movs	r2, #8
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d012      	beq.n	80035d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035be:	2201      	movs	r2, #1
 80035c0:	409a      	lsls	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	f043 0202 	orr.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d6:	2204      	movs	r2, #4
 80035d8:	409a      	lsls	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d012      	beq.n	8003608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	2204      	movs	r2, #4
 80035f6:	409a      	lsls	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	2210      	movs	r2, #16
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d043      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03c      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362a:	2210      	movs	r2, #16
 800362c:	409a      	lsls	r2, r3
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d018      	beq.n	8003672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d024      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
 800365e:	e01f      	b.n	80036a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01b      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e016      	b.n	80036a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0208 	bic.w	r2, r2, #8
 800368e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	2220      	movs	r2, #32
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 808f 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8087 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	2220      	movs	r2, #32
 80036c8:	409a      	lsls	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d136      	bne.n	8003748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0216 	bic.w	r2, r2, #22
 80036e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <HAL_DMA_IRQHandler+0x1da>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0208 	bic.w	r2, r2, #8
 8003718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	223f      	movs	r2, #63	@ 0x3f
 8003720:	409a      	lsls	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373a:	2b00      	cmp	r3, #0
 800373c:	d07e      	beq.n	800383c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
        }
        return;
 8003746:	e079      	b.n	800383c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10d      	bne.n	8003780 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003768:	2b00      	cmp	r3, #0
 800376a:	d031      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
 8003774:	e02c      	b.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
 8003776:	bf00      	nop
 8003778:	20001004 	.word	0x20001004
 800377c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d023      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
 8003790:	e01e      	b.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0210 	bic.w	r2, r2, #16
 80037ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d032      	beq.n	800383e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d022      	beq.n	800382a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2205      	movs	r2, #5
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3301      	adds	r3, #1
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	d307      	bcc.n	8003818 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f2      	bne.n	80037fc <HAL_DMA_IRQHandler+0x2cc>
 8003816:	e000      	b.n	800381a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003818:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
 800383a:	e000      	b.n	800383e <HAL_DMA_IRQHandler+0x30e>
        return;
 800383c:	bf00      	nop
    }
  }
}
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003860:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d108      	bne.n	8003884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003882:	e007      	b.n	8003894 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	3b10      	subs	r3, #16
 80038b0:	4a14      	ldr	r2, [pc, #80]	@ (8003904 <DMA_CalcBaseAndBitshift+0x64>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ba:	4a13      	ldr	r2, [pc, #76]	@ (8003908 <DMA_CalcBaseAndBitshift+0x68>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d909      	bls.n	80038e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	1d1a      	adds	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	659a      	str	r2, [r3, #88]	@ 0x58
 80038e0:	e007      	b.n	80038f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	aaaaaaab 	.word	0xaaaaaaab
 8003908:	0800c01c 	.word	0x0800c01c

0800390c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11f      	bne.n	8003966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d856      	bhi.n	80039da <DMA_CheckFifoParam+0xce>
 800392c:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <DMA_CheckFifoParam+0x28>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003945 	.word	0x08003945
 8003938:	08003957 	.word	0x08003957
 800393c:	08003945 	.word	0x08003945
 8003940:	080039db 	.word	0x080039db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d046      	beq.n	80039de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003954:	e043      	b.n	80039de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800395e:	d140      	bne.n	80039e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003964:	e03d      	b.n	80039e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396e:	d121      	bne.n	80039b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d837      	bhi.n	80039e6 <DMA_CheckFifoParam+0xda>
 8003976:	a201      	add	r2, pc, #4	@ (adr r2, 800397c <DMA_CheckFifoParam+0x70>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003993 	.word	0x08003993
 8003984:	0800398d 	.word	0x0800398d
 8003988:	080039a5 	.word	0x080039a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e030      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d025      	beq.n	80039ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e022      	b.n	80039ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039ac:	d11f      	bne.n	80039ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039b2:	e01c      	b.n	80039ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d903      	bls.n	80039c2 <DMA_CheckFifoParam+0xb6>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d003      	beq.n	80039c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039c0:	e018      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      break;
 80039c6:	e015      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e00b      	b.n	80039f2 <DMA_CheckFifoParam+0xe6>
      break;
 80039da:	bf00      	nop
 80039dc:	e00a      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
 80039e0:	e008      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039e2:	bf00      	nop
 80039e4:	e006      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
    }
  } 
  
  return status; 
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	@ 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e177      	b.n	8003d10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 8166 	bne.w	8003d0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d005      	beq.n	8003a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d130      	bne.n	8003ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d017      	beq.n	8003af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d123      	bne.n	8003b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80c0 	beq.w	8003d0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b66      	ldr	r3, [pc, #408]	@ (8003d28 <HAL_GPIO_Init+0x324>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	4a65      	ldr	r2, [pc, #404]	@ (8003d28 <HAL_GPIO_Init+0x324>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b9a:	4b63      	ldr	r3, [pc, #396]	@ (8003d28 <HAL_GPIO_Init+0x324>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba6:	4a61      	ldr	r2, [pc, #388]	@ (8003d2c <HAL_GPIO_Init+0x328>)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a58      	ldr	r2, [pc, #352]	@ (8003d30 <HAL_GPIO_Init+0x32c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d037      	beq.n	8003c42 <HAL_GPIO_Init+0x23e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a57      	ldr	r2, [pc, #348]	@ (8003d34 <HAL_GPIO_Init+0x330>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d031      	beq.n	8003c3e <HAL_GPIO_Init+0x23a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a56      	ldr	r2, [pc, #344]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02b      	beq.n	8003c3a <HAL_GPIO_Init+0x236>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a55      	ldr	r2, [pc, #340]	@ (8003d3c <HAL_GPIO_Init+0x338>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d025      	beq.n	8003c36 <HAL_GPIO_Init+0x232>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a54      	ldr	r2, [pc, #336]	@ (8003d40 <HAL_GPIO_Init+0x33c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01f      	beq.n	8003c32 <HAL_GPIO_Init+0x22e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a53      	ldr	r2, [pc, #332]	@ (8003d44 <HAL_GPIO_Init+0x340>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d019      	beq.n	8003c2e <HAL_GPIO_Init+0x22a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a52      	ldr	r2, [pc, #328]	@ (8003d48 <HAL_GPIO_Init+0x344>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_GPIO_Init+0x226>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a51      	ldr	r2, [pc, #324]	@ (8003d4c <HAL_GPIO_Init+0x348>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00d      	beq.n	8003c26 <HAL_GPIO_Init+0x222>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a50      	ldr	r2, [pc, #320]	@ (8003d50 <HAL_GPIO_Init+0x34c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <HAL_GPIO_Init+0x21e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4f      	ldr	r2, [pc, #316]	@ (8003d54 <HAL_GPIO_Init+0x350>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <HAL_GPIO_Init+0x21a>
 8003c1a:	2309      	movs	r3, #9
 8003c1c:	e012      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c1e:	230a      	movs	r3, #10
 8003c20:	e010      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c22:	2308      	movs	r3, #8
 8003c24:	e00e      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c26:	2307      	movs	r3, #7
 8003c28:	e00c      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c2a:	2306      	movs	r3, #6
 8003c2c:	e00a      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c2e:	2305      	movs	r3, #5
 8003c30:	e008      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c32:	2304      	movs	r3, #4
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c36:	2303      	movs	r3, #3
 8003c38:	e004      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e002      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_GPIO_Init+0x240>
 8003c42:	2300      	movs	r3, #0
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	f002 0203 	and.w	r2, r2, #3
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	4093      	lsls	r3, r2
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c54:	4935      	ldr	r1, [pc, #212]	@ (8003d2c <HAL_GPIO_Init+0x328>)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c62:	4b3d      	ldr	r3, [pc, #244]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c86:	4a34      	ldr	r2, [pc, #208]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c8c:	4b32      	ldr	r3, [pc, #200]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb0:	4a29      	ldr	r2, [pc, #164]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cb6:	4b28      	ldr	r3, [pc, #160]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cda:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d04:	4a14      	ldr	r2, [pc, #80]	@ (8003d58 <HAL_GPIO_Init+0x354>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	f67f ae84 	bls.w	8003a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	3724      	adds	r7, #36	@ 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40021400 	.word	0x40021400
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40021c00 	.word	0x40021c00
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40022400 	.word	0x40022400
 8003d58:	40013c00 	.word	0x40013c00

08003d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	887b      	ldrh	r3, [r7, #2]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e001      	b.n	8003d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003da8:	e003      	b.n	8003db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	619a      	str	r2, [r3, #24]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003de6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <HAL_PWREx_EnableOverDrive+0x94>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dec:	f7ff f8f6 	bl	8002fdc <HAL_GetTick>
 8003df0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003df2:	e009      	b.n	8003e08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003df4:	f7ff f8f2 	bl	8002fdc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e02:	d901      	bls.n	8003e08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e01f      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e08:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e14:	d1ee      	bne.n	8003df4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e16:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1c:	f7ff f8de 	bl	8002fdc <HAL_GetTick>
 8003e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e22:	e009      	b.n	8003e38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e24:	f7ff f8da 	bl	8002fdc <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e32:	d901      	bls.n	8003e38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e007      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e38:	4b07      	ldr	r3, [pc, #28]	@ (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e44:	d1ee      	bne.n	8003e24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	420e0040 	.word	0x420e0040
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	420e0044 	.word	0x420e0044

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e267      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d075      	beq.n	8003f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e7e:	4b88      	ldr	r3, [pc, #544]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d00c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8a:	4b85      	ldr	r3, [pc, #532]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d112      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e96:	4b82      	ldr	r3, [pc, #520]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea2:	d10b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05b      	beq.n	8003f68 <HAL_RCC_OscConfig+0x108>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d157      	bne.n	8003f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e242      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x74>
 8003ec6:	4b76      	ldr	r3, [pc, #472]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a75      	ldr	r2, [pc, #468]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b70      	ldr	r3, [pc, #448]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6f      	ldr	r2, [pc, #444]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b6d      	ldr	r3, [pc, #436]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6c      	ldr	r2, [pc, #432]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	4b69      	ldr	r3, [pc, #420]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a68      	ldr	r2, [pc, #416]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b66      	ldr	r3, [pc, #408]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a65      	ldr	r2, [pc, #404]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7ff f860 	bl	8002fdc <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f20:	f7ff f85c 	bl	8002fdc <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	@ 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e207      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b5b      	ldr	r3, [pc, #364]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xc0>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7ff f84c 	bl	8002fdc <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7ff f848 	bl	8002fdc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	@ 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1f3      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	4b51      	ldr	r3, [pc, #324]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0xe8>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d063      	beq.n	800403e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f76:	4b4a      	ldr	r3, [pc, #296]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f82:	4b47      	ldr	r3, [pc, #284]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d11c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8e:	4b44      	ldr	r3, [pc, #272]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d116      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9a:	4b41      	ldr	r3, [pc, #260]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x152>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e1c7      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4937      	ldr	r1, [pc, #220]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	e03a      	b.n	800403e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd0:	4b34      	ldr	r3, [pc, #208]	@ (80040a4 <HAL_RCC_OscConfig+0x244>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7ff f801 	bl	8002fdc <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fde:	f7fe fffd 	bl	8002fdc <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1a8      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffc:	4b28      	ldr	r3, [pc, #160]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4925      	ldr	r1, [pc, #148]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004012:	4b24      	ldr	r3, [pc, #144]	@ (80040a4 <HAL_RCC_OscConfig+0x244>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe ffe0 	bl	8002fdc <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004020:	f7fe ffdc 	bl	8002fdc <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e187      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d036      	beq.n	80040b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004052:	4b15      	ldr	r3, [pc, #84]	@ (80040a8 <HAL_RCC_OscConfig+0x248>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fe ffc0 	bl	8002fdc <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fe ffbc 	bl	8002fdc <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e167      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <HAL_RCC_OscConfig+0x240>)
 8004074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x200>
 800407e:	e01b      	b.n	80040b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004080:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <HAL_RCC_OscConfig+0x248>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004086:	f7fe ffa9 	bl	8002fdc <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408c:	e00e      	b.n	80040ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408e:	f7fe ffa5 	bl	8002fdc <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d907      	bls.n	80040ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e150      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	42470000 	.word	0x42470000
 80040a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	4b88      	ldr	r3, [pc, #544]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ea      	bne.n	800408e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8097 	beq.w	80041f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ca:	4b81      	ldr	r3, [pc, #516]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	4b7d      	ldr	r3, [pc, #500]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	4a7c      	ldr	r2, [pc, #496]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040e6:	4b7a      	ldr	r3, [pc, #488]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b77      	ldr	r3, [pc, #476]	@ (80042d4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d118      	bne.n	8004134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004102:	4b74      	ldr	r3, [pc, #464]	@ (80042d4 <HAL_RCC_OscConfig+0x474>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a73      	ldr	r2, [pc, #460]	@ (80042d4 <HAL_RCC_OscConfig+0x474>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410e:	f7fe ff65 	bl	8002fdc <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7fe ff61 	bl	8002fdc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e10c      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	4b6a      	ldr	r3, [pc, #424]	@ (80042d4 <HAL_RCC_OscConfig+0x474>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x2ea>
 800413c:	4b64      	ldr	r3, [pc, #400]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004140:	4a63      	ldr	r2, [pc, #396]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	@ 0x70
 8004148:	e01c      	b.n	8004184 <HAL_RCC_OscConfig+0x324>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b05      	cmp	r3, #5
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x30c>
 8004152:	4b5f      	ldr	r3, [pc, #380]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	4a5e      	ldr	r2, [pc, #376]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	6713      	str	r3, [r2, #112]	@ 0x70
 800415e:	4b5c      	ldr	r3, [pc, #368]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	4a5b      	ldr	r2, [pc, #364]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6713      	str	r3, [r2, #112]	@ 0x70
 800416a:	e00b      	b.n	8004184 <HAL_RCC_OscConfig+0x324>
 800416c:	4b58      	ldr	r3, [pc, #352]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	4a57      	ldr	r2, [pc, #348]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	@ 0x70
 8004178:	4b55      	ldr	r3, [pc, #340]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4a54      	ldr	r2, [pc, #336]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 800417e:	f023 0304 	bic.w	r3, r3, #4
 8004182:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fe ff26 	bl	8002fdc <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fe ff22 	bl	8002fdc <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0cb      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	4b49      	ldr	r3, [pc, #292]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0ee      	beq.n	8004194 <HAL_RCC_OscConfig+0x334>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b8:	f7fe ff10 	bl	8002fdc <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fe ff0c 	bl	8002fdc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0b5      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d6:	4b3e      	ldr	r3, [pc, #248]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ee      	bne.n	80041c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e8:	4b39      	ldr	r3, [pc, #228]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	4a38      	ldr	r2, [pc, #224]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80a1 	beq.w	8004340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fe:	4b34      	ldr	r3, [pc, #208]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b08      	cmp	r3, #8
 8004208:	d05c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d141      	bne.n	8004296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b31      	ldr	r3, [pc, #196]	@ (80042d8 <HAL_RCC_OscConfig+0x478>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe fee0 	bl	8002fdc <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004220:	f7fe fedc 	bl	8002fdc <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e087      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	3b01      	subs	r3, #1
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	491b      	ldr	r1, [pc, #108]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004268:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_RCC_OscConfig+0x478>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fe feb5 	bl	8002fdc <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004276:	f7fe feb1 	bl	8002fdc <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e05c      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004288:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x416>
 8004294:	e054      	b.n	8004340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004296:	4b10      	ldr	r3, [pc, #64]	@ (80042d8 <HAL_RCC_OscConfig+0x478>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fe fe9e 	bl	8002fdc <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fe fe9a 	bl	8002fdc <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e045      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b6:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <HAL_RCC_OscConfig+0x470>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x444>
 80042c2:	e03d      	b.n	8004340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e038      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40007000 	.word	0x40007000
 80042d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042dc:	4b1b      	ldr	r3, [pc, #108]	@ (800434c <HAL_RCC_OscConfig+0x4ec>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d028      	beq.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d121      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d11a      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004314:	4293      	cmp	r3, r2
 8004316:	d111      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	3b01      	subs	r3, #1
 8004326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d107      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800

08004350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0cc      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004364:	4b68      	ldr	r3, [pc, #416]	@ (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d90c      	bls.n	800438c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b65      	ldr	r3, [pc, #404]	@ (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b63      	ldr	r3, [pc, #396]	@ (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0b8      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a4:	4b59      	ldr	r3, [pc, #356]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a58      	ldr	r2, [pc, #352]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043bc:	4b53      	ldr	r3, [pc, #332]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a52      	ldr	r2, [pc, #328]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c8:	4b50      	ldr	r3, [pc, #320]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	494d      	ldr	r1, [pc, #308]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d044      	beq.n	8004470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	4b47      	ldr	r3, [pc, #284]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d119      	bne.n	800442e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e07f      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d003      	beq.n	800440e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440a:	2b03      	cmp	r3, #3
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440e:	4b3f      	ldr	r3, [pc, #252]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e06f      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441e:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e067      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442e:	4b37      	ldr	r3, [pc, #220]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 0203 	bic.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4934      	ldr	r1, [pc, #208]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004440:	f7fe fdcc 	bl	8002fdc <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	e00a      	b.n	800445e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004448:	f7fe fdc8 	bl	8002fdc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e04f      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	4b2b      	ldr	r3, [pc, #172]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 020c 	and.w	r2, r3, #12
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	429a      	cmp	r2, r3
 800446e:	d1eb      	bne.n	8004448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004470:	4b25      	ldr	r3, [pc, #148]	@ (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d20c      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b22      	ldr	r3, [pc, #136]	@ (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e032      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a4:	4b19      	ldr	r3, [pc, #100]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4916      	ldr	r1, [pc, #88]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044c2:	4b12      	ldr	r3, [pc, #72]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	490e      	ldr	r1, [pc, #56]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044d6:	f000 f821 	bl	800451c <HAL_RCC_GetSysClockFreq>
 80044da:	4602      	mov	r2, r0
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	490a      	ldr	r1, [pc, #40]	@ (8004510 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	5ccb      	ldrb	r3, [r1, r3]
 80044ea:	fa22 f303 	lsr.w	r3, r2, r3
 80044ee:	4a09      	ldr	r2, [pc, #36]	@ (8004514 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044f2:	4b09      	ldr	r3, [pc, #36]	@ (8004518 <HAL_RCC_ClockConfig+0x1c8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fb64 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023c00 	.word	0x40023c00
 800450c:	40023800 	.word	0x40023800
 8004510:	0800c004 	.word	0x0800c004
 8004514:	20001004 	.word	0x20001004
 8004518:	20001008 	.word	0x20001008

0800451c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b094      	sub	sp, #80	@ 0x50
 8004522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	647b      	str	r3, [r7, #68]	@ 0x44
 8004528:	2300      	movs	r3, #0
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452c:	2300      	movs	r3, #0
 800452e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004534:	4b79      	ldr	r3, [pc, #484]	@ (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d00d      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x40>
 8004540:	2b08      	cmp	r3, #8
 8004542:	f200 80e1 	bhi.w	8004708 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x34>
 800454a:	2b04      	cmp	r3, #4
 800454c:	d003      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x3a>
 800454e:	e0db      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b73      	ldr	r3, [pc, #460]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x204>)
 8004552:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004554:	e0db      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004556:	4b73      	ldr	r3, [pc, #460]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x208>)
 8004558:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800455a:	e0d8      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800455c:	4b6f      	ldr	r3, [pc, #444]	@ (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004564:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004566:	4b6d      	ldr	r3, [pc, #436]	@ (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d063      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004572:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	2200      	movs	r2, #0
 800457a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800457c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004584:	633b      	str	r3, [r7, #48]	@ 0x30
 8004586:	2300      	movs	r3, #0
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
 800458a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	0159      	lsls	r1, r3, #5
 800459c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a0:	0150      	lsls	r0, r2, #5
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4621      	mov	r1, r4
 80045a8:	1a51      	subs	r1, r2, r1
 80045aa:	6139      	str	r1, [r7, #16]
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb63 0301 	sbc.w	r3, r3, r1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045c0:	4659      	mov	r1, fp
 80045c2:	018b      	lsls	r3, r1, #6
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ca:	4651      	mov	r1, sl
 80045cc:	018a      	lsls	r2, r1, #6
 80045ce:	4651      	mov	r1, sl
 80045d0:	ebb2 0801 	subs.w	r8, r2, r1
 80045d4:	4659      	mov	r1, fp
 80045d6:	eb63 0901 	sbc.w	r9, r3, r1
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ee:	4690      	mov	r8, r2
 80045f0:	4699      	mov	r9, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	eb18 0303 	adds.w	r3, r8, r3
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	462b      	mov	r3, r5
 80045fc:	eb49 0303 	adc.w	r3, r9, r3
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800460e:	4629      	mov	r1, r5
 8004610:	024b      	lsls	r3, r1, #9
 8004612:	4621      	mov	r1, r4
 8004614:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004618:	4621      	mov	r1, r4
 800461a:	024a      	lsls	r2, r1, #9
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004622:	2200      	movs	r2, #0
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800462c:	f7fc fb3c 	bl	8000ca8 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4613      	mov	r3, r2
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004638:	e058      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463a:	4b38      	ldr	r3, [pc, #224]	@ (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	2200      	movs	r2, #0
 8004642:	4618      	mov	r0, r3
 8004644:	4611      	mov	r1, r2
 8004646:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	f04f 0000 	mov.w	r0, #0
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	0159      	lsls	r1, r3, #5
 8004662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004666:	0150      	lsls	r0, r2, #5
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4641      	mov	r1, r8
 800466e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004672:	4649      	mov	r1, r9
 8004674:	eb63 0b01 	sbc.w	fp, r3, r1
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800468c:	ebb2 040a 	subs.w	r4, r2, sl
 8004690:	eb63 050b 	sbc.w	r5, r3, fp
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	00eb      	lsls	r3, r5, #3
 800469e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a2:	00e2      	lsls	r2, r4, #3
 80046a4:	4614      	mov	r4, r2
 80046a6:	461d      	mov	r5, r3
 80046a8:	4643      	mov	r3, r8
 80046aa:	18e3      	adds	r3, r4, r3
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	464b      	mov	r3, r9
 80046b0:	eb45 0303 	adc.w	r3, r5, r3
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046c2:	4629      	mov	r1, r5
 80046c4:	028b      	lsls	r3, r1, #10
 80046c6:	4621      	mov	r1, r4
 80046c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046cc:	4621      	mov	r1, r4
 80046ce:	028a      	lsls	r2, r1, #10
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d6:	2200      	movs	r2, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	61fa      	str	r2, [r7, #28]
 80046dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e0:	f7fc fae2 	bl	8000ca8 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4613      	mov	r3, r2
 80046ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ec:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	3301      	adds	r3, #1
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80046fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004706:	e002      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x204>)
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800470c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004710:	4618      	mov	r0, r3
 8004712:	3750      	adds	r7, #80	@ 0x50
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400
 8004724:	007a1200 	.word	0x007a1200

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	@ (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20001004 	.word	0x20001004

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	@ (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	0800c014 	.word	0x0800c014

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0b5b      	lsrs	r3, r3, #13
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	@ (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	0800c014 	.word	0x0800c014

08004790 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	220f      	movs	r2, #15
 800479e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047a0:	4b12      	ldr	r3, [pc, #72]	@ (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0203 	and.w	r2, r3, #3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047b8:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80047c4:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047d2:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <HAL_RCC_GetClockConfig+0x60>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40023c00 	.word	0x40023c00

080047f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07b      	b.n	80048fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004816:	d009      	beq.n	800482c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	61da      	str	r2, [r3, #28]
 800481e:	e005      	b.n	800482c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fe f8b4 	bl	80029b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004862:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b0:	ea42 0103 	orr.w	r1, r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0104 	and.w	r1, r3, #4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	f003 0210 	and.w	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b088      	sub	sp, #32
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_SPI_Transmit+0x22>
 8004924:	2302      	movs	r3, #2
 8004926:	e126      	b.n	8004b76 <HAL_SPI_Transmit+0x270>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004930:	f7fe fb54 	bl	8002fdc <HAL_GetTick>
 8004934:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004946:	2302      	movs	r3, #2
 8004948:	77fb      	strb	r3, [r7, #31]
    goto error;
 800494a:	e10b      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_SPI_Transmit+0x52>
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800495c:	e102      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2203      	movs	r2, #3
 8004962:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a4:	d10f      	bne.n	80049c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d0:	2b40      	cmp	r3, #64	@ 0x40
 80049d2:	d007      	beq.n	80049e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ec:	d14b      	bne.n	8004a86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_Transmit+0xf6>
 80049f6:	8afb      	ldrh	r3, [r7, #22]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d13e      	bne.n	8004a7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	1c9a      	adds	r2, r3, #2
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a20:	e02b      	b.n	8004a7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d112      	bne.n	8004a56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	881a      	ldrh	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a54:	e011      	b.n	8004a7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a56:	f7fe fac1 	bl	8002fdc <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d803      	bhi.n	8004a6e <HAL_SPI_Transmit+0x168>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d102      	bne.n	8004a74 <HAL_SPI_Transmit+0x16e>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a78:	e074      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ce      	bne.n	8004a22 <HAL_SPI_Transmit+0x11c>
 8004a84:	e04c      	b.n	8004b20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_SPI_Transmit+0x18e>
 8004a8e:	8afb      	ldrh	r3, [r7, #22]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d140      	bne.n	8004b16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aba:	e02c      	b.n	8004b16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d113      	bne.n	8004af2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004af0:	e011      	b.n	8004b16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fe fa73 	bl	8002fdc <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_Transmit+0x204>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x20a>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b14:	e026      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1cd      	bne.n	8004abc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fbcb 	bl	80052c0 <SPI_EndRxTxTransaction>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e000      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b088      	sub	sp, #32
 8004b82:	af02      	add	r7, sp, #8
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b9a:	d112      	bne.n	8004bc2 <HAL_SPI_Receive+0x44>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10e      	bne.n	8004bc2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f8f1 	bl	8004da0 <HAL_SPI_TransmitReceive>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	e0ea      	b.n	8004d98 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_SPI_Receive+0x52>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e0e3      	b.n	8004d98 <HAL_SPI_Receive+0x21a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd8:	f7fe fa00 	bl	8002fdc <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bee:	e0ca      	b.n	8004d86 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Receive+0x7e>
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c00:	e0c1      	b.n	8004d86 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2204      	movs	r2, #4
 8004c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	88fa      	ldrh	r2, [r7, #6]
 8004c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c48:	d10f      	bne.n	8004c6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c74:	2b40      	cmp	r3, #64	@ 0x40
 8004c76:	d007      	beq.n	8004c88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d162      	bne.n	8004d56 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c90:	e02e      	b.n	8004cf0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d115      	bne.n	8004ccc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f103 020c 	add.w	r2, r3, #12
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cca:	e011      	b.n	8004cf0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ccc:	f7fe f986 	bl	8002fdc <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d803      	bhi.n	8004ce4 <HAL_SPI_Receive+0x166>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_Receive+0x16c>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cee:	e04a      	b.n	8004d86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1cb      	bne.n	8004c92 <HAL_SPI_Receive+0x114>
 8004cfa:	e031      	b.n	8004d60 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d113      	bne.n	8004d32 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	b292      	uxth	r2, r2
 8004d16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d30:	e011      	b.n	8004d56 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d32:	f7fe f953 	bl	8002fdc <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d803      	bhi.n	8004d4a <HAL_SPI_Receive+0x1cc>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d102      	bne.n	8004d50 <HAL_SPI_Receive+0x1d2>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d54:	e017      	b.n	8004d86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1cd      	bne.n	8004cfc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fa45 	bl	80051f4 <SPI_EndRxTransaction>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
 8004d82:	e000      	b.n	8004d86 <HAL_SPI_Receive+0x208>
  }

error :
 8004d84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	@ 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dae:	2301      	movs	r3, #1
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x26>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e18a      	b.n	80050dc <HAL_SPI_TransmitReceive+0x33c>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dce:	f7fe f905 	bl	8002fdc <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004de8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d00f      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x70>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df6:	d107      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x68>
 8004e00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d003      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004e0e:	e15b      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x82>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x82>
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004e28:	e14e      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d003      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2205      	movs	r2, #5
 8004e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	887a      	ldrh	r2, [r7, #2]
 8004e60:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	887a      	ldrh	r2, [r7, #2]
 8004e66:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7e:	2b40      	cmp	r3, #64	@ 0x40
 8004e80:	d007      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e9a:	d178      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0x10a>
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d166      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	1c9a      	adds	r2, r3, #2
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ece:	e053      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d11b      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x176>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d016      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x176>
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d113      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	881a      	ldrh	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	1c9a      	adds	r2, r3, #2
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d119      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x1b8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d014      	beq.n	8004f58 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f54:	2301      	movs	r3, #1
 8004f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f58:	f7fe f840 	bl	8002fdc <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d807      	bhi.n	8004f78 <HAL_SPI_TransmitReceive+0x1d8>
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d003      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004f76:	e0a7      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1a6      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x130>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1a1      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x130>
 8004f8c:	e07c      	b.n	8005088 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x1fc>
 8004f96:	8b7b      	ldrh	r3, [r7, #26]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d16b      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	7812      	ldrb	r2, [r2, #0]
 8004fa8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc2:	e057      	b.n	8005074 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d11c      	bne.n	800500c <HAL_SPI_TransmitReceive+0x26c>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d017      	beq.n	800500c <HAL_SPI_TransmitReceive+0x26c>
 8004fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d114      	bne.n	800500c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	7812      	ldrb	r2, [r2, #0]
 8004fee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d119      	bne.n	800504e <HAL_SPI_TransmitReceive+0x2ae>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d014      	beq.n	800504e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800504a:	2301      	movs	r3, #1
 800504c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800504e:	f7fd ffc5 	bl	8002fdc <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800505a:	429a      	cmp	r2, r3
 800505c:	d803      	bhi.n	8005066 <HAL_SPI_TransmitReceive+0x2c6>
 800505e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d102      	bne.n	800506c <HAL_SPI_TransmitReceive+0x2cc>
 8005066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005072:	e029      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1a2      	bne.n	8004fc4 <HAL_SPI_TransmitReceive+0x224>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d19d      	bne.n	8004fc4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f917 	bl	80052c0 <SPI_EndRxTxTransaction>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d006      	beq.n	80050a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80050a4:	e010      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	e000      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80050d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3730      	adds	r7, #48	@ 0x30
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050f4:	f7fd ff72 	bl	8002fdc <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	4413      	add	r3, r2
 8005102:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005104:	f7fd ff6a 	bl	8002fdc <HAL_GetTick>
 8005108:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800510a:	4b39      	ldr	r3, [pc, #228]	@ (80051f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	015b      	lsls	r3, r3, #5
 8005110:	0d1b      	lsrs	r3, r3, #20
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800511a:	e054      	b.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d050      	beq.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005124:	f7fd ff5a 	bl	8002fdc <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	429a      	cmp	r2, r3
 8005132:	d902      	bls.n	800513a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d13d      	bne.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005148:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005152:	d111      	bne.n	8005178 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800515c:	d004      	beq.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005166:	d107      	bne.n	8005178 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005176:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005180:	d10f      	bne.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e017      	b.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4013      	ands	r3, r2
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d19b      	bne.n	800511c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20001004 	.word	0x20001004

080051f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005208:	d111      	bne.n	800522e <SPI_EndRxTransaction+0x3a>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005212:	d004      	beq.n	800521e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521c:	d107      	bne.n	800522e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800522c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005236:	d12a      	bne.n	800528e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005240:	d012      	beq.n	8005268 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2200      	movs	r2, #0
 800524a:	2180      	movs	r1, #128	@ 0x80
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff ff49 	bl	80050e4 <SPI_WaitFlagStateUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d02d      	beq.n	80052b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e026      	b.n	80052b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2200      	movs	r2, #0
 8005270:	2101      	movs	r1, #1
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff ff36 	bl	80050e4 <SPI_WaitFlagStateUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01a      	beq.n	80052b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e013      	b.n	80052b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2200      	movs	r2, #0
 8005296:	2101      	movs	r1, #1
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff ff23 	bl	80050e4 <SPI_WaitFlagStateUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e000      	b.n	80052b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <SPI_EndRxTxTransaction+0x7c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <SPI_EndRxTxTransaction+0x80>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	0d5b      	lsrs	r3, r3, #21
 80052d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052dc:	fb02 f303 	mul.w	r3, r2, r3
 80052e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ea:	d112      	bne.n	8005312 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2180      	movs	r1, #128	@ 0x80
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fef4 	bl	80050e4 <SPI_WaitFlagStateUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e00f      	b.n	8005332 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3b01      	subs	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005328:	2b80      	cmp	r3, #128	@ 0x80
 800532a:	d0f2      	beq.n	8005312 <SPI_EndRxTxTransaction+0x52>
 800532c:	e000      	b.n	8005330 <SPI_EndRxTxTransaction+0x70>
        break;
 800532e:	bf00      	nop
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20001004 	.word	0x20001004
 8005340:	165e9f81 	.word	0x165e9f81

08005344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e041      	b.n	80053da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fd fb6a 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f000 fb26 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d001      	beq.n	80053fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e046      	b.n	800548a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a23      	ldr	r2, [pc, #140]	@ (8005498 <HAL_TIM_Base_Start+0xb4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d022      	beq.n	8005454 <HAL_TIM_Base_Start+0x70>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005416:	d01d      	beq.n	8005454 <HAL_TIM_Base_Start+0x70>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1f      	ldr	r2, [pc, #124]	@ (800549c <HAL_TIM_Base_Start+0xb8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d018      	beq.n	8005454 <HAL_TIM_Base_Start+0x70>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <HAL_TIM_Base_Start+0xbc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <HAL_TIM_Base_Start+0x70>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1c      	ldr	r2, [pc, #112]	@ (80054a4 <HAL_TIM_Base_Start+0xc0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00e      	beq.n	8005454 <HAL_TIM_Base_Start+0x70>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <HAL_TIM_Base_Start+0xc4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_TIM_Base_Start+0x70>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <HAL_TIM_Base_Start+0xc8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_TIM_Base_Start+0x70>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <HAL_TIM_Base_Start+0xcc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d111      	bne.n	8005478 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b06      	cmp	r3, #6
 8005464:	d010      	beq.n	8005488 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	e007      	b.n	8005488 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40010400 	.word	0x40010400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40001800 	.word	0x40001800

080054b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10f      	bne.n	80054ec <HAL_TIM_Base_Stop+0x38>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <HAL_TIM_Base_Stop+0x38>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d001      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e04e      	b.n	80055ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a23      	ldr	r2, [pc, #140]	@ (80055c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005546:	d01d      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <HAL_TIM_Base_Start_IT+0xc8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1e      	ldr	r2, [pc, #120]	@ (80055d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	@ (80055d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d111      	bne.n	80055a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b06      	cmp	r3, #6
 8005594:	d010      	beq.n	80055b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a6:	e007      	b.n	80055b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40010400 	.word	0x40010400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40001800 	.word	0x40001800

080055e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0202 	mvn.w	r2, #2
 8005610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f9b5 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9a7 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f9b8 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0204 	mvn.w	r2, #4
 8005664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f98b 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f97d 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f98e 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0208 	mvn.w	r2, #8
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f961 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f953 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f964 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d122      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0210 	mvn.w	r2, #16
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2208      	movs	r2, #8
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f937 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 8005728:	e005      	b.n	8005736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f929 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f93a 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0201 	mvn.w	r2, #1
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fd f8e0 	bl	8002928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005772:	2b80      	cmp	r3, #128	@ 0x80
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005780:	2b80      	cmp	r3, #128	@ 0x80
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fae0 	bl	8005d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579e:	2b40      	cmp	r3, #64	@ 0x40
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ac:	2b40      	cmp	r3, #64	@ 0x40
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f8ff 	bl	80059be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d10e      	bne.n	80057ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d107      	bne.n	80057ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0220 	mvn.w	r2, #32
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 faaa 	bl	8005d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIM_ConfigClockSource+0x1c>
 800580c:	2302      	movs	r3, #2
 800580e:	e0b4      	b.n	800597a <HAL_TIM_ConfigClockSource+0x186>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800582e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005848:	d03e      	beq.n	80058c8 <HAL_TIM_ConfigClockSource+0xd4>
 800584a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800584e:	f200 8087 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005856:	f000 8086 	beq.w	8005966 <HAL_TIM_ConfigClockSource+0x172>
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800585e:	d87f      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005860:	2b70      	cmp	r3, #112	@ 0x70
 8005862:	d01a      	beq.n	800589a <HAL_TIM_ConfigClockSource+0xa6>
 8005864:	2b70      	cmp	r3, #112	@ 0x70
 8005866:	d87b      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005868:	2b60      	cmp	r3, #96	@ 0x60
 800586a:	d050      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x11a>
 800586c:	2b60      	cmp	r3, #96	@ 0x60
 800586e:	d877      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005870:	2b50      	cmp	r3, #80	@ 0x50
 8005872:	d03c      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0xfa>
 8005874:	2b50      	cmp	r3, #80	@ 0x50
 8005876:	d873      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005878:	2b40      	cmp	r3, #64	@ 0x40
 800587a:	d058      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x13a>
 800587c:	2b40      	cmp	r3, #64	@ 0x40
 800587e:	d86f      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005880:	2b30      	cmp	r3, #48	@ 0x30
 8005882:	d064      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x15a>
 8005884:	2b30      	cmp	r3, #48	@ 0x30
 8005886:	d86b      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d060      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x15a>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d867      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d05c      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x15a>
 8005894:	2b10      	cmp	r3, #16
 8005896:	d05a      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	e062      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6899      	ldr	r1, [r3, #8]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f000 f9ad 	bl	8005c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	609a      	str	r2, [r3, #8]
      break;
 80058c6:	e04f      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6899      	ldr	r1, [r3, #8]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f000 f996 	bl	8005c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058ea:	609a      	str	r2, [r3, #8]
      break;
 80058ec:	e03c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f000 f90a 	bl	8005b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2150      	movs	r1, #80	@ 0x50
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f963 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 800590c:	e02c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6859      	ldr	r1, [r3, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	461a      	mov	r2, r3
 800591c:	f000 f929 	bl	8005b72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2160      	movs	r1, #96	@ 0x60
 8005926:	4618      	mov	r0, r3
 8005928:	f000 f953 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 800592c:	e01c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6859      	ldr	r1, [r3, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	461a      	mov	r2, r3
 800593c:	f000 f8ea 	bl	8005b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2140      	movs	r1, #64	@ 0x40
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f943 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 800594c:	e00c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f000 f93a 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 800595e:	e003      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      break;
 8005964:	e000      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a40      	ldr	r2, [pc, #256]	@ (8005ae8 <TIM_Base_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f2:	d00f      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3d      	ldr	r2, [pc, #244]	@ (8005aec <TIM_Base_SetConfig+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3c      	ldr	r2, [pc, #240]	@ (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3b      	ldr	r2, [pc, #236]	@ (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3a      	ldr	r2, [pc, #232]	@ (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d02b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a34:	d027      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	@ (8005aec <TIM_Base_SetConfig+0x118>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d023      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2b      	ldr	r2, [pc, #172]	@ (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	@ (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a29      	ldr	r2, [pc, #164]	@ (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a28      	ldr	r2, [pc, #160]	@ (8005afc <TIM_Base_SetConfig+0x128>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a27      	ldr	r2, [pc, #156]	@ (8005b00 <TIM_Base_SetConfig+0x12c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a26      	ldr	r2, [pc, #152]	@ (8005b04 <TIM_Base_SetConfig+0x130>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a25      	ldr	r2, [pc, #148]	@ (8005b08 <TIM_Base_SetConfig+0x134>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a24      	ldr	r2, [pc, #144]	@ (8005b0c <TIM_Base_SetConfig+0x138>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a23      	ldr	r2, [pc, #140]	@ (8005b10 <TIM_Base_SetConfig+0x13c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8005af8 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d103      	bne.n	8005ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800
 8005b08:	40001800 	.word	0x40001800
 8005b0c:	40001c00 	.word	0x40001c00
 8005b10:	40002000 	.word	0x40002000

08005b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 030a 	bic.w	r3, r3, #10
 8005b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f043 0307 	orr.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e05a      	b.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a21      	ldr	r2, [pc, #132]	@ (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cac:	d01d      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	@ (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a17      	ldr	r2, [pc, #92]	@ (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	@ (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10c      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40001800 	.word	0x40001800

08005d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e03f      	b.n	8005dfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fc fe94 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	@ 0x24
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fead 	bl	8006b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d130      	bne.n	8005e7e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Transmit_IT+0x26>
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e029      	b.n	8005e80 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_UART_Transmit_IT+0x38>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e022      	b.n	8005e80 <HAL_UART_Transmit_IT+0x7e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2221      	movs	r2, #33	@ 0x21
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e000      	b.n	8005e80 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d11d      	bne.n	8005ee2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_UART_Receive_DMA+0x26>
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e016      	b.n	8005ee4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UART_Receive_DMA+0x38>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e00f      	b.n	8005ee4 <HAL_UART_Receive_DMA+0x58>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fbb7 	bl	800664c <UART_Start_Receive_DMA>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	e000      	b.n	8005ee4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
  }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b0ba      	sub	sp, #232	@ 0xe8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_UART_IRQHandler+0x66>
 8005f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fd23 	bl	8006996 <UART_Receive_IT>
      return;
 8005f50:	e256      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 80de 	beq.w	8006118 <HAL_UART_IRQHandler+0x22c>
 8005f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80d1 	beq.w	8006118 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_UART_IRQHandler+0xae>
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <HAL_UART_IRQHandler+0xd2>
 8005fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <HAL_UART_IRQHandler+0xf6>
 8005fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	f043 0204 	orr.w	r2, r3, #4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <HAL_UART_IRQHandler+0x126>
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d105      	bne.n	8006006 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	f043 0208 	orr.w	r2, r3, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 81ed 	beq.w	80063f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_UART_IRQHandler+0x14e>
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fcae 	bl	8006996 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006044:	2b40      	cmp	r3, #64	@ 0x40
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_UART_IRQHandler+0x17a>
 800605e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d04f      	beq.n	8006106 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fbb6 	bl	80067d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b40      	cmp	r3, #64	@ 0x40
 8006078:	d141      	bne.n	80060fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006090:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3314      	adds	r3, #20
 80060a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1d9      	bne.n	800607a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d013      	beq.n	80060f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d2:	4a7d      	ldr	r2, [pc, #500]	@ (80062c8 <HAL_UART_IRQHandler+0x3dc>)
 80060d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fd fa06 	bl	80034ec <HAL_DMA_Abort_IT>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80060f0:	4610      	mov	r0, r2
 80060f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	e00e      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f99a 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fc:	e00a      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f996 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	e006      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f992 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006112:	e170      	b.n	80063f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	bf00      	nop
    return;
 8006116:	e16e      	b.n	80063f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	f040 814a 	bne.w	80063b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8143 	beq.w	80063b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 813c 	beq.w	80063b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60bb      	str	r3, [r7, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615e:	2b40      	cmp	r3, #64	@ 0x40
 8006160:	f040 80b4 	bne.w	80062cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8140 	beq.w	80063fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800617e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006182:	429a      	cmp	r2, r3
 8006184:	f080 8139 	bcs.w	80063fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800618e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800619a:	f000 8088 	beq.w	80062ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	330c      	adds	r3, #12
 80061a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80061ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1d9      	bne.n	800619e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800620e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006212:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006216:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e1      	bne.n	80061ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3314      	adds	r3, #20
 800622c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3314      	adds	r3, #20
 8006246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800624a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800624c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006250:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e3      	bne.n	8006226 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800627c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800627e:	f023 0310 	bic.w	r3, r3, #16
 8006282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006290:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006292:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800629e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e3      	bne.n	800626c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fd f8af 	bl	800340c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8c0 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062c4:	e099      	b.n	80063fa <HAL_UART_IRQHandler+0x50e>
 80062c6:	bf00      	nop
 80062c8:	0800689f 	.word	0x0800689f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 808b 	beq.w	80063fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8086 	beq.w	80063fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006316:	647a      	str	r2, [r7, #68]	@ 0x44
 8006318:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800631c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e3      	bne.n	80062f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3314      	adds	r3, #20
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	623b      	str	r3, [r7, #32]
   return(result);
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3314      	adds	r3, #20
 800634a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800634e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e3      	bne.n	800632a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0310 	bic.w	r3, r3, #16
 8006386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006394:	61fa      	str	r2, [r7, #28]
 8006396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	617b      	str	r3, [r7, #20]
   return(result);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e3      	bne.n	8006370 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f848 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063b4:	e023      	b.n	80063fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_UART_IRQHandler+0x4ea>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa79 	bl	80068c6 <UART_Transmit_IT>
    return;
 80063d4:	e014      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00e      	beq.n	8006400 <HAL_UART_IRQHandler+0x514>
 80063e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fab9 	bl	8006966 <UART_EndTransmit_IT>
    return;
 80063f4:	e004      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
    return;
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
      return;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
      return;
 80063fe:	bf00      	nop
  }
}
 8006400:	37e8      	adds	r7, #232	@ 0xe8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b09c      	sub	sp, #112	@ 0x70
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d172      	bne.n	800655e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800647a:	2200      	movs	r2, #0
 800647c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800647e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800648e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006494:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800649e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e5      	bne.n	800647e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80064ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80064d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e5      	bne.n	80064b2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3314      	adds	r3, #20
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	623b      	str	r3, [r7, #32]
   return(result);
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80064fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006506:	633a      	str	r2, [r7, #48]	@ 0x30
 8006508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800650c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800651a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006526:	2b01      	cmp	r3, #1
 8006528:	d119      	bne.n	800655e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	60fb      	str	r3, [r7, #12]
   return(result);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800654a:	61fa      	str	r2, [r7, #28]
 800654c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	617b      	str	r3, [r7, #20]
   return(result);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e5      	bne.n	800652a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	2b01      	cmp	r3, #1
 8006564:	d106      	bne.n	8006574 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006568:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800656a:	4619      	mov	r1, r3
 800656c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800656e:	f7ff ff69 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006572:	e002      	b.n	800657a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006574:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006576:	f7fb fb2f 	bl	8001bd8 <HAL_UART_RxCpltCallback>
}
 800657a:	bf00      	nop
 800657c:	3770      	adds	r7, #112	@ 0x70
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006594:	2b01      	cmp	r3, #1
 8006596:	d108      	bne.n	80065aa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	b29b      	uxth	r3, r3
 80065a0:	4619      	mov	r1, r3
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff ff4e 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065a8:	e002      	b.n	80065b0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff ff36 	bl	800641c <HAL_UART_RxHalfCpltCallback>
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d4:	2b80      	cmp	r3, #128	@ 0x80
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b21      	cmp	r3, #33	@ 0x21
 80065ea:	d108      	bne.n	80065fe <UART_DMAError+0x46>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2200      	movs	r2, #0
 80065f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80065f8:	68b8      	ldr	r0, [r7, #8]
 80065fa:	f000 f8c5 	bl	8006788 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006608:	2b40      	cmp	r3, #64	@ 0x40
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b22      	cmp	r3, #34	@ 0x22
 800661e:	d108      	bne.n	8006632 <UART_DMAError+0x7a>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2200      	movs	r2, #0
 800662a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800662c:	68b8      	ldr	r0, [r7, #8]
 800662e:	f000 f8d3 	bl	80067d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006636:	f043 0210 	orr.w	r2, r3, #16
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800663e:	68b8      	ldr	r0, [r7, #8]
 8006640:	f7ff fef6 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b098      	sub	sp, #96	@ 0x60
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	88fa      	ldrh	r2, [r7, #6]
 8006664:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2222      	movs	r2, #34	@ 0x22
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006678:	4a40      	ldr	r2, [pc, #256]	@ (800677c <UART_Start_Receive_DMA+0x130>)
 800667a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	4a3f      	ldr	r2, [pc, #252]	@ (8006780 <UART_Start_Receive_DMA+0x134>)
 8006682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006688:	4a3e      	ldr	r2, [pc, #248]	@ (8006784 <UART_Start_Receive_DMA+0x138>)
 800668a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006690:	2200      	movs	r2, #0
 8006692:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006694:	f107 0308 	add.w	r3, r7, #8
 8006698:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	f7fc fe56 	bl	800335c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d019      	beq.n	800670a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80066f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80066fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	657b      	str	r3, [r7, #84]	@ 0x54
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800672a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e5      	bne.n	800670a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	617b      	str	r3, [r7, #20]
   return(result);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006754:	653b      	str	r3, [r7, #80]	@ 0x50
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800675e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6a39      	ldr	r1, [r7, #32]
 8006764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	61fb      	str	r3, [r7, #28]
   return(result);
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e5      	bne.n	800673e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3760      	adds	r7, #96	@ 0x60
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	0800645d 	.word	0x0800645d
 8006780:	08006583 	.word	0x08006583
 8006784:	080065b9 	.word	0x080065b9

08006788 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b089      	sub	sp, #36	@ 0x24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	61ba      	str	r2, [r7, #24]
 80067b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6979      	ldr	r1, [r7, #20]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	613b      	str	r3, [r7, #16]
   return(result);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80067cc:	bf00      	nop
 80067ce:	3724      	adds	r7, #36	@ 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b095      	sub	sp, #84	@ 0x54
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006800:	643a      	str	r2, [r7, #64]	@ 0x40
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	61fb      	str	r3, [r7, #28]
   return(result);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006834:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006836:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800683a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e5      	bne.n	8006814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	2b01      	cmp	r3, #1
 800684e:	d119      	bne.n	8006884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	330c      	adds	r3, #12
 8006856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0310 	bic.w	r3, r3, #16
 8006866:	647b      	str	r3, [r7, #68]	@ 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006870:	61ba      	str	r2, [r7, #24]
 8006872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6979      	ldr	r1, [r7, #20]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	613b      	str	r3, [r7, #16]
   return(result);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e5      	bne.n	8006850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006892:	bf00      	nop
 8006894:	3754      	adds	r7, #84	@ 0x54
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7ff fdb9 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b21      	cmp	r3, #33	@ 0x21
 80068d8:	d13e      	bne.n	8006958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e2:	d114      	bne.n	800690e <UART_Transmit_IT+0x48>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d110      	bne.n	800690e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	1c9a      	adds	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	621a      	str	r2, [r3, #32]
 800690c:	e008      	b.n	8006920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6211      	str	r1, [r2, #32]
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29b      	uxth	r3, r3
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10f      	bne.n	8006954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fd3e 	bl	8006408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b08c      	sub	sp, #48	@ 0x30
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b22      	cmp	r3, #34	@ 0x22
 80069a8:	f040 80ab 	bne.w	8006b02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b4:	d117      	bne.n	80069e6 <UART_Receive_IT+0x50>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d113      	bne.n	80069e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80069e4:	e026      	b.n	8006a34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f8:	d007      	beq.n	8006a0a <UART_Receive_IT+0x74>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <UART_Receive_IT+0x82>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e008      	b.n	8006a2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4619      	mov	r1, r3
 8006a42:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d15a      	bne.n	8006afe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0220 	bic.w	r2, r2, #32
 8006a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d135      	bne.n	8006af4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f023 0310 	bic.w	r3, r3, #16
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aae:	623a      	str	r2, [r7, #32]
 8006ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d10a      	bne.n	8006ae6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fca9 	bl	8006444 <HAL_UARTEx_RxEventCallback>
 8006af2:	e002      	b.n	8006afa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fb f86f 	bl	8001bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e002      	b.n	8006b04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e000      	b.n	8006b04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b02:	2302      	movs	r3, #2
  }
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3730      	adds	r7, #48	@ 0x30
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b10:	b0c0      	sub	sp, #256	@ 0x100
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b28:	68d9      	ldr	r1, [r3, #12]
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	ea40 0301 	orr.w	r3, r0, r1
 8006b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b64:	f021 010c 	bic.w	r1, r1, #12
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b72:	430b      	orrs	r3, r1
 8006b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b86:	6999      	ldr	r1, [r3, #24]
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	ea40 0301 	orr.w	r3, r0, r1
 8006b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8006dd8 <UART_SetConfig+0x2cc>)
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d005      	beq.n	8006bac <UART_SetConfig+0xa0>
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8006ddc <UART_SetConfig+0x2d0>)
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d104      	bne.n	8006bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bac:	f7fd fddc 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8006bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bb4:	e003      	b.n	8006bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb6:	f7fd fdc3 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8006bba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bc8:	f040 810c 	bne.w	8006de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bde:	4622      	mov	r2, r4
 8006be0:	462b      	mov	r3, r5
 8006be2:	1891      	adds	r1, r2, r2
 8006be4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006be6:	415b      	adcs	r3, r3
 8006be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bee:	4621      	mov	r1, r4
 8006bf0:	eb12 0801 	adds.w	r8, r2, r1
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	eb43 0901 	adc.w	r9, r3, r1
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c0e:	4690      	mov	r8, r2
 8006c10:	4699      	mov	r9, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	eb18 0303 	adds.w	r3, r8, r3
 8006c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	eb49 0303 	adc.w	r3, r9, r3
 8006c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	18db      	adds	r3, r3, r3
 8006c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c40:	4613      	mov	r3, r2
 8006c42:	eb42 0303 	adc.w	r3, r2, r3
 8006c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c50:	f7fa f82a 	bl	8000ca8 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4b61      	ldr	r3, [pc, #388]	@ (8006de0 <UART_SetConfig+0x2d4>)
 8006c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	011c      	lsls	r4, r3, #4
 8006c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c74:	4642      	mov	r2, r8
 8006c76:	464b      	mov	r3, r9
 8006c78:	1891      	adds	r1, r2, r2
 8006c7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c7c:	415b      	adcs	r3, r3
 8006c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c84:	4641      	mov	r1, r8
 8006c86:	eb12 0a01 	adds.w	sl, r2, r1
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca4:	4692      	mov	sl, r2
 8006ca6:	469b      	mov	fp, r3
 8006ca8:	4643      	mov	r3, r8
 8006caa:	eb1a 0303 	adds.w	r3, sl, r3
 8006cae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	18db      	adds	r3, r3, r3
 8006cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	eb42 0303 	adc.w	r3, r2, r3
 8006cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ce6:	f7f9 ffdf 	bl	8000ca8 <__aeabi_uldivmod>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8006de0 <UART_SetConfig+0x2d4>)
 8006cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2264      	movs	r2, #100	@ 0x64
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	1acb      	subs	r3, r1, r3
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d06:	4b36      	ldr	r3, [pc, #216]	@ (8006de0 <UART_SetConfig+0x2d4>)
 8006d08:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d14:	441c      	add	r4, r3
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	1891      	adds	r1, r2, r2
 8006d2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d30:	415b      	adcs	r3, r3
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d38:	4641      	mov	r1, r8
 8006d3a:	1851      	adds	r1, r2, r1
 8006d3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d3e:	4649      	mov	r1, r9
 8006d40:	414b      	adcs	r3, r1
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d50:	4659      	mov	r1, fp
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4642      	mov	r2, r8
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d92:	4613      	mov	r3, r2
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006da2:	f7f9 ff81 	bl	8000ca8 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <UART_SetConfig+0x2d4>)
 8006dac:	fba3 1302 	umull	r1, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	2164      	movs	r1, #100	@ 0x64
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	3332      	adds	r3, #50	@ 0x32
 8006dbe:	4a08      	ldr	r2, [pc, #32]	@ (8006de0 <UART_SetConfig+0x2d4>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f003 0207 	and.w	r2, r3, #7
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4422      	add	r2, r4
 8006dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd4:	e106      	b.n	8006fe4 <UART_SetConfig+0x4d8>
 8006dd6:	bf00      	nop
 8006dd8:	40011000 	.word	0x40011000
 8006ddc:	40011400 	.word	0x40011400
 8006de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	1891      	adds	r1, r2, r2
 8006dfc:	6239      	str	r1, [r7, #32]
 8006dfe:	415b      	adcs	r3, r3
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e06:	4641      	mov	r1, r8
 8006e08:	1854      	adds	r4, r2, r1
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	eb43 0501 	adc.w	r5, r3, r1
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	00eb      	lsls	r3, r5, #3
 8006e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1e:	00e2      	lsls	r2, r4, #3
 8006e20:	4614      	mov	r4, r2
 8006e22:	461d      	mov	r5, r3
 8006e24:	4643      	mov	r3, r8
 8006e26:	18e3      	adds	r3, r4, r3
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	eb45 0303 	adc.w	r3, r5, r3
 8006e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e52:	4629      	mov	r1, r5
 8006e54:	008b      	lsls	r3, r1, #2
 8006e56:	4621      	mov	r1, r4
 8006e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	008a      	lsls	r2, r1, #2
 8006e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e64:	f7f9 ff20 	bl	8000ca8 <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4b60      	ldr	r3, [pc, #384]	@ (8006ff0 <UART_SetConfig+0x4e4>)
 8006e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	011c      	lsls	r4, r3, #4
 8006e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e88:	4642      	mov	r2, r8
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	1891      	adds	r1, r2, r2
 8006e8e:	61b9      	str	r1, [r7, #24]
 8006e90:	415b      	adcs	r3, r3
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e98:	4641      	mov	r1, r8
 8006e9a:	1851      	adds	r1, r2, r1
 8006e9c:	6139      	str	r1, [r7, #16]
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	414b      	adcs	r3, r1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	00cb      	lsls	r3, r1, #3
 8006eb4:	4651      	mov	r1, sl
 8006eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eba:	4651      	mov	r1, sl
 8006ebc:	00ca      	lsls	r2, r1, #3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	189b      	adds	r3, r3, r2
 8006ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ecc:	464b      	mov	r3, r9
 8006ece:	460a      	mov	r2, r1
 8006ed0:	eb42 0303 	adc.w	r3, r2, r3
 8006ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ee2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	008b      	lsls	r3, r1, #2
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006efa:	4641      	mov	r1, r8
 8006efc:	008a      	lsls	r2, r1, #2
 8006efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f02:	f7f9 fed1 	bl	8000ca8 <__aeabi_uldivmod>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4b38      	ldr	r3, [pc, #224]	@ (8006ff0 <UART_SetConfig+0x4e4>)
 8006f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	2264      	movs	r2, #100	@ 0x64
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	1acb      	subs	r3, r1, r3
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	3332      	adds	r3, #50	@ 0x32
 8006f20:	4a33      	ldr	r2, [pc, #204]	@ (8006ff0 <UART_SetConfig+0x4e4>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f2c:	441c      	add	r4, r3
 8006f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f32:	2200      	movs	r2, #0
 8006f34:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f36:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	1891      	adds	r1, r2, r2
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	415b      	adcs	r3, r3
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	1851      	adds	r1, r2, r1
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	4649      	mov	r1, r9
 8006f54:	414b      	adcs	r3, r1
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f64:	4659      	mov	r1, fp
 8006f66:	00cb      	lsls	r3, r1, #3
 8006f68:	4651      	mov	r1, sl
 8006f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6e:	4651      	mov	r1, sl
 8006f70:	00ca      	lsls	r2, r1, #3
 8006f72:	4610      	mov	r0, r2
 8006f74:	4619      	mov	r1, r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	4642      	mov	r2, r8
 8006f7a:	189b      	adds	r3, r3, r2
 8006f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f7e:	464b      	mov	r3, r9
 8006f80:	460a      	mov	r2, r1
 8006f82:	eb42 0303 	adc.w	r3, r2, r3
 8006f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f92:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	008b      	lsls	r3, r1, #2
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006faa:	4641      	mov	r1, r8
 8006fac:	008a      	lsls	r2, r1, #2
 8006fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fb2:	f7f9 fe79 	bl	8000ca8 <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <UART_SetConfig+0x4e4>)
 8006fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	2164      	movs	r1, #100	@ 0x64
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	3332      	adds	r3, #50	@ 0x32
 8006fce:	4a08      	ldr	r2, [pc, #32]	@ (8006ff0 <UART_SetConfig+0x4e4>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	f003 020f 	and.w	r2, r3, #15
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4422      	add	r2, r4
 8006fe2:	609a      	str	r2, [r3, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fea:	46bd      	mov	sp, r7
 8006fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff0:	51eb851f 	.word	0x51eb851f

08006ff4 <__cvt>:
 8006ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff8:	ec57 6b10 	vmov	r6, r7, d0
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	460c      	mov	r4, r1
 8007000:	4619      	mov	r1, r3
 8007002:	463b      	mov	r3, r7
 8007004:	bfbb      	ittet	lt
 8007006:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800700a:	461f      	movlt	r7, r3
 800700c:	2300      	movge	r3, #0
 800700e:	232d      	movlt	r3, #45	@ 0x2d
 8007010:	700b      	strb	r3, [r1, #0]
 8007012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007014:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007018:	4691      	mov	r9, r2
 800701a:	f023 0820 	bic.w	r8, r3, #32
 800701e:	bfbc      	itt	lt
 8007020:	4632      	movlt	r2, r6
 8007022:	4616      	movlt	r6, r2
 8007024:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007028:	d005      	beq.n	8007036 <__cvt+0x42>
 800702a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800702e:	d100      	bne.n	8007032 <__cvt+0x3e>
 8007030:	3401      	adds	r4, #1
 8007032:	2102      	movs	r1, #2
 8007034:	e000      	b.n	8007038 <__cvt+0x44>
 8007036:	2103      	movs	r1, #3
 8007038:	ab03      	add	r3, sp, #12
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	ab02      	add	r3, sp, #8
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	ec47 6b10 	vmov	d0, r6, r7
 8007044:	4653      	mov	r3, sl
 8007046:	4622      	mov	r2, r4
 8007048:	f001 f8ce 	bl	80081e8 <_dtoa_r>
 800704c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007050:	4605      	mov	r5, r0
 8007052:	d119      	bne.n	8007088 <__cvt+0x94>
 8007054:	f019 0f01 	tst.w	r9, #1
 8007058:	d00e      	beq.n	8007078 <__cvt+0x84>
 800705a:	eb00 0904 	add.w	r9, r0, r4
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	4630      	mov	r0, r6
 8007064:	4639      	mov	r1, r7
 8007066:	f7f9 fd3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800706a:	b108      	cbz	r0, 8007070 <__cvt+0x7c>
 800706c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007070:	2230      	movs	r2, #48	@ 0x30
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	454b      	cmp	r3, r9
 8007076:	d31e      	bcc.n	80070b6 <__cvt+0xc2>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800707c:	1b5b      	subs	r3, r3, r5
 800707e:	4628      	mov	r0, r5
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	b004      	add	sp, #16
 8007084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800708c:	eb00 0904 	add.w	r9, r0, r4
 8007090:	d1e5      	bne.n	800705e <__cvt+0x6a>
 8007092:	7803      	ldrb	r3, [r0, #0]
 8007094:	2b30      	cmp	r3, #48	@ 0x30
 8007096:	d10a      	bne.n	80070ae <__cvt+0xba>
 8007098:	2200      	movs	r2, #0
 800709a:	2300      	movs	r3, #0
 800709c:	4630      	mov	r0, r6
 800709e:	4639      	mov	r1, r7
 80070a0:	f7f9 fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 80070a4:	b918      	cbnz	r0, 80070ae <__cvt+0xba>
 80070a6:	f1c4 0401 	rsb	r4, r4, #1
 80070aa:	f8ca 4000 	str.w	r4, [sl]
 80070ae:	f8da 3000 	ldr.w	r3, [sl]
 80070b2:	4499      	add	r9, r3
 80070b4:	e7d3      	b.n	800705e <__cvt+0x6a>
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	9103      	str	r1, [sp, #12]
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	e7d9      	b.n	8007072 <__cvt+0x7e>

080070be <__exponent>:
 80070be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c0:	2900      	cmp	r1, #0
 80070c2:	bfba      	itte	lt
 80070c4:	4249      	neglt	r1, r1
 80070c6:	232d      	movlt	r3, #45	@ 0x2d
 80070c8:	232b      	movge	r3, #43	@ 0x2b
 80070ca:	2909      	cmp	r1, #9
 80070cc:	7002      	strb	r2, [r0, #0]
 80070ce:	7043      	strb	r3, [r0, #1]
 80070d0:	dd29      	ble.n	8007126 <__exponent+0x68>
 80070d2:	f10d 0307 	add.w	r3, sp, #7
 80070d6:	461d      	mov	r5, r3
 80070d8:	270a      	movs	r7, #10
 80070da:	461a      	mov	r2, r3
 80070dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80070e0:	fb07 1416 	mls	r4, r7, r6, r1
 80070e4:	3430      	adds	r4, #48	@ 0x30
 80070e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070ea:	460c      	mov	r4, r1
 80070ec:	2c63      	cmp	r4, #99	@ 0x63
 80070ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80070f2:	4631      	mov	r1, r6
 80070f4:	dcf1      	bgt.n	80070da <__exponent+0x1c>
 80070f6:	3130      	adds	r1, #48	@ 0x30
 80070f8:	1e94      	subs	r4, r2, #2
 80070fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070fe:	1c41      	adds	r1, r0, #1
 8007100:	4623      	mov	r3, r4
 8007102:	42ab      	cmp	r3, r5
 8007104:	d30a      	bcc.n	800711c <__exponent+0x5e>
 8007106:	f10d 0309 	add.w	r3, sp, #9
 800710a:	1a9b      	subs	r3, r3, r2
 800710c:	42ac      	cmp	r4, r5
 800710e:	bf88      	it	hi
 8007110:	2300      	movhi	r3, #0
 8007112:	3302      	adds	r3, #2
 8007114:	4403      	add	r3, r0
 8007116:	1a18      	subs	r0, r3, r0
 8007118:	b003      	add	sp, #12
 800711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800711c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007120:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007124:	e7ed      	b.n	8007102 <__exponent+0x44>
 8007126:	2330      	movs	r3, #48	@ 0x30
 8007128:	3130      	adds	r1, #48	@ 0x30
 800712a:	7083      	strb	r3, [r0, #2]
 800712c:	70c1      	strb	r1, [r0, #3]
 800712e:	1d03      	adds	r3, r0, #4
 8007130:	e7f1      	b.n	8007116 <__exponent+0x58>
	...

08007134 <_printf_float>:
 8007134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	b08d      	sub	sp, #52	@ 0x34
 800713a:	460c      	mov	r4, r1
 800713c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007140:	4616      	mov	r6, r2
 8007142:	461f      	mov	r7, r3
 8007144:	4605      	mov	r5, r0
 8007146:	f000 ff49 	bl	8007fdc <_localeconv_r>
 800714a:	6803      	ldr	r3, [r0, #0]
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	4618      	mov	r0, r3
 8007150:	f7f9 f89e 	bl	8000290 <strlen>
 8007154:	2300      	movs	r3, #0
 8007156:	930a      	str	r3, [sp, #40]	@ 0x28
 8007158:	f8d8 3000 	ldr.w	r3, [r8]
 800715c:	9005      	str	r0, [sp, #20]
 800715e:	3307      	adds	r3, #7
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	f103 0208 	add.w	r2, r3, #8
 8007168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800716c:	f8d4 b000 	ldr.w	fp, [r4]
 8007170:	f8c8 2000 	str.w	r2, [r8]
 8007174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007178:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007182:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718a:	4b9c      	ldr	r3, [pc, #624]	@ (80073fc <_printf_float+0x2c8>)
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	f7f9 fcdc 	bl	8000b4c <__aeabi_dcmpun>
 8007194:	bb70      	cbnz	r0, 80071f4 <_printf_float+0xc0>
 8007196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719a:	4b98      	ldr	r3, [pc, #608]	@ (80073fc <_printf_float+0x2c8>)
 800719c:	f04f 32ff 	mov.w	r2, #4294967295
 80071a0:	f7f9 fcb6 	bl	8000b10 <__aeabi_dcmple>
 80071a4:	bb30      	cbnz	r0, 80071f4 <_printf_float+0xc0>
 80071a6:	2200      	movs	r2, #0
 80071a8:	2300      	movs	r3, #0
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 fca5 	bl	8000afc <__aeabi_dcmplt>
 80071b2:	b110      	cbz	r0, 80071ba <_printf_float+0x86>
 80071b4:	232d      	movs	r3, #45	@ 0x2d
 80071b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ba:	4a91      	ldr	r2, [pc, #580]	@ (8007400 <_printf_float+0x2cc>)
 80071bc:	4b91      	ldr	r3, [pc, #580]	@ (8007404 <_printf_float+0x2d0>)
 80071be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071c2:	bf8c      	ite	hi
 80071c4:	4690      	movhi	r8, r2
 80071c6:	4698      	movls	r8, r3
 80071c8:	2303      	movs	r3, #3
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	f02b 0304 	bic.w	r3, fp, #4
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	f04f 0900 	mov.w	r9, #0
 80071d6:	9700      	str	r7, [sp, #0]
 80071d8:	4633      	mov	r3, r6
 80071da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f9d2 	bl	8007588 <_printf_common>
 80071e4:	3001      	adds	r0, #1
 80071e6:	f040 808d 	bne.w	8007304 <_printf_float+0x1d0>
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	b00d      	add	sp, #52	@ 0x34
 80071f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f4:	4642      	mov	r2, r8
 80071f6:	464b      	mov	r3, r9
 80071f8:	4640      	mov	r0, r8
 80071fa:	4649      	mov	r1, r9
 80071fc:	f7f9 fca6 	bl	8000b4c <__aeabi_dcmpun>
 8007200:	b140      	cbz	r0, 8007214 <_printf_float+0xe0>
 8007202:	464b      	mov	r3, r9
 8007204:	2b00      	cmp	r3, #0
 8007206:	bfbc      	itt	lt
 8007208:	232d      	movlt	r3, #45	@ 0x2d
 800720a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800720e:	4a7e      	ldr	r2, [pc, #504]	@ (8007408 <_printf_float+0x2d4>)
 8007210:	4b7e      	ldr	r3, [pc, #504]	@ (800740c <_printf_float+0x2d8>)
 8007212:	e7d4      	b.n	80071be <_printf_float+0x8a>
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800721a:	9206      	str	r2, [sp, #24]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	d13b      	bne.n	8007298 <_printf_float+0x164>
 8007220:	2306      	movs	r3, #6
 8007222:	6063      	str	r3, [r4, #4]
 8007224:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007228:	2300      	movs	r3, #0
 800722a:	6022      	str	r2, [r4, #0]
 800722c:	9303      	str	r3, [sp, #12]
 800722e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007230:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007234:	ab09      	add	r3, sp, #36	@ 0x24
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	6861      	ldr	r1, [r4, #4]
 800723a:	ec49 8b10 	vmov	d0, r8, r9
 800723e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007242:	4628      	mov	r0, r5
 8007244:	f7ff fed6 	bl	8006ff4 <__cvt>
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800724c:	2b47      	cmp	r3, #71	@ 0x47
 800724e:	4680      	mov	r8, r0
 8007250:	d129      	bne.n	80072a6 <_printf_float+0x172>
 8007252:	1cc8      	adds	r0, r1, #3
 8007254:	db02      	blt.n	800725c <_printf_float+0x128>
 8007256:	6863      	ldr	r3, [r4, #4]
 8007258:	4299      	cmp	r1, r3
 800725a:	dd41      	ble.n	80072e0 <_printf_float+0x1ac>
 800725c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007260:	fa5f fa8a 	uxtb.w	sl, sl
 8007264:	3901      	subs	r1, #1
 8007266:	4652      	mov	r2, sl
 8007268:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800726c:	9109      	str	r1, [sp, #36]	@ 0x24
 800726e:	f7ff ff26 	bl	80070be <__exponent>
 8007272:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007274:	1813      	adds	r3, r2, r0
 8007276:	2a01      	cmp	r2, #1
 8007278:	4681      	mov	r9, r0
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	dc02      	bgt.n	8007284 <_printf_float+0x150>
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	07d2      	lsls	r2, r2, #31
 8007282:	d501      	bpl.n	8007288 <_printf_float+0x154>
 8007284:	3301      	adds	r3, #1
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0a2      	beq.n	80071d6 <_printf_float+0xa2>
 8007290:	232d      	movs	r3, #45	@ 0x2d
 8007292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007296:	e79e      	b.n	80071d6 <_printf_float+0xa2>
 8007298:	9a06      	ldr	r2, [sp, #24]
 800729a:	2a47      	cmp	r2, #71	@ 0x47
 800729c:	d1c2      	bne.n	8007224 <_printf_float+0xf0>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1c0      	bne.n	8007224 <_printf_float+0xf0>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7bd      	b.n	8007222 <_printf_float+0xee>
 80072a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072aa:	d9db      	bls.n	8007264 <_printf_float+0x130>
 80072ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072b0:	d118      	bne.n	80072e4 <_printf_float+0x1b0>
 80072b2:	2900      	cmp	r1, #0
 80072b4:	6863      	ldr	r3, [r4, #4]
 80072b6:	dd0b      	ble.n	80072d0 <_printf_float+0x19c>
 80072b8:	6121      	str	r1, [r4, #16]
 80072ba:	b913      	cbnz	r3, 80072c2 <_printf_float+0x18e>
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	07d0      	lsls	r0, r2, #31
 80072c0:	d502      	bpl.n	80072c8 <_printf_float+0x194>
 80072c2:	3301      	adds	r3, #1
 80072c4:	440b      	add	r3, r1
 80072c6:	6123      	str	r3, [r4, #16]
 80072c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072ca:	f04f 0900 	mov.w	r9, #0
 80072ce:	e7db      	b.n	8007288 <_printf_float+0x154>
 80072d0:	b913      	cbnz	r3, 80072d8 <_printf_float+0x1a4>
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	07d2      	lsls	r2, r2, #31
 80072d6:	d501      	bpl.n	80072dc <_printf_float+0x1a8>
 80072d8:	3302      	adds	r3, #2
 80072da:	e7f4      	b.n	80072c6 <_printf_float+0x192>
 80072dc:	2301      	movs	r3, #1
 80072de:	e7f2      	b.n	80072c6 <_printf_float+0x192>
 80072e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072e6:	4299      	cmp	r1, r3
 80072e8:	db05      	blt.n	80072f6 <_printf_float+0x1c2>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	6121      	str	r1, [r4, #16]
 80072ee:	07d8      	lsls	r0, r3, #31
 80072f0:	d5ea      	bpl.n	80072c8 <_printf_float+0x194>
 80072f2:	1c4b      	adds	r3, r1, #1
 80072f4:	e7e7      	b.n	80072c6 <_printf_float+0x192>
 80072f6:	2900      	cmp	r1, #0
 80072f8:	bfd4      	ite	le
 80072fa:	f1c1 0202 	rsble	r2, r1, #2
 80072fe:	2201      	movgt	r2, #1
 8007300:	4413      	add	r3, r2
 8007302:	e7e0      	b.n	80072c6 <_printf_float+0x192>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	055a      	lsls	r2, r3, #21
 8007308:	d407      	bmi.n	800731a <_printf_float+0x1e6>
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	4642      	mov	r2, r8
 800730e:	4631      	mov	r1, r6
 8007310:	4628      	mov	r0, r5
 8007312:	47b8      	blx	r7
 8007314:	3001      	adds	r0, #1
 8007316:	d12b      	bne.n	8007370 <_printf_float+0x23c>
 8007318:	e767      	b.n	80071ea <_printf_float+0xb6>
 800731a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800731e:	f240 80dd 	bls.w	80074dc <_printf_float+0x3a8>
 8007322:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007326:	2200      	movs	r2, #0
 8007328:	2300      	movs	r3, #0
 800732a:	f7f9 fbdd 	bl	8000ae8 <__aeabi_dcmpeq>
 800732e:	2800      	cmp	r0, #0
 8007330:	d033      	beq.n	800739a <_printf_float+0x266>
 8007332:	4a37      	ldr	r2, [pc, #220]	@ (8007410 <_printf_float+0x2dc>)
 8007334:	2301      	movs	r3, #1
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f af54 	beq.w	80071ea <_printf_float+0xb6>
 8007342:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007346:	4543      	cmp	r3, r8
 8007348:	db02      	blt.n	8007350 <_printf_float+0x21c>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	07d8      	lsls	r0, r3, #31
 800734e:	d50f      	bpl.n	8007370 <_printf_float+0x23c>
 8007350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007354:	4631      	mov	r1, r6
 8007356:	4628      	mov	r0, r5
 8007358:	47b8      	blx	r7
 800735a:	3001      	adds	r0, #1
 800735c:	f43f af45 	beq.w	80071ea <_printf_float+0xb6>
 8007360:	f04f 0900 	mov.w	r9, #0
 8007364:	f108 38ff 	add.w	r8, r8, #4294967295
 8007368:	f104 0a1a 	add.w	sl, r4, #26
 800736c:	45c8      	cmp	r8, r9
 800736e:	dc09      	bgt.n	8007384 <_printf_float+0x250>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	079b      	lsls	r3, r3, #30
 8007374:	f100 8103 	bmi.w	800757e <_printf_float+0x44a>
 8007378:	68e0      	ldr	r0, [r4, #12]
 800737a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800737c:	4298      	cmp	r0, r3
 800737e:	bfb8      	it	lt
 8007380:	4618      	movlt	r0, r3
 8007382:	e734      	b.n	80071ee <_printf_float+0xba>
 8007384:	2301      	movs	r3, #1
 8007386:	4652      	mov	r2, sl
 8007388:	4631      	mov	r1, r6
 800738a:	4628      	mov	r0, r5
 800738c:	47b8      	blx	r7
 800738e:	3001      	adds	r0, #1
 8007390:	f43f af2b 	beq.w	80071ea <_printf_float+0xb6>
 8007394:	f109 0901 	add.w	r9, r9, #1
 8007398:	e7e8      	b.n	800736c <_printf_float+0x238>
 800739a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	dc39      	bgt.n	8007414 <_printf_float+0x2e0>
 80073a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007410 <_printf_float+0x2dc>)
 80073a2:	2301      	movs	r3, #1
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b8      	blx	r7
 80073aa:	3001      	adds	r0, #1
 80073ac:	f43f af1d 	beq.w	80071ea <_printf_float+0xb6>
 80073b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073b4:	ea59 0303 	orrs.w	r3, r9, r3
 80073b8:	d102      	bne.n	80073c0 <_printf_float+0x28c>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	07d9      	lsls	r1, r3, #31
 80073be:	d5d7      	bpl.n	8007370 <_printf_float+0x23c>
 80073c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f af0d 	beq.w	80071ea <_printf_float+0xb6>
 80073d0:	f04f 0a00 	mov.w	sl, #0
 80073d4:	f104 0b1a 	add.w	fp, r4, #26
 80073d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073da:	425b      	negs	r3, r3
 80073dc:	4553      	cmp	r3, sl
 80073de:	dc01      	bgt.n	80073e4 <_printf_float+0x2b0>
 80073e0:	464b      	mov	r3, r9
 80073e2:	e793      	b.n	800730c <_printf_float+0x1d8>
 80073e4:	2301      	movs	r3, #1
 80073e6:	465a      	mov	r2, fp
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	f43f aefb 	beq.w	80071ea <_printf_float+0xb6>
 80073f4:	f10a 0a01 	add.w	sl, sl, #1
 80073f8:	e7ee      	b.n	80073d8 <_printf_float+0x2a4>
 80073fa:	bf00      	nop
 80073fc:	7fefffff 	.word	0x7fefffff
 8007400:	0800c028 	.word	0x0800c028
 8007404:	0800c024 	.word	0x0800c024
 8007408:	0800c030 	.word	0x0800c030
 800740c:	0800c02c 	.word	0x0800c02c
 8007410:	0800c16a 	.word	0x0800c16a
 8007414:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007416:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800741a:	4553      	cmp	r3, sl
 800741c:	bfa8      	it	ge
 800741e:	4653      	movge	r3, sl
 8007420:	2b00      	cmp	r3, #0
 8007422:	4699      	mov	r9, r3
 8007424:	dc36      	bgt.n	8007494 <_printf_float+0x360>
 8007426:	f04f 0b00 	mov.w	fp, #0
 800742a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800742e:	f104 021a 	add.w	r2, r4, #26
 8007432:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007434:	9306      	str	r3, [sp, #24]
 8007436:	eba3 0309 	sub.w	r3, r3, r9
 800743a:	455b      	cmp	r3, fp
 800743c:	dc31      	bgt.n	80074a2 <_printf_float+0x36e>
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	459a      	cmp	sl, r3
 8007442:	dc3a      	bgt.n	80074ba <_printf_float+0x386>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	07da      	lsls	r2, r3, #31
 8007448:	d437      	bmi.n	80074ba <_printf_float+0x386>
 800744a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744c:	ebaa 0903 	sub.w	r9, sl, r3
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	ebaa 0303 	sub.w	r3, sl, r3
 8007456:	4599      	cmp	r9, r3
 8007458:	bfa8      	it	ge
 800745a:	4699      	movge	r9, r3
 800745c:	f1b9 0f00 	cmp.w	r9, #0
 8007460:	dc33      	bgt.n	80074ca <_printf_float+0x396>
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800746a:	f104 0b1a 	add.w	fp, r4, #26
 800746e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007470:	ebaa 0303 	sub.w	r3, sl, r3
 8007474:	eba3 0309 	sub.w	r3, r3, r9
 8007478:	4543      	cmp	r3, r8
 800747a:	f77f af79 	ble.w	8007370 <_printf_float+0x23c>
 800747e:	2301      	movs	r3, #1
 8007480:	465a      	mov	r2, fp
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	f43f aeae 	beq.w	80071ea <_printf_float+0xb6>
 800748e:	f108 0801 	add.w	r8, r8, #1
 8007492:	e7ec      	b.n	800746e <_printf_float+0x33a>
 8007494:	4642      	mov	r2, r8
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	d1c2      	bne.n	8007426 <_printf_float+0x2f2>
 80074a0:	e6a3      	b.n	80071ea <_printf_float+0xb6>
 80074a2:	2301      	movs	r3, #1
 80074a4:	4631      	mov	r1, r6
 80074a6:	4628      	mov	r0, r5
 80074a8:	9206      	str	r2, [sp, #24]
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	f43f ae9c 	beq.w	80071ea <_printf_float+0xb6>
 80074b2:	9a06      	ldr	r2, [sp, #24]
 80074b4:	f10b 0b01 	add.w	fp, fp, #1
 80074b8:	e7bb      	b.n	8007432 <_printf_float+0x2fe>
 80074ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	d1c0      	bne.n	800744a <_printf_float+0x316>
 80074c8:	e68f      	b.n	80071ea <_printf_float+0xb6>
 80074ca:	9a06      	ldr	r2, [sp, #24]
 80074cc:	464b      	mov	r3, r9
 80074ce:	4442      	add	r2, r8
 80074d0:	4631      	mov	r1, r6
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	d1c3      	bne.n	8007462 <_printf_float+0x32e>
 80074da:	e686      	b.n	80071ea <_printf_float+0xb6>
 80074dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074e0:	f1ba 0f01 	cmp.w	sl, #1
 80074e4:	dc01      	bgt.n	80074ea <_printf_float+0x3b6>
 80074e6:	07db      	lsls	r3, r3, #31
 80074e8:	d536      	bpl.n	8007558 <_printf_float+0x424>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4642      	mov	r2, r8
 80074ee:	4631      	mov	r1, r6
 80074f0:	4628      	mov	r0, r5
 80074f2:	47b8      	blx	r7
 80074f4:	3001      	adds	r0, #1
 80074f6:	f43f ae78 	beq.w	80071ea <_printf_float+0xb6>
 80074fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fe:	4631      	mov	r1, r6
 8007500:	4628      	mov	r0, r5
 8007502:	47b8      	blx	r7
 8007504:	3001      	adds	r0, #1
 8007506:	f43f ae70 	beq.w	80071ea <_printf_float+0xb6>
 800750a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007516:	f7f9 fae7 	bl	8000ae8 <__aeabi_dcmpeq>
 800751a:	b9c0      	cbnz	r0, 800754e <_printf_float+0x41a>
 800751c:	4653      	mov	r3, sl
 800751e:	f108 0201 	add.w	r2, r8, #1
 8007522:	4631      	mov	r1, r6
 8007524:	4628      	mov	r0, r5
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	d10c      	bne.n	8007546 <_printf_float+0x412>
 800752c:	e65d      	b.n	80071ea <_printf_float+0xb6>
 800752e:	2301      	movs	r3, #1
 8007530:	465a      	mov	r2, fp
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	f43f ae56 	beq.w	80071ea <_printf_float+0xb6>
 800753e:	f108 0801 	add.w	r8, r8, #1
 8007542:	45d0      	cmp	r8, sl
 8007544:	dbf3      	blt.n	800752e <_printf_float+0x3fa>
 8007546:	464b      	mov	r3, r9
 8007548:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800754c:	e6df      	b.n	800730e <_printf_float+0x1da>
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	f104 0b1a 	add.w	fp, r4, #26
 8007556:	e7f4      	b.n	8007542 <_printf_float+0x40e>
 8007558:	2301      	movs	r3, #1
 800755a:	4642      	mov	r2, r8
 800755c:	e7e1      	b.n	8007522 <_printf_float+0x3ee>
 800755e:	2301      	movs	r3, #1
 8007560:	464a      	mov	r2, r9
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	f43f ae3e 	beq.w	80071ea <_printf_float+0xb6>
 800756e:	f108 0801 	add.w	r8, r8, #1
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007576:	1a5b      	subs	r3, r3, r1
 8007578:	4543      	cmp	r3, r8
 800757a:	dcf0      	bgt.n	800755e <_printf_float+0x42a>
 800757c:	e6fc      	b.n	8007378 <_printf_float+0x244>
 800757e:	f04f 0800 	mov.w	r8, #0
 8007582:	f104 0919 	add.w	r9, r4, #25
 8007586:	e7f4      	b.n	8007572 <_printf_float+0x43e>

08007588 <_printf_common>:
 8007588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	4616      	mov	r6, r2
 800758e:	4698      	mov	r8, r3
 8007590:	688a      	ldr	r2, [r1, #8]
 8007592:	690b      	ldr	r3, [r1, #16]
 8007594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007598:	4293      	cmp	r3, r2
 800759a:	bfb8      	it	lt
 800759c:	4613      	movlt	r3, r2
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075a4:	4607      	mov	r7, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	b10a      	cbz	r2, 80075ae <_printf_common+0x26>
 80075aa:	3301      	adds	r3, #1
 80075ac:	6033      	str	r3, [r6, #0]
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	0699      	lsls	r1, r3, #26
 80075b2:	bf42      	ittt	mi
 80075b4:	6833      	ldrmi	r3, [r6, #0]
 80075b6:	3302      	addmi	r3, #2
 80075b8:	6033      	strmi	r3, [r6, #0]
 80075ba:	6825      	ldr	r5, [r4, #0]
 80075bc:	f015 0506 	ands.w	r5, r5, #6
 80075c0:	d106      	bne.n	80075d0 <_printf_common+0x48>
 80075c2:	f104 0a19 	add.w	sl, r4, #25
 80075c6:	68e3      	ldr	r3, [r4, #12]
 80075c8:	6832      	ldr	r2, [r6, #0]
 80075ca:	1a9b      	subs	r3, r3, r2
 80075cc:	42ab      	cmp	r3, r5
 80075ce:	dc26      	bgt.n	800761e <_printf_common+0x96>
 80075d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075d4:	6822      	ldr	r2, [r4, #0]
 80075d6:	3b00      	subs	r3, #0
 80075d8:	bf18      	it	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	0692      	lsls	r2, r2, #26
 80075de:	d42b      	bmi.n	8007638 <_printf_common+0xb0>
 80075e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075e4:	4641      	mov	r1, r8
 80075e6:	4638      	mov	r0, r7
 80075e8:	47c8      	blx	r9
 80075ea:	3001      	adds	r0, #1
 80075ec:	d01e      	beq.n	800762c <_printf_common+0xa4>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	f003 0306 	and.w	r3, r3, #6
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	bf02      	ittt	eq
 80075fa:	68e5      	ldreq	r5, [r4, #12]
 80075fc:	6833      	ldreq	r3, [r6, #0]
 80075fe:	1aed      	subeq	r5, r5, r3
 8007600:	68a3      	ldr	r3, [r4, #8]
 8007602:	bf0c      	ite	eq
 8007604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007608:	2500      	movne	r5, #0
 800760a:	4293      	cmp	r3, r2
 800760c:	bfc4      	itt	gt
 800760e:	1a9b      	subgt	r3, r3, r2
 8007610:	18ed      	addgt	r5, r5, r3
 8007612:	2600      	movs	r6, #0
 8007614:	341a      	adds	r4, #26
 8007616:	42b5      	cmp	r5, r6
 8007618:	d11a      	bne.n	8007650 <_printf_common+0xc8>
 800761a:	2000      	movs	r0, #0
 800761c:	e008      	b.n	8007630 <_printf_common+0xa8>
 800761e:	2301      	movs	r3, #1
 8007620:	4652      	mov	r2, sl
 8007622:	4641      	mov	r1, r8
 8007624:	4638      	mov	r0, r7
 8007626:	47c8      	blx	r9
 8007628:	3001      	adds	r0, #1
 800762a:	d103      	bne.n	8007634 <_printf_common+0xac>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007634:	3501      	adds	r5, #1
 8007636:	e7c6      	b.n	80075c6 <_printf_common+0x3e>
 8007638:	18e1      	adds	r1, r4, r3
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	2030      	movs	r0, #48	@ 0x30
 800763e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007642:	4422      	add	r2, r4
 8007644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800764c:	3302      	adds	r3, #2
 800764e:	e7c7      	b.n	80075e0 <_printf_common+0x58>
 8007650:	2301      	movs	r3, #1
 8007652:	4622      	mov	r2, r4
 8007654:	4641      	mov	r1, r8
 8007656:	4638      	mov	r0, r7
 8007658:	47c8      	blx	r9
 800765a:	3001      	adds	r0, #1
 800765c:	d0e6      	beq.n	800762c <_printf_common+0xa4>
 800765e:	3601      	adds	r6, #1
 8007660:	e7d9      	b.n	8007616 <_printf_common+0x8e>
	...

08007664 <_printf_i>:
 8007664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	7e0f      	ldrb	r7, [r1, #24]
 800766a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800766c:	2f78      	cmp	r7, #120	@ 0x78
 800766e:	4691      	mov	r9, r2
 8007670:	4680      	mov	r8, r0
 8007672:	460c      	mov	r4, r1
 8007674:	469a      	mov	sl, r3
 8007676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800767a:	d807      	bhi.n	800768c <_printf_i+0x28>
 800767c:	2f62      	cmp	r7, #98	@ 0x62
 800767e:	d80a      	bhi.n	8007696 <_printf_i+0x32>
 8007680:	2f00      	cmp	r7, #0
 8007682:	f000 80d1 	beq.w	8007828 <_printf_i+0x1c4>
 8007686:	2f58      	cmp	r7, #88	@ 0x58
 8007688:	f000 80b8 	beq.w	80077fc <_printf_i+0x198>
 800768c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007694:	e03a      	b.n	800770c <_printf_i+0xa8>
 8007696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800769a:	2b15      	cmp	r3, #21
 800769c:	d8f6      	bhi.n	800768c <_printf_i+0x28>
 800769e:	a101      	add	r1, pc, #4	@ (adr r1, 80076a4 <_printf_i+0x40>)
 80076a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076a4:	080076fd 	.word	0x080076fd
 80076a8:	08007711 	.word	0x08007711
 80076ac:	0800768d 	.word	0x0800768d
 80076b0:	0800768d 	.word	0x0800768d
 80076b4:	0800768d 	.word	0x0800768d
 80076b8:	0800768d 	.word	0x0800768d
 80076bc:	08007711 	.word	0x08007711
 80076c0:	0800768d 	.word	0x0800768d
 80076c4:	0800768d 	.word	0x0800768d
 80076c8:	0800768d 	.word	0x0800768d
 80076cc:	0800768d 	.word	0x0800768d
 80076d0:	0800780f 	.word	0x0800780f
 80076d4:	0800773b 	.word	0x0800773b
 80076d8:	080077c9 	.word	0x080077c9
 80076dc:	0800768d 	.word	0x0800768d
 80076e0:	0800768d 	.word	0x0800768d
 80076e4:	08007831 	.word	0x08007831
 80076e8:	0800768d 	.word	0x0800768d
 80076ec:	0800773b 	.word	0x0800773b
 80076f0:	0800768d 	.word	0x0800768d
 80076f4:	0800768d 	.word	0x0800768d
 80076f8:	080077d1 	.word	0x080077d1
 80076fc:	6833      	ldr	r3, [r6, #0]
 80076fe:	1d1a      	adds	r2, r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6032      	str	r2, [r6, #0]
 8007704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800770c:	2301      	movs	r3, #1
 800770e:	e09c      	b.n	800784a <_printf_i+0x1e6>
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	6820      	ldr	r0, [r4, #0]
 8007714:	1d19      	adds	r1, r3, #4
 8007716:	6031      	str	r1, [r6, #0]
 8007718:	0606      	lsls	r6, r0, #24
 800771a:	d501      	bpl.n	8007720 <_printf_i+0xbc>
 800771c:	681d      	ldr	r5, [r3, #0]
 800771e:	e003      	b.n	8007728 <_printf_i+0xc4>
 8007720:	0645      	lsls	r5, r0, #25
 8007722:	d5fb      	bpl.n	800771c <_printf_i+0xb8>
 8007724:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007728:	2d00      	cmp	r5, #0
 800772a:	da03      	bge.n	8007734 <_printf_i+0xd0>
 800772c:	232d      	movs	r3, #45	@ 0x2d
 800772e:	426d      	negs	r5, r5
 8007730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007734:	4858      	ldr	r0, [pc, #352]	@ (8007898 <_printf_i+0x234>)
 8007736:	230a      	movs	r3, #10
 8007738:	e011      	b.n	800775e <_printf_i+0xfa>
 800773a:	6821      	ldr	r1, [r4, #0]
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	0608      	lsls	r0, r1, #24
 8007740:	f853 5b04 	ldr.w	r5, [r3], #4
 8007744:	d402      	bmi.n	800774c <_printf_i+0xe8>
 8007746:	0649      	lsls	r1, r1, #25
 8007748:	bf48      	it	mi
 800774a:	b2ad      	uxthmi	r5, r5
 800774c:	2f6f      	cmp	r7, #111	@ 0x6f
 800774e:	4852      	ldr	r0, [pc, #328]	@ (8007898 <_printf_i+0x234>)
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	bf14      	ite	ne
 8007754:	230a      	movne	r3, #10
 8007756:	2308      	moveq	r3, #8
 8007758:	2100      	movs	r1, #0
 800775a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800775e:	6866      	ldr	r6, [r4, #4]
 8007760:	60a6      	str	r6, [r4, #8]
 8007762:	2e00      	cmp	r6, #0
 8007764:	db05      	blt.n	8007772 <_printf_i+0x10e>
 8007766:	6821      	ldr	r1, [r4, #0]
 8007768:	432e      	orrs	r6, r5
 800776a:	f021 0104 	bic.w	r1, r1, #4
 800776e:	6021      	str	r1, [r4, #0]
 8007770:	d04b      	beq.n	800780a <_printf_i+0x1a6>
 8007772:	4616      	mov	r6, r2
 8007774:	fbb5 f1f3 	udiv	r1, r5, r3
 8007778:	fb03 5711 	mls	r7, r3, r1, r5
 800777c:	5dc7      	ldrb	r7, [r0, r7]
 800777e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007782:	462f      	mov	r7, r5
 8007784:	42bb      	cmp	r3, r7
 8007786:	460d      	mov	r5, r1
 8007788:	d9f4      	bls.n	8007774 <_printf_i+0x110>
 800778a:	2b08      	cmp	r3, #8
 800778c:	d10b      	bne.n	80077a6 <_printf_i+0x142>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	07df      	lsls	r7, r3, #31
 8007792:	d508      	bpl.n	80077a6 <_printf_i+0x142>
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	6861      	ldr	r1, [r4, #4]
 8007798:	4299      	cmp	r1, r3
 800779a:	bfde      	ittt	le
 800779c:	2330      	movle	r3, #48	@ 0x30
 800779e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077a6:	1b92      	subs	r2, r2, r6
 80077a8:	6122      	str	r2, [r4, #16]
 80077aa:	f8cd a000 	str.w	sl, [sp]
 80077ae:	464b      	mov	r3, r9
 80077b0:	aa03      	add	r2, sp, #12
 80077b2:	4621      	mov	r1, r4
 80077b4:	4640      	mov	r0, r8
 80077b6:	f7ff fee7 	bl	8007588 <_printf_common>
 80077ba:	3001      	adds	r0, #1
 80077bc:	d14a      	bne.n	8007854 <_printf_i+0x1f0>
 80077be:	f04f 30ff 	mov.w	r0, #4294967295
 80077c2:	b004      	add	sp, #16
 80077c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	f043 0320 	orr.w	r3, r3, #32
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	4832      	ldr	r0, [pc, #200]	@ (800789c <_printf_i+0x238>)
 80077d2:	2778      	movs	r7, #120	@ 0x78
 80077d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	6831      	ldr	r1, [r6, #0]
 80077dc:	061f      	lsls	r7, r3, #24
 80077de:	f851 5b04 	ldr.w	r5, [r1], #4
 80077e2:	d402      	bmi.n	80077ea <_printf_i+0x186>
 80077e4:	065f      	lsls	r7, r3, #25
 80077e6:	bf48      	it	mi
 80077e8:	b2ad      	uxthmi	r5, r5
 80077ea:	6031      	str	r1, [r6, #0]
 80077ec:	07d9      	lsls	r1, r3, #31
 80077ee:	bf44      	itt	mi
 80077f0:	f043 0320 	orrmi.w	r3, r3, #32
 80077f4:	6023      	strmi	r3, [r4, #0]
 80077f6:	b11d      	cbz	r5, 8007800 <_printf_i+0x19c>
 80077f8:	2310      	movs	r3, #16
 80077fa:	e7ad      	b.n	8007758 <_printf_i+0xf4>
 80077fc:	4826      	ldr	r0, [pc, #152]	@ (8007898 <_printf_i+0x234>)
 80077fe:	e7e9      	b.n	80077d4 <_printf_i+0x170>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	f023 0320 	bic.w	r3, r3, #32
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	e7f6      	b.n	80077f8 <_printf_i+0x194>
 800780a:	4616      	mov	r6, r2
 800780c:	e7bd      	b.n	800778a <_printf_i+0x126>
 800780e:	6833      	ldr	r3, [r6, #0]
 8007810:	6825      	ldr	r5, [r4, #0]
 8007812:	6961      	ldr	r1, [r4, #20]
 8007814:	1d18      	adds	r0, r3, #4
 8007816:	6030      	str	r0, [r6, #0]
 8007818:	062e      	lsls	r6, r5, #24
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	d501      	bpl.n	8007822 <_printf_i+0x1be>
 800781e:	6019      	str	r1, [r3, #0]
 8007820:	e002      	b.n	8007828 <_printf_i+0x1c4>
 8007822:	0668      	lsls	r0, r5, #25
 8007824:	d5fb      	bpl.n	800781e <_printf_i+0x1ba>
 8007826:	8019      	strh	r1, [r3, #0]
 8007828:	2300      	movs	r3, #0
 800782a:	6123      	str	r3, [r4, #16]
 800782c:	4616      	mov	r6, r2
 800782e:	e7bc      	b.n	80077aa <_printf_i+0x146>
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	6032      	str	r2, [r6, #0]
 8007836:	681e      	ldr	r6, [r3, #0]
 8007838:	6862      	ldr	r2, [r4, #4]
 800783a:	2100      	movs	r1, #0
 800783c:	4630      	mov	r0, r6
 800783e:	f7f8 fcd7 	bl	80001f0 <memchr>
 8007842:	b108      	cbz	r0, 8007848 <_printf_i+0x1e4>
 8007844:	1b80      	subs	r0, r0, r6
 8007846:	6060      	str	r0, [r4, #4]
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	2300      	movs	r3, #0
 800784e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007852:	e7aa      	b.n	80077aa <_printf_i+0x146>
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	4632      	mov	r2, r6
 8007858:	4649      	mov	r1, r9
 800785a:	4640      	mov	r0, r8
 800785c:	47d0      	blx	sl
 800785e:	3001      	adds	r0, #1
 8007860:	d0ad      	beq.n	80077be <_printf_i+0x15a>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	079b      	lsls	r3, r3, #30
 8007866:	d413      	bmi.n	8007890 <_printf_i+0x22c>
 8007868:	68e0      	ldr	r0, [r4, #12]
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	4298      	cmp	r0, r3
 800786e:	bfb8      	it	lt
 8007870:	4618      	movlt	r0, r3
 8007872:	e7a6      	b.n	80077c2 <_printf_i+0x15e>
 8007874:	2301      	movs	r3, #1
 8007876:	4632      	mov	r2, r6
 8007878:	4649      	mov	r1, r9
 800787a:	4640      	mov	r0, r8
 800787c:	47d0      	blx	sl
 800787e:	3001      	adds	r0, #1
 8007880:	d09d      	beq.n	80077be <_printf_i+0x15a>
 8007882:	3501      	adds	r5, #1
 8007884:	68e3      	ldr	r3, [r4, #12]
 8007886:	9903      	ldr	r1, [sp, #12]
 8007888:	1a5b      	subs	r3, r3, r1
 800788a:	42ab      	cmp	r3, r5
 800788c:	dcf2      	bgt.n	8007874 <_printf_i+0x210>
 800788e:	e7eb      	b.n	8007868 <_printf_i+0x204>
 8007890:	2500      	movs	r5, #0
 8007892:	f104 0619 	add.w	r6, r4, #25
 8007896:	e7f5      	b.n	8007884 <_printf_i+0x220>
 8007898:	0800c034 	.word	0x0800c034
 800789c:	0800c045 	.word	0x0800c045

080078a0 <_scanf_float>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	b087      	sub	sp, #28
 80078a6:	4691      	mov	r9, r2
 80078a8:	9303      	str	r3, [sp, #12]
 80078aa:	688b      	ldr	r3, [r1, #8]
 80078ac:	1e5a      	subs	r2, r3, #1
 80078ae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078b2:	bf81      	itttt	hi
 80078b4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80078b8:	eb03 0b05 	addhi.w	fp, r3, r5
 80078bc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80078c0:	608b      	strhi	r3, [r1, #8]
 80078c2:	680b      	ldr	r3, [r1, #0]
 80078c4:	460a      	mov	r2, r1
 80078c6:	f04f 0500 	mov.w	r5, #0
 80078ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80078ce:	f842 3b1c 	str.w	r3, [r2], #28
 80078d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078d6:	4680      	mov	r8, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	bf98      	it	ls
 80078dc:	f04f 0b00 	movls.w	fp, #0
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	4616      	mov	r6, r2
 80078e4:	46aa      	mov	sl, r5
 80078e6:	462f      	mov	r7, r5
 80078e8:	9502      	str	r5, [sp, #8]
 80078ea:	68a2      	ldr	r2, [r4, #8]
 80078ec:	b15a      	cbz	r2, 8007906 <_scanf_float+0x66>
 80078ee:	f8d9 3000 	ldr.w	r3, [r9]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b4e      	cmp	r3, #78	@ 0x4e
 80078f6:	d863      	bhi.n	80079c0 <_scanf_float+0x120>
 80078f8:	2b40      	cmp	r3, #64	@ 0x40
 80078fa:	d83b      	bhi.n	8007974 <_scanf_float+0xd4>
 80078fc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007900:	b2c8      	uxtb	r0, r1
 8007902:	280e      	cmp	r0, #14
 8007904:	d939      	bls.n	800797a <_scanf_float+0xda>
 8007906:	b11f      	cbz	r7, 8007910 <_scanf_float+0x70>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800790e:	6023      	str	r3, [r4, #0]
 8007910:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007914:	f1ba 0f01 	cmp.w	sl, #1
 8007918:	f200 8114 	bhi.w	8007b44 <_scanf_float+0x2a4>
 800791c:	9b01      	ldr	r3, [sp, #4]
 800791e:	429e      	cmp	r6, r3
 8007920:	f200 8105 	bhi.w	8007b2e <_scanf_float+0x28e>
 8007924:	2001      	movs	r0, #1
 8007926:	b007      	add	sp, #28
 8007928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007930:	2a0d      	cmp	r2, #13
 8007932:	d8e8      	bhi.n	8007906 <_scanf_float+0x66>
 8007934:	a101      	add	r1, pc, #4	@ (adr r1, 800793c <_scanf_float+0x9c>)
 8007936:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800793a:	bf00      	nop
 800793c:	08007a85 	.word	0x08007a85
 8007940:	08007907 	.word	0x08007907
 8007944:	08007907 	.word	0x08007907
 8007948:	08007907 	.word	0x08007907
 800794c:	08007ae1 	.word	0x08007ae1
 8007950:	08007abb 	.word	0x08007abb
 8007954:	08007907 	.word	0x08007907
 8007958:	08007907 	.word	0x08007907
 800795c:	08007a93 	.word	0x08007a93
 8007960:	08007907 	.word	0x08007907
 8007964:	08007907 	.word	0x08007907
 8007968:	08007907 	.word	0x08007907
 800796c:	08007907 	.word	0x08007907
 8007970:	08007a4f 	.word	0x08007a4f
 8007974:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007978:	e7da      	b.n	8007930 <_scanf_float+0x90>
 800797a:	290e      	cmp	r1, #14
 800797c:	d8c3      	bhi.n	8007906 <_scanf_float+0x66>
 800797e:	a001      	add	r0, pc, #4	@ (adr r0, 8007984 <_scanf_float+0xe4>)
 8007980:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007984:	08007a3f 	.word	0x08007a3f
 8007988:	08007907 	.word	0x08007907
 800798c:	08007a3f 	.word	0x08007a3f
 8007990:	08007acf 	.word	0x08007acf
 8007994:	08007907 	.word	0x08007907
 8007998:	080079e1 	.word	0x080079e1
 800799c:	08007a25 	.word	0x08007a25
 80079a0:	08007a25 	.word	0x08007a25
 80079a4:	08007a25 	.word	0x08007a25
 80079a8:	08007a25 	.word	0x08007a25
 80079ac:	08007a25 	.word	0x08007a25
 80079b0:	08007a25 	.word	0x08007a25
 80079b4:	08007a25 	.word	0x08007a25
 80079b8:	08007a25 	.word	0x08007a25
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80079c2:	d809      	bhi.n	80079d8 <_scanf_float+0x138>
 80079c4:	2b60      	cmp	r3, #96	@ 0x60
 80079c6:	d8b1      	bhi.n	800792c <_scanf_float+0x8c>
 80079c8:	2b54      	cmp	r3, #84	@ 0x54
 80079ca:	d07b      	beq.n	8007ac4 <_scanf_float+0x224>
 80079cc:	2b59      	cmp	r3, #89	@ 0x59
 80079ce:	d19a      	bne.n	8007906 <_scanf_float+0x66>
 80079d0:	2d07      	cmp	r5, #7
 80079d2:	d198      	bne.n	8007906 <_scanf_float+0x66>
 80079d4:	2508      	movs	r5, #8
 80079d6:	e02f      	b.n	8007a38 <_scanf_float+0x198>
 80079d8:	2b74      	cmp	r3, #116	@ 0x74
 80079da:	d073      	beq.n	8007ac4 <_scanf_float+0x224>
 80079dc:	2b79      	cmp	r3, #121	@ 0x79
 80079de:	e7f6      	b.n	80079ce <_scanf_float+0x12e>
 80079e0:	6821      	ldr	r1, [r4, #0]
 80079e2:	05c8      	lsls	r0, r1, #23
 80079e4:	d51e      	bpl.n	8007a24 <_scanf_float+0x184>
 80079e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80079ea:	6021      	str	r1, [r4, #0]
 80079ec:	3701      	adds	r7, #1
 80079ee:	f1bb 0f00 	cmp.w	fp, #0
 80079f2:	d003      	beq.n	80079fc <_scanf_float+0x15c>
 80079f4:	3201      	adds	r2, #1
 80079f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079fa:	60a2      	str	r2, [r4, #8]
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	3301      	adds	r3, #1
 8007a06:	6123      	str	r3, [r4, #16]
 8007a08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f8c9 3004 	str.w	r3, [r9, #4]
 8007a14:	f340 8082 	ble.w	8007b1c <_scanf_float+0x27c>
 8007a18:	f8d9 3000 	ldr.w	r3, [r9]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	f8c9 3000 	str.w	r3, [r9]
 8007a22:	e762      	b.n	80078ea <_scanf_float+0x4a>
 8007a24:	eb1a 0105 	adds.w	r1, sl, r5
 8007a28:	f47f af6d 	bne.w	8007906 <_scanf_float+0x66>
 8007a2c:	6822      	ldr	r2, [r4, #0]
 8007a2e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007a32:	6022      	str	r2, [r4, #0]
 8007a34:	460d      	mov	r5, r1
 8007a36:	468a      	mov	sl, r1
 8007a38:	f806 3b01 	strb.w	r3, [r6], #1
 8007a3c:	e7de      	b.n	80079fc <_scanf_float+0x15c>
 8007a3e:	6822      	ldr	r2, [r4, #0]
 8007a40:	0610      	lsls	r0, r2, #24
 8007a42:	f57f af60 	bpl.w	8007906 <_scanf_float+0x66>
 8007a46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	e7f4      	b.n	8007a38 <_scanf_float+0x198>
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	d10c      	bne.n	8007a6e <_scanf_float+0x1ce>
 8007a54:	b977      	cbnz	r7, 8007a74 <_scanf_float+0x1d4>
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a60:	d108      	bne.n	8007a74 <_scanf_float+0x1d4>
 8007a62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a66:	6022      	str	r2, [r4, #0]
 8007a68:	f04f 0a01 	mov.w	sl, #1
 8007a6c:	e7e4      	b.n	8007a38 <_scanf_float+0x198>
 8007a6e:	f1ba 0f02 	cmp.w	sl, #2
 8007a72:	d050      	beq.n	8007b16 <_scanf_float+0x276>
 8007a74:	2d01      	cmp	r5, #1
 8007a76:	d002      	beq.n	8007a7e <_scanf_float+0x1de>
 8007a78:	2d04      	cmp	r5, #4
 8007a7a:	f47f af44 	bne.w	8007906 <_scanf_float+0x66>
 8007a7e:	3501      	adds	r5, #1
 8007a80:	b2ed      	uxtb	r5, r5
 8007a82:	e7d9      	b.n	8007a38 <_scanf_float+0x198>
 8007a84:	f1ba 0f01 	cmp.w	sl, #1
 8007a88:	f47f af3d 	bne.w	8007906 <_scanf_float+0x66>
 8007a8c:	f04f 0a02 	mov.w	sl, #2
 8007a90:	e7d2      	b.n	8007a38 <_scanf_float+0x198>
 8007a92:	b975      	cbnz	r5, 8007ab2 <_scanf_float+0x212>
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	f47f af37 	bne.w	8007908 <_scanf_float+0x68>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007aa0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007aa4:	f040 8103 	bne.w	8007cae <_scanf_float+0x40e>
 8007aa8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007aac:	6022      	str	r2, [r4, #0]
 8007aae:	2501      	movs	r5, #1
 8007ab0:	e7c2      	b.n	8007a38 <_scanf_float+0x198>
 8007ab2:	2d03      	cmp	r5, #3
 8007ab4:	d0e3      	beq.n	8007a7e <_scanf_float+0x1de>
 8007ab6:	2d05      	cmp	r5, #5
 8007ab8:	e7df      	b.n	8007a7a <_scanf_float+0x1da>
 8007aba:	2d02      	cmp	r5, #2
 8007abc:	f47f af23 	bne.w	8007906 <_scanf_float+0x66>
 8007ac0:	2503      	movs	r5, #3
 8007ac2:	e7b9      	b.n	8007a38 <_scanf_float+0x198>
 8007ac4:	2d06      	cmp	r5, #6
 8007ac6:	f47f af1e 	bne.w	8007906 <_scanf_float+0x66>
 8007aca:	2507      	movs	r5, #7
 8007acc:	e7b4      	b.n	8007a38 <_scanf_float+0x198>
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	0591      	lsls	r1, r2, #22
 8007ad2:	f57f af18 	bpl.w	8007906 <_scanf_float+0x66>
 8007ad6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007ada:	6022      	str	r2, [r4, #0]
 8007adc:	9702      	str	r7, [sp, #8]
 8007ade:	e7ab      	b.n	8007a38 <_scanf_float+0x198>
 8007ae0:	6822      	ldr	r2, [r4, #0]
 8007ae2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007ae6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007aea:	d005      	beq.n	8007af8 <_scanf_float+0x258>
 8007aec:	0550      	lsls	r0, r2, #21
 8007aee:	f57f af0a 	bpl.w	8007906 <_scanf_float+0x66>
 8007af2:	2f00      	cmp	r7, #0
 8007af4:	f000 80db 	beq.w	8007cae <_scanf_float+0x40e>
 8007af8:	0591      	lsls	r1, r2, #22
 8007afa:	bf58      	it	pl
 8007afc:	9902      	ldrpl	r1, [sp, #8]
 8007afe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b02:	bf58      	it	pl
 8007b04:	1a79      	subpl	r1, r7, r1
 8007b06:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b0a:	bf58      	it	pl
 8007b0c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b10:	6022      	str	r2, [r4, #0]
 8007b12:	2700      	movs	r7, #0
 8007b14:	e790      	b.n	8007a38 <_scanf_float+0x198>
 8007b16:	f04f 0a03 	mov.w	sl, #3
 8007b1a:	e78d      	b.n	8007a38 <_scanf_float+0x198>
 8007b1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b20:	4649      	mov	r1, r9
 8007b22:	4640      	mov	r0, r8
 8007b24:	4798      	blx	r3
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f43f aedf 	beq.w	80078ea <_scanf_float+0x4a>
 8007b2c:	e6eb      	b.n	8007906 <_scanf_float+0x66>
 8007b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b36:	464a      	mov	r2, r9
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4798      	blx	r3
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	6123      	str	r3, [r4, #16]
 8007b42:	e6eb      	b.n	800791c <_scanf_float+0x7c>
 8007b44:	1e6b      	subs	r3, r5, #1
 8007b46:	2b06      	cmp	r3, #6
 8007b48:	d824      	bhi.n	8007b94 <_scanf_float+0x2f4>
 8007b4a:	2d02      	cmp	r5, #2
 8007b4c:	d836      	bhi.n	8007bbc <_scanf_float+0x31c>
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	429e      	cmp	r6, r3
 8007b52:	f67f aee7 	bls.w	8007924 <_scanf_float+0x84>
 8007b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b5e:	464a      	mov	r2, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	4798      	blx	r3
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	e7f0      	b.n	8007b4e <_scanf_float+0x2ae>
 8007b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b74:	464a      	mov	r2, r9
 8007b76:	4640      	mov	r0, r8
 8007b78:	4798      	blx	r3
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b84:	fa5f fa8a 	uxtb.w	sl, sl
 8007b88:	f1ba 0f02 	cmp.w	sl, #2
 8007b8c:	d1ee      	bne.n	8007b6c <_scanf_float+0x2cc>
 8007b8e:	3d03      	subs	r5, #3
 8007b90:	b2ed      	uxtb	r5, r5
 8007b92:	1b76      	subs	r6, r6, r5
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	05da      	lsls	r2, r3, #23
 8007b98:	d530      	bpl.n	8007bfc <_scanf_float+0x35c>
 8007b9a:	055b      	lsls	r3, r3, #21
 8007b9c:	d511      	bpl.n	8007bc2 <_scanf_float+0x322>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	429e      	cmp	r6, r3
 8007ba2:	f67f aebf 	bls.w	8007924 <_scanf_float+0x84>
 8007ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007baa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bae:	464a      	mov	r2, r9
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4798      	blx	r3
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	e7f0      	b.n	8007b9e <_scanf_float+0x2fe>
 8007bbc:	46aa      	mov	sl, r5
 8007bbe:	46b3      	mov	fp, r6
 8007bc0:	e7de      	b.n	8007b80 <_scanf_float+0x2e0>
 8007bc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	2965      	cmp	r1, #101	@ 0x65
 8007bca:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bce:	f106 35ff 	add.w	r5, r6, #4294967295
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	d00c      	beq.n	8007bf0 <_scanf_float+0x350>
 8007bd6:	2945      	cmp	r1, #69	@ 0x45
 8007bd8:	d00a      	beq.n	8007bf0 <_scanf_float+0x350>
 8007bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bde:	464a      	mov	r2, r9
 8007be0:	4640      	mov	r0, r8
 8007be2:	4798      	blx	r3
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	1eb5      	subs	r5, r6, #2
 8007bee:	6123      	str	r3, [r4, #16]
 8007bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bf4:	464a      	mov	r2, r9
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	4798      	blx	r3
 8007bfa:	462e      	mov	r6, r5
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	f012 0210 	ands.w	r2, r2, #16
 8007c02:	d001      	beq.n	8007c08 <_scanf_float+0x368>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e68e      	b.n	8007926 <_scanf_float+0x86>
 8007c08:	7032      	strb	r2, [r6, #0]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c14:	d125      	bne.n	8007c62 <_scanf_float+0x3c2>
 8007c16:	9b02      	ldr	r3, [sp, #8]
 8007c18:	429f      	cmp	r7, r3
 8007c1a:	d00a      	beq.n	8007c32 <_scanf_float+0x392>
 8007c1c:	1bda      	subs	r2, r3, r7
 8007c1e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c22:	429e      	cmp	r6, r3
 8007c24:	bf28      	it	cs
 8007c26:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c2a:	4922      	ldr	r1, [pc, #136]	@ (8007cb4 <_scanf_float+0x414>)
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 f907 	bl	8007e40 <siprintf>
 8007c32:	9901      	ldr	r1, [sp, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	4640      	mov	r0, r8
 8007c38:	f002 fc52 	bl	800a4e0 <_strtod_r>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	6821      	ldr	r1, [r4, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f011 0f02 	tst.w	r1, #2
 8007c46:	ec57 6b10 	vmov	r6, r7, d0
 8007c4a:	f103 0204 	add.w	r2, r3, #4
 8007c4e:	d015      	beq.n	8007c7c <_scanf_float+0x3dc>
 8007c50:	9903      	ldr	r1, [sp, #12]
 8007c52:	600a      	str	r2, [r1, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	e9c3 6700 	strd	r6, r7, [r3]
 8007c5a:	68e3      	ldr	r3, [r4, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60e3      	str	r3, [r4, #12]
 8007c60:	e7d0      	b.n	8007c04 <_scanf_float+0x364>
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0e4      	beq.n	8007c32 <_scanf_float+0x392>
 8007c68:	9905      	ldr	r1, [sp, #20]
 8007c6a:	230a      	movs	r3, #10
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f002 fcb6 	bl	800a5e0 <_strtol_r>
 8007c74:	9b04      	ldr	r3, [sp, #16]
 8007c76:	9e05      	ldr	r6, [sp, #20]
 8007c78:	1ac2      	subs	r2, r0, r3
 8007c7a:	e7d0      	b.n	8007c1e <_scanf_float+0x37e>
 8007c7c:	f011 0f04 	tst.w	r1, #4
 8007c80:	9903      	ldr	r1, [sp, #12]
 8007c82:	600a      	str	r2, [r1, #0]
 8007c84:	d1e6      	bne.n	8007c54 <_scanf_float+0x3b4>
 8007c86:	681d      	ldr	r5, [r3, #0]
 8007c88:	4632      	mov	r2, r6
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f7f8 ff5c 	bl	8000b4c <__aeabi_dcmpun>
 8007c94:	b128      	cbz	r0, 8007ca2 <_scanf_float+0x402>
 8007c96:	4808      	ldr	r0, [pc, #32]	@ (8007cb8 <_scanf_float+0x418>)
 8007c98:	f000 fa18 	bl	80080cc <nanf>
 8007c9c:	ed85 0a00 	vstr	s0, [r5]
 8007ca0:	e7db      	b.n	8007c5a <_scanf_float+0x3ba>
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	f7f8 ffaf 	bl	8000c08 <__aeabi_d2f>
 8007caa:	6028      	str	r0, [r5, #0]
 8007cac:	e7d5      	b.n	8007c5a <_scanf_float+0x3ba>
 8007cae:	2700      	movs	r7, #0
 8007cb0:	e62e      	b.n	8007910 <_scanf_float+0x70>
 8007cb2:	bf00      	nop
 8007cb4:	0800c056 	.word	0x0800c056
 8007cb8:	0800c1b2 	.word	0x0800c1b2

08007cbc <std>:
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cca:	6083      	str	r3, [r0, #8]
 8007ccc:	8181      	strh	r1, [r0, #12]
 8007cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cd0:	81c2      	strh	r2, [r0, #14]
 8007cd2:	6183      	str	r3, [r0, #24]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	2208      	movs	r2, #8
 8007cd8:	305c      	adds	r0, #92	@ 0x5c
 8007cda:	f000 f965 	bl	8007fa8 <memset>
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <std+0x58>)
 8007ce0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <std+0x5c>)
 8007ce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d1c <std+0x60>)
 8007ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cea:	4b0d      	ldr	r3, [pc, #52]	@ (8007d20 <std+0x64>)
 8007cec:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cee:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <std+0x68>)
 8007cf0:	6224      	str	r4, [r4, #32]
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	d006      	beq.n	8007d04 <std+0x48>
 8007cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cfa:	4294      	cmp	r4, r2
 8007cfc:	d002      	beq.n	8007d04 <std+0x48>
 8007cfe:	33d0      	adds	r3, #208	@ 0xd0
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d105      	bne.n	8007d10 <std+0x54>
 8007d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d0c:	f000 b9da 	b.w	80080c4 <__retarget_lock_init_recursive>
 8007d10:	bd10      	pop	{r4, pc}
 8007d12:	bf00      	nop
 8007d14:	08007edd 	.word	0x08007edd
 8007d18:	08007f03 	.word	0x08007f03
 8007d1c:	08007f3b 	.word	0x08007f3b
 8007d20:	08007f5f 	.word	0x08007f5f
 8007d24:	200018ac 	.word	0x200018ac

08007d28 <stdio_exit_handler>:
 8007d28:	4a02      	ldr	r2, [pc, #8]	@ (8007d34 <stdio_exit_handler+0xc>)
 8007d2a:	4903      	ldr	r1, [pc, #12]	@ (8007d38 <stdio_exit_handler+0x10>)
 8007d2c:	4803      	ldr	r0, [pc, #12]	@ (8007d3c <stdio_exit_handler+0x14>)
 8007d2e:	f000 b869 	b.w	8007e04 <_fwalk_sglue>
 8007d32:	bf00      	nop
 8007d34:	20001010 	.word	0x20001010
 8007d38:	0800afd9 	.word	0x0800afd9
 8007d3c:	20001020 	.word	0x20001020

08007d40 <cleanup_stdio>:
 8007d40:	6841      	ldr	r1, [r0, #4]
 8007d42:	4b0c      	ldr	r3, [pc, #48]	@ (8007d74 <cleanup_stdio+0x34>)
 8007d44:	4299      	cmp	r1, r3
 8007d46:	b510      	push	{r4, lr}
 8007d48:	4604      	mov	r4, r0
 8007d4a:	d001      	beq.n	8007d50 <cleanup_stdio+0x10>
 8007d4c:	f003 f944 	bl	800afd8 <_fflush_r>
 8007d50:	68a1      	ldr	r1, [r4, #8]
 8007d52:	4b09      	ldr	r3, [pc, #36]	@ (8007d78 <cleanup_stdio+0x38>)
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d002      	beq.n	8007d5e <cleanup_stdio+0x1e>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f003 f93d 	bl	800afd8 <_fflush_r>
 8007d5e:	68e1      	ldr	r1, [r4, #12]
 8007d60:	4b06      	ldr	r3, [pc, #24]	@ (8007d7c <cleanup_stdio+0x3c>)
 8007d62:	4299      	cmp	r1, r3
 8007d64:	d004      	beq.n	8007d70 <cleanup_stdio+0x30>
 8007d66:	4620      	mov	r0, r4
 8007d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6c:	f003 b934 	b.w	800afd8 <_fflush_r>
 8007d70:	bd10      	pop	{r4, pc}
 8007d72:	bf00      	nop
 8007d74:	200018ac 	.word	0x200018ac
 8007d78:	20001914 	.word	0x20001914
 8007d7c:	2000197c 	.word	0x2000197c

08007d80 <global_stdio_init.part.0>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4b0b      	ldr	r3, [pc, #44]	@ (8007db0 <global_stdio_init.part.0+0x30>)
 8007d84:	4c0b      	ldr	r4, [pc, #44]	@ (8007db4 <global_stdio_init.part.0+0x34>)
 8007d86:	4a0c      	ldr	r2, [pc, #48]	@ (8007db8 <global_stdio_init.part.0+0x38>)
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2104      	movs	r1, #4
 8007d90:	f7ff ff94 	bl	8007cbc <std>
 8007d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d98:	2201      	movs	r2, #1
 8007d9a:	2109      	movs	r1, #9
 8007d9c:	f7ff ff8e 	bl	8007cbc <std>
 8007da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007da4:	2202      	movs	r2, #2
 8007da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007daa:	2112      	movs	r1, #18
 8007dac:	f7ff bf86 	b.w	8007cbc <std>
 8007db0:	200019e4 	.word	0x200019e4
 8007db4:	200018ac 	.word	0x200018ac
 8007db8:	08007d29 	.word	0x08007d29

08007dbc <__sfp_lock_acquire>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__sfp_lock_acquire+0x8>)
 8007dbe:	f000 b982 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	200019ed 	.word	0x200019ed

08007dc8 <__sfp_lock_release>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	@ (8007dd0 <__sfp_lock_release+0x8>)
 8007dca:	f000 b97d 	b.w	80080c8 <__retarget_lock_release_recursive>
 8007dce:	bf00      	nop
 8007dd0:	200019ed 	.word	0x200019ed

08007dd4 <__sinit>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	f7ff fff0 	bl	8007dbc <__sfp_lock_acquire>
 8007ddc:	6a23      	ldr	r3, [r4, #32]
 8007dde:	b11b      	cbz	r3, 8007de8 <__sinit+0x14>
 8007de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de4:	f7ff bff0 	b.w	8007dc8 <__sfp_lock_release>
 8007de8:	4b04      	ldr	r3, [pc, #16]	@ (8007dfc <__sinit+0x28>)
 8007dea:	6223      	str	r3, [r4, #32]
 8007dec:	4b04      	ldr	r3, [pc, #16]	@ (8007e00 <__sinit+0x2c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1f5      	bne.n	8007de0 <__sinit+0xc>
 8007df4:	f7ff ffc4 	bl	8007d80 <global_stdio_init.part.0>
 8007df8:	e7f2      	b.n	8007de0 <__sinit+0xc>
 8007dfa:	bf00      	nop
 8007dfc:	08007d41 	.word	0x08007d41
 8007e00:	200019e4 	.word	0x200019e4

08007e04 <_fwalk_sglue>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	4607      	mov	r7, r0
 8007e0a:	4688      	mov	r8, r1
 8007e0c:	4614      	mov	r4, r2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e14:	f1b9 0901 	subs.w	r9, r9, #1
 8007e18:	d505      	bpl.n	8007e26 <_fwalk_sglue+0x22>
 8007e1a:	6824      	ldr	r4, [r4, #0]
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	d1f7      	bne.n	8007e10 <_fwalk_sglue+0xc>
 8007e20:	4630      	mov	r0, r6
 8007e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d907      	bls.n	8007e3c <_fwalk_sglue+0x38>
 8007e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e30:	3301      	adds	r3, #1
 8007e32:	d003      	beq.n	8007e3c <_fwalk_sglue+0x38>
 8007e34:	4629      	mov	r1, r5
 8007e36:	4638      	mov	r0, r7
 8007e38:	47c0      	blx	r8
 8007e3a:	4306      	orrs	r6, r0
 8007e3c:	3568      	adds	r5, #104	@ 0x68
 8007e3e:	e7e9      	b.n	8007e14 <_fwalk_sglue+0x10>

08007e40 <siprintf>:
 8007e40:	b40e      	push	{r1, r2, r3}
 8007e42:	b510      	push	{r4, lr}
 8007e44:	b09d      	sub	sp, #116	@ 0x74
 8007e46:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007e48:	9002      	str	r0, [sp, #8]
 8007e4a:	9006      	str	r0, [sp, #24]
 8007e4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e50:	480a      	ldr	r0, [pc, #40]	@ (8007e7c <siprintf+0x3c>)
 8007e52:	9107      	str	r1, [sp, #28]
 8007e54:	9104      	str	r1, [sp, #16]
 8007e56:	490a      	ldr	r1, [pc, #40]	@ (8007e80 <siprintf+0x40>)
 8007e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5c:	9105      	str	r1, [sp, #20]
 8007e5e:	2400      	movs	r4, #0
 8007e60:	a902      	add	r1, sp, #8
 8007e62:	6800      	ldr	r0, [r0, #0]
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007e68:	f002 fc18 	bl	800a69c <_svfiprintf_r>
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	701c      	strb	r4, [r3, #0]
 8007e70:	b01d      	add	sp, #116	@ 0x74
 8007e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e76:	b003      	add	sp, #12
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	2000101c 	.word	0x2000101c
 8007e80:	ffff0208 	.word	0xffff0208

08007e84 <siscanf>:
 8007e84:	b40e      	push	{r1, r2, r3}
 8007e86:	b570      	push	{r4, r5, r6, lr}
 8007e88:	b09d      	sub	sp, #116	@ 0x74
 8007e8a:	ac21      	add	r4, sp, #132	@ 0x84
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007e92:	f854 6b04 	ldr.w	r6, [r4], #4
 8007e96:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e9a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007e9c:	9002      	str	r0, [sp, #8]
 8007e9e:	9006      	str	r0, [sp, #24]
 8007ea0:	f7f8 f9f6 	bl	8000290 <strlen>
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed4 <siscanf+0x50>)
 8007ea6:	9003      	str	r0, [sp, #12]
 8007ea8:	9007      	str	r0, [sp, #28]
 8007eaa:	480b      	ldr	r0, [pc, #44]	@ (8007ed8 <siscanf+0x54>)
 8007eac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007eb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	4623      	mov	r3, r4
 8007eba:	a902      	add	r1, sp, #8
 8007ebc:	6800      	ldr	r0, [r0, #0]
 8007ebe:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007ec0:	9514      	str	r5, [sp, #80]	@ 0x50
 8007ec2:	9401      	str	r4, [sp, #4]
 8007ec4:	f002 fd40 	bl	800a948 <__ssvfiscanf_r>
 8007ec8:	b01d      	add	sp, #116	@ 0x74
 8007eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ece:	b003      	add	sp, #12
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	08007eff 	.word	0x08007eff
 8007ed8:	2000101c 	.word	0x2000101c

08007edc <__sread>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	f000 f8a0 	bl	8008028 <_read_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	bfab      	itete	ge
 8007eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007eee:	89a3      	ldrhlt	r3, [r4, #12]
 8007ef0:	181b      	addge	r3, r3, r0
 8007ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ef6:	bfac      	ite	ge
 8007ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007efa:	81a3      	strhlt	r3, [r4, #12]
 8007efc:	bd10      	pop	{r4, pc}

08007efe <__seofread>:
 8007efe:	2000      	movs	r0, #0
 8007f00:	4770      	bx	lr

08007f02 <__swrite>:
 8007f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f06:	461f      	mov	r7, r3
 8007f08:	898b      	ldrh	r3, [r1, #12]
 8007f0a:	05db      	lsls	r3, r3, #23
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	4616      	mov	r6, r2
 8007f12:	d505      	bpl.n	8007f20 <__swrite+0x1e>
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	2302      	movs	r3, #2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f000 f872 	bl	8008004 <_lseek_r>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	463b      	mov	r3, r7
 8007f30:	4628      	mov	r0, r5
 8007f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f36:	f000 b889 	b.w	800804c <_write_r>

08007f3a <__sseek>:
 8007f3a:	b510      	push	{r4, lr}
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f42:	f000 f85f 	bl	8008004 <_lseek_r>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	bf15      	itete	ne
 8007f4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f56:	81a3      	strheq	r3, [r4, #12]
 8007f58:	bf18      	it	ne
 8007f5a:	81a3      	strhne	r3, [r4, #12]
 8007f5c:	bd10      	pop	{r4, pc}

08007f5e <__sclose>:
 8007f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f62:	f000 b83f 	b.w	8007fe4 <_close_r>
	...

08007f68 <_vsiprintf_r>:
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	b09a      	sub	sp, #104	@ 0x68
 8007f6c:	2400      	movs	r4, #0
 8007f6e:	9100      	str	r1, [sp, #0]
 8007f70:	9104      	str	r1, [sp, #16]
 8007f72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f76:	9105      	str	r1, [sp, #20]
 8007f78:	9102      	str	r1, [sp, #8]
 8007f7a:	4905      	ldr	r1, [pc, #20]	@ (8007f90 <_vsiprintf_r+0x28>)
 8007f7c:	9103      	str	r1, [sp, #12]
 8007f7e:	4669      	mov	r1, sp
 8007f80:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f82:	f002 fb8b 	bl	800a69c <_svfiprintf_r>
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	701c      	strb	r4, [r3, #0]
 8007f8a:	b01a      	add	sp, #104	@ 0x68
 8007f8c:	bd10      	pop	{r4, pc}
 8007f8e:	bf00      	nop
 8007f90:	ffff0208 	.word	0xffff0208

08007f94 <vsiprintf>:
 8007f94:	4613      	mov	r3, r2
 8007f96:	460a      	mov	r2, r1
 8007f98:	4601      	mov	r1, r0
 8007f9a:	4802      	ldr	r0, [pc, #8]	@ (8007fa4 <vsiprintf+0x10>)
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f7ff bfe3 	b.w	8007f68 <_vsiprintf_r>
 8007fa2:	bf00      	nop
 8007fa4:	2000101c 	.word	0x2000101c

08007fa8 <memset>:
 8007fa8:	4402      	add	r2, r0
 8007faa:	4603      	mov	r3, r0
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d100      	bne.n	8007fb2 <memset+0xa>
 8007fb0:	4770      	bx	lr
 8007fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb6:	e7f9      	b.n	8007fac <memset+0x4>

08007fb8 <strncmp>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	b16a      	cbz	r2, 8007fd8 <strncmp+0x20>
 8007fbc:	3901      	subs	r1, #1
 8007fbe:	1884      	adds	r4, r0, r2
 8007fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d103      	bne.n	8007fd4 <strncmp+0x1c>
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	d001      	beq.n	8007fd4 <strncmp+0x1c>
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	d1f5      	bne.n	8007fc0 <strncmp+0x8>
 8007fd4:	1ad0      	subs	r0, r2, r3
 8007fd6:	bd10      	pop	{r4, pc}
 8007fd8:	4610      	mov	r0, r2
 8007fda:	e7fc      	b.n	8007fd6 <strncmp+0x1e>

08007fdc <_localeconv_r>:
 8007fdc:	4800      	ldr	r0, [pc, #0]	@ (8007fe0 <_localeconv_r+0x4>)
 8007fde:	4770      	bx	lr
 8007fe0:	2000115c 	.word	0x2000115c

08007fe4 <_close_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d06      	ldr	r5, [pc, #24]	@ (8008000 <_close_r+0x1c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	f7fa ff18 	bl	8002e24 <_close>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_close_r+0x1a>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_close_r+0x1a>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	200019e8 	.word	0x200019e8

08008004 <_lseek_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4d07      	ldr	r5, [pc, #28]	@ (8008024 <_lseek_r+0x20>)
 8008008:	4604      	mov	r4, r0
 800800a:	4608      	mov	r0, r1
 800800c:	4611      	mov	r1, r2
 800800e:	2200      	movs	r2, #0
 8008010:	602a      	str	r2, [r5, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	f7fa ff2d 	bl	8002e72 <_lseek>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_lseek_r+0x1e>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_lseek_r+0x1e>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	200019e8 	.word	0x200019e8

08008028 <_read_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d07      	ldr	r5, [pc, #28]	@ (8008048 <_read_r+0x20>)
 800802c:	4604      	mov	r4, r0
 800802e:	4608      	mov	r0, r1
 8008030:	4611      	mov	r1, r2
 8008032:	2200      	movs	r2, #0
 8008034:	602a      	str	r2, [r5, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	f7fa febb 	bl	8002db2 <_read>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_read_r+0x1e>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	b103      	cbz	r3, 8008046 <_read_r+0x1e>
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	200019e8 	.word	0x200019e8

0800804c <_write_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d07      	ldr	r5, [pc, #28]	@ (800806c <_write_r+0x20>)
 8008050:	4604      	mov	r4, r0
 8008052:	4608      	mov	r0, r1
 8008054:	4611      	mov	r1, r2
 8008056:	2200      	movs	r2, #0
 8008058:	602a      	str	r2, [r5, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	f7fa fec6 	bl	8002dec <_write>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_write_r+0x1e>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_write_r+0x1e>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	200019e8 	.word	0x200019e8

08008070 <__errno>:
 8008070:	4b01      	ldr	r3, [pc, #4]	@ (8008078 <__errno+0x8>)
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	2000101c 	.word	0x2000101c

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	@ (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	@ (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	@ (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	@ (80080c0 <__libc_init_array+0x44>)
 8008090:	f003 ff66 	bl	800bf60 <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	0800c46c 	.word	0x0800c46c
 80080b8:	0800c46c 	.word	0x0800c46c
 80080bc:	0800c46c 	.word	0x0800c46c
 80080c0:	0800c470 	.word	0x0800c470

080080c4 <__retarget_lock_init_recursive>:
 80080c4:	4770      	bx	lr

080080c6 <__retarget_lock_acquire_recursive>:
 80080c6:	4770      	bx	lr

080080c8 <__retarget_lock_release_recursive>:
 80080c8:	4770      	bx	lr
	...

080080cc <nanf>:
 80080cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80080d4 <nanf+0x8>
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	7fc00000 	.word	0x7fc00000

080080d8 <quorem>:
 80080d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	6903      	ldr	r3, [r0, #16]
 80080de:	690c      	ldr	r4, [r1, #16]
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	4607      	mov	r7, r0
 80080e4:	db7e      	blt.n	80081e4 <quorem+0x10c>
 80080e6:	3c01      	subs	r4, #1
 80080e8:	f101 0814 	add.w	r8, r1, #20
 80080ec:	00a3      	lsls	r3, r4, #2
 80080ee:	f100 0514 	add.w	r5, r0, #20
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008102:	3301      	adds	r3, #1
 8008104:	429a      	cmp	r2, r3
 8008106:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800810a:	fbb2 f6f3 	udiv	r6, r2, r3
 800810e:	d32e      	bcc.n	800816e <quorem+0x96>
 8008110:	f04f 0a00 	mov.w	sl, #0
 8008114:	46c4      	mov	ip, r8
 8008116:	46ae      	mov	lr, r5
 8008118:	46d3      	mov	fp, sl
 800811a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800811e:	b298      	uxth	r0, r3
 8008120:	fb06 a000 	mla	r0, r6, r0, sl
 8008124:	0c02      	lsrs	r2, r0, #16
 8008126:	0c1b      	lsrs	r3, r3, #16
 8008128:	fb06 2303 	mla	r3, r6, r3, r2
 800812c:	f8de 2000 	ldr.w	r2, [lr]
 8008130:	b280      	uxth	r0, r0
 8008132:	b292      	uxth	r2, r2
 8008134:	1a12      	subs	r2, r2, r0
 8008136:	445a      	add	r2, fp
 8008138:	f8de 0000 	ldr.w	r0, [lr]
 800813c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008140:	b29b      	uxth	r3, r3
 8008142:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008146:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800814a:	b292      	uxth	r2, r2
 800814c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008150:	45e1      	cmp	r9, ip
 8008152:	f84e 2b04 	str.w	r2, [lr], #4
 8008156:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800815a:	d2de      	bcs.n	800811a <quorem+0x42>
 800815c:	9b00      	ldr	r3, [sp, #0]
 800815e:	58eb      	ldr	r3, [r5, r3]
 8008160:	b92b      	cbnz	r3, 800816e <quorem+0x96>
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	3b04      	subs	r3, #4
 8008166:	429d      	cmp	r5, r3
 8008168:	461a      	mov	r2, r3
 800816a:	d32f      	bcc.n	80081cc <quorem+0xf4>
 800816c:	613c      	str	r4, [r7, #16]
 800816e:	4638      	mov	r0, r7
 8008170:	f001 f9c6 	bl	8009500 <__mcmp>
 8008174:	2800      	cmp	r0, #0
 8008176:	db25      	blt.n	80081c4 <quorem+0xec>
 8008178:	4629      	mov	r1, r5
 800817a:	2000      	movs	r0, #0
 800817c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008180:	f8d1 c000 	ldr.w	ip, [r1]
 8008184:	fa1f fe82 	uxth.w	lr, r2
 8008188:	fa1f f38c 	uxth.w	r3, ip
 800818c:	eba3 030e 	sub.w	r3, r3, lr
 8008190:	4403      	add	r3, r0
 8008192:	0c12      	lsrs	r2, r2, #16
 8008194:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008198:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a2:	45c1      	cmp	r9, r8
 80081a4:	f841 3b04 	str.w	r3, [r1], #4
 80081a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081ac:	d2e6      	bcs.n	800817c <quorem+0xa4>
 80081ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081b6:	b922      	cbnz	r2, 80081c2 <quorem+0xea>
 80081b8:	3b04      	subs	r3, #4
 80081ba:	429d      	cmp	r5, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	d30b      	bcc.n	80081d8 <quorem+0x100>
 80081c0:	613c      	str	r4, [r7, #16]
 80081c2:	3601      	adds	r6, #1
 80081c4:	4630      	mov	r0, r6
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	3b04      	subs	r3, #4
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d1cb      	bne.n	800816c <quorem+0x94>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	e7c6      	b.n	8008166 <quorem+0x8e>
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	3b04      	subs	r3, #4
 80081dc:	2a00      	cmp	r2, #0
 80081de:	d1ef      	bne.n	80081c0 <quorem+0xe8>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	e7ea      	b.n	80081ba <quorem+0xe2>
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7ee      	b.n	80081c6 <quorem+0xee>

080081e8 <_dtoa_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	69c7      	ldr	r7, [r0, #28]
 80081ee:	b097      	sub	sp, #92	@ 0x5c
 80081f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80081f4:	ec55 4b10 	vmov	r4, r5, d0
 80081f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80081fa:	9107      	str	r1, [sp, #28]
 80081fc:	4681      	mov	r9, r0
 80081fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008200:	9311      	str	r3, [sp, #68]	@ 0x44
 8008202:	b97f      	cbnz	r7, 8008224 <_dtoa_r+0x3c>
 8008204:	2010      	movs	r0, #16
 8008206:	f000 fe09 	bl	8008e1c <malloc>
 800820a:	4602      	mov	r2, r0
 800820c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008210:	b920      	cbnz	r0, 800821c <_dtoa_r+0x34>
 8008212:	4ba9      	ldr	r3, [pc, #676]	@ (80084b8 <_dtoa_r+0x2d0>)
 8008214:	21ef      	movs	r1, #239	@ 0xef
 8008216:	48a9      	ldr	r0, [pc, #676]	@ (80084bc <_dtoa_r+0x2d4>)
 8008218:	f002 ffba 	bl	800b190 <__assert_func>
 800821c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008220:	6007      	str	r7, [r0, #0]
 8008222:	60c7      	str	r7, [r0, #12]
 8008224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	b159      	cbz	r1, 8008244 <_dtoa_r+0x5c>
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	604a      	str	r2, [r1, #4]
 8008230:	2301      	movs	r3, #1
 8008232:	4093      	lsls	r3, r2
 8008234:	608b      	str	r3, [r1, #8]
 8008236:	4648      	mov	r0, r9
 8008238:	f000 fee6 	bl	8009008 <_Bfree>
 800823c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	1e2b      	subs	r3, r5, #0
 8008246:	bfb9      	ittee	lt
 8008248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	9305      	strlt	r3, [sp, #20]
 800824e:	2300      	movge	r3, #0
 8008250:	6033      	strge	r3, [r6, #0]
 8008252:	9f05      	ldr	r7, [sp, #20]
 8008254:	4b9a      	ldr	r3, [pc, #616]	@ (80084c0 <_dtoa_r+0x2d8>)
 8008256:	bfbc      	itt	lt
 8008258:	2201      	movlt	r2, #1
 800825a:	6032      	strlt	r2, [r6, #0]
 800825c:	43bb      	bics	r3, r7
 800825e:	d112      	bne.n	8008286 <_dtoa_r+0x9e>
 8008260:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008262:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800826c:	4323      	orrs	r3, r4
 800826e:	f000 855a 	beq.w	8008d26 <_dtoa_r+0xb3e>
 8008272:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008274:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80084d4 <_dtoa_r+0x2ec>
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 855c 	beq.w	8008d36 <_dtoa_r+0xb4e>
 800827e:	f10a 0303 	add.w	r3, sl, #3
 8008282:	f000 bd56 	b.w	8008d32 <_dtoa_r+0xb4a>
 8008286:	ed9d 7b04 	vldr	d7, [sp, #16]
 800828a:	2200      	movs	r2, #0
 800828c:	ec51 0b17 	vmov	r0, r1, d7
 8008290:	2300      	movs	r3, #0
 8008292:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008296:	f7f8 fc27 	bl	8000ae8 <__aeabi_dcmpeq>
 800829a:	4680      	mov	r8, r0
 800829c:	b158      	cbz	r0, 80082b6 <_dtoa_r+0xce>
 800829e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80082a0:	2301      	movs	r3, #1
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082a6:	b113      	cbz	r3, 80082ae <_dtoa_r+0xc6>
 80082a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80082aa:	4b86      	ldr	r3, [pc, #536]	@ (80084c4 <_dtoa_r+0x2dc>)
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80084d8 <_dtoa_r+0x2f0>
 80082b2:	f000 bd40 	b.w	8008d36 <_dtoa_r+0xb4e>
 80082b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80082ba:	aa14      	add	r2, sp, #80	@ 0x50
 80082bc:	a915      	add	r1, sp, #84	@ 0x54
 80082be:	4648      	mov	r0, r9
 80082c0:	f001 fa3e 	bl	8009740 <__d2b>
 80082c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082c8:	9002      	str	r0, [sp, #8]
 80082ca:	2e00      	cmp	r6, #0
 80082cc:	d078      	beq.n	80083c0 <_dtoa_r+0x1d8>
 80082ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80082d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082e8:	4619      	mov	r1, r3
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b76      	ldr	r3, [pc, #472]	@ (80084c8 <_dtoa_r+0x2e0>)
 80082ee:	f7f7 ffdb 	bl	80002a8 <__aeabi_dsub>
 80082f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80084a0 <_dtoa_r+0x2b8>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f98e 	bl	8000618 <__aeabi_dmul>
 80082fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80084a8 <_dtoa_r+0x2c0>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f7f7 ffd3 	bl	80002ac <__adddf3>
 8008306:	4604      	mov	r4, r0
 8008308:	4630      	mov	r0, r6
 800830a:	460d      	mov	r5, r1
 800830c:	f7f8 f91a 	bl	8000544 <__aeabi_i2d>
 8008310:	a367      	add	r3, pc, #412	@ (adr r3, 80084b0 <_dtoa_r+0x2c8>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f8 f97f 	bl	8000618 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4620      	mov	r0, r4
 8008320:	4629      	mov	r1, r5
 8008322:	f7f7 ffc3 	bl	80002ac <__adddf3>
 8008326:	4604      	mov	r4, r0
 8008328:	460d      	mov	r5, r1
 800832a:	f7f8 fc25 	bl	8000b78 <__aeabi_d2iz>
 800832e:	2200      	movs	r2, #0
 8008330:	4607      	mov	r7, r0
 8008332:	2300      	movs	r3, #0
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f8 fbe0 	bl	8000afc <__aeabi_dcmplt>
 800833c:	b140      	cbz	r0, 8008350 <_dtoa_r+0x168>
 800833e:	4638      	mov	r0, r7
 8008340:	f7f8 f900 	bl	8000544 <__aeabi_i2d>
 8008344:	4622      	mov	r2, r4
 8008346:	462b      	mov	r3, r5
 8008348:	f7f8 fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 800834c:	b900      	cbnz	r0, 8008350 <_dtoa_r+0x168>
 800834e:	3f01      	subs	r7, #1
 8008350:	2f16      	cmp	r7, #22
 8008352:	d852      	bhi.n	80083fa <_dtoa_r+0x212>
 8008354:	4b5d      	ldr	r3, [pc, #372]	@ (80084cc <_dtoa_r+0x2e4>)
 8008356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008362:	f7f8 fbcb 	bl	8000afc <__aeabi_dcmplt>
 8008366:	2800      	cmp	r0, #0
 8008368:	d049      	beq.n	80083fe <_dtoa_r+0x216>
 800836a:	3f01      	subs	r7, #1
 800836c:	2300      	movs	r3, #0
 800836e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008370:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008372:	1b9b      	subs	r3, r3, r6
 8008374:	1e5a      	subs	r2, r3, #1
 8008376:	bf45      	ittet	mi
 8008378:	f1c3 0301 	rsbmi	r3, r3, #1
 800837c:	9300      	strmi	r3, [sp, #0]
 800837e:	2300      	movpl	r3, #0
 8008380:	2300      	movmi	r3, #0
 8008382:	9206      	str	r2, [sp, #24]
 8008384:	bf54      	ite	pl
 8008386:	9300      	strpl	r3, [sp, #0]
 8008388:	9306      	strmi	r3, [sp, #24]
 800838a:	2f00      	cmp	r7, #0
 800838c:	db39      	blt.n	8008402 <_dtoa_r+0x21a>
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	970d      	str	r7, [sp, #52]	@ 0x34
 8008392:	443b      	add	r3, r7
 8008394:	9306      	str	r3, [sp, #24]
 8008396:	2300      	movs	r3, #0
 8008398:	9308      	str	r3, [sp, #32]
 800839a:	9b07      	ldr	r3, [sp, #28]
 800839c:	2b09      	cmp	r3, #9
 800839e:	d863      	bhi.n	8008468 <_dtoa_r+0x280>
 80083a0:	2b05      	cmp	r3, #5
 80083a2:	bfc4      	itt	gt
 80083a4:	3b04      	subgt	r3, #4
 80083a6:	9307      	strgt	r3, [sp, #28]
 80083a8:	9b07      	ldr	r3, [sp, #28]
 80083aa:	f1a3 0302 	sub.w	r3, r3, #2
 80083ae:	bfcc      	ite	gt
 80083b0:	2400      	movgt	r4, #0
 80083b2:	2401      	movle	r4, #1
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d863      	bhi.n	8008480 <_dtoa_r+0x298>
 80083b8:	e8df f003 	tbb	[pc, r3]
 80083bc:	2b375452 	.word	0x2b375452
 80083c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80083c4:	441e      	add	r6, r3
 80083c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	bfc1      	itttt	gt
 80083ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083d2:	409f      	lslgt	r7, r3
 80083d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083dc:	bfd6      	itet	le
 80083de:	f1c3 0320 	rsble	r3, r3, #32
 80083e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80083e6:	fa04 f003 	lslle.w	r0, r4, r3
 80083ea:	f7f8 f89b 	bl	8000524 <__aeabi_ui2d>
 80083ee:	2201      	movs	r2, #1
 80083f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083f4:	3e01      	subs	r6, #1
 80083f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80083f8:	e776      	b.n	80082e8 <_dtoa_r+0x100>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e7b7      	b.n	800836e <_dtoa_r+0x186>
 80083fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8008400:	e7b6      	b.n	8008370 <_dtoa_r+0x188>
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	1bdb      	subs	r3, r3, r7
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	427b      	negs	r3, r7
 800840a:	9308      	str	r3, [sp, #32]
 800840c:	2300      	movs	r3, #0
 800840e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008410:	e7c3      	b.n	800839a <_dtoa_r+0x1b2>
 8008412:	2301      	movs	r3, #1
 8008414:	9309      	str	r3, [sp, #36]	@ 0x24
 8008416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008418:	eb07 0b03 	add.w	fp, r7, r3
 800841c:	f10b 0301 	add.w	r3, fp, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	9303      	str	r3, [sp, #12]
 8008424:	bfb8      	it	lt
 8008426:	2301      	movlt	r3, #1
 8008428:	e006      	b.n	8008438 <_dtoa_r+0x250>
 800842a:	2301      	movs	r3, #1
 800842c:	9309      	str	r3, [sp, #36]	@ 0x24
 800842e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008430:	2b00      	cmp	r3, #0
 8008432:	dd28      	ble.n	8008486 <_dtoa_r+0x29e>
 8008434:	469b      	mov	fp, r3
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800843c:	2100      	movs	r1, #0
 800843e:	2204      	movs	r2, #4
 8008440:	f102 0514 	add.w	r5, r2, #20
 8008444:	429d      	cmp	r5, r3
 8008446:	d926      	bls.n	8008496 <_dtoa_r+0x2ae>
 8008448:	6041      	str	r1, [r0, #4]
 800844a:	4648      	mov	r0, r9
 800844c:	f000 fd9c 	bl	8008f88 <_Balloc>
 8008450:	4682      	mov	sl, r0
 8008452:	2800      	cmp	r0, #0
 8008454:	d142      	bne.n	80084dc <_dtoa_r+0x2f4>
 8008456:	4b1e      	ldr	r3, [pc, #120]	@ (80084d0 <_dtoa_r+0x2e8>)
 8008458:	4602      	mov	r2, r0
 800845a:	f240 11af 	movw	r1, #431	@ 0x1af
 800845e:	e6da      	b.n	8008216 <_dtoa_r+0x2e>
 8008460:	2300      	movs	r3, #0
 8008462:	e7e3      	b.n	800842c <_dtoa_r+0x244>
 8008464:	2300      	movs	r3, #0
 8008466:	e7d5      	b.n	8008414 <_dtoa_r+0x22c>
 8008468:	2401      	movs	r4, #1
 800846a:	2300      	movs	r3, #0
 800846c:	9307      	str	r3, [sp, #28]
 800846e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008470:	f04f 3bff 	mov.w	fp, #4294967295
 8008474:	2200      	movs	r2, #0
 8008476:	f8cd b00c 	str.w	fp, [sp, #12]
 800847a:	2312      	movs	r3, #18
 800847c:	920c      	str	r2, [sp, #48]	@ 0x30
 800847e:	e7db      	b.n	8008438 <_dtoa_r+0x250>
 8008480:	2301      	movs	r3, #1
 8008482:	9309      	str	r3, [sp, #36]	@ 0x24
 8008484:	e7f4      	b.n	8008470 <_dtoa_r+0x288>
 8008486:	f04f 0b01 	mov.w	fp, #1
 800848a:	f8cd b00c 	str.w	fp, [sp, #12]
 800848e:	465b      	mov	r3, fp
 8008490:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008494:	e7d0      	b.n	8008438 <_dtoa_r+0x250>
 8008496:	3101      	adds	r1, #1
 8008498:	0052      	lsls	r2, r2, #1
 800849a:	e7d1      	b.n	8008440 <_dtoa_r+0x258>
 800849c:	f3af 8000 	nop.w
 80084a0:	636f4361 	.word	0x636f4361
 80084a4:	3fd287a7 	.word	0x3fd287a7
 80084a8:	8b60c8b3 	.word	0x8b60c8b3
 80084ac:	3fc68a28 	.word	0x3fc68a28
 80084b0:	509f79fb 	.word	0x509f79fb
 80084b4:	3fd34413 	.word	0x3fd34413
 80084b8:	0800c068 	.word	0x0800c068
 80084bc:	0800c07f 	.word	0x0800c07f
 80084c0:	7ff00000 	.word	0x7ff00000
 80084c4:	0800c16b 	.word	0x0800c16b
 80084c8:	3ff80000 	.word	0x3ff80000
 80084cc:	0800c248 	.word	0x0800c248
 80084d0:	0800c0d7 	.word	0x0800c0d7
 80084d4:	0800c064 	.word	0x0800c064
 80084d8:	0800c16a 	.word	0x0800c16a
 80084dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084e0:	6018      	str	r0, [r3, #0]
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	2b0e      	cmp	r3, #14
 80084e6:	f200 80a1 	bhi.w	800862c <_dtoa_r+0x444>
 80084ea:	2c00      	cmp	r4, #0
 80084ec:	f000 809e 	beq.w	800862c <_dtoa_r+0x444>
 80084f0:	2f00      	cmp	r7, #0
 80084f2:	dd33      	ble.n	800855c <_dtoa_r+0x374>
 80084f4:	4b9c      	ldr	r3, [pc, #624]	@ (8008768 <_dtoa_r+0x580>)
 80084f6:	f007 020f 	and.w	r2, r7, #15
 80084fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084fe:	ed93 7b00 	vldr	d7, [r3]
 8008502:	05f8      	lsls	r0, r7, #23
 8008504:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008508:	ea4f 1427 	mov.w	r4, r7, asr #4
 800850c:	d516      	bpl.n	800853c <_dtoa_r+0x354>
 800850e:	4b97      	ldr	r3, [pc, #604]	@ (800876c <_dtoa_r+0x584>)
 8008510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008518:	f7f8 f9a8 	bl	800086c <__aeabi_ddiv>
 800851c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008520:	f004 040f 	and.w	r4, r4, #15
 8008524:	2603      	movs	r6, #3
 8008526:	4d91      	ldr	r5, [pc, #580]	@ (800876c <_dtoa_r+0x584>)
 8008528:	b954      	cbnz	r4, 8008540 <_dtoa_r+0x358>
 800852a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800852e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008532:	f7f8 f99b 	bl	800086c <__aeabi_ddiv>
 8008536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800853a:	e028      	b.n	800858e <_dtoa_r+0x3a6>
 800853c:	2602      	movs	r6, #2
 800853e:	e7f2      	b.n	8008526 <_dtoa_r+0x33e>
 8008540:	07e1      	lsls	r1, r4, #31
 8008542:	d508      	bpl.n	8008556 <_dtoa_r+0x36e>
 8008544:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008548:	e9d5 2300 	ldrd	r2, r3, [r5]
 800854c:	f7f8 f864 	bl	8000618 <__aeabi_dmul>
 8008550:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008554:	3601      	adds	r6, #1
 8008556:	1064      	asrs	r4, r4, #1
 8008558:	3508      	adds	r5, #8
 800855a:	e7e5      	b.n	8008528 <_dtoa_r+0x340>
 800855c:	f000 80af 	beq.w	80086be <_dtoa_r+0x4d6>
 8008560:	427c      	negs	r4, r7
 8008562:	4b81      	ldr	r3, [pc, #516]	@ (8008768 <_dtoa_r+0x580>)
 8008564:	4d81      	ldr	r5, [pc, #516]	@ (800876c <_dtoa_r+0x584>)
 8008566:	f004 020f 	and.w	r2, r4, #15
 800856a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008576:	f7f8 f84f 	bl	8000618 <__aeabi_dmul>
 800857a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800857e:	1124      	asrs	r4, r4, #4
 8008580:	2300      	movs	r3, #0
 8008582:	2602      	movs	r6, #2
 8008584:	2c00      	cmp	r4, #0
 8008586:	f040 808f 	bne.w	80086a8 <_dtoa_r+0x4c0>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1d3      	bne.n	8008536 <_dtoa_r+0x34e>
 800858e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008590:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 8094 	beq.w	80086c2 <_dtoa_r+0x4da>
 800859a:	4b75      	ldr	r3, [pc, #468]	@ (8008770 <_dtoa_r+0x588>)
 800859c:	2200      	movs	r2, #0
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f8 faab 	bl	8000afc <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f000 808b 	beq.w	80086c2 <_dtoa_r+0x4da>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 8087 	beq.w	80086c2 <_dtoa_r+0x4da>
 80085b4:	f1bb 0f00 	cmp.w	fp, #0
 80085b8:	dd34      	ble.n	8008624 <_dtoa_r+0x43c>
 80085ba:	4620      	mov	r0, r4
 80085bc:	4b6d      	ldr	r3, [pc, #436]	@ (8008774 <_dtoa_r+0x58c>)
 80085be:	2200      	movs	r2, #0
 80085c0:	4629      	mov	r1, r5
 80085c2:	f7f8 f829 	bl	8000618 <__aeabi_dmul>
 80085c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80085ce:	3601      	adds	r6, #1
 80085d0:	465c      	mov	r4, fp
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7f7 ffb6 	bl	8000544 <__aeabi_i2d>
 80085d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085dc:	f7f8 f81c 	bl	8000618 <__aeabi_dmul>
 80085e0:	4b65      	ldr	r3, [pc, #404]	@ (8008778 <_dtoa_r+0x590>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	f7f7 fe62 	bl	80002ac <__adddf3>
 80085e8:	4605      	mov	r5, r0
 80085ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085ee:	2c00      	cmp	r4, #0
 80085f0:	d16a      	bne.n	80086c8 <_dtoa_r+0x4e0>
 80085f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f6:	4b61      	ldr	r3, [pc, #388]	@ (800877c <_dtoa_r+0x594>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	f7f7 fe55 	bl	80002a8 <__aeabi_dsub>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008606:	462a      	mov	r2, r5
 8008608:	4633      	mov	r3, r6
 800860a:	f7f8 fa95 	bl	8000b38 <__aeabi_dcmpgt>
 800860e:	2800      	cmp	r0, #0
 8008610:	f040 8298 	bne.w	8008b44 <_dtoa_r+0x95c>
 8008614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008618:	462a      	mov	r2, r5
 800861a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800861e:	f7f8 fa6d 	bl	8000afc <__aeabi_dcmplt>
 8008622:	bb38      	cbnz	r0, 8008674 <_dtoa_r+0x48c>
 8008624:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008628:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800862c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800862e:	2b00      	cmp	r3, #0
 8008630:	f2c0 8157 	blt.w	80088e2 <_dtoa_r+0x6fa>
 8008634:	2f0e      	cmp	r7, #14
 8008636:	f300 8154 	bgt.w	80088e2 <_dtoa_r+0x6fa>
 800863a:	4b4b      	ldr	r3, [pc, #300]	@ (8008768 <_dtoa_r+0x580>)
 800863c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008640:	ed93 7b00 	vldr	d7, [r3]
 8008644:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008646:	2b00      	cmp	r3, #0
 8008648:	ed8d 7b00 	vstr	d7, [sp]
 800864c:	f280 80e5 	bge.w	800881a <_dtoa_r+0x632>
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f300 80e1 	bgt.w	800881a <_dtoa_r+0x632>
 8008658:	d10c      	bne.n	8008674 <_dtoa_r+0x48c>
 800865a:	4b48      	ldr	r3, [pc, #288]	@ (800877c <_dtoa_r+0x594>)
 800865c:	2200      	movs	r2, #0
 800865e:	ec51 0b17 	vmov	r0, r1, d7
 8008662:	f7f7 ffd9 	bl	8000618 <__aeabi_dmul>
 8008666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800866a:	f7f8 fa5b 	bl	8000b24 <__aeabi_dcmpge>
 800866e:	2800      	cmp	r0, #0
 8008670:	f000 8266 	beq.w	8008b40 <_dtoa_r+0x958>
 8008674:	2400      	movs	r4, #0
 8008676:	4625      	mov	r5, r4
 8008678:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800867a:	4656      	mov	r6, sl
 800867c:	ea6f 0803 	mvn.w	r8, r3
 8008680:	2700      	movs	r7, #0
 8008682:	4621      	mov	r1, r4
 8008684:	4648      	mov	r0, r9
 8008686:	f000 fcbf 	bl	8009008 <_Bfree>
 800868a:	2d00      	cmp	r5, #0
 800868c:	f000 80bd 	beq.w	800880a <_dtoa_r+0x622>
 8008690:	b12f      	cbz	r7, 800869e <_dtoa_r+0x4b6>
 8008692:	42af      	cmp	r7, r5
 8008694:	d003      	beq.n	800869e <_dtoa_r+0x4b6>
 8008696:	4639      	mov	r1, r7
 8008698:	4648      	mov	r0, r9
 800869a:	f000 fcb5 	bl	8009008 <_Bfree>
 800869e:	4629      	mov	r1, r5
 80086a0:	4648      	mov	r0, r9
 80086a2:	f000 fcb1 	bl	8009008 <_Bfree>
 80086a6:	e0b0      	b.n	800880a <_dtoa_r+0x622>
 80086a8:	07e2      	lsls	r2, r4, #31
 80086aa:	d505      	bpl.n	80086b8 <_dtoa_r+0x4d0>
 80086ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086b0:	f7f7 ffb2 	bl	8000618 <__aeabi_dmul>
 80086b4:	3601      	adds	r6, #1
 80086b6:	2301      	movs	r3, #1
 80086b8:	1064      	asrs	r4, r4, #1
 80086ba:	3508      	adds	r5, #8
 80086bc:	e762      	b.n	8008584 <_dtoa_r+0x39c>
 80086be:	2602      	movs	r6, #2
 80086c0:	e765      	b.n	800858e <_dtoa_r+0x3a6>
 80086c2:	9c03      	ldr	r4, [sp, #12]
 80086c4:	46b8      	mov	r8, r7
 80086c6:	e784      	b.n	80085d2 <_dtoa_r+0x3ea>
 80086c8:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <_dtoa_r+0x580>)
 80086ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086d4:	4454      	add	r4, sl
 80086d6:	2900      	cmp	r1, #0
 80086d8:	d054      	beq.n	8008784 <_dtoa_r+0x59c>
 80086da:	4929      	ldr	r1, [pc, #164]	@ (8008780 <_dtoa_r+0x598>)
 80086dc:	2000      	movs	r0, #0
 80086de:	f7f8 f8c5 	bl	800086c <__aeabi_ddiv>
 80086e2:	4633      	mov	r3, r6
 80086e4:	462a      	mov	r2, r5
 80086e6:	f7f7 fddf 	bl	80002a8 <__aeabi_dsub>
 80086ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086ee:	4656      	mov	r6, sl
 80086f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086f4:	f7f8 fa40 	bl	8000b78 <__aeabi_d2iz>
 80086f8:	4605      	mov	r5, r0
 80086fa:	f7f7 ff23 	bl	8000544 <__aeabi_i2d>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008706:	f7f7 fdcf 	bl	80002a8 <__aeabi_dsub>
 800870a:	3530      	adds	r5, #48	@ 0x30
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008714:	f806 5b01 	strb.w	r5, [r6], #1
 8008718:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800871c:	f7f8 f9ee 	bl	8000afc <__aeabi_dcmplt>
 8008720:	2800      	cmp	r0, #0
 8008722:	d172      	bne.n	800880a <_dtoa_r+0x622>
 8008724:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008728:	4911      	ldr	r1, [pc, #68]	@ (8008770 <_dtoa_r+0x588>)
 800872a:	2000      	movs	r0, #0
 800872c:	f7f7 fdbc 	bl	80002a8 <__aeabi_dsub>
 8008730:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008734:	f7f8 f9e2 	bl	8000afc <__aeabi_dcmplt>
 8008738:	2800      	cmp	r0, #0
 800873a:	f040 80b4 	bne.w	80088a6 <_dtoa_r+0x6be>
 800873e:	42a6      	cmp	r6, r4
 8008740:	f43f af70 	beq.w	8008624 <_dtoa_r+0x43c>
 8008744:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008748:	4b0a      	ldr	r3, [pc, #40]	@ (8008774 <_dtoa_r+0x58c>)
 800874a:	2200      	movs	r2, #0
 800874c:	f7f7 ff64 	bl	8000618 <__aeabi_dmul>
 8008750:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <_dtoa_r+0x58c>)
 8008752:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008756:	2200      	movs	r2, #0
 8008758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800875c:	f7f7 ff5c 	bl	8000618 <__aeabi_dmul>
 8008760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008764:	e7c4      	b.n	80086f0 <_dtoa_r+0x508>
 8008766:	bf00      	nop
 8008768:	0800c248 	.word	0x0800c248
 800876c:	0800c220 	.word	0x0800c220
 8008770:	3ff00000 	.word	0x3ff00000
 8008774:	40240000 	.word	0x40240000
 8008778:	401c0000 	.word	0x401c0000
 800877c:	40140000 	.word	0x40140000
 8008780:	3fe00000 	.word	0x3fe00000
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	f7f7 ff46 	bl	8000618 <__aeabi_dmul>
 800878c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008790:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008792:	4656      	mov	r6, sl
 8008794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008798:	f7f8 f9ee 	bl	8000b78 <__aeabi_d2iz>
 800879c:	4605      	mov	r5, r0
 800879e:	f7f7 fed1 	bl	8000544 <__aeabi_i2d>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087aa:	f7f7 fd7d 	bl	80002a8 <__aeabi_dsub>
 80087ae:	3530      	adds	r5, #48	@ 0x30
 80087b0:	f806 5b01 	strb.w	r5, [r6], #1
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	42a6      	cmp	r6, r4
 80087ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	d124      	bne.n	800880e <_dtoa_r+0x626>
 80087c4:	4baf      	ldr	r3, [pc, #700]	@ (8008a84 <_dtoa_r+0x89c>)
 80087c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80087ca:	f7f7 fd6f 	bl	80002ac <__adddf3>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d6:	f7f8 f9af 	bl	8000b38 <__aeabi_dcmpgt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d163      	bne.n	80088a6 <_dtoa_r+0x6be>
 80087de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087e2:	49a8      	ldr	r1, [pc, #672]	@ (8008a84 <_dtoa_r+0x89c>)
 80087e4:	2000      	movs	r0, #0
 80087e6:	f7f7 fd5f 	bl	80002a8 <__aeabi_dsub>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f2:	f7f8 f983 	bl	8000afc <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f af14 	beq.w	8008624 <_dtoa_r+0x43c>
 80087fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80087fe:	1e73      	subs	r3, r6, #1
 8008800:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008802:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008806:	2b30      	cmp	r3, #48	@ 0x30
 8008808:	d0f8      	beq.n	80087fc <_dtoa_r+0x614>
 800880a:	4647      	mov	r7, r8
 800880c:	e03b      	b.n	8008886 <_dtoa_r+0x69e>
 800880e:	4b9e      	ldr	r3, [pc, #632]	@ (8008a88 <_dtoa_r+0x8a0>)
 8008810:	f7f7 ff02 	bl	8000618 <__aeabi_dmul>
 8008814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008818:	e7bc      	b.n	8008794 <_dtoa_r+0x5ac>
 800881a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800881e:	4656      	mov	r6, sl
 8008820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f7f8 f820 	bl	800086c <__aeabi_ddiv>
 800882c:	f7f8 f9a4 	bl	8000b78 <__aeabi_d2iz>
 8008830:	4680      	mov	r8, r0
 8008832:	f7f7 fe87 	bl	8000544 <__aeabi_i2d>
 8008836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800883a:	f7f7 feed 	bl	8000618 <__aeabi_dmul>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4620      	mov	r0, r4
 8008844:	4629      	mov	r1, r5
 8008846:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800884a:	f7f7 fd2d 	bl	80002a8 <__aeabi_dsub>
 800884e:	f806 4b01 	strb.w	r4, [r6], #1
 8008852:	9d03      	ldr	r5, [sp, #12]
 8008854:	eba6 040a 	sub.w	r4, r6, sl
 8008858:	42a5      	cmp	r5, r4
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	d133      	bne.n	80088c8 <_dtoa_r+0x6e0>
 8008860:	f7f7 fd24 	bl	80002ac <__adddf3>
 8008864:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008868:	4604      	mov	r4, r0
 800886a:	460d      	mov	r5, r1
 800886c:	f7f8 f964 	bl	8000b38 <__aeabi_dcmpgt>
 8008870:	b9c0      	cbnz	r0, 80088a4 <_dtoa_r+0x6bc>
 8008872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	f7f8 f935 	bl	8000ae8 <__aeabi_dcmpeq>
 800887e:	b110      	cbz	r0, 8008886 <_dtoa_r+0x69e>
 8008880:	f018 0f01 	tst.w	r8, #1
 8008884:	d10e      	bne.n	80088a4 <_dtoa_r+0x6bc>
 8008886:	9902      	ldr	r1, [sp, #8]
 8008888:	4648      	mov	r0, r9
 800888a:	f000 fbbd 	bl	8009008 <_Bfree>
 800888e:	2300      	movs	r3, #0
 8008890:	7033      	strb	r3, [r6, #0]
 8008892:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008894:	3701      	adds	r7, #1
 8008896:	601f      	str	r7, [r3, #0]
 8008898:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 824b 	beq.w	8008d36 <_dtoa_r+0xb4e>
 80088a0:	601e      	str	r6, [r3, #0]
 80088a2:	e248      	b.n	8008d36 <_dtoa_r+0xb4e>
 80088a4:	46b8      	mov	r8, r7
 80088a6:	4633      	mov	r3, r6
 80088a8:	461e      	mov	r6, r3
 80088aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088ae:	2a39      	cmp	r2, #57	@ 0x39
 80088b0:	d106      	bne.n	80088c0 <_dtoa_r+0x6d8>
 80088b2:	459a      	cmp	sl, r3
 80088b4:	d1f8      	bne.n	80088a8 <_dtoa_r+0x6c0>
 80088b6:	2230      	movs	r2, #48	@ 0x30
 80088b8:	f108 0801 	add.w	r8, r8, #1
 80088bc:	f88a 2000 	strb.w	r2, [sl]
 80088c0:	781a      	ldrb	r2, [r3, #0]
 80088c2:	3201      	adds	r2, #1
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	e7a0      	b.n	800880a <_dtoa_r+0x622>
 80088c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008a88 <_dtoa_r+0x8a0>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7f7 fea4 	bl	8000618 <__aeabi_dmul>
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	f7f8 f906 	bl	8000ae8 <__aeabi_dcmpeq>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d09f      	beq.n	8008820 <_dtoa_r+0x638>
 80088e0:	e7d1      	b.n	8008886 <_dtoa_r+0x69e>
 80088e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088e4:	2a00      	cmp	r2, #0
 80088e6:	f000 80ea 	beq.w	8008abe <_dtoa_r+0x8d6>
 80088ea:	9a07      	ldr	r2, [sp, #28]
 80088ec:	2a01      	cmp	r2, #1
 80088ee:	f300 80cd 	bgt.w	8008a8c <_dtoa_r+0x8a4>
 80088f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80088f4:	2a00      	cmp	r2, #0
 80088f6:	f000 80c1 	beq.w	8008a7c <_dtoa_r+0x894>
 80088fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088fe:	9c08      	ldr	r4, [sp, #32]
 8008900:	9e00      	ldr	r6, [sp, #0]
 8008902:	9a00      	ldr	r2, [sp, #0]
 8008904:	441a      	add	r2, r3
 8008906:	9200      	str	r2, [sp, #0]
 8008908:	9a06      	ldr	r2, [sp, #24]
 800890a:	2101      	movs	r1, #1
 800890c:	441a      	add	r2, r3
 800890e:	4648      	mov	r0, r9
 8008910:	9206      	str	r2, [sp, #24]
 8008912:	f000 fc77 	bl	8009204 <__i2b>
 8008916:	4605      	mov	r5, r0
 8008918:	b166      	cbz	r6, 8008934 <_dtoa_r+0x74c>
 800891a:	9b06      	ldr	r3, [sp, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd09      	ble.n	8008934 <_dtoa_r+0x74c>
 8008920:	42b3      	cmp	r3, r6
 8008922:	9a00      	ldr	r2, [sp, #0]
 8008924:	bfa8      	it	ge
 8008926:	4633      	movge	r3, r6
 8008928:	1ad2      	subs	r2, r2, r3
 800892a:	9200      	str	r2, [sp, #0]
 800892c:	9a06      	ldr	r2, [sp, #24]
 800892e:	1af6      	subs	r6, r6, r3
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	9306      	str	r3, [sp, #24]
 8008934:	9b08      	ldr	r3, [sp, #32]
 8008936:	b30b      	cbz	r3, 800897c <_dtoa_r+0x794>
 8008938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80c6 	beq.w	8008acc <_dtoa_r+0x8e4>
 8008940:	2c00      	cmp	r4, #0
 8008942:	f000 80c0 	beq.w	8008ac6 <_dtoa_r+0x8de>
 8008946:	4629      	mov	r1, r5
 8008948:	4622      	mov	r2, r4
 800894a:	4648      	mov	r0, r9
 800894c:	f000 fd12 	bl	8009374 <__pow5mult>
 8008950:	9a02      	ldr	r2, [sp, #8]
 8008952:	4601      	mov	r1, r0
 8008954:	4605      	mov	r5, r0
 8008956:	4648      	mov	r0, r9
 8008958:	f000 fc6a 	bl	8009230 <__multiply>
 800895c:	9902      	ldr	r1, [sp, #8]
 800895e:	4680      	mov	r8, r0
 8008960:	4648      	mov	r0, r9
 8008962:	f000 fb51 	bl	8009008 <_Bfree>
 8008966:	9b08      	ldr	r3, [sp, #32]
 8008968:	1b1b      	subs	r3, r3, r4
 800896a:	9308      	str	r3, [sp, #32]
 800896c:	f000 80b1 	beq.w	8008ad2 <_dtoa_r+0x8ea>
 8008970:	9a08      	ldr	r2, [sp, #32]
 8008972:	4641      	mov	r1, r8
 8008974:	4648      	mov	r0, r9
 8008976:	f000 fcfd 	bl	8009374 <__pow5mult>
 800897a:	9002      	str	r0, [sp, #8]
 800897c:	2101      	movs	r1, #1
 800897e:	4648      	mov	r0, r9
 8008980:	f000 fc40 	bl	8009204 <__i2b>
 8008984:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008986:	4604      	mov	r4, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 81d8 	beq.w	8008d3e <_dtoa_r+0xb56>
 800898e:	461a      	mov	r2, r3
 8008990:	4601      	mov	r1, r0
 8008992:	4648      	mov	r0, r9
 8008994:	f000 fcee 	bl	8009374 <__pow5mult>
 8008998:	9b07      	ldr	r3, [sp, #28]
 800899a:	2b01      	cmp	r3, #1
 800899c:	4604      	mov	r4, r0
 800899e:	f300 809f 	bgt.w	8008ae0 <_dtoa_r+0x8f8>
 80089a2:	9b04      	ldr	r3, [sp, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 8097 	bne.w	8008ad8 <_dtoa_r+0x8f0>
 80089aa:	9b05      	ldr	r3, [sp, #20]
 80089ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f040 8093 	bne.w	8008adc <_dtoa_r+0x8f4>
 80089b6:	9b05      	ldr	r3, [sp, #20]
 80089b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089bc:	0d1b      	lsrs	r3, r3, #20
 80089be:	051b      	lsls	r3, r3, #20
 80089c0:	b133      	cbz	r3, 80089d0 <_dtoa_r+0x7e8>
 80089c2:	9b00      	ldr	r3, [sp, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	9b06      	ldr	r3, [sp, #24]
 80089ca:	3301      	adds	r3, #1
 80089cc:	9306      	str	r3, [sp, #24]
 80089ce:	2301      	movs	r3, #1
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 81b8 	beq.w	8008d4a <_dtoa_r+0xb62>
 80089da:	6923      	ldr	r3, [r4, #16]
 80089dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089e0:	6918      	ldr	r0, [r3, #16]
 80089e2:	f000 fbc3 	bl	800916c <__hi0bits>
 80089e6:	f1c0 0020 	rsb	r0, r0, #32
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	4418      	add	r0, r3
 80089ee:	f010 001f 	ands.w	r0, r0, #31
 80089f2:	f000 8082 	beq.w	8008afa <_dtoa_r+0x912>
 80089f6:	f1c0 0320 	rsb	r3, r0, #32
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	dd73      	ble.n	8008ae6 <_dtoa_r+0x8fe>
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	f1c0 001c 	rsb	r0, r0, #28
 8008a04:	4403      	add	r3, r0
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	9b06      	ldr	r3, [sp, #24]
 8008a0a:	4403      	add	r3, r0
 8008a0c:	4406      	add	r6, r0
 8008a0e:	9306      	str	r3, [sp, #24]
 8008a10:	9b00      	ldr	r3, [sp, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	dd05      	ble.n	8008a22 <_dtoa_r+0x83a>
 8008a16:	9902      	ldr	r1, [sp, #8]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4648      	mov	r0, r9
 8008a1c:	f000 fd04 	bl	8009428 <__lshift>
 8008a20:	9002      	str	r0, [sp, #8]
 8008a22:	9b06      	ldr	r3, [sp, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dd05      	ble.n	8008a34 <_dtoa_r+0x84c>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f000 fcfb 	bl	8009428 <__lshift>
 8008a32:	4604      	mov	r4, r0
 8008a34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d061      	beq.n	8008afe <_dtoa_r+0x916>
 8008a3a:	9802      	ldr	r0, [sp, #8]
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f000 fd5f 	bl	8009500 <__mcmp>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	da5b      	bge.n	8008afe <_dtoa_r+0x916>
 8008a46:	2300      	movs	r3, #0
 8008a48:	9902      	ldr	r1, [sp, #8]
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	4648      	mov	r0, r9
 8008a4e:	f000 fafd 	bl	800904c <__multadd>
 8008a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a54:	9002      	str	r0, [sp, #8]
 8008a56:	f107 38ff 	add.w	r8, r7, #4294967295
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 8177 	beq.w	8008d4e <_dtoa_r+0xb66>
 8008a60:	4629      	mov	r1, r5
 8008a62:	2300      	movs	r3, #0
 8008a64:	220a      	movs	r2, #10
 8008a66:	4648      	mov	r0, r9
 8008a68:	f000 faf0 	bl	800904c <__multadd>
 8008a6c:	f1bb 0f00 	cmp.w	fp, #0
 8008a70:	4605      	mov	r5, r0
 8008a72:	dc6f      	bgt.n	8008b54 <_dtoa_r+0x96c>
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	dc49      	bgt.n	8008b0e <_dtoa_r+0x926>
 8008a7a:	e06b      	b.n	8008b54 <_dtoa_r+0x96c>
 8008a7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a82:	e73c      	b.n	80088fe <_dtoa_r+0x716>
 8008a84:	3fe00000 	.word	0x3fe00000
 8008a88:	40240000 	.word	0x40240000
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	1e5c      	subs	r4, r3, #1
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	db09      	blt.n	8008aaa <_dtoa_r+0x8c2>
 8008a96:	1b1c      	subs	r4, r3, r4
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f6bf af30 	bge.w	8008900 <_dtoa_r+0x718>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	9a03      	ldr	r2, [sp, #12]
 8008aa4:	1a9e      	subs	r6, r3, r2
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e72b      	b.n	8008902 <_dtoa_r+0x71a>
 8008aaa:	9b08      	ldr	r3, [sp, #32]
 8008aac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008aae:	9408      	str	r4, [sp, #32]
 8008ab0:	1ae3      	subs	r3, r4, r3
 8008ab2:	441a      	add	r2, r3
 8008ab4:	9e00      	ldr	r6, [sp, #0]
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	920d      	str	r2, [sp, #52]	@ 0x34
 8008aba:	2400      	movs	r4, #0
 8008abc:	e721      	b.n	8008902 <_dtoa_r+0x71a>
 8008abe:	9c08      	ldr	r4, [sp, #32]
 8008ac0:	9e00      	ldr	r6, [sp, #0]
 8008ac2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008ac4:	e728      	b.n	8008918 <_dtoa_r+0x730>
 8008ac6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008aca:	e751      	b.n	8008970 <_dtoa_r+0x788>
 8008acc:	9a08      	ldr	r2, [sp, #32]
 8008ace:	9902      	ldr	r1, [sp, #8]
 8008ad0:	e750      	b.n	8008974 <_dtoa_r+0x78c>
 8008ad2:	f8cd 8008 	str.w	r8, [sp, #8]
 8008ad6:	e751      	b.n	800897c <_dtoa_r+0x794>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e779      	b.n	80089d0 <_dtoa_r+0x7e8>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	e777      	b.n	80089d0 <_dtoa_r+0x7e8>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9308      	str	r3, [sp, #32]
 8008ae4:	e779      	b.n	80089da <_dtoa_r+0x7f2>
 8008ae6:	d093      	beq.n	8008a10 <_dtoa_r+0x828>
 8008ae8:	9a00      	ldr	r2, [sp, #0]
 8008aea:	331c      	adds	r3, #28
 8008aec:	441a      	add	r2, r3
 8008aee:	9200      	str	r2, [sp, #0]
 8008af0:	9a06      	ldr	r2, [sp, #24]
 8008af2:	441a      	add	r2, r3
 8008af4:	441e      	add	r6, r3
 8008af6:	9206      	str	r2, [sp, #24]
 8008af8:	e78a      	b.n	8008a10 <_dtoa_r+0x828>
 8008afa:	4603      	mov	r3, r0
 8008afc:	e7f4      	b.n	8008ae8 <_dtoa_r+0x900>
 8008afe:	9b03      	ldr	r3, [sp, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	46b8      	mov	r8, r7
 8008b04:	dc20      	bgt.n	8008b48 <_dtoa_r+0x960>
 8008b06:	469b      	mov	fp, r3
 8008b08:	9b07      	ldr	r3, [sp, #28]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	dd1e      	ble.n	8008b4c <_dtoa_r+0x964>
 8008b0e:	f1bb 0f00 	cmp.w	fp, #0
 8008b12:	f47f adb1 	bne.w	8008678 <_dtoa_r+0x490>
 8008b16:	4621      	mov	r1, r4
 8008b18:	465b      	mov	r3, fp
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f000 fa95 	bl	800904c <__multadd>
 8008b22:	4601      	mov	r1, r0
 8008b24:	4604      	mov	r4, r0
 8008b26:	9802      	ldr	r0, [sp, #8]
 8008b28:	f000 fcea 	bl	8009500 <__mcmp>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	f77f ada3 	ble.w	8008678 <_dtoa_r+0x490>
 8008b32:	4656      	mov	r6, sl
 8008b34:	2331      	movs	r3, #49	@ 0x31
 8008b36:	f806 3b01 	strb.w	r3, [r6], #1
 8008b3a:	f108 0801 	add.w	r8, r8, #1
 8008b3e:	e59f      	b.n	8008680 <_dtoa_r+0x498>
 8008b40:	9c03      	ldr	r4, [sp, #12]
 8008b42:	46b8      	mov	r8, r7
 8008b44:	4625      	mov	r5, r4
 8008b46:	e7f4      	b.n	8008b32 <_dtoa_r+0x94a>
 8008b48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f000 8101 	beq.w	8008d56 <_dtoa_r+0xb6e>
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	dd05      	ble.n	8008b64 <_dtoa_r+0x97c>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	4648      	mov	r0, r9
 8008b5e:	f000 fc63 	bl	8009428 <__lshift>
 8008b62:	4605      	mov	r5, r0
 8008b64:	9b08      	ldr	r3, [sp, #32]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d05c      	beq.n	8008c24 <_dtoa_r+0xa3c>
 8008b6a:	6869      	ldr	r1, [r5, #4]
 8008b6c:	4648      	mov	r0, r9
 8008b6e:	f000 fa0b 	bl	8008f88 <_Balloc>
 8008b72:	4606      	mov	r6, r0
 8008b74:	b928      	cbnz	r0, 8008b82 <_dtoa_r+0x99a>
 8008b76:	4b82      	ldr	r3, [pc, #520]	@ (8008d80 <_dtoa_r+0xb98>)
 8008b78:	4602      	mov	r2, r0
 8008b7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b7e:	f7ff bb4a 	b.w	8008216 <_dtoa_r+0x2e>
 8008b82:	692a      	ldr	r2, [r5, #16]
 8008b84:	3202      	adds	r2, #2
 8008b86:	0092      	lsls	r2, r2, #2
 8008b88:	f105 010c 	add.w	r1, r5, #12
 8008b8c:	300c      	adds	r0, #12
 8008b8e:	f002 fae9 	bl	800b164 <memcpy>
 8008b92:	2201      	movs	r2, #1
 8008b94:	4631      	mov	r1, r6
 8008b96:	4648      	mov	r0, r9
 8008b98:	f000 fc46 	bl	8009428 <__lshift>
 8008b9c:	f10a 0301 	add.w	r3, sl, #1
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	eb0a 030b 	add.w	r3, sl, fp
 8008ba6:	9308      	str	r3, [sp, #32]
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	462f      	mov	r7, r5
 8008bb0:	9306      	str	r3, [sp, #24]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	9b00      	ldr	r3, [sp, #0]
 8008bb6:	9802      	ldr	r0, [sp, #8]
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f103 3bff 	add.w	fp, r3, #4294967295
 8008bbe:	f7ff fa8b 	bl	80080d8 <quorem>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	3330      	adds	r3, #48	@ 0x30
 8008bc6:	9003      	str	r0, [sp, #12]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	9802      	ldr	r0, [sp, #8]
 8008bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bce:	f000 fc97 	bl	8009500 <__mcmp>
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	9004      	str	r0, [sp, #16]
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4648      	mov	r0, r9
 8008bda:	f000 fcad 	bl	8009538 <__mdiff>
 8008bde:	68c2      	ldr	r2, [r0, #12]
 8008be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be2:	4606      	mov	r6, r0
 8008be4:	bb02      	cbnz	r2, 8008c28 <_dtoa_r+0xa40>
 8008be6:	4601      	mov	r1, r0
 8008be8:	9802      	ldr	r0, [sp, #8]
 8008bea:	f000 fc89 	bl	8009500 <__mcmp>
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4648      	mov	r0, r9
 8008bf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bfa:	f000 fa05 	bl	8009008 <_Bfree>
 8008bfe:	9b07      	ldr	r3, [sp, #28]
 8008c00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c02:	9e00      	ldr	r6, [sp, #0]
 8008c04:	ea42 0103 	orr.w	r1, r2, r3
 8008c08:	9b06      	ldr	r3, [sp, #24]
 8008c0a:	4319      	orrs	r1, r3
 8008c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c0e:	d10d      	bne.n	8008c2c <_dtoa_r+0xa44>
 8008c10:	2b39      	cmp	r3, #57	@ 0x39
 8008c12:	d027      	beq.n	8008c64 <_dtoa_r+0xa7c>
 8008c14:	9a04      	ldr	r2, [sp, #16]
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	dd01      	ble.n	8008c1e <_dtoa_r+0xa36>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	3331      	adds	r3, #49	@ 0x31
 8008c1e:	f88b 3000 	strb.w	r3, [fp]
 8008c22:	e52e      	b.n	8008682 <_dtoa_r+0x49a>
 8008c24:	4628      	mov	r0, r5
 8008c26:	e7b9      	b.n	8008b9c <_dtoa_r+0x9b4>
 8008c28:	2201      	movs	r2, #1
 8008c2a:	e7e2      	b.n	8008bf2 <_dtoa_r+0xa0a>
 8008c2c:	9904      	ldr	r1, [sp, #16]
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	db04      	blt.n	8008c3c <_dtoa_r+0xa54>
 8008c32:	9807      	ldr	r0, [sp, #28]
 8008c34:	4301      	orrs	r1, r0
 8008c36:	9806      	ldr	r0, [sp, #24]
 8008c38:	4301      	orrs	r1, r0
 8008c3a:	d120      	bne.n	8008c7e <_dtoa_r+0xa96>
 8008c3c:	2a00      	cmp	r2, #0
 8008c3e:	ddee      	ble.n	8008c1e <_dtoa_r+0xa36>
 8008c40:	9902      	ldr	r1, [sp, #8]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	2201      	movs	r2, #1
 8008c46:	4648      	mov	r0, r9
 8008c48:	f000 fbee 	bl	8009428 <__lshift>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	9002      	str	r0, [sp, #8]
 8008c50:	f000 fc56 	bl	8009500 <__mcmp>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	9b00      	ldr	r3, [sp, #0]
 8008c58:	dc02      	bgt.n	8008c60 <_dtoa_r+0xa78>
 8008c5a:	d1e0      	bne.n	8008c1e <_dtoa_r+0xa36>
 8008c5c:	07da      	lsls	r2, r3, #31
 8008c5e:	d5de      	bpl.n	8008c1e <_dtoa_r+0xa36>
 8008c60:	2b39      	cmp	r3, #57	@ 0x39
 8008c62:	d1da      	bne.n	8008c1a <_dtoa_r+0xa32>
 8008c64:	2339      	movs	r3, #57	@ 0x39
 8008c66:	f88b 3000 	strb.w	r3, [fp]
 8008c6a:	4633      	mov	r3, r6
 8008c6c:	461e      	mov	r6, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c74:	2a39      	cmp	r2, #57	@ 0x39
 8008c76:	d04e      	beq.n	8008d16 <_dtoa_r+0xb2e>
 8008c78:	3201      	adds	r2, #1
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e501      	b.n	8008682 <_dtoa_r+0x49a>
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	dd03      	ble.n	8008c8a <_dtoa_r+0xaa2>
 8008c82:	2b39      	cmp	r3, #57	@ 0x39
 8008c84:	d0ee      	beq.n	8008c64 <_dtoa_r+0xa7c>
 8008c86:	3301      	adds	r3, #1
 8008c88:	e7c9      	b.n	8008c1e <_dtoa_r+0xa36>
 8008c8a:	9a00      	ldr	r2, [sp, #0]
 8008c8c:	9908      	ldr	r1, [sp, #32]
 8008c8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c92:	428a      	cmp	r2, r1
 8008c94:	d028      	beq.n	8008ce8 <_dtoa_r+0xb00>
 8008c96:	9902      	ldr	r1, [sp, #8]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	220a      	movs	r2, #10
 8008c9c:	4648      	mov	r0, r9
 8008c9e:	f000 f9d5 	bl	800904c <__multadd>
 8008ca2:	42af      	cmp	r7, r5
 8008ca4:	9002      	str	r0, [sp, #8]
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	f04f 020a 	mov.w	r2, #10
 8008cae:	4639      	mov	r1, r7
 8008cb0:	4648      	mov	r0, r9
 8008cb2:	d107      	bne.n	8008cc4 <_dtoa_r+0xadc>
 8008cb4:	f000 f9ca 	bl	800904c <__multadd>
 8008cb8:	4607      	mov	r7, r0
 8008cba:	4605      	mov	r5, r0
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	e777      	b.n	8008bb4 <_dtoa_r+0x9cc>
 8008cc4:	f000 f9c2 	bl	800904c <__multadd>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	4607      	mov	r7, r0
 8008ccc:	2300      	movs	r3, #0
 8008cce:	220a      	movs	r2, #10
 8008cd0:	4648      	mov	r0, r9
 8008cd2:	f000 f9bb 	bl	800904c <__multadd>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	e7f0      	b.n	8008cbc <_dtoa_r+0xad4>
 8008cda:	f1bb 0f00 	cmp.w	fp, #0
 8008cde:	bfcc      	ite	gt
 8008ce0:	465e      	movgt	r6, fp
 8008ce2:	2601      	movle	r6, #1
 8008ce4:	4456      	add	r6, sl
 8008ce6:	2700      	movs	r7, #0
 8008ce8:	9902      	ldr	r1, [sp, #8]
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	2201      	movs	r2, #1
 8008cee:	4648      	mov	r0, r9
 8008cf0:	f000 fb9a 	bl	8009428 <__lshift>
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	9002      	str	r0, [sp, #8]
 8008cf8:	f000 fc02 	bl	8009500 <__mcmp>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	dcb4      	bgt.n	8008c6a <_dtoa_r+0xa82>
 8008d00:	d102      	bne.n	8008d08 <_dtoa_r+0xb20>
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	07db      	lsls	r3, r3, #31
 8008d06:	d4b0      	bmi.n	8008c6a <_dtoa_r+0xa82>
 8008d08:	4633      	mov	r3, r6
 8008d0a:	461e      	mov	r6, r3
 8008d0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d10:	2a30      	cmp	r2, #48	@ 0x30
 8008d12:	d0fa      	beq.n	8008d0a <_dtoa_r+0xb22>
 8008d14:	e4b5      	b.n	8008682 <_dtoa_r+0x49a>
 8008d16:	459a      	cmp	sl, r3
 8008d18:	d1a8      	bne.n	8008c6c <_dtoa_r+0xa84>
 8008d1a:	2331      	movs	r3, #49	@ 0x31
 8008d1c:	f108 0801 	add.w	r8, r8, #1
 8008d20:	f88a 3000 	strb.w	r3, [sl]
 8008d24:	e4ad      	b.n	8008682 <_dtoa_r+0x49a>
 8008d26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008d84 <_dtoa_r+0xb9c>
 8008d2c:	b11b      	cbz	r3, 8008d36 <_dtoa_r+0xb4e>
 8008d2e:	f10a 0308 	add.w	r3, sl, #8
 8008d32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	4650      	mov	r0, sl
 8008d38:	b017      	add	sp, #92	@ 0x5c
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	9b07      	ldr	r3, [sp, #28]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	f77f ae2e 	ble.w	80089a2 <_dtoa_r+0x7ba>
 8008d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d48:	9308      	str	r3, [sp, #32]
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	e64d      	b.n	80089ea <_dtoa_r+0x802>
 8008d4e:	f1bb 0f00 	cmp.w	fp, #0
 8008d52:	f77f aed9 	ble.w	8008b08 <_dtoa_r+0x920>
 8008d56:	4656      	mov	r6, sl
 8008d58:	9802      	ldr	r0, [sp, #8]
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	f7ff f9bc 	bl	80080d8 <quorem>
 8008d60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008d64:	f806 3b01 	strb.w	r3, [r6], #1
 8008d68:	eba6 020a 	sub.w	r2, r6, sl
 8008d6c:	4593      	cmp	fp, r2
 8008d6e:	ddb4      	ble.n	8008cda <_dtoa_r+0xaf2>
 8008d70:	9902      	ldr	r1, [sp, #8]
 8008d72:	2300      	movs	r3, #0
 8008d74:	220a      	movs	r2, #10
 8008d76:	4648      	mov	r0, r9
 8008d78:	f000 f968 	bl	800904c <__multadd>
 8008d7c:	9002      	str	r0, [sp, #8]
 8008d7e:	e7eb      	b.n	8008d58 <_dtoa_r+0xb70>
 8008d80:	0800c0d7 	.word	0x0800c0d7
 8008d84:	0800c05b 	.word	0x0800c05b

08008d88 <_free_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d041      	beq.n	8008e14 <_free_r+0x8c>
 8008d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d94:	1f0c      	subs	r4, r1, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfb8      	it	lt
 8008d9a:	18e4      	addlt	r4, r4, r3
 8008d9c:	f000 f8e8 	bl	8008f70 <__malloc_lock>
 8008da0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e18 <_free_r+0x90>)
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	b933      	cbnz	r3, 8008db4 <_free_r+0x2c>
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	6014      	str	r4, [r2, #0]
 8008daa:	4628      	mov	r0, r5
 8008dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db0:	f000 b8e4 	b.w	8008f7c <__malloc_unlock>
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d908      	bls.n	8008dca <_free_r+0x42>
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	1821      	adds	r1, r4, r0
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf01      	itttt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	1809      	addeq	r1, r1, r0
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	e7ed      	b.n	8008da6 <_free_r+0x1e>
 8008dca:	461a      	mov	r2, r3
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b10b      	cbz	r3, 8008dd4 <_free_r+0x4c>
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	d9fa      	bls.n	8008dca <_free_r+0x42>
 8008dd4:	6811      	ldr	r1, [r2, #0]
 8008dd6:	1850      	adds	r0, r2, r1
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d10b      	bne.n	8008df4 <_free_r+0x6c>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	4401      	add	r1, r0
 8008de0:	1850      	adds	r0, r2, r1
 8008de2:	4283      	cmp	r3, r0
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	d1e0      	bne.n	8008daa <_free_r+0x22>
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	6053      	str	r3, [r2, #4]
 8008dee:	4408      	add	r0, r1
 8008df0:	6010      	str	r0, [r2, #0]
 8008df2:	e7da      	b.n	8008daa <_free_r+0x22>
 8008df4:	d902      	bls.n	8008dfc <_free_r+0x74>
 8008df6:	230c      	movs	r3, #12
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	e7d6      	b.n	8008daa <_free_r+0x22>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	1821      	adds	r1, r4, r0
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf04      	itt	eq
 8008e04:	6819      	ldreq	r1, [r3, #0]
 8008e06:	685b      	ldreq	r3, [r3, #4]
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	bf04      	itt	eq
 8008e0c:	1809      	addeq	r1, r1, r0
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	6054      	str	r4, [r2, #4]
 8008e12:	e7ca      	b.n	8008daa <_free_r+0x22>
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	bf00      	nop
 8008e18:	200019f4 	.word	0x200019f4

08008e1c <malloc>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	@ (8008e28 <malloc+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f000 b825 	b.w	8008e70 <_malloc_r>
 8008e26:	bf00      	nop
 8008e28:	2000101c 	.word	0x2000101c

08008e2c <sbrk_aligned>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008e6c <sbrk_aligned+0x40>)
 8008e30:	460c      	mov	r4, r1
 8008e32:	6831      	ldr	r1, [r6, #0]
 8008e34:	4605      	mov	r5, r0
 8008e36:	b911      	cbnz	r1, 8008e3e <sbrk_aligned+0x12>
 8008e38:	f002 f984 	bl	800b144 <_sbrk_r>
 8008e3c:	6030      	str	r0, [r6, #0]
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4628      	mov	r0, r5
 8008e42:	f002 f97f 	bl	800b144 <_sbrk_r>
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	d103      	bne.n	8008e52 <sbrk_aligned+0x26>
 8008e4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008e4e:	4620      	mov	r0, r4
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
 8008e52:	1cc4      	adds	r4, r0, #3
 8008e54:	f024 0403 	bic.w	r4, r4, #3
 8008e58:	42a0      	cmp	r0, r4
 8008e5a:	d0f8      	beq.n	8008e4e <sbrk_aligned+0x22>
 8008e5c:	1a21      	subs	r1, r4, r0
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f002 f970 	bl	800b144 <_sbrk_r>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d1f2      	bne.n	8008e4e <sbrk_aligned+0x22>
 8008e68:	e7ef      	b.n	8008e4a <sbrk_aligned+0x1e>
 8008e6a:	bf00      	nop
 8008e6c:	200019f0 	.word	0x200019f0

08008e70 <_malloc_r>:
 8008e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e74:	1ccd      	adds	r5, r1, #3
 8008e76:	f025 0503 	bic.w	r5, r5, #3
 8008e7a:	3508      	adds	r5, #8
 8008e7c:	2d0c      	cmp	r5, #12
 8008e7e:	bf38      	it	cc
 8008e80:	250c      	movcc	r5, #12
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	4606      	mov	r6, r0
 8008e86:	db01      	blt.n	8008e8c <_malloc_r+0x1c>
 8008e88:	42a9      	cmp	r1, r5
 8008e8a:	d904      	bls.n	8008e96 <_malloc_r+0x26>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	6033      	str	r3, [r6, #0]
 8008e90:	2000      	movs	r0, #0
 8008e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f6c <_malloc_r+0xfc>
 8008e9a:	f000 f869 	bl	8008f70 <__malloc_lock>
 8008e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea2:	461c      	mov	r4, r3
 8008ea4:	bb44      	cbnz	r4, 8008ef8 <_malloc_r+0x88>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff ffbf 	bl	8008e2c <sbrk_aligned>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	d158      	bne.n	8008f66 <_malloc_r+0xf6>
 8008eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8008eb8:	4627      	mov	r7, r4
 8008eba:	2f00      	cmp	r7, #0
 8008ebc:	d143      	bne.n	8008f46 <_malloc_r+0xd6>
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	d04b      	beq.n	8008f5a <_malloc_r+0xea>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	eb04 0903 	add.w	r9, r4, r3
 8008ecc:	f002 f93a 	bl	800b144 <_sbrk_r>
 8008ed0:	4581      	cmp	r9, r0
 8008ed2:	d142      	bne.n	8008f5a <_malloc_r+0xea>
 8008ed4:	6821      	ldr	r1, [r4, #0]
 8008ed6:	1a6d      	subs	r5, r5, r1
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ffa6 	bl	8008e2c <sbrk_aligned>
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d03a      	beq.n	8008f5a <_malloc_r+0xea>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	442b      	add	r3, r5
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	f8d8 3000 	ldr.w	r3, [r8]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	bb62      	cbnz	r2, 8008f4c <_malloc_r+0xdc>
 8008ef2:	f8c8 7000 	str.w	r7, [r8]
 8008ef6:	e00f      	b.n	8008f18 <_malloc_r+0xa8>
 8008ef8:	6822      	ldr	r2, [r4, #0]
 8008efa:	1b52      	subs	r2, r2, r5
 8008efc:	d420      	bmi.n	8008f40 <_malloc_r+0xd0>
 8008efe:	2a0b      	cmp	r2, #11
 8008f00:	d917      	bls.n	8008f32 <_malloc_r+0xc2>
 8008f02:	1961      	adds	r1, r4, r5
 8008f04:	42a3      	cmp	r3, r4
 8008f06:	6025      	str	r5, [r4, #0]
 8008f08:	bf18      	it	ne
 8008f0a:	6059      	strne	r1, [r3, #4]
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	bf08      	it	eq
 8008f10:	f8c8 1000 	streq.w	r1, [r8]
 8008f14:	5162      	str	r2, [r4, r5]
 8008f16:	604b      	str	r3, [r1, #4]
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f82f 	bl	8008f7c <__malloc_unlock>
 8008f1e:	f104 000b 	add.w	r0, r4, #11
 8008f22:	1d23      	adds	r3, r4, #4
 8008f24:	f020 0007 	bic.w	r0, r0, #7
 8008f28:	1ac2      	subs	r2, r0, r3
 8008f2a:	bf1c      	itt	ne
 8008f2c:	1a1b      	subne	r3, r3, r0
 8008f2e:	50a3      	strne	r3, [r4, r2]
 8008f30:	e7af      	b.n	8008e92 <_malloc_r+0x22>
 8008f32:	6862      	ldr	r2, [r4, #4]
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	bf0c      	ite	eq
 8008f38:	f8c8 2000 	streq.w	r2, [r8]
 8008f3c:	605a      	strne	r2, [r3, #4]
 8008f3e:	e7eb      	b.n	8008f18 <_malloc_r+0xa8>
 8008f40:	4623      	mov	r3, r4
 8008f42:	6864      	ldr	r4, [r4, #4]
 8008f44:	e7ae      	b.n	8008ea4 <_malloc_r+0x34>
 8008f46:	463c      	mov	r4, r7
 8008f48:	687f      	ldr	r7, [r7, #4]
 8008f4a:	e7b6      	b.n	8008eba <_malloc_r+0x4a>
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d1fb      	bne.n	8008f4c <_malloc_r+0xdc>
 8008f54:	2300      	movs	r3, #0
 8008f56:	6053      	str	r3, [r2, #4]
 8008f58:	e7de      	b.n	8008f18 <_malloc_r+0xa8>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f000 f80c 	bl	8008f7c <__malloc_unlock>
 8008f64:	e794      	b.n	8008e90 <_malloc_r+0x20>
 8008f66:	6005      	str	r5, [r0, #0]
 8008f68:	e7d6      	b.n	8008f18 <_malloc_r+0xa8>
 8008f6a:	bf00      	nop
 8008f6c:	200019f4 	.word	0x200019f4

08008f70 <__malloc_lock>:
 8008f70:	4801      	ldr	r0, [pc, #4]	@ (8008f78 <__malloc_lock+0x8>)
 8008f72:	f7ff b8a8 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	200019ec 	.word	0x200019ec

08008f7c <__malloc_unlock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	@ (8008f84 <__malloc_unlock+0x8>)
 8008f7e:	f7ff b8a3 	b.w	80080c8 <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	200019ec 	.word	0x200019ec

08008f88 <_Balloc>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	69c6      	ldr	r6, [r0, #28]
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	460d      	mov	r5, r1
 8008f90:	b976      	cbnz	r6, 8008fb0 <_Balloc+0x28>
 8008f92:	2010      	movs	r0, #16
 8008f94:	f7ff ff42 	bl	8008e1c <malloc>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	61e0      	str	r0, [r4, #28]
 8008f9c:	b920      	cbnz	r0, 8008fa8 <_Balloc+0x20>
 8008f9e:	4b18      	ldr	r3, [pc, #96]	@ (8009000 <_Balloc+0x78>)
 8008fa0:	4818      	ldr	r0, [pc, #96]	@ (8009004 <_Balloc+0x7c>)
 8008fa2:	216b      	movs	r1, #107	@ 0x6b
 8008fa4:	f002 f8f4 	bl	800b190 <__assert_func>
 8008fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fac:	6006      	str	r6, [r0, #0]
 8008fae:	60c6      	str	r6, [r0, #12]
 8008fb0:	69e6      	ldr	r6, [r4, #28]
 8008fb2:	68f3      	ldr	r3, [r6, #12]
 8008fb4:	b183      	cbz	r3, 8008fd8 <_Balloc+0x50>
 8008fb6:	69e3      	ldr	r3, [r4, #28]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fbe:	b9b8      	cbnz	r0, 8008ff0 <_Balloc+0x68>
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	fa01 f605 	lsl.w	r6, r1, r5
 8008fc6:	1d72      	adds	r2, r6, #5
 8008fc8:	0092      	lsls	r2, r2, #2
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f002 f8fe 	bl	800b1cc <_calloc_r>
 8008fd0:	b160      	cbz	r0, 8008fec <_Balloc+0x64>
 8008fd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fd6:	e00e      	b.n	8008ff6 <_Balloc+0x6e>
 8008fd8:	2221      	movs	r2, #33	@ 0x21
 8008fda:	2104      	movs	r1, #4
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f002 f8f5 	bl	800b1cc <_calloc_r>
 8008fe2:	69e3      	ldr	r3, [r4, #28]
 8008fe4:	60f0      	str	r0, [r6, #12]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e4      	bne.n	8008fb6 <_Balloc+0x2e>
 8008fec:	2000      	movs	r0, #0
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	6802      	ldr	r2, [r0, #0]
 8008ff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ffc:	e7f7      	b.n	8008fee <_Balloc+0x66>
 8008ffe:	bf00      	nop
 8009000:	0800c068 	.word	0x0800c068
 8009004:	0800c0e8 	.word	0x0800c0e8

08009008 <_Bfree>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	69c6      	ldr	r6, [r0, #28]
 800900c:	4605      	mov	r5, r0
 800900e:	460c      	mov	r4, r1
 8009010:	b976      	cbnz	r6, 8009030 <_Bfree+0x28>
 8009012:	2010      	movs	r0, #16
 8009014:	f7ff ff02 	bl	8008e1c <malloc>
 8009018:	4602      	mov	r2, r0
 800901a:	61e8      	str	r0, [r5, #28]
 800901c:	b920      	cbnz	r0, 8009028 <_Bfree+0x20>
 800901e:	4b09      	ldr	r3, [pc, #36]	@ (8009044 <_Bfree+0x3c>)
 8009020:	4809      	ldr	r0, [pc, #36]	@ (8009048 <_Bfree+0x40>)
 8009022:	218f      	movs	r1, #143	@ 0x8f
 8009024:	f002 f8b4 	bl	800b190 <__assert_func>
 8009028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800902c:	6006      	str	r6, [r0, #0]
 800902e:	60c6      	str	r6, [r0, #12]
 8009030:	b13c      	cbz	r4, 8009042 <_Bfree+0x3a>
 8009032:	69eb      	ldr	r3, [r5, #28]
 8009034:	6862      	ldr	r2, [r4, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800903c:	6021      	str	r1, [r4, #0]
 800903e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	0800c068 	.word	0x0800c068
 8009048:	0800c0e8 	.word	0x0800c0e8

0800904c <__multadd>:
 800904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009050:	690d      	ldr	r5, [r1, #16]
 8009052:	4607      	mov	r7, r0
 8009054:	460c      	mov	r4, r1
 8009056:	461e      	mov	r6, r3
 8009058:	f101 0c14 	add.w	ip, r1, #20
 800905c:	2000      	movs	r0, #0
 800905e:	f8dc 3000 	ldr.w	r3, [ip]
 8009062:	b299      	uxth	r1, r3
 8009064:	fb02 6101 	mla	r1, r2, r1, r6
 8009068:	0c1e      	lsrs	r6, r3, #16
 800906a:	0c0b      	lsrs	r3, r1, #16
 800906c:	fb02 3306 	mla	r3, r2, r6, r3
 8009070:	b289      	uxth	r1, r1
 8009072:	3001      	adds	r0, #1
 8009074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009078:	4285      	cmp	r5, r0
 800907a:	f84c 1b04 	str.w	r1, [ip], #4
 800907e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009082:	dcec      	bgt.n	800905e <__multadd+0x12>
 8009084:	b30e      	cbz	r6, 80090ca <__multadd+0x7e>
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	42ab      	cmp	r3, r5
 800908a:	dc19      	bgt.n	80090c0 <__multadd+0x74>
 800908c:	6861      	ldr	r1, [r4, #4]
 800908e:	4638      	mov	r0, r7
 8009090:	3101      	adds	r1, #1
 8009092:	f7ff ff79 	bl	8008f88 <_Balloc>
 8009096:	4680      	mov	r8, r0
 8009098:	b928      	cbnz	r0, 80090a6 <__multadd+0x5a>
 800909a:	4602      	mov	r2, r0
 800909c:	4b0c      	ldr	r3, [pc, #48]	@ (80090d0 <__multadd+0x84>)
 800909e:	480d      	ldr	r0, [pc, #52]	@ (80090d4 <__multadd+0x88>)
 80090a0:	21ba      	movs	r1, #186	@ 0xba
 80090a2:	f002 f875 	bl	800b190 <__assert_func>
 80090a6:	6922      	ldr	r2, [r4, #16]
 80090a8:	3202      	adds	r2, #2
 80090aa:	f104 010c 	add.w	r1, r4, #12
 80090ae:	0092      	lsls	r2, r2, #2
 80090b0:	300c      	adds	r0, #12
 80090b2:	f002 f857 	bl	800b164 <memcpy>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff ffa5 	bl	8009008 <_Bfree>
 80090be:	4644      	mov	r4, r8
 80090c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090c4:	3501      	adds	r5, #1
 80090c6:	615e      	str	r6, [r3, #20]
 80090c8:	6125      	str	r5, [r4, #16]
 80090ca:	4620      	mov	r0, r4
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d0:	0800c0d7 	.word	0x0800c0d7
 80090d4:	0800c0e8 	.word	0x0800c0e8

080090d8 <__s2b>:
 80090d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090dc:	460c      	mov	r4, r1
 80090de:	4615      	mov	r5, r2
 80090e0:	461f      	mov	r7, r3
 80090e2:	2209      	movs	r2, #9
 80090e4:	3308      	adds	r3, #8
 80090e6:	4606      	mov	r6, r0
 80090e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ec:	2100      	movs	r1, #0
 80090ee:	2201      	movs	r2, #1
 80090f0:	429a      	cmp	r2, r3
 80090f2:	db09      	blt.n	8009108 <__s2b+0x30>
 80090f4:	4630      	mov	r0, r6
 80090f6:	f7ff ff47 	bl	8008f88 <_Balloc>
 80090fa:	b940      	cbnz	r0, 800910e <__s2b+0x36>
 80090fc:	4602      	mov	r2, r0
 80090fe:	4b19      	ldr	r3, [pc, #100]	@ (8009164 <__s2b+0x8c>)
 8009100:	4819      	ldr	r0, [pc, #100]	@ (8009168 <__s2b+0x90>)
 8009102:	21d3      	movs	r1, #211	@ 0xd3
 8009104:	f002 f844 	bl	800b190 <__assert_func>
 8009108:	0052      	lsls	r2, r2, #1
 800910a:	3101      	adds	r1, #1
 800910c:	e7f0      	b.n	80090f0 <__s2b+0x18>
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	6143      	str	r3, [r0, #20]
 8009112:	2d09      	cmp	r5, #9
 8009114:	f04f 0301 	mov.w	r3, #1
 8009118:	6103      	str	r3, [r0, #16]
 800911a:	dd16      	ble.n	800914a <__s2b+0x72>
 800911c:	f104 0909 	add.w	r9, r4, #9
 8009120:	46c8      	mov	r8, r9
 8009122:	442c      	add	r4, r5
 8009124:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009128:	4601      	mov	r1, r0
 800912a:	3b30      	subs	r3, #48	@ 0x30
 800912c:	220a      	movs	r2, #10
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ff8c 	bl	800904c <__multadd>
 8009134:	45a0      	cmp	r8, r4
 8009136:	d1f5      	bne.n	8009124 <__s2b+0x4c>
 8009138:	f1a5 0408 	sub.w	r4, r5, #8
 800913c:	444c      	add	r4, r9
 800913e:	1b2d      	subs	r5, r5, r4
 8009140:	1963      	adds	r3, r4, r5
 8009142:	42bb      	cmp	r3, r7
 8009144:	db04      	blt.n	8009150 <__s2b+0x78>
 8009146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914a:	340a      	adds	r4, #10
 800914c:	2509      	movs	r5, #9
 800914e:	e7f6      	b.n	800913e <__s2b+0x66>
 8009150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009154:	4601      	mov	r1, r0
 8009156:	3b30      	subs	r3, #48	@ 0x30
 8009158:	220a      	movs	r2, #10
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ff76 	bl	800904c <__multadd>
 8009160:	e7ee      	b.n	8009140 <__s2b+0x68>
 8009162:	bf00      	nop
 8009164:	0800c0d7 	.word	0x0800c0d7
 8009168:	0800c0e8 	.word	0x0800c0e8

0800916c <__hi0bits>:
 800916c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009170:	4603      	mov	r3, r0
 8009172:	bf36      	itet	cc
 8009174:	0403      	lslcc	r3, r0, #16
 8009176:	2000      	movcs	r0, #0
 8009178:	2010      	movcc	r0, #16
 800917a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800917e:	bf3c      	itt	cc
 8009180:	021b      	lslcc	r3, r3, #8
 8009182:	3008      	addcc	r0, #8
 8009184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009188:	bf3c      	itt	cc
 800918a:	011b      	lslcc	r3, r3, #4
 800918c:	3004      	addcc	r0, #4
 800918e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009192:	bf3c      	itt	cc
 8009194:	009b      	lslcc	r3, r3, #2
 8009196:	3002      	addcc	r0, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	db05      	blt.n	80091a8 <__hi0bits+0x3c>
 800919c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091a0:	f100 0001 	add.w	r0, r0, #1
 80091a4:	bf08      	it	eq
 80091a6:	2020      	moveq	r0, #32
 80091a8:	4770      	bx	lr

080091aa <__lo0bits>:
 80091aa:	6803      	ldr	r3, [r0, #0]
 80091ac:	4602      	mov	r2, r0
 80091ae:	f013 0007 	ands.w	r0, r3, #7
 80091b2:	d00b      	beq.n	80091cc <__lo0bits+0x22>
 80091b4:	07d9      	lsls	r1, r3, #31
 80091b6:	d421      	bmi.n	80091fc <__lo0bits+0x52>
 80091b8:	0798      	lsls	r0, r3, #30
 80091ba:	bf49      	itett	mi
 80091bc:	085b      	lsrmi	r3, r3, #1
 80091be:	089b      	lsrpl	r3, r3, #2
 80091c0:	2001      	movmi	r0, #1
 80091c2:	6013      	strmi	r3, [r2, #0]
 80091c4:	bf5c      	itt	pl
 80091c6:	6013      	strpl	r3, [r2, #0]
 80091c8:	2002      	movpl	r0, #2
 80091ca:	4770      	bx	lr
 80091cc:	b299      	uxth	r1, r3
 80091ce:	b909      	cbnz	r1, 80091d4 <__lo0bits+0x2a>
 80091d0:	0c1b      	lsrs	r3, r3, #16
 80091d2:	2010      	movs	r0, #16
 80091d4:	b2d9      	uxtb	r1, r3
 80091d6:	b909      	cbnz	r1, 80091dc <__lo0bits+0x32>
 80091d8:	3008      	adds	r0, #8
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	0719      	lsls	r1, r3, #28
 80091de:	bf04      	itt	eq
 80091e0:	091b      	lsreq	r3, r3, #4
 80091e2:	3004      	addeq	r0, #4
 80091e4:	0799      	lsls	r1, r3, #30
 80091e6:	bf04      	itt	eq
 80091e8:	089b      	lsreq	r3, r3, #2
 80091ea:	3002      	addeq	r0, #2
 80091ec:	07d9      	lsls	r1, r3, #31
 80091ee:	d403      	bmi.n	80091f8 <__lo0bits+0x4e>
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	f100 0001 	add.w	r0, r0, #1
 80091f6:	d003      	beq.n	8009200 <__lo0bits+0x56>
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	4770      	bx	lr
 80091fc:	2000      	movs	r0, #0
 80091fe:	4770      	bx	lr
 8009200:	2020      	movs	r0, #32
 8009202:	4770      	bx	lr

08009204 <__i2b>:
 8009204:	b510      	push	{r4, lr}
 8009206:	460c      	mov	r4, r1
 8009208:	2101      	movs	r1, #1
 800920a:	f7ff febd 	bl	8008f88 <_Balloc>
 800920e:	4602      	mov	r2, r0
 8009210:	b928      	cbnz	r0, 800921e <__i2b+0x1a>
 8009212:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <__i2b+0x24>)
 8009214:	4805      	ldr	r0, [pc, #20]	@ (800922c <__i2b+0x28>)
 8009216:	f240 1145 	movw	r1, #325	@ 0x145
 800921a:	f001 ffb9 	bl	800b190 <__assert_func>
 800921e:	2301      	movs	r3, #1
 8009220:	6144      	str	r4, [r0, #20]
 8009222:	6103      	str	r3, [r0, #16]
 8009224:	bd10      	pop	{r4, pc}
 8009226:	bf00      	nop
 8009228:	0800c0d7 	.word	0x0800c0d7
 800922c:	0800c0e8 	.word	0x0800c0e8

08009230 <__multiply>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	4617      	mov	r7, r2
 8009236:	690a      	ldr	r2, [r1, #16]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	429a      	cmp	r2, r3
 800923c:	bfa8      	it	ge
 800923e:	463b      	movge	r3, r7
 8009240:	4689      	mov	r9, r1
 8009242:	bfa4      	itt	ge
 8009244:	460f      	movge	r7, r1
 8009246:	4699      	movge	r9, r3
 8009248:	693d      	ldr	r5, [r7, #16]
 800924a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	eb05 060a 	add.w	r6, r5, sl
 8009256:	42b3      	cmp	r3, r6
 8009258:	b085      	sub	sp, #20
 800925a:	bfb8      	it	lt
 800925c:	3101      	addlt	r1, #1
 800925e:	f7ff fe93 	bl	8008f88 <_Balloc>
 8009262:	b930      	cbnz	r0, 8009272 <__multiply+0x42>
 8009264:	4602      	mov	r2, r0
 8009266:	4b41      	ldr	r3, [pc, #260]	@ (800936c <__multiply+0x13c>)
 8009268:	4841      	ldr	r0, [pc, #260]	@ (8009370 <__multiply+0x140>)
 800926a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800926e:	f001 ff8f 	bl	800b190 <__assert_func>
 8009272:	f100 0414 	add.w	r4, r0, #20
 8009276:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800927a:	4623      	mov	r3, r4
 800927c:	2200      	movs	r2, #0
 800927e:	4573      	cmp	r3, lr
 8009280:	d320      	bcc.n	80092c4 <__multiply+0x94>
 8009282:	f107 0814 	add.w	r8, r7, #20
 8009286:	f109 0114 	add.w	r1, r9, #20
 800928a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800928e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009292:	9302      	str	r3, [sp, #8]
 8009294:	1beb      	subs	r3, r5, r7
 8009296:	3b15      	subs	r3, #21
 8009298:	f023 0303 	bic.w	r3, r3, #3
 800929c:	3304      	adds	r3, #4
 800929e:	3715      	adds	r7, #21
 80092a0:	42bd      	cmp	r5, r7
 80092a2:	bf38      	it	cc
 80092a4:	2304      	movcc	r3, #4
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	9b02      	ldr	r3, [sp, #8]
 80092aa:	9103      	str	r1, [sp, #12]
 80092ac:	428b      	cmp	r3, r1
 80092ae:	d80c      	bhi.n	80092ca <__multiply+0x9a>
 80092b0:	2e00      	cmp	r6, #0
 80092b2:	dd03      	ble.n	80092bc <__multiply+0x8c>
 80092b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d055      	beq.n	8009368 <__multiply+0x138>
 80092bc:	6106      	str	r6, [r0, #16]
 80092be:	b005      	add	sp, #20
 80092c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c4:	f843 2b04 	str.w	r2, [r3], #4
 80092c8:	e7d9      	b.n	800927e <__multiply+0x4e>
 80092ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80092ce:	f1ba 0f00 	cmp.w	sl, #0
 80092d2:	d01f      	beq.n	8009314 <__multiply+0xe4>
 80092d4:	46c4      	mov	ip, r8
 80092d6:	46a1      	mov	r9, r4
 80092d8:	2700      	movs	r7, #0
 80092da:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092de:	f8d9 3000 	ldr.w	r3, [r9]
 80092e2:	fa1f fb82 	uxth.w	fp, r2
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80092ec:	443b      	add	r3, r7
 80092ee:	f8d9 7000 	ldr.w	r7, [r9]
 80092f2:	0c12      	lsrs	r2, r2, #16
 80092f4:	0c3f      	lsrs	r7, r7, #16
 80092f6:	fb0a 7202 	mla	r2, sl, r2, r7
 80092fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80092fe:	b29b      	uxth	r3, r3
 8009300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009304:	4565      	cmp	r5, ip
 8009306:	f849 3b04 	str.w	r3, [r9], #4
 800930a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800930e:	d8e4      	bhi.n	80092da <__multiply+0xaa>
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	50e7      	str	r7, [r4, r3]
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800931a:	3104      	adds	r1, #4
 800931c:	f1b9 0f00 	cmp.w	r9, #0
 8009320:	d020      	beq.n	8009364 <__multiply+0x134>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	4647      	mov	r7, r8
 8009326:	46a4      	mov	ip, r4
 8009328:	f04f 0a00 	mov.w	sl, #0
 800932c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009330:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009334:	fb09 220b 	mla	r2, r9, fp, r2
 8009338:	4452      	add	r2, sl
 800933a:	b29b      	uxth	r3, r3
 800933c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009340:	f84c 3b04 	str.w	r3, [ip], #4
 8009344:	f857 3b04 	ldr.w	r3, [r7], #4
 8009348:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800934c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009350:	fb09 330a 	mla	r3, r9, sl, r3
 8009354:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009358:	42bd      	cmp	r5, r7
 800935a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800935e:	d8e5      	bhi.n	800932c <__multiply+0xfc>
 8009360:	9a01      	ldr	r2, [sp, #4]
 8009362:	50a3      	str	r3, [r4, r2]
 8009364:	3404      	adds	r4, #4
 8009366:	e79f      	b.n	80092a8 <__multiply+0x78>
 8009368:	3e01      	subs	r6, #1
 800936a:	e7a1      	b.n	80092b0 <__multiply+0x80>
 800936c:	0800c0d7 	.word	0x0800c0d7
 8009370:	0800c0e8 	.word	0x0800c0e8

08009374 <__pow5mult>:
 8009374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009378:	4615      	mov	r5, r2
 800937a:	f012 0203 	ands.w	r2, r2, #3
 800937e:	4607      	mov	r7, r0
 8009380:	460e      	mov	r6, r1
 8009382:	d007      	beq.n	8009394 <__pow5mult+0x20>
 8009384:	4c25      	ldr	r4, [pc, #148]	@ (800941c <__pow5mult+0xa8>)
 8009386:	3a01      	subs	r2, #1
 8009388:	2300      	movs	r3, #0
 800938a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800938e:	f7ff fe5d 	bl	800904c <__multadd>
 8009392:	4606      	mov	r6, r0
 8009394:	10ad      	asrs	r5, r5, #2
 8009396:	d03d      	beq.n	8009414 <__pow5mult+0xa0>
 8009398:	69fc      	ldr	r4, [r7, #28]
 800939a:	b97c      	cbnz	r4, 80093bc <__pow5mult+0x48>
 800939c:	2010      	movs	r0, #16
 800939e:	f7ff fd3d 	bl	8008e1c <malloc>
 80093a2:	4602      	mov	r2, r0
 80093a4:	61f8      	str	r0, [r7, #28]
 80093a6:	b928      	cbnz	r0, 80093b4 <__pow5mult+0x40>
 80093a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009420 <__pow5mult+0xac>)
 80093aa:	481e      	ldr	r0, [pc, #120]	@ (8009424 <__pow5mult+0xb0>)
 80093ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093b0:	f001 feee 	bl	800b190 <__assert_func>
 80093b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093b8:	6004      	str	r4, [r0, #0]
 80093ba:	60c4      	str	r4, [r0, #12]
 80093bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093c4:	b94c      	cbnz	r4, 80093da <__pow5mult+0x66>
 80093c6:	f240 2171 	movw	r1, #625	@ 0x271
 80093ca:	4638      	mov	r0, r7
 80093cc:	f7ff ff1a 	bl	8009204 <__i2b>
 80093d0:	2300      	movs	r3, #0
 80093d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80093d6:	4604      	mov	r4, r0
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	f04f 0900 	mov.w	r9, #0
 80093de:	07eb      	lsls	r3, r5, #31
 80093e0:	d50a      	bpl.n	80093f8 <__pow5mult+0x84>
 80093e2:	4631      	mov	r1, r6
 80093e4:	4622      	mov	r2, r4
 80093e6:	4638      	mov	r0, r7
 80093e8:	f7ff ff22 	bl	8009230 <__multiply>
 80093ec:	4631      	mov	r1, r6
 80093ee:	4680      	mov	r8, r0
 80093f0:	4638      	mov	r0, r7
 80093f2:	f7ff fe09 	bl	8009008 <_Bfree>
 80093f6:	4646      	mov	r6, r8
 80093f8:	106d      	asrs	r5, r5, #1
 80093fa:	d00b      	beq.n	8009414 <__pow5mult+0xa0>
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	b938      	cbnz	r0, 8009410 <__pow5mult+0x9c>
 8009400:	4622      	mov	r2, r4
 8009402:	4621      	mov	r1, r4
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff ff13 	bl	8009230 <__multiply>
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	f8c0 9000 	str.w	r9, [r0]
 8009410:	4604      	mov	r4, r0
 8009412:	e7e4      	b.n	80093de <__pow5mult+0x6a>
 8009414:	4630      	mov	r0, r6
 8009416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941a:	bf00      	nop
 800941c:	0800c214 	.word	0x0800c214
 8009420:	0800c068 	.word	0x0800c068
 8009424:	0800c0e8 	.word	0x0800c0e8

08009428 <__lshift>:
 8009428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800942c:	460c      	mov	r4, r1
 800942e:	6849      	ldr	r1, [r1, #4]
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009436:	68a3      	ldr	r3, [r4, #8]
 8009438:	4607      	mov	r7, r0
 800943a:	4691      	mov	r9, r2
 800943c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009440:	f108 0601 	add.w	r6, r8, #1
 8009444:	42b3      	cmp	r3, r6
 8009446:	db0b      	blt.n	8009460 <__lshift+0x38>
 8009448:	4638      	mov	r0, r7
 800944a:	f7ff fd9d 	bl	8008f88 <_Balloc>
 800944e:	4605      	mov	r5, r0
 8009450:	b948      	cbnz	r0, 8009466 <__lshift+0x3e>
 8009452:	4602      	mov	r2, r0
 8009454:	4b28      	ldr	r3, [pc, #160]	@ (80094f8 <__lshift+0xd0>)
 8009456:	4829      	ldr	r0, [pc, #164]	@ (80094fc <__lshift+0xd4>)
 8009458:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800945c:	f001 fe98 	bl	800b190 <__assert_func>
 8009460:	3101      	adds	r1, #1
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	e7ee      	b.n	8009444 <__lshift+0x1c>
 8009466:	2300      	movs	r3, #0
 8009468:	f100 0114 	add.w	r1, r0, #20
 800946c:	f100 0210 	add.w	r2, r0, #16
 8009470:	4618      	mov	r0, r3
 8009472:	4553      	cmp	r3, sl
 8009474:	db33      	blt.n	80094de <__lshift+0xb6>
 8009476:	6920      	ldr	r0, [r4, #16]
 8009478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800947c:	f104 0314 	add.w	r3, r4, #20
 8009480:	f019 091f 	ands.w	r9, r9, #31
 8009484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800948c:	d02b      	beq.n	80094e6 <__lshift+0xbe>
 800948e:	f1c9 0e20 	rsb	lr, r9, #32
 8009492:	468a      	mov	sl, r1
 8009494:	2200      	movs	r2, #0
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	fa00 f009 	lsl.w	r0, r0, r9
 800949c:	4310      	orrs	r0, r2
 800949e:	f84a 0b04 	str.w	r0, [sl], #4
 80094a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a6:	459c      	cmp	ip, r3
 80094a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80094ac:	d8f3      	bhi.n	8009496 <__lshift+0x6e>
 80094ae:	ebac 0304 	sub.w	r3, ip, r4
 80094b2:	3b15      	subs	r3, #21
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	3304      	adds	r3, #4
 80094ba:	f104 0015 	add.w	r0, r4, #21
 80094be:	4560      	cmp	r0, ip
 80094c0:	bf88      	it	hi
 80094c2:	2304      	movhi	r3, #4
 80094c4:	50ca      	str	r2, [r1, r3]
 80094c6:	b10a      	cbz	r2, 80094cc <__lshift+0xa4>
 80094c8:	f108 0602 	add.w	r6, r8, #2
 80094cc:	3e01      	subs	r6, #1
 80094ce:	4638      	mov	r0, r7
 80094d0:	612e      	str	r6, [r5, #16]
 80094d2:	4621      	mov	r1, r4
 80094d4:	f7ff fd98 	bl	8009008 <_Bfree>
 80094d8:	4628      	mov	r0, r5
 80094da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094de:	f842 0f04 	str.w	r0, [r2, #4]!
 80094e2:	3301      	adds	r3, #1
 80094e4:	e7c5      	b.n	8009472 <__lshift+0x4a>
 80094e6:	3904      	subs	r1, #4
 80094e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80094f0:	459c      	cmp	ip, r3
 80094f2:	d8f9      	bhi.n	80094e8 <__lshift+0xc0>
 80094f4:	e7ea      	b.n	80094cc <__lshift+0xa4>
 80094f6:	bf00      	nop
 80094f8:	0800c0d7 	.word	0x0800c0d7
 80094fc:	0800c0e8 	.word	0x0800c0e8

08009500 <__mcmp>:
 8009500:	690a      	ldr	r2, [r1, #16]
 8009502:	4603      	mov	r3, r0
 8009504:	6900      	ldr	r0, [r0, #16]
 8009506:	1a80      	subs	r0, r0, r2
 8009508:	b530      	push	{r4, r5, lr}
 800950a:	d10e      	bne.n	800952a <__mcmp+0x2a>
 800950c:	3314      	adds	r3, #20
 800950e:	3114      	adds	r1, #20
 8009510:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009514:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800951c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009520:	4295      	cmp	r5, r2
 8009522:	d003      	beq.n	800952c <__mcmp+0x2c>
 8009524:	d205      	bcs.n	8009532 <__mcmp+0x32>
 8009526:	f04f 30ff 	mov.w	r0, #4294967295
 800952a:	bd30      	pop	{r4, r5, pc}
 800952c:	42a3      	cmp	r3, r4
 800952e:	d3f3      	bcc.n	8009518 <__mcmp+0x18>
 8009530:	e7fb      	b.n	800952a <__mcmp+0x2a>
 8009532:	2001      	movs	r0, #1
 8009534:	e7f9      	b.n	800952a <__mcmp+0x2a>
	...

08009538 <__mdiff>:
 8009538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	4689      	mov	r9, r1
 800953e:	4606      	mov	r6, r0
 8009540:	4611      	mov	r1, r2
 8009542:	4648      	mov	r0, r9
 8009544:	4614      	mov	r4, r2
 8009546:	f7ff ffdb 	bl	8009500 <__mcmp>
 800954a:	1e05      	subs	r5, r0, #0
 800954c:	d112      	bne.n	8009574 <__mdiff+0x3c>
 800954e:	4629      	mov	r1, r5
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff fd19 	bl	8008f88 <_Balloc>
 8009556:	4602      	mov	r2, r0
 8009558:	b928      	cbnz	r0, 8009566 <__mdiff+0x2e>
 800955a:	4b3f      	ldr	r3, [pc, #252]	@ (8009658 <__mdiff+0x120>)
 800955c:	f240 2137 	movw	r1, #567	@ 0x237
 8009560:	483e      	ldr	r0, [pc, #248]	@ (800965c <__mdiff+0x124>)
 8009562:	f001 fe15 	bl	800b190 <__assert_func>
 8009566:	2301      	movs	r3, #1
 8009568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800956c:	4610      	mov	r0, r2
 800956e:	b003      	add	sp, #12
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	bfbc      	itt	lt
 8009576:	464b      	movlt	r3, r9
 8009578:	46a1      	movlt	r9, r4
 800957a:	4630      	mov	r0, r6
 800957c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009580:	bfba      	itte	lt
 8009582:	461c      	movlt	r4, r3
 8009584:	2501      	movlt	r5, #1
 8009586:	2500      	movge	r5, #0
 8009588:	f7ff fcfe 	bl	8008f88 <_Balloc>
 800958c:	4602      	mov	r2, r0
 800958e:	b918      	cbnz	r0, 8009598 <__mdiff+0x60>
 8009590:	4b31      	ldr	r3, [pc, #196]	@ (8009658 <__mdiff+0x120>)
 8009592:	f240 2145 	movw	r1, #581	@ 0x245
 8009596:	e7e3      	b.n	8009560 <__mdiff+0x28>
 8009598:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800959c:	6926      	ldr	r6, [r4, #16]
 800959e:	60c5      	str	r5, [r0, #12]
 80095a0:	f109 0310 	add.w	r3, r9, #16
 80095a4:	f109 0514 	add.w	r5, r9, #20
 80095a8:	f104 0e14 	add.w	lr, r4, #20
 80095ac:	f100 0b14 	add.w	fp, r0, #20
 80095b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	46d9      	mov	r9, fp
 80095bc:	f04f 0c00 	mov.w	ip, #0
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	fa1f f38a 	uxth.w	r3, sl
 80095d0:	4619      	mov	r1, r3
 80095d2:	b283      	uxth	r3, r0
 80095d4:	1acb      	subs	r3, r1, r3
 80095d6:	0c00      	lsrs	r0, r0, #16
 80095d8:	4463      	add	r3, ip
 80095da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80095de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80095e8:	4576      	cmp	r6, lr
 80095ea:	f849 3b04 	str.w	r3, [r9], #4
 80095ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095f2:	d8e5      	bhi.n	80095c0 <__mdiff+0x88>
 80095f4:	1b33      	subs	r3, r6, r4
 80095f6:	3b15      	subs	r3, #21
 80095f8:	f023 0303 	bic.w	r3, r3, #3
 80095fc:	3415      	adds	r4, #21
 80095fe:	3304      	adds	r3, #4
 8009600:	42a6      	cmp	r6, r4
 8009602:	bf38      	it	cc
 8009604:	2304      	movcc	r3, #4
 8009606:	441d      	add	r5, r3
 8009608:	445b      	add	r3, fp
 800960a:	461e      	mov	r6, r3
 800960c:	462c      	mov	r4, r5
 800960e:	4544      	cmp	r4, r8
 8009610:	d30e      	bcc.n	8009630 <__mdiff+0xf8>
 8009612:	f108 0103 	add.w	r1, r8, #3
 8009616:	1b49      	subs	r1, r1, r5
 8009618:	f021 0103 	bic.w	r1, r1, #3
 800961c:	3d03      	subs	r5, #3
 800961e:	45a8      	cmp	r8, r5
 8009620:	bf38      	it	cc
 8009622:	2100      	movcc	r1, #0
 8009624:	440b      	add	r3, r1
 8009626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800962a:	b191      	cbz	r1, 8009652 <__mdiff+0x11a>
 800962c:	6117      	str	r7, [r2, #16]
 800962e:	e79d      	b.n	800956c <__mdiff+0x34>
 8009630:	f854 1b04 	ldr.w	r1, [r4], #4
 8009634:	46e6      	mov	lr, ip
 8009636:	0c08      	lsrs	r0, r1, #16
 8009638:	fa1c fc81 	uxtah	ip, ip, r1
 800963c:	4471      	add	r1, lr
 800963e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009642:	b289      	uxth	r1, r1
 8009644:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009648:	f846 1b04 	str.w	r1, [r6], #4
 800964c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009650:	e7dd      	b.n	800960e <__mdiff+0xd6>
 8009652:	3f01      	subs	r7, #1
 8009654:	e7e7      	b.n	8009626 <__mdiff+0xee>
 8009656:	bf00      	nop
 8009658:	0800c0d7 	.word	0x0800c0d7
 800965c:	0800c0e8 	.word	0x0800c0e8

08009660 <__ulp>:
 8009660:	b082      	sub	sp, #8
 8009662:	ed8d 0b00 	vstr	d0, [sp]
 8009666:	9a01      	ldr	r2, [sp, #4]
 8009668:	4b0f      	ldr	r3, [pc, #60]	@ (80096a8 <__ulp+0x48>)
 800966a:	4013      	ands	r3, r2
 800966c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009670:	2b00      	cmp	r3, #0
 8009672:	dc08      	bgt.n	8009686 <__ulp+0x26>
 8009674:	425b      	negs	r3, r3
 8009676:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800967a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800967e:	da04      	bge.n	800968a <__ulp+0x2a>
 8009680:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009684:	4113      	asrs	r3, r2
 8009686:	2200      	movs	r2, #0
 8009688:	e008      	b.n	800969c <__ulp+0x3c>
 800968a:	f1a2 0314 	sub.w	r3, r2, #20
 800968e:	2b1e      	cmp	r3, #30
 8009690:	bfda      	itte	le
 8009692:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009696:	40da      	lsrle	r2, r3
 8009698:	2201      	movgt	r2, #1
 800969a:	2300      	movs	r3, #0
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	ec41 0b10 	vmov	d0, r0, r1
 80096a4:	b002      	add	sp, #8
 80096a6:	4770      	bx	lr
 80096a8:	7ff00000 	.word	0x7ff00000

080096ac <__b2d>:
 80096ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b0:	6906      	ldr	r6, [r0, #16]
 80096b2:	f100 0814 	add.w	r8, r0, #20
 80096b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80096ba:	1f37      	subs	r7, r6, #4
 80096bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7ff fd53 	bl	800916c <__hi0bits>
 80096c6:	f1c0 0320 	rsb	r3, r0, #32
 80096ca:	280a      	cmp	r0, #10
 80096cc:	600b      	str	r3, [r1, #0]
 80096ce:	491b      	ldr	r1, [pc, #108]	@ (800973c <__b2d+0x90>)
 80096d0:	dc15      	bgt.n	80096fe <__b2d+0x52>
 80096d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80096d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80096da:	45b8      	cmp	r8, r7
 80096dc:	ea43 0501 	orr.w	r5, r3, r1
 80096e0:	bf34      	ite	cc
 80096e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80096e6:	2300      	movcs	r3, #0
 80096e8:	3015      	adds	r0, #21
 80096ea:	fa02 f000 	lsl.w	r0, r2, r0
 80096ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80096f2:	4303      	orrs	r3, r0
 80096f4:	461c      	mov	r4, r3
 80096f6:	ec45 4b10 	vmov	d0, r4, r5
 80096fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fe:	45b8      	cmp	r8, r7
 8009700:	bf3a      	itte	cc
 8009702:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009706:	f1a6 0708 	subcc.w	r7, r6, #8
 800970a:	2300      	movcs	r3, #0
 800970c:	380b      	subs	r0, #11
 800970e:	d012      	beq.n	8009736 <__b2d+0x8a>
 8009710:	f1c0 0120 	rsb	r1, r0, #32
 8009714:	fa23 f401 	lsr.w	r4, r3, r1
 8009718:	4082      	lsls	r2, r0
 800971a:	4322      	orrs	r2, r4
 800971c:	4547      	cmp	r7, r8
 800971e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009722:	bf8c      	ite	hi
 8009724:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009728:	2200      	movls	r2, #0
 800972a:	4083      	lsls	r3, r0
 800972c:	40ca      	lsrs	r2, r1
 800972e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009732:	4313      	orrs	r3, r2
 8009734:	e7de      	b.n	80096f4 <__b2d+0x48>
 8009736:	ea42 0501 	orr.w	r5, r2, r1
 800973a:	e7db      	b.n	80096f4 <__b2d+0x48>
 800973c:	3ff00000 	.word	0x3ff00000

08009740 <__d2b>:
 8009740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009744:	460f      	mov	r7, r1
 8009746:	2101      	movs	r1, #1
 8009748:	ec59 8b10 	vmov	r8, r9, d0
 800974c:	4616      	mov	r6, r2
 800974e:	f7ff fc1b 	bl	8008f88 <_Balloc>
 8009752:	4604      	mov	r4, r0
 8009754:	b930      	cbnz	r0, 8009764 <__d2b+0x24>
 8009756:	4602      	mov	r2, r0
 8009758:	4b23      	ldr	r3, [pc, #140]	@ (80097e8 <__d2b+0xa8>)
 800975a:	4824      	ldr	r0, [pc, #144]	@ (80097ec <__d2b+0xac>)
 800975c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009760:	f001 fd16 	bl	800b190 <__assert_func>
 8009764:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800976c:	b10d      	cbz	r5, 8009772 <__d2b+0x32>
 800976e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009772:	9301      	str	r3, [sp, #4]
 8009774:	f1b8 0300 	subs.w	r3, r8, #0
 8009778:	d023      	beq.n	80097c2 <__d2b+0x82>
 800977a:	4668      	mov	r0, sp
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	f7ff fd14 	bl	80091aa <__lo0bits>
 8009782:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009786:	b1d0      	cbz	r0, 80097be <__d2b+0x7e>
 8009788:	f1c0 0320 	rsb	r3, r0, #32
 800978c:	fa02 f303 	lsl.w	r3, r2, r3
 8009790:	430b      	orrs	r3, r1
 8009792:	40c2      	lsrs	r2, r0
 8009794:	6163      	str	r3, [r4, #20]
 8009796:	9201      	str	r2, [sp, #4]
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	61a3      	str	r3, [r4, #24]
 800979c:	2b00      	cmp	r3, #0
 800979e:	bf0c      	ite	eq
 80097a0:	2201      	moveq	r2, #1
 80097a2:	2202      	movne	r2, #2
 80097a4:	6122      	str	r2, [r4, #16]
 80097a6:	b1a5      	cbz	r5, 80097d2 <__d2b+0x92>
 80097a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097ac:	4405      	add	r5, r0
 80097ae:	603d      	str	r5, [r7, #0]
 80097b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097b4:	6030      	str	r0, [r6, #0]
 80097b6:	4620      	mov	r0, r4
 80097b8:	b003      	add	sp, #12
 80097ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097be:	6161      	str	r1, [r4, #20]
 80097c0:	e7ea      	b.n	8009798 <__d2b+0x58>
 80097c2:	a801      	add	r0, sp, #4
 80097c4:	f7ff fcf1 	bl	80091aa <__lo0bits>
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	6163      	str	r3, [r4, #20]
 80097cc:	3020      	adds	r0, #32
 80097ce:	2201      	movs	r2, #1
 80097d0:	e7e8      	b.n	80097a4 <__d2b+0x64>
 80097d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097da:	6038      	str	r0, [r7, #0]
 80097dc:	6918      	ldr	r0, [r3, #16]
 80097de:	f7ff fcc5 	bl	800916c <__hi0bits>
 80097e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097e6:	e7e5      	b.n	80097b4 <__d2b+0x74>
 80097e8:	0800c0d7 	.word	0x0800c0d7
 80097ec:	0800c0e8 	.word	0x0800c0e8

080097f0 <__ratio>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	b085      	sub	sp, #20
 80097f6:	e9cd 1000 	strd	r1, r0, [sp]
 80097fa:	a902      	add	r1, sp, #8
 80097fc:	f7ff ff56 	bl	80096ac <__b2d>
 8009800:	9800      	ldr	r0, [sp, #0]
 8009802:	a903      	add	r1, sp, #12
 8009804:	ec55 4b10 	vmov	r4, r5, d0
 8009808:	f7ff ff50 	bl	80096ac <__b2d>
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	6919      	ldr	r1, [r3, #16]
 8009810:	9b00      	ldr	r3, [sp, #0]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	1ac9      	subs	r1, r1, r3
 8009816:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	ec5b ab10 	vmov	sl, fp, d0
 8009820:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009824:	2b00      	cmp	r3, #0
 8009826:	bfce      	itee	gt
 8009828:	462a      	movgt	r2, r5
 800982a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800982e:	465a      	movle	r2, fp
 8009830:	462f      	mov	r7, r5
 8009832:	46d9      	mov	r9, fp
 8009834:	bfcc      	ite	gt
 8009836:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800983a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800983e:	464b      	mov	r3, r9
 8009840:	4652      	mov	r2, sl
 8009842:	4620      	mov	r0, r4
 8009844:	4639      	mov	r1, r7
 8009846:	f7f7 f811 	bl	800086c <__aeabi_ddiv>
 800984a:	ec41 0b10 	vmov	d0, r0, r1
 800984e:	b005      	add	sp, #20
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009854 <__copybits>:
 8009854:	3901      	subs	r1, #1
 8009856:	b570      	push	{r4, r5, r6, lr}
 8009858:	1149      	asrs	r1, r1, #5
 800985a:	6914      	ldr	r4, [r2, #16]
 800985c:	3101      	adds	r1, #1
 800985e:	f102 0314 	add.w	r3, r2, #20
 8009862:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009866:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800986a:	1f05      	subs	r5, r0, #4
 800986c:	42a3      	cmp	r3, r4
 800986e:	d30c      	bcc.n	800988a <__copybits+0x36>
 8009870:	1aa3      	subs	r3, r4, r2
 8009872:	3b11      	subs	r3, #17
 8009874:	f023 0303 	bic.w	r3, r3, #3
 8009878:	3211      	adds	r2, #17
 800987a:	42a2      	cmp	r2, r4
 800987c:	bf88      	it	hi
 800987e:	2300      	movhi	r3, #0
 8009880:	4418      	add	r0, r3
 8009882:	2300      	movs	r3, #0
 8009884:	4288      	cmp	r0, r1
 8009886:	d305      	bcc.n	8009894 <__copybits+0x40>
 8009888:	bd70      	pop	{r4, r5, r6, pc}
 800988a:	f853 6b04 	ldr.w	r6, [r3], #4
 800988e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009892:	e7eb      	b.n	800986c <__copybits+0x18>
 8009894:	f840 3b04 	str.w	r3, [r0], #4
 8009898:	e7f4      	b.n	8009884 <__copybits+0x30>

0800989a <__any_on>:
 800989a:	f100 0214 	add.w	r2, r0, #20
 800989e:	6900      	ldr	r0, [r0, #16]
 80098a0:	114b      	asrs	r3, r1, #5
 80098a2:	4298      	cmp	r0, r3
 80098a4:	b510      	push	{r4, lr}
 80098a6:	db11      	blt.n	80098cc <__any_on+0x32>
 80098a8:	dd0a      	ble.n	80098c0 <__any_on+0x26>
 80098aa:	f011 011f 	ands.w	r1, r1, #31
 80098ae:	d007      	beq.n	80098c0 <__any_on+0x26>
 80098b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098b4:	fa24 f001 	lsr.w	r0, r4, r1
 80098b8:	fa00 f101 	lsl.w	r1, r0, r1
 80098bc:	428c      	cmp	r4, r1
 80098be:	d10b      	bne.n	80098d8 <__any_on+0x3e>
 80098c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d803      	bhi.n	80098d0 <__any_on+0x36>
 80098c8:	2000      	movs	r0, #0
 80098ca:	bd10      	pop	{r4, pc}
 80098cc:	4603      	mov	r3, r0
 80098ce:	e7f7      	b.n	80098c0 <__any_on+0x26>
 80098d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098d4:	2900      	cmp	r1, #0
 80098d6:	d0f5      	beq.n	80098c4 <__any_on+0x2a>
 80098d8:	2001      	movs	r0, #1
 80098da:	e7f6      	b.n	80098ca <__any_on+0x30>

080098dc <sulp>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	4604      	mov	r4, r0
 80098e0:	460d      	mov	r5, r1
 80098e2:	ec45 4b10 	vmov	d0, r4, r5
 80098e6:	4616      	mov	r6, r2
 80098e8:	f7ff feba 	bl	8009660 <__ulp>
 80098ec:	ec51 0b10 	vmov	r0, r1, d0
 80098f0:	b17e      	cbz	r6, 8009912 <sulp+0x36>
 80098f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	dd09      	ble.n	8009912 <sulp+0x36>
 80098fe:	051b      	lsls	r3, r3, #20
 8009900:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009904:	2400      	movs	r4, #0
 8009906:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800990a:	4622      	mov	r2, r4
 800990c:	462b      	mov	r3, r5
 800990e:	f7f6 fe83 	bl	8000618 <__aeabi_dmul>
 8009912:	ec41 0b10 	vmov	d0, r0, r1
 8009916:	bd70      	pop	{r4, r5, r6, pc}

08009918 <_strtod_l>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	b09f      	sub	sp, #124	@ 0x7c
 800991e:	460c      	mov	r4, r1
 8009920:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009922:	2200      	movs	r2, #0
 8009924:	921a      	str	r2, [sp, #104]	@ 0x68
 8009926:	9005      	str	r0, [sp, #20]
 8009928:	f04f 0a00 	mov.w	sl, #0
 800992c:	f04f 0b00 	mov.w	fp, #0
 8009930:	460a      	mov	r2, r1
 8009932:	9219      	str	r2, [sp, #100]	@ 0x64
 8009934:	7811      	ldrb	r1, [r2, #0]
 8009936:	292b      	cmp	r1, #43	@ 0x2b
 8009938:	d04a      	beq.n	80099d0 <_strtod_l+0xb8>
 800993a:	d838      	bhi.n	80099ae <_strtod_l+0x96>
 800993c:	290d      	cmp	r1, #13
 800993e:	d832      	bhi.n	80099a6 <_strtod_l+0x8e>
 8009940:	2908      	cmp	r1, #8
 8009942:	d832      	bhi.n	80099aa <_strtod_l+0x92>
 8009944:	2900      	cmp	r1, #0
 8009946:	d03b      	beq.n	80099c0 <_strtod_l+0xa8>
 8009948:	2200      	movs	r2, #0
 800994a:	920e      	str	r2, [sp, #56]	@ 0x38
 800994c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800994e:	782a      	ldrb	r2, [r5, #0]
 8009950:	2a30      	cmp	r2, #48	@ 0x30
 8009952:	f040 80b2 	bne.w	8009aba <_strtod_l+0x1a2>
 8009956:	786a      	ldrb	r2, [r5, #1]
 8009958:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800995c:	2a58      	cmp	r2, #88	@ 0x58
 800995e:	d16e      	bne.n	8009a3e <_strtod_l+0x126>
 8009960:	9302      	str	r3, [sp, #8]
 8009962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	ab1a      	add	r3, sp, #104	@ 0x68
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	4a8f      	ldr	r2, [pc, #572]	@ (8009ba8 <_strtod_l+0x290>)
 800996c:	9805      	ldr	r0, [sp, #20]
 800996e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009970:	a919      	add	r1, sp, #100	@ 0x64
 8009972:	f001 fca7 	bl	800b2c4 <__gethex>
 8009976:	f010 060f 	ands.w	r6, r0, #15
 800997a:	4604      	mov	r4, r0
 800997c:	d005      	beq.n	800998a <_strtod_l+0x72>
 800997e:	2e06      	cmp	r6, #6
 8009980:	d128      	bne.n	80099d4 <_strtod_l+0xbc>
 8009982:	3501      	adds	r5, #1
 8009984:	2300      	movs	r3, #0
 8009986:	9519      	str	r5, [sp, #100]	@ 0x64
 8009988:	930e      	str	r3, [sp, #56]	@ 0x38
 800998a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 858e 	bne.w	800a4ae <_strtod_l+0xb96>
 8009992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009994:	b1cb      	cbz	r3, 80099ca <_strtod_l+0xb2>
 8009996:	4652      	mov	r2, sl
 8009998:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800999c:	ec43 2b10 	vmov	d0, r2, r3
 80099a0:	b01f      	add	sp, #124	@ 0x7c
 80099a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a6:	2920      	cmp	r1, #32
 80099a8:	d1ce      	bne.n	8009948 <_strtod_l+0x30>
 80099aa:	3201      	adds	r2, #1
 80099ac:	e7c1      	b.n	8009932 <_strtod_l+0x1a>
 80099ae:	292d      	cmp	r1, #45	@ 0x2d
 80099b0:	d1ca      	bne.n	8009948 <_strtod_l+0x30>
 80099b2:	2101      	movs	r1, #1
 80099b4:	910e      	str	r1, [sp, #56]	@ 0x38
 80099b6:	1c51      	adds	r1, r2, #1
 80099b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80099ba:	7852      	ldrb	r2, [r2, #1]
 80099bc:	2a00      	cmp	r2, #0
 80099be:	d1c5      	bne.n	800994c <_strtod_l+0x34>
 80099c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f040 8570 	bne.w	800a4aa <_strtod_l+0xb92>
 80099ca:	4652      	mov	r2, sl
 80099cc:	465b      	mov	r3, fp
 80099ce:	e7e5      	b.n	800999c <_strtod_l+0x84>
 80099d0:	2100      	movs	r1, #0
 80099d2:	e7ef      	b.n	80099b4 <_strtod_l+0x9c>
 80099d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099d6:	b13a      	cbz	r2, 80099e8 <_strtod_l+0xd0>
 80099d8:	2135      	movs	r1, #53	@ 0x35
 80099da:	a81c      	add	r0, sp, #112	@ 0x70
 80099dc:	f7ff ff3a 	bl	8009854 <__copybits>
 80099e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099e2:	9805      	ldr	r0, [sp, #20]
 80099e4:	f7ff fb10 	bl	8009008 <_Bfree>
 80099e8:	3e01      	subs	r6, #1
 80099ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80099ec:	2e04      	cmp	r6, #4
 80099ee:	d806      	bhi.n	80099fe <_strtod_l+0xe6>
 80099f0:	e8df f006 	tbb	[pc, r6]
 80099f4:	201d0314 	.word	0x201d0314
 80099f8:	14          	.byte	0x14
 80099f9:	00          	.byte	0x00
 80099fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80099fe:	05e1      	lsls	r1, r4, #23
 8009a00:	bf48      	it	mi
 8009a02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a0a:	0d1b      	lsrs	r3, r3, #20
 8009a0c:	051b      	lsls	r3, r3, #20
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1bb      	bne.n	800998a <_strtod_l+0x72>
 8009a12:	f7fe fb2d 	bl	8008070 <__errno>
 8009a16:	2322      	movs	r3, #34	@ 0x22
 8009a18:	6003      	str	r3, [r0, #0]
 8009a1a:	e7b6      	b.n	800998a <_strtod_l+0x72>
 8009a1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009a20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a2c:	e7e7      	b.n	80099fe <_strtod_l+0xe6>
 8009a2e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009bb0 <_strtod_l+0x298>
 8009a32:	e7e4      	b.n	80099fe <_strtod_l+0xe6>
 8009a34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a38:	f04f 3aff 	mov.w	sl, #4294967295
 8009a3c:	e7df      	b.n	80099fe <_strtod_l+0xe6>
 8009a3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b30      	cmp	r3, #48	@ 0x30
 8009a48:	d0f9      	beq.n	8009a3e <_strtod_l+0x126>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d09d      	beq.n	800998a <_strtod_l+0x72>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	2700      	movs	r7, #0
 8009a52:	9308      	str	r3, [sp, #32]
 8009a54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a56:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a58:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009a5a:	46b9      	mov	r9, r7
 8009a5c:	220a      	movs	r2, #10
 8009a5e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009a60:	7805      	ldrb	r5, [r0, #0]
 8009a62:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009a66:	b2d9      	uxtb	r1, r3
 8009a68:	2909      	cmp	r1, #9
 8009a6a:	d928      	bls.n	8009abe <_strtod_l+0x1a6>
 8009a6c:	494f      	ldr	r1, [pc, #316]	@ (8009bac <_strtod_l+0x294>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f7fe faa2 	bl	8007fb8 <strncmp>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d032      	beq.n	8009ade <_strtod_l+0x1c6>
 8009a78:	2000      	movs	r0, #0
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a7e:	464d      	mov	r5, r9
 8009a80:	4603      	mov	r3, r0
 8009a82:	2a65      	cmp	r2, #101	@ 0x65
 8009a84:	d001      	beq.n	8009a8a <_strtod_l+0x172>
 8009a86:	2a45      	cmp	r2, #69	@ 0x45
 8009a88:	d114      	bne.n	8009ab4 <_strtod_l+0x19c>
 8009a8a:	b91d      	cbnz	r5, 8009a94 <_strtod_l+0x17c>
 8009a8c:	9a08      	ldr	r2, [sp, #32]
 8009a8e:	4302      	orrs	r2, r0
 8009a90:	d096      	beq.n	80099c0 <_strtod_l+0xa8>
 8009a92:	2500      	movs	r5, #0
 8009a94:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009a96:	1c62      	adds	r2, r4, #1
 8009a98:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a9a:	7862      	ldrb	r2, [r4, #1]
 8009a9c:	2a2b      	cmp	r2, #43	@ 0x2b
 8009a9e:	d07a      	beq.n	8009b96 <_strtod_l+0x27e>
 8009aa0:	2a2d      	cmp	r2, #45	@ 0x2d
 8009aa2:	d07e      	beq.n	8009ba2 <_strtod_l+0x28a>
 8009aa4:	f04f 0c00 	mov.w	ip, #0
 8009aa8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009aac:	2909      	cmp	r1, #9
 8009aae:	f240 8085 	bls.w	8009bbc <_strtod_l+0x2a4>
 8009ab2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ab4:	f04f 0800 	mov.w	r8, #0
 8009ab8:	e0a5      	b.n	8009c06 <_strtod_l+0x2ee>
 8009aba:	2300      	movs	r3, #0
 8009abc:	e7c8      	b.n	8009a50 <_strtod_l+0x138>
 8009abe:	f1b9 0f08 	cmp.w	r9, #8
 8009ac2:	bfd8      	it	le
 8009ac4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009ac6:	f100 0001 	add.w	r0, r0, #1
 8009aca:	bfda      	itte	le
 8009acc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ad0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009ad2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009ad6:	f109 0901 	add.w	r9, r9, #1
 8009ada:	9019      	str	r0, [sp, #100]	@ 0x64
 8009adc:	e7bf      	b.n	8009a5e <_strtod_l+0x146>
 8009ade:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ae4:	785a      	ldrb	r2, [r3, #1]
 8009ae6:	f1b9 0f00 	cmp.w	r9, #0
 8009aea:	d03b      	beq.n	8009b64 <_strtod_l+0x24c>
 8009aec:	900a      	str	r0, [sp, #40]	@ 0x28
 8009aee:	464d      	mov	r5, r9
 8009af0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	d912      	bls.n	8009b1e <_strtod_l+0x206>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e7c2      	b.n	8009a82 <_strtod_l+0x16a>
 8009afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b02:	785a      	ldrb	r2, [r3, #1]
 8009b04:	3001      	adds	r0, #1
 8009b06:	2a30      	cmp	r2, #48	@ 0x30
 8009b08:	d0f8      	beq.n	8009afc <_strtod_l+0x1e4>
 8009b0a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b0e:	2b08      	cmp	r3, #8
 8009b10:	f200 84d2 	bhi.w	800a4b8 <_strtod_l+0xba0>
 8009b14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b16:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b18:	2000      	movs	r0, #0
 8009b1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	3a30      	subs	r2, #48	@ 0x30
 8009b20:	f100 0301 	add.w	r3, r0, #1
 8009b24:	d018      	beq.n	8009b58 <_strtod_l+0x240>
 8009b26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b28:	4419      	add	r1, r3
 8009b2a:	910a      	str	r1, [sp, #40]	@ 0x28
 8009b2c:	462e      	mov	r6, r5
 8009b2e:	f04f 0e0a 	mov.w	lr, #10
 8009b32:	1c71      	adds	r1, r6, #1
 8009b34:	eba1 0c05 	sub.w	ip, r1, r5
 8009b38:	4563      	cmp	r3, ip
 8009b3a:	dc15      	bgt.n	8009b68 <_strtod_l+0x250>
 8009b3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009b40:	182b      	adds	r3, r5, r0
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	f105 0501 	add.w	r5, r5, #1
 8009b48:	4405      	add	r5, r0
 8009b4a:	dc1a      	bgt.n	8009b82 <_strtod_l+0x26a>
 8009b4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b4e:	230a      	movs	r3, #10
 8009b50:	fb03 2301 	mla	r3, r3, r1, r2
 8009b54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b56:	2300      	movs	r3, #0
 8009b58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b5a:	1c51      	adds	r1, r2, #1
 8009b5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b5e:	7852      	ldrb	r2, [r2, #1]
 8009b60:	4618      	mov	r0, r3
 8009b62:	e7c5      	b.n	8009af0 <_strtod_l+0x1d8>
 8009b64:	4648      	mov	r0, r9
 8009b66:	e7ce      	b.n	8009b06 <_strtod_l+0x1ee>
 8009b68:	2e08      	cmp	r6, #8
 8009b6a:	dc05      	bgt.n	8009b78 <_strtod_l+0x260>
 8009b6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b6e:	fb0e f606 	mul.w	r6, lr, r6
 8009b72:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009b74:	460e      	mov	r6, r1
 8009b76:	e7dc      	b.n	8009b32 <_strtod_l+0x21a>
 8009b78:	2910      	cmp	r1, #16
 8009b7a:	bfd8      	it	le
 8009b7c:	fb0e f707 	mulle.w	r7, lr, r7
 8009b80:	e7f8      	b.n	8009b74 <_strtod_l+0x25c>
 8009b82:	2b0f      	cmp	r3, #15
 8009b84:	bfdc      	itt	le
 8009b86:	230a      	movle	r3, #10
 8009b88:	fb03 2707 	mlale	r7, r3, r7, r2
 8009b8c:	e7e3      	b.n	8009b56 <_strtod_l+0x23e>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b92:	2301      	movs	r3, #1
 8009b94:	e77a      	b.n	8009a8c <_strtod_l+0x174>
 8009b96:	f04f 0c00 	mov.w	ip, #0
 8009b9a:	1ca2      	adds	r2, r4, #2
 8009b9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b9e:	78a2      	ldrb	r2, [r4, #2]
 8009ba0:	e782      	b.n	8009aa8 <_strtod_l+0x190>
 8009ba2:	f04f 0c01 	mov.w	ip, #1
 8009ba6:	e7f8      	b.n	8009b9a <_strtod_l+0x282>
 8009ba8:	0800c324 	.word	0x0800c324
 8009bac:	0800c141 	.word	0x0800c141
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bb6:	1c51      	adds	r1, r2, #1
 8009bb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009bba:	7852      	ldrb	r2, [r2, #1]
 8009bbc:	2a30      	cmp	r2, #48	@ 0x30
 8009bbe:	d0f9      	beq.n	8009bb4 <_strtod_l+0x29c>
 8009bc0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009bc4:	2908      	cmp	r1, #8
 8009bc6:	f63f af75 	bhi.w	8009ab4 <_strtod_l+0x19c>
 8009bca:	3a30      	subs	r2, #48	@ 0x30
 8009bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bd0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009bd2:	f04f 080a 	mov.w	r8, #10
 8009bd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bd8:	1c56      	adds	r6, r2, #1
 8009bda:	9619      	str	r6, [sp, #100]	@ 0x64
 8009bdc:	7852      	ldrb	r2, [r2, #1]
 8009bde:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009be2:	f1be 0f09 	cmp.w	lr, #9
 8009be6:	d939      	bls.n	8009c5c <_strtod_l+0x344>
 8009be8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009bea:	1a76      	subs	r6, r6, r1
 8009bec:	2e08      	cmp	r6, #8
 8009bee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009bf2:	dc03      	bgt.n	8009bfc <_strtod_l+0x2e4>
 8009bf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bf6:	4588      	cmp	r8, r1
 8009bf8:	bfa8      	it	ge
 8009bfa:	4688      	movge	r8, r1
 8009bfc:	f1bc 0f00 	cmp.w	ip, #0
 8009c00:	d001      	beq.n	8009c06 <_strtod_l+0x2ee>
 8009c02:	f1c8 0800 	rsb	r8, r8, #0
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	d14e      	bne.n	8009ca8 <_strtod_l+0x390>
 8009c0a:	9908      	ldr	r1, [sp, #32]
 8009c0c:	4308      	orrs	r0, r1
 8009c0e:	f47f aebc 	bne.w	800998a <_strtod_l+0x72>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f47f aed4 	bne.w	80099c0 <_strtod_l+0xa8>
 8009c18:	2a69      	cmp	r2, #105	@ 0x69
 8009c1a:	d028      	beq.n	8009c6e <_strtod_l+0x356>
 8009c1c:	dc25      	bgt.n	8009c6a <_strtod_l+0x352>
 8009c1e:	2a49      	cmp	r2, #73	@ 0x49
 8009c20:	d025      	beq.n	8009c6e <_strtod_l+0x356>
 8009c22:	2a4e      	cmp	r2, #78	@ 0x4e
 8009c24:	f47f aecc 	bne.w	80099c0 <_strtod_l+0xa8>
 8009c28:	499a      	ldr	r1, [pc, #616]	@ (8009e94 <_strtod_l+0x57c>)
 8009c2a:	a819      	add	r0, sp, #100	@ 0x64
 8009c2c:	f001 fd6c 	bl	800b708 <__match>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f43f aec5 	beq.w	80099c0 <_strtod_l+0xa8>
 8009c36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b28      	cmp	r3, #40	@ 0x28
 8009c3c:	d12e      	bne.n	8009c9c <_strtod_l+0x384>
 8009c3e:	4996      	ldr	r1, [pc, #600]	@ (8009e98 <_strtod_l+0x580>)
 8009c40:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c42:	a819      	add	r0, sp, #100	@ 0x64
 8009c44:	f001 fd74 	bl	800b730 <__hexnan>
 8009c48:	2805      	cmp	r0, #5
 8009c4a:	d127      	bne.n	8009c9c <_strtod_l+0x384>
 8009c4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009c52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009c56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009c5a:	e696      	b.n	800998a <_strtod_l+0x72>
 8009c5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c5e:	fb08 2101 	mla	r1, r8, r1, r2
 8009c62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009c66:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c68:	e7b5      	b.n	8009bd6 <_strtod_l+0x2be>
 8009c6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8009c6c:	e7da      	b.n	8009c24 <_strtod_l+0x30c>
 8009c6e:	498b      	ldr	r1, [pc, #556]	@ (8009e9c <_strtod_l+0x584>)
 8009c70:	a819      	add	r0, sp, #100	@ 0x64
 8009c72:	f001 fd49 	bl	800b708 <__match>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f43f aea2 	beq.w	80099c0 <_strtod_l+0xa8>
 8009c7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c7e:	4988      	ldr	r1, [pc, #544]	@ (8009ea0 <_strtod_l+0x588>)
 8009c80:	3b01      	subs	r3, #1
 8009c82:	a819      	add	r0, sp, #100	@ 0x64
 8009c84:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c86:	f001 fd3f 	bl	800b708 <__match>
 8009c8a:	b910      	cbnz	r0, 8009c92 <_strtod_l+0x37a>
 8009c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c8e:	3301      	adds	r3, #1
 8009c90:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c92:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009eb0 <_strtod_l+0x598>
 8009c96:	f04f 0a00 	mov.w	sl, #0
 8009c9a:	e676      	b.n	800998a <_strtod_l+0x72>
 8009c9c:	4881      	ldr	r0, [pc, #516]	@ (8009ea4 <_strtod_l+0x58c>)
 8009c9e:	f001 fa6f 	bl	800b180 <nan>
 8009ca2:	ec5b ab10 	vmov	sl, fp, d0
 8009ca6:	e670      	b.n	800998a <_strtod_l+0x72>
 8009ca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009caa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009cac:	eba8 0303 	sub.w	r3, r8, r3
 8009cb0:	f1b9 0f00 	cmp.w	r9, #0
 8009cb4:	bf08      	it	eq
 8009cb6:	46a9      	moveq	r9, r5
 8009cb8:	2d10      	cmp	r5, #16
 8009cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cbc:	462c      	mov	r4, r5
 8009cbe:	bfa8      	it	ge
 8009cc0:	2410      	movge	r4, #16
 8009cc2:	f7f6 fc2f 	bl	8000524 <__aeabi_ui2d>
 8009cc6:	2d09      	cmp	r5, #9
 8009cc8:	4682      	mov	sl, r0
 8009cca:	468b      	mov	fp, r1
 8009ccc:	dc13      	bgt.n	8009cf6 <_strtod_l+0x3de>
 8009cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f43f ae5a 	beq.w	800998a <_strtod_l+0x72>
 8009cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd8:	dd78      	ble.n	8009dcc <_strtod_l+0x4b4>
 8009cda:	2b16      	cmp	r3, #22
 8009cdc:	dc5f      	bgt.n	8009d9e <_strtod_l+0x486>
 8009cde:	4972      	ldr	r1, [pc, #456]	@ (8009ea8 <_strtod_l+0x590>)
 8009ce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce8:	4652      	mov	r2, sl
 8009cea:	465b      	mov	r3, fp
 8009cec:	f7f6 fc94 	bl	8000618 <__aeabi_dmul>
 8009cf0:	4682      	mov	sl, r0
 8009cf2:	468b      	mov	fp, r1
 8009cf4:	e649      	b.n	800998a <_strtod_l+0x72>
 8009cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8009ea8 <_strtod_l+0x590>)
 8009cf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009d00:	f7f6 fc8a 	bl	8000618 <__aeabi_dmul>
 8009d04:	4682      	mov	sl, r0
 8009d06:	4638      	mov	r0, r7
 8009d08:	468b      	mov	fp, r1
 8009d0a:	f7f6 fc0b 	bl	8000524 <__aeabi_ui2d>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4650      	mov	r0, sl
 8009d14:	4659      	mov	r1, fp
 8009d16:	f7f6 fac9 	bl	80002ac <__adddf3>
 8009d1a:	2d0f      	cmp	r5, #15
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	468b      	mov	fp, r1
 8009d20:	ddd5      	ble.n	8009cce <_strtod_l+0x3b6>
 8009d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d24:	1b2c      	subs	r4, r5, r4
 8009d26:	441c      	add	r4, r3
 8009d28:	2c00      	cmp	r4, #0
 8009d2a:	f340 8093 	ble.w	8009e54 <_strtod_l+0x53c>
 8009d2e:	f014 030f 	ands.w	r3, r4, #15
 8009d32:	d00a      	beq.n	8009d4a <_strtod_l+0x432>
 8009d34:	495c      	ldr	r1, [pc, #368]	@ (8009ea8 <_strtod_l+0x590>)
 8009d36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d3a:	4652      	mov	r2, sl
 8009d3c:	465b      	mov	r3, fp
 8009d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d42:	f7f6 fc69 	bl	8000618 <__aeabi_dmul>
 8009d46:	4682      	mov	sl, r0
 8009d48:	468b      	mov	fp, r1
 8009d4a:	f034 040f 	bics.w	r4, r4, #15
 8009d4e:	d073      	beq.n	8009e38 <_strtod_l+0x520>
 8009d50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009d54:	dd49      	ble.n	8009dea <_strtod_l+0x4d2>
 8009d56:	2400      	movs	r4, #0
 8009d58:	46a0      	mov	r8, r4
 8009d5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009d5c:	46a1      	mov	r9, r4
 8009d5e:	9a05      	ldr	r2, [sp, #20]
 8009d60:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009eb0 <_strtod_l+0x598>
 8009d64:	2322      	movs	r3, #34	@ 0x22
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	f04f 0a00 	mov.w	sl, #0
 8009d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f43f ae0b 	beq.w	800998a <_strtod_l+0x72>
 8009d74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d76:	9805      	ldr	r0, [sp, #20]
 8009d78:	f7ff f946 	bl	8009008 <_Bfree>
 8009d7c:	9805      	ldr	r0, [sp, #20]
 8009d7e:	4649      	mov	r1, r9
 8009d80:	f7ff f942 	bl	8009008 <_Bfree>
 8009d84:	9805      	ldr	r0, [sp, #20]
 8009d86:	4641      	mov	r1, r8
 8009d88:	f7ff f93e 	bl	8009008 <_Bfree>
 8009d8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d8e:	9805      	ldr	r0, [sp, #20]
 8009d90:	f7ff f93a 	bl	8009008 <_Bfree>
 8009d94:	9805      	ldr	r0, [sp, #20]
 8009d96:	4621      	mov	r1, r4
 8009d98:	f7ff f936 	bl	8009008 <_Bfree>
 8009d9c:	e5f5      	b.n	800998a <_strtod_l+0x72>
 8009d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009da0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009da4:	4293      	cmp	r3, r2
 8009da6:	dbbc      	blt.n	8009d22 <_strtod_l+0x40a>
 8009da8:	4c3f      	ldr	r4, [pc, #252]	@ (8009ea8 <_strtod_l+0x590>)
 8009daa:	f1c5 050f 	rsb	r5, r5, #15
 8009dae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009db2:	4652      	mov	r2, sl
 8009db4:	465b      	mov	r3, fp
 8009db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dba:	f7f6 fc2d 	bl	8000618 <__aeabi_dmul>
 8009dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc0:	1b5d      	subs	r5, r3, r5
 8009dc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009dc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009dca:	e78f      	b.n	8009cec <_strtod_l+0x3d4>
 8009dcc:	3316      	adds	r3, #22
 8009dce:	dba8      	blt.n	8009d22 <_strtod_l+0x40a>
 8009dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd2:	eba3 0808 	sub.w	r8, r3, r8
 8009dd6:	4b34      	ldr	r3, [pc, #208]	@ (8009ea8 <_strtod_l+0x590>)
 8009dd8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009ddc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009de0:	4650      	mov	r0, sl
 8009de2:	4659      	mov	r1, fp
 8009de4:	f7f6 fd42 	bl	800086c <__aeabi_ddiv>
 8009de8:	e782      	b.n	8009cf0 <_strtod_l+0x3d8>
 8009dea:	2300      	movs	r3, #0
 8009dec:	4f2f      	ldr	r7, [pc, #188]	@ (8009eac <_strtod_l+0x594>)
 8009dee:	1124      	asrs	r4, r4, #4
 8009df0:	4650      	mov	r0, sl
 8009df2:	4659      	mov	r1, fp
 8009df4:	461e      	mov	r6, r3
 8009df6:	2c01      	cmp	r4, #1
 8009df8:	dc21      	bgt.n	8009e3e <_strtod_l+0x526>
 8009dfa:	b10b      	cbz	r3, 8009e00 <_strtod_l+0x4e8>
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	468b      	mov	fp, r1
 8009e00:	492a      	ldr	r1, [pc, #168]	@ (8009eac <_strtod_l+0x594>)
 8009e02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009e06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009e0a:	4652      	mov	r2, sl
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e12:	f7f6 fc01 	bl	8000618 <__aeabi_dmul>
 8009e16:	4b26      	ldr	r3, [pc, #152]	@ (8009eb0 <_strtod_l+0x598>)
 8009e18:	460a      	mov	r2, r1
 8009e1a:	400b      	ands	r3, r1
 8009e1c:	4925      	ldr	r1, [pc, #148]	@ (8009eb4 <_strtod_l+0x59c>)
 8009e1e:	428b      	cmp	r3, r1
 8009e20:	4682      	mov	sl, r0
 8009e22:	d898      	bhi.n	8009d56 <_strtod_l+0x43e>
 8009e24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009e28:	428b      	cmp	r3, r1
 8009e2a:	bf86      	itte	hi
 8009e2c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009eb8 <_strtod_l+0x5a0>
 8009e30:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9308      	str	r3, [sp, #32]
 8009e3c:	e076      	b.n	8009f2c <_strtod_l+0x614>
 8009e3e:	07e2      	lsls	r2, r4, #31
 8009e40:	d504      	bpl.n	8009e4c <_strtod_l+0x534>
 8009e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e46:	f7f6 fbe7 	bl	8000618 <__aeabi_dmul>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	3601      	adds	r6, #1
 8009e4e:	1064      	asrs	r4, r4, #1
 8009e50:	3708      	adds	r7, #8
 8009e52:	e7d0      	b.n	8009df6 <_strtod_l+0x4de>
 8009e54:	d0f0      	beq.n	8009e38 <_strtod_l+0x520>
 8009e56:	4264      	negs	r4, r4
 8009e58:	f014 020f 	ands.w	r2, r4, #15
 8009e5c:	d00a      	beq.n	8009e74 <_strtod_l+0x55c>
 8009e5e:	4b12      	ldr	r3, [pc, #72]	@ (8009ea8 <_strtod_l+0x590>)
 8009e60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e64:	4650      	mov	r0, sl
 8009e66:	4659      	mov	r1, fp
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fcfe 	bl	800086c <__aeabi_ddiv>
 8009e70:	4682      	mov	sl, r0
 8009e72:	468b      	mov	fp, r1
 8009e74:	1124      	asrs	r4, r4, #4
 8009e76:	d0df      	beq.n	8009e38 <_strtod_l+0x520>
 8009e78:	2c1f      	cmp	r4, #31
 8009e7a:	dd1f      	ble.n	8009ebc <_strtod_l+0x5a4>
 8009e7c:	2400      	movs	r4, #0
 8009e7e:	46a0      	mov	r8, r4
 8009e80:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e82:	46a1      	mov	r9, r4
 8009e84:	9a05      	ldr	r2, [sp, #20]
 8009e86:	2322      	movs	r3, #34	@ 0x22
 8009e88:	f04f 0a00 	mov.w	sl, #0
 8009e8c:	f04f 0b00 	mov.w	fp, #0
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	e76b      	b.n	8009d6c <_strtod_l+0x454>
 8009e94:	0800c031 	.word	0x0800c031
 8009e98:	0800c310 	.word	0x0800c310
 8009e9c:	0800c029 	.word	0x0800c029
 8009ea0:	0800c05e 	.word	0x0800c05e
 8009ea4:	0800c1b2 	.word	0x0800c1b2
 8009ea8:	0800c248 	.word	0x0800c248
 8009eac:	0800c220 	.word	0x0800c220
 8009eb0:	7ff00000 	.word	0x7ff00000
 8009eb4:	7ca00000 	.word	0x7ca00000
 8009eb8:	7fefffff 	.word	0x7fefffff
 8009ebc:	f014 0310 	ands.w	r3, r4, #16
 8009ec0:	bf18      	it	ne
 8009ec2:	236a      	movne	r3, #106	@ 0x6a
 8009ec4:	4ea9      	ldr	r6, [pc, #676]	@ (800a16c <_strtod_l+0x854>)
 8009ec6:	9308      	str	r3, [sp, #32]
 8009ec8:	4650      	mov	r0, sl
 8009eca:	4659      	mov	r1, fp
 8009ecc:	2300      	movs	r3, #0
 8009ece:	07e7      	lsls	r7, r4, #31
 8009ed0:	d504      	bpl.n	8009edc <_strtod_l+0x5c4>
 8009ed2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ed6:	f7f6 fb9f 	bl	8000618 <__aeabi_dmul>
 8009eda:	2301      	movs	r3, #1
 8009edc:	1064      	asrs	r4, r4, #1
 8009ede:	f106 0608 	add.w	r6, r6, #8
 8009ee2:	d1f4      	bne.n	8009ece <_strtod_l+0x5b6>
 8009ee4:	b10b      	cbz	r3, 8009eea <_strtod_l+0x5d2>
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	468b      	mov	fp, r1
 8009eea:	9b08      	ldr	r3, [sp, #32]
 8009eec:	b1b3      	cbz	r3, 8009f1c <_strtod_l+0x604>
 8009eee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009ef2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	4659      	mov	r1, fp
 8009efa:	dd0f      	ble.n	8009f1c <_strtod_l+0x604>
 8009efc:	2b1f      	cmp	r3, #31
 8009efe:	dd56      	ble.n	8009fae <_strtod_l+0x696>
 8009f00:	2b34      	cmp	r3, #52	@ 0x34
 8009f02:	bfde      	ittt	le
 8009f04:	f04f 33ff 	movle.w	r3, #4294967295
 8009f08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f0c:	4093      	lslle	r3, r2
 8009f0e:	f04f 0a00 	mov.w	sl, #0
 8009f12:	bfcc      	ite	gt
 8009f14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f18:	ea03 0b01 	andle.w	fp, r3, r1
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2300      	movs	r3, #0
 8009f20:	4650      	mov	r0, sl
 8009f22:	4659      	mov	r1, fp
 8009f24:	f7f6 fde0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d1a7      	bne.n	8009e7c <_strtod_l+0x564>
 8009f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f32:	9805      	ldr	r0, [sp, #20]
 8009f34:	462b      	mov	r3, r5
 8009f36:	464a      	mov	r2, r9
 8009f38:	f7ff f8ce 	bl	80090d8 <__s2b>
 8009f3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f43f af09 	beq.w	8009d56 <_strtod_l+0x43e>
 8009f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f48:	2a00      	cmp	r2, #0
 8009f4a:	eba3 0308 	sub.w	r3, r3, r8
 8009f4e:	bfa8      	it	ge
 8009f50:	2300      	movge	r3, #0
 8009f52:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f54:	2400      	movs	r4, #0
 8009f56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f5c:	46a0      	mov	r8, r4
 8009f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f60:	9805      	ldr	r0, [sp, #20]
 8009f62:	6859      	ldr	r1, [r3, #4]
 8009f64:	f7ff f810 	bl	8008f88 <_Balloc>
 8009f68:	4681      	mov	r9, r0
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	f43f aef7 	beq.w	8009d5e <_strtod_l+0x446>
 8009f70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	3202      	adds	r2, #2
 8009f76:	f103 010c 	add.w	r1, r3, #12
 8009f7a:	0092      	lsls	r2, r2, #2
 8009f7c:	300c      	adds	r0, #12
 8009f7e:	f001 f8f1 	bl	800b164 <memcpy>
 8009f82:	ec4b ab10 	vmov	d0, sl, fp
 8009f86:	9805      	ldr	r0, [sp, #20]
 8009f88:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f8a:	a91b      	add	r1, sp, #108	@ 0x6c
 8009f8c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009f90:	f7ff fbd6 	bl	8009740 <__d2b>
 8009f94:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f43f aee1 	beq.w	8009d5e <_strtod_l+0x446>
 8009f9c:	9805      	ldr	r0, [sp, #20]
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	f7ff f930 	bl	8009204 <__i2b>
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	b948      	cbnz	r0, 8009fbc <_strtod_l+0x6a4>
 8009fa8:	f04f 0800 	mov.w	r8, #0
 8009fac:	e6d7      	b.n	8009d5e <_strtod_l+0x446>
 8009fae:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb6:	ea03 0a0a 	and.w	sl, r3, sl
 8009fba:	e7af      	b.n	8009f1c <_strtod_l+0x604>
 8009fbc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009fbe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	bfab      	itete	ge
 8009fc4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009fc6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009fc8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009fca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009fcc:	bfac      	ite	ge
 8009fce:	18ef      	addge	r7, r5, r3
 8009fd0:	1b5e      	sublt	r6, r3, r5
 8009fd2:	9b08      	ldr	r3, [sp, #32]
 8009fd4:	1aed      	subs	r5, r5, r3
 8009fd6:	4415      	add	r5, r2
 8009fd8:	4b65      	ldr	r3, [pc, #404]	@ (800a170 <_strtod_l+0x858>)
 8009fda:	3d01      	subs	r5, #1
 8009fdc:	429d      	cmp	r5, r3
 8009fde:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009fe2:	da50      	bge.n	800a086 <_strtod_l+0x76e>
 8009fe4:	1b5b      	subs	r3, r3, r5
 8009fe6:	2b1f      	cmp	r3, #31
 8009fe8:	eba2 0203 	sub.w	r2, r2, r3
 8009fec:	f04f 0101 	mov.w	r1, #1
 8009ff0:	dc3d      	bgt.n	800a06e <_strtod_l+0x756>
 8009ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ffc:	18bd      	adds	r5, r7, r2
 8009ffe:	9b08      	ldr	r3, [sp, #32]
 800a000:	42af      	cmp	r7, r5
 800a002:	4416      	add	r6, r2
 800a004:	441e      	add	r6, r3
 800a006:	463b      	mov	r3, r7
 800a008:	bfa8      	it	ge
 800a00a:	462b      	movge	r3, r5
 800a00c:	42b3      	cmp	r3, r6
 800a00e:	bfa8      	it	ge
 800a010:	4633      	movge	r3, r6
 800a012:	2b00      	cmp	r3, #0
 800a014:	bfc2      	ittt	gt
 800a016:	1aed      	subgt	r5, r5, r3
 800a018:	1af6      	subgt	r6, r6, r3
 800a01a:	1aff      	subgt	r7, r7, r3
 800a01c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd16      	ble.n	800a050 <_strtod_l+0x738>
 800a022:	4641      	mov	r1, r8
 800a024:	9805      	ldr	r0, [sp, #20]
 800a026:	461a      	mov	r2, r3
 800a028:	f7ff f9a4 	bl	8009374 <__pow5mult>
 800a02c:	4680      	mov	r8, r0
 800a02e:	2800      	cmp	r0, #0
 800a030:	d0ba      	beq.n	8009fa8 <_strtod_l+0x690>
 800a032:	4601      	mov	r1, r0
 800a034:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a036:	9805      	ldr	r0, [sp, #20]
 800a038:	f7ff f8fa 	bl	8009230 <__multiply>
 800a03c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a03e:	2800      	cmp	r0, #0
 800a040:	f43f ae8d 	beq.w	8009d5e <_strtod_l+0x446>
 800a044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a046:	9805      	ldr	r0, [sp, #20]
 800a048:	f7fe ffde 	bl	8009008 <_Bfree>
 800a04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a04e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a050:	2d00      	cmp	r5, #0
 800a052:	dc1d      	bgt.n	800a090 <_strtod_l+0x778>
 800a054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	dd23      	ble.n	800a0a2 <_strtod_l+0x78a>
 800a05a:	4649      	mov	r1, r9
 800a05c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a05e:	9805      	ldr	r0, [sp, #20]
 800a060:	f7ff f988 	bl	8009374 <__pow5mult>
 800a064:	4681      	mov	r9, r0
 800a066:	b9e0      	cbnz	r0, 800a0a2 <_strtod_l+0x78a>
 800a068:	f04f 0900 	mov.w	r9, #0
 800a06c:	e677      	b.n	8009d5e <_strtod_l+0x446>
 800a06e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a072:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a076:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a07a:	35e2      	adds	r5, #226	@ 0xe2
 800a07c:	fa01 f305 	lsl.w	r3, r1, r5
 800a080:	9310      	str	r3, [sp, #64]	@ 0x40
 800a082:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a084:	e7ba      	b.n	8009ffc <_strtod_l+0x6e4>
 800a086:	2300      	movs	r3, #0
 800a088:	9310      	str	r3, [sp, #64]	@ 0x40
 800a08a:	2301      	movs	r3, #1
 800a08c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a08e:	e7b5      	b.n	8009ffc <_strtod_l+0x6e4>
 800a090:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a092:	9805      	ldr	r0, [sp, #20]
 800a094:	462a      	mov	r2, r5
 800a096:	f7ff f9c7 	bl	8009428 <__lshift>
 800a09a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1d9      	bne.n	800a054 <_strtod_l+0x73c>
 800a0a0:	e65d      	b.n	8009d5e <_strtod_l+0x446>
 800a0a2:	2e00      	cmp	r6, #0
 800a0a4:	dd07      	ble.n	800a0b6 <_strtod_l+0x79e>
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	9805      	ldr	r0, [sp, #20]
 800a0aa:	4632      	mov	r2, r6
 800a0ac:	f7ff f9bc 	bl	8009428 <__lshift>
 800a0b0:	4681      	mov	r9, r0
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d0d8      	beq.n	800a068 <_strtod_l+0x750>
 800a0b6:	2f00      	cmp	r7, #0
 800a0b8:	dd08      	ble.n	800a0cc <_strtod_l+0x7b4>
 800a0ba:	4641      	mov	r1, r8
 800a0bc:	9805      	ldr	r0, [sp, #20]
 800a0be:	463a      	mov	r2, r7
 800a0c0:	f7ff f9b2 	bl	8009428 <__lshift>
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f43f ae49 	beq.w	8009d5e <_strtod_l+0x446>
 800a0cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0ce:	9805      	ldr	r0, [sp, #20]
 800a0d0:	464a      	mov	r2, r9
 800a0d2:	f7ff fa31 	bl	8009538 <__mdiff>
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f43f ae40 	beq.w	8009d5e <_strtod_l+0x446>
 800a0de:	68c3      	ldr	r3, [r0, #12]
 800a0e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60c3      	str	r3, [r0, #12]
 800a0e6:	4641      	mov	r1, r8
 800a0e8:	f7ff fa0a 	bl	8009500 <__mcmp>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	da45      	bge.n	800a17c <_strtod_l+0x864>
 800a0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800a0f6:	d16b      	bne.n	800a1d0 <_strtod_l+0x8b8>
 800a0f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d167      	bne.n	800a1d0 <_strtod_l+0x8b8>
 800a100:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a104:	0d1b      	lsrs	r3, r3, #20
 800a106:	051b      	lsls	r3, r3, #20
 800a108:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a10c:	d960      	bls.n	800a1d0 <_strtod_l+0x8b8>
 800a10e:	6963      	ldr	r3, [r4, #20]
 800a110:	b913      	cbnz	r3, 800a118 <_strtod_l+0x800>
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	2b01      	cmp	r3, #1
 800a116:	dd5b      	ble.n	800a1d0 <_strtod_l+0x8b8>
 800a118:	4621      	mov	r1, r4
 800a11a:	2201      	movs	r2, #1
 800a11c:	9805      	ldr	r0, [sp, #20]
 800a11e:	f7ff f983 	bl	8009428 <__lshift>
 800a122:	4641      	mov	r1, r8
 800a124:	4604      	mov	r4, r0
 800a126:	f7ff f9eb 	bl	8009500 <__mcmp>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	dd50      	ble.n	800a1d0 <_strtod_l+0x8b8>
 800a12e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a132:	9a08      	ldr	r2, [sp, #32]
 800a134:	0d1b      	lsrs	r3, r3, #20
 800a136:	051b      	lsls	r3, r3, #20
 800a138:	2a00      	cmp	r2, #0
 800a13a:	d06a      	beq.n	800a212 <_strtod_l+0x8fa>
 800a13c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a140:	d867      	bhi.n	800a212 <_strtod_l+0x8fa>
 800a142:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a146:	f67f ae9d 	bls.w	8009e84 <_strtod_l+0x56c>
 800a14a:	4b0a      	ldr	r3, [pc, #40]	@ (800a174 <_strtod_l+0x85c>)
 800a14c:	4650      	mov	r0, sl
 800a14e:	4659      	mov	r1, fp
 800a150:	2200      	movs	r2, #0
 800a152:	f7f6 fa61 	bl	8000618 <__aeabi_dmul>
 800a156:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <_strtod_l+0x860>)
 800a158:	400b      	ands	r3, r1
 800a15a:	4682      	mov	sl, r0
 800a15c:	468b      	mov	fp, r1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f47f ae08 	bne.w	8009d74 <_strtod_l+0x45c>
 800a164:	9a05      	ldr	r2, [sp, #20]
 800a166:	2322      	movs	r3, #34	@ 0x22
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	e603      	b.n	8009d74 <_strtod_l+0x45c>
 800a16c:	0800c338 	.word	0x0800c338
 800a170:	fffffc02 	.word	0xfffffc02
 800a174:	39500000 	.word	0x39500000
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a180:	d165      	bne.n	800a24e <_strtod_l+0x936>
 800a182:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a188:	b35a      	cbz	r2, 800a1e2 <_strtod_l+0x8ca>
 800a18a:	4a9f      	ldr	r2, [pc, #636]	@ (800a408 <_strtod_l+0xaf0>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d12b      	bne.n	800a1e8 <_strtod_l+0x8d0>
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	4651      	mov	r1, sl
 800a194:	b303      	cbz	r3, 800a1d8 <_strtod_l+0x8c0>
 800a196:	4b9d      	ldr	r3, [pc, #628]	@ (800a40c <_strtod_l+0xaf4>)
 800a198:	465a      	mov	r2, fp
 800a19a:	4013      	ands	r3, r2
 800a19c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	d81b      	bhi.n	800a1de <_strtod_l+0x8c6>
 800a1a6:	0d1b      	lsrs	r3, r3, #20
 800a1a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b0:	4299      	cmp	r1, r3
 800a1b2:	d119      	bne.n	800a1e8 <_strtod_l+0x8d0>
 800a1b4:	4b96      	ldr	r3, [pc, #600]	@ (800a410 <_strtod_l+0xaf8>)
 800a1b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d102      	bne.n	800a1c2 <_strtod_l+0x8aa>
 800a1bc:	3101      	adds	r1, #1
 800a1be:	f43f adce 	beq.w	8009d5e <_strtod_l+0x446>
 800a1c2:	4b92      	ldr	r3, [pc, #584]	@ (800a40c <_strtod_l+0xaf4>)
 800a1c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1c6:	401a      	ands	r2, r3
 800a1c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a1cc:	f04f 0a00 	mov.w	sl, #0
 800a1d0:	9b08      	ldr	r3, [sp, #32]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1b9      	bne.n	800a14a <_strtod_l+0x832>
 800a1d6:	e5cd      	b.n	8009d74 <_strtod_l+0x45c>
 800a1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1dc:	e7e8      	b.n	800a1b0 <_strtod_l+0x898>
 800a1de:	4613      	mov	r3, r2
 800a1e0:	e7e6      	b.n	800a1b0 <_strtod_l+0x898>
 800a1e2:	ea53 030a 	orrs.w	r3, r3, sl
 800a1e6:	d0a2      	beq.n	800a12e <_strtod_l+0x816>
 800a1e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1ea:	b1db      	cbz	r3, 800a224 <_strtod_l+0x90c>
 800a1ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1ee:	4213      	tst	r3, r2
 800a1f0:	d0ee      	beq.n	800a1d0 <_strtod_l+0x8b8>
 800a1f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1f4:	9a08      	ldr	r2, [sp, #32]
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	b1bb      	cbz	r3, 800a22c <_strtod_l+0x914>
 800a1fc:	f7ff fb6e 	bl	80098dc <sulp>
 800a200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a204:	ec53 2b10 	vmov	r2, r3, d0
 800a208:	f7f6 f850 	bl	80002ac <__adddf3>
 800a20c:	4682      	mov	sl, r0
 800a20e:	468b      	mov	fp, r1
 800a210:	e7de      	b.n	800a1d0 <_strtod_l+0x8b8>
 800a212:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a216:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a21a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a21e:	f04f 3aff 	mov.w	sl, #4294967295
 800a222:	e7d5      	b.n	800a1d0 <_strtod_l+0x8b8>
 800a224:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a226:	ea13 0f0a 	tst.w	r3, sl
 800a22a:	e7e1      	b.n	800a1f0 <_strtod_l+0x8d8>
 800a22c:	f7ff fb56 	bl	80098dc <sulp>
 800a230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a234:	ec53 2b10 	vmov	r2, r3, d0
 800a238:	f7f6 f836 	bl	80002a8 <__aeabi_dsub>
 800a23c:	2200      	movs	r2, #0
 800a23e:	2300      	movs	r3, #0
 800a240:	4682      	mov	sl, r0
 800a242:	468b      	mov	fp, r1
 800a244:	f7f6 fc50 	bl	8000ae8 <__aeabi_dcmpeq>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d0c1      	beq.n	800a1d0 <_strtod_l+0x8b8>
 800a24c:	e61a      	b.n	8009e84 <_strtod_l+0x56c>
 800a24e:	4641      	mov	r1, r8
 800a250:	4620      	mov	r0, r4
 800a252:	f7ff facd 	bl	80097f0 <__ratio>
 800a256:	ec57 6b10 	vmov	r6, r7, d0
 800a25a:	2200      	movs	r2, #0
 800a25c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f6 fc54 	bl	8000b10 <__aeabi_dcmple>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d06f      	beq.n	800a34c <_strtod_l+0xa34>
 800a26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d17a      	bne.n	800a368 <_strtod_l+0xa50>
 800a272:	f1ba 0f00 	cmp.w	sl, #0
 800a276:	d158      	bne.n	800a32a <_strtod_l+0xa12>
 800a278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a27a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d15a      	bne.n	800a338 <_strtod_l+0xa20>
 800a282:	4b64      	ldr	r3, [pc, #400]	@ (800a414 <_strtod_l+0xafc>)
 800a284:	2200      	movs	r2, #0
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f6 fc37 	bl	8000afc <__aeabi_dcmplt>
 800a28e:	2800      	cmp	r0, #0
 800a290:	d159      	bne.n	800a346 <_strtod_l+0xa2e>
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	4b60      	ldr	r3, [pc, #384]	@ (800a418 <_strtod_l+0xb00>)
 800a298:	2200      	movs	r2, #0
 800a29a:	f7f6 f9bd 	bl	8000618 <__aeabi_dmul>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a2a6:	9606      	str	r6, [sp, #24]
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2ae:	4d57      	ldr	r5, [pc, #348]	@ (800a40c <_strtod_l+0xaf4>)
 800a2b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b6:	401d      	ands	r5, r3
 800a2b8:	4b58      	ldr	r3, [pc, #352]	@ (800a41c <_strtod_l+0xb04>)
 800a2ba:	429d      	cmp	r5, r3
 800a2bc:	f040 80b2 	bne.w	800a424 <_strtod_l+0xb0c>
 800a2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a2c6:	ec4b ab10 	vmov	d0, sl, fp
 800a2ca:	f7ff f9c9 	bl	8009660 <__ulp>
 800a2ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2d2:	ec51 0b10 	vmov	r0, r1, d0
 800a2d6:	f7f6 f99f 	bl	8000618 <__aeabi_dmul>
 800a2da:	4652      	mov	r2, sl
 800a2dc:	465b      	mov	r3, fp
 800a2de:	f7f5 ffe5 	bl	80002ac <__adddf3>
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4949      	ldr	r1, [pc, #292]	@ (800a40c <_strtod_l+0xaf4>)
 800a2e6:	4a4e      	ldr	r2, [pc, #312]	@ (800a420 <_strtod_l+0xb08>)
 800a2e8:	4019      	ands	r1, r3
 800a2ea:	4291      	cmp	r1, r2
 800a2ec:	4682      	mov	sl, r0
 800a2ee:	d942      	bls.n	800a376 <_strtod_l+0xa5e>
 800a2f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a2f2:	4b47      	ldr	r3, [pc, #284]	@ (800a410 <_strtod_l+0xaf8>)
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d103      	bne.n	800a300 <_strtod_l+0x9e8>
 800a2f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	f43f ad2f 	beq.w	8009d5e <_strtod_l+0x446>
 800a300:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a410 <_strtod_l+0xaf8>
 800a304:	f04f 3aff 	mov.w	sl, #4294967295
 800a308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a30a:	9805      	ldr	r0, [sp, #20]
 800a30c:	f7fe fe7c 	bl	8009008 <_Bfree>
 800a310:	9805      	ldr	r0, [sp, #20]
 800a312:	4649      	mov	r1, r9
 800a314:	f7fe fe78 	bl	8009008 <_Bfree>
 800a318:	9805      	ldr	r0, [sp, #20]
 800a31a:	4641      	mov	r1, r8
 800a31c:	f7fe fe74 	bl	8009008 <_Bfree>
 800a320:	9805      	ldr	r0, [sp, #20]
 800a322:	4621      	mov	r1, r4
 800a324:	f7fe fe70 	bl	8009008 <_Bfree>
 800a328:	e619      	b.n	8009f5e <_strtod_l+0x646>
 800a32a:	f1ba 0f01 	cmp.w	sl, #1
 800a32e:	d103      	bne.n	800a338 <_strtod_l+0xa20>
 800a330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a332:	2b00      	cmp	r3, #0
 800a334:	f43f ada6 	beq.w	8009e84 <_strtod_l+0x56c>
 800a338:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a3e8 <_strtod_l+0xad0>
 800a33c:	4f35      	ldr	r7, [pc, #212]	@ (800a414 <_strtod_l+0xafc>)
 800a33e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a342:	2600      	movs	r6, #0
 800a344:	e7b1      	b.n	800a2aa <_strtod_l+0x992>
 800a346:	4f34      	ldr	r7, [pc, #208]	@ (800a418 <_strtod_l+0xb00>)
 800a348:	2600      	movs	r6, #0
 800a34a:	e7aa      	b.n	800a2a2 <_strtod_l+0x98a>
 800a34c:	4b32      	ldr	r3, [pc, #200]	@ (800a418 <_strtod_l+0xb00>)
 800a34e:	4630      	mov	r0, r6
 800a350:	4639      	mov	r1, r7
 800a352:	2200      	movs	r2, #0
 800a354:	f7f6 f960 	bl	8000618 <__aeabi_dmul>
 800a358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35a:	4606      	mov	r6, r0
 800a35c:	460f      	mov	r7, r1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d09f      	beq.n	800a2a2 <_strtod_l+0x98a>
 800a362:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a366:	e7a0      	b.n	800a2aa <_strtod_l+0x992>
 800a368:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a3f0 <_strtod_l+0xad8>
 800a36c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a370:	ec57 6b17 	vmov	r6, r7, d7
 800a374:	e799      	b.n	800a2aa <_strtod_l+0x992>
 800a376:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a37a:	9b08      	ldr	r3, [sp, #32]
 800a37c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1c1      	bne.n	800a308 <_strtod_l+0x9f0>
 800a384:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a388:	0d1b      	lsrs	r3, r3, #20
 800a38a:	051b      	lsls	r3, r3, #20
 800a38c:	429d      	cmp	r5, r3
 800a38e:	d1bb      	bne.n	800a308 <_strtod_l+0x9f0>
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	f7f6 fca0 	bl	8000cd8 <__aeabi_d2lz>
 800a398:	f7f6 f910 	bl	80005bc <__aeabi_l2d>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f5 ff80 	bl	80002a8 <__aeabi_dsub>
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a3b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3b6:	ea46 060a 	orr.w	r6, r6, sl
 800a3ba:	431e      	orrs	r6, r3
 800a3bc:	d06f      	beq.n	800a49e <_strtod_l+0xb86>
 800a3be:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3f8 <_strtod_l+0xae0>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f7f6 fb9a 	bl	8000afc <__aeabi_dcmplt>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	f47f acd3 	bne.w	8009d74 <_strtod_l+0x45c>
 800a3ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800a400 <_strtod_l+0xae8>)
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3d8:	f7f6 fbae 	bl	8000b38 <__aeabi_dcmpgt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d093      	beq.n	800a308 <_strtod_l+0x9f0>
 800a3e0:	e4c8      	b.n	8009d74 <_strtod_l+0x45c>
 800a3e2:	bf00      	nop
 800a3e4:	f3af 8000 	nop.w
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	bff00000 	.word	0xbff00000
 800a3f0:	00000000 	.word	0x00000000
 800a3f4:	3ff00000 	.word	0x3ff00000
 800a3f8:	94a03595 	.word	0x94a03595
 800a3fc:	3fdfffff 	.word	0x3fdfffff
 800a400:	35afe535 	.word	0x35afe535
 800a404:	3fe00000 	.word	0x3fe00000
 800a408:	000fffff 	.word	0x000fffff
 800a40c:	7ff00000 	.word	0x7ff00000
 800a410:	7fefffff 	.word	0x7fefffff
 800a414:	3ff00000 	.word	0x3ff00000
 800a418:	3fe00000 	.word	0x3fe00000
 800a41c:	7fe00000 	.word	0x7fe00000
 800a420:	7c9fffff 	.word	0x7c9fffff
 800a424:	9b08      	ldr	r3, [sp, #32]
 800a426:	b323      	cbz	r3, 800a472 <_strtod_l+0xb5a>
 800a428:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a42c:	d821      	bhi.n	800a472 <_strtod_l+0xb5a>
 800a42e:	a328      	add	r3, pc, #160	@ (adr r3, 800a4d0 <_strtod_l+0xbb8>)
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	f7f6 fb6a 	bl	8000b10 <__aeabi_dcmple>
 800a43c:	b1a0      	cbz	r0, 800a468 <_strtod_l+0xb50>
 800a43e:	4639      	mov	r1, r7
 800a440:	4630      	mov	r0, r6
 800a442:	f7f6 fbc1 	bl	8000bc8 <__aeabi_d2uiz>
 800a446:	2801      	cmp	r0, #1
 800a448:	bf38      	it	cc
 800a44a:	2001      	movcc	r0, #1
 800a44c:	f7f6 f86a 	bl	8000524 <__aeabi_ui2d>
 800a450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a452:	4606      	mov	r6, r0
 800a454:	460f      	mov	r7, r1
 800a456:	b9fb      	cbnz	r3, 800a498 <_strtod_l+0xb80>
 800a458:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a45c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a45e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a460:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a464:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a468:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a46a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a46e:	1b5b      	subs	r3, r3, r5
 800a470:	9311      	str	r3, [sp, #68]	@ 0x44
 800a472:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a476:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a47a:	f7ff f8f1 	bl	8009660 <__ulp>
 800a47e:	4650      	mov	r0, sl
 800a480:	ec53 2b10 	vmov	r2, r3, d0
 800a484:	4659      	mov	r1, fp
 800a486:	f7f6 f8c7 	bl	8000618 <__aeabi_dmul>
 800a48a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a48e:	f7f5 ff0d 	bl	80002ac <__adddf3>
 800a492:	4682      	mov	sl, r0
 800a494:	468b      	mov	fp, r1
 800a496:	e770      	b.n	800a37a <_strtod_l+0xa62>
 800a498:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a49c:	e7e0      	b.n	800a460 <_strtod_l+0xb48>
 800a49e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4d8 <_strtod_l+0xbc0>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f7f6 fb2a 	bl	8000afc <__aeabi_dcmplt>
 800a4a8:	e798      	b.n	800a3dc <_strtod_l+0xac4>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a4b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	f7ff ba6d 	b.w	8009992 <_strtod_l+0x7a>
 800a4b8:	2a65      	cmp	r2, #101	@ 0x65
 800a4ba:	f43f ab68 	beq.w	8009b8e <_strtod_l+0x276>
 800a4be:	2a45      	cmp	r2, #69	@ 0x45
 800a4c0:	f43f ab65 	beq.w	8009b8e <_strtod_l+0x276>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	f7ff bba0 	b.w	8009c0a <_strtod_l+0x2f2>
 800a4ca:	bf00      	nop
 800a4cc:	f3af 8000 	nop.w
 800a4d0:	ffc00000 	.word	0xffc00000
 800a4d4:	41dfffff 	.word	0x41dfffff
 800a4d8:	94a03595 	.word	0x94a03595
 800a4dc:	3fcfffff 	.word	0x3fcfffff

0800a4e0 <_strtod_r>:
 800a4e0:	4b01      	ldr	r3, [pc, #4]	@ (800a4e8 <_strtod_r+0x8>)
 800a4e2:	f7ff ba19 	b.w	8009918 <_strtod_l>
 800a4e6:	bf00      	nop
 800a4e8:	2000106c 	.word	0x2000106c

0800a4ec <_strtol_l.isra.0>:
 800a4ec:	2b24      	cmp	r3, #36	@ 0x24
 800a4ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f2:	4686      	mov	lr, r0
 800a4f4:	4690      	mov	r8, r2
 800a4f6:	d801      	bhi.n	800a4fc <_strtol_l.isra.0+0x10>
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d106      	bne.n	800a50a <_strtol_l.isra.0+0x1e>
 800a4fc:	f7fd fdb8 	bl	8008070 <__errno>
 800a500:	2316      	movs	r3, #22
 800a502:	6003      	str	r3, [r0, #0]
 800a504:	2000      	movs	r0, #0
 800a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50a:	4834      	ldr	r0, [pc, #208]	@ (800a5dc <_strtol_l.isra.0+0xf0>)
 800a50c:	460d      	mov	r5, r1
 800a50e:	462a      	mov	r2, r5
 800a510:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a514:	5d06      	ldrb	r6, [r0, r4]
 800a516:	f016 0608 	ands.w	r6, r6, #8
 800a51a:	d1f8      	bne.n	800a50e <_strtol_l.isra.0+0x22>
 800a51c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a51e:	d110      	bne.n	800a542 <_strtol_l.isra.0+0x56>
 800a520:	782c      	ldrb	r4, [r5, #0]
 800a522:	2601      	movs	r6, #1
 800a524:	1c95      	adds	r5, r2, #2
 800a526:	f033 0210 	bics.w	r2, r3, #16
 800a52a:	d115      	bne.n	800a558 <_strtol_l.isra.0+0x6c>
 800a52c:	2c30      	cmp	r4, #48	@ 0x30
 800a52e:	d10d      	bne.n	800a54c <_strtol_l.isra.0+0x60>
 800a530:	782a      	ldrb	r2, [r5, #0]
 800a532:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a536:	2a58      	cmp	r2, #88	@ 0x58
 800a538:	d108      	bne.n	800a54c <_strtol_l.isra.0+0x60>
 800a53a:	786c      	ldrb	r4, [r5, #1]
 800a53c:	3502      	adds	r5, #2
 800a53e:	2310      	movs	r3, #16
 800a540:	e00a      	b.n	800a558 <_strtol_l.isra.0+0x6c>
 800a542:	2c2b      	cmp	r4, #43	@ 0x2b
 800a544:	bf04      	itt	eq
 800a546:	782c      	ldrbeq	r4, [r5, #0]
 800a548:	1c95      	addeq	r5, r2, #2
 800a54a:	e7ec      	b.n	800a526 <_strtol_l.isra.0+0x3a>
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1f6      	bne.n	800a53e <_strtol_l.isra.0+0x52>
 800a550:	2c30      	cmp	r4, #48	@ 0x30
 800a552:	bf14      	ite	ne
 800a554:	230a      	movne	r3, #10
 800a556:	2308      	moveq	r3, #8
 800a558:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a55c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a560:	2200      	movs	r2, #0
 800a562:	fbbc f9f3 	udiv	r9, ip, r3
 800a566:	4610      	mov	r0, r2
 800a568:	fb03 ca19 	mls	sl, r3, r9, ip
 800a56c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a570:	2f09      	cmp	r7, #9
 800a572:	d80f      	bhi.n	800a594 <_strtol_l.isra.0+0xa8>
 800a574:	463c      	mov	r4, r7
 800a576:	42a3      	cmp	r3, r4
 800a578:	dd1b      	ble.n	800a5b2 <_strtol_l.isra.0+0xc6>
 800a57a:	1c57      	adds	r7, r2, #1
 800a57c:	d007      	beq.n	800a58e <_strtol_l.isra.0+0xa2>
 800a57e:	4581      	cmp	r9, r0
 800a580:	d314      	bcc.n	800a5ac <_strtol_l.isra.0+0xc0>
 800a582:	d101      	bne.n	800a588 <_strtol_l.isra.0+0x9c>
 800a584:	45a2      	cmp	sl, r4
 800a586:	db11      	blt.n	800a5ac <_strtol_l.isra.0+0xc0>
 800a588:	fb00 4003 	mla	r0, r0, r3, r4
 800a58c:	2201      	movs	r2, #1
 800a58e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a592:	e7eb      	b.n	800a56c <_strtol_l.isra.0+0x80>
 800a594:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a598:	2f19      	cmp	r7, #25
 800a59a:	d801      	bhi.n	800a5a0 <_strtol_l.isra.0+0xb4>
 800a59c:	3c37      	subs	r4, #55	@ 0x37
 800a59e:	e7ea      	b.n	800a576 <_strtol_l.isra.0+0x8a>
 800a5a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a5a4:	2f19      	cmp	r7, #25
 800a5a6:	d804      	bhi.n	800a5b2 <_strtol_l.isra.0+0xc6>
 800a5a8:	3c57      	subs	r4, #87	@ 0x57
 800a5aa:	e7e4      	b.n	800a576 <_strtol_l.isra.0+0x8a>
 800a5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b0:	e7ed      	b.n	800a58e <_strtol_l.isra.0+0xa2>
 800a5b2:	1c53      	adds	r3, r2, #1
 800a5b4:	d108      	bne.n	800a5c8 <_strtol_l.isra.0+0xdc>
 800a5b6:	2322      	movs	r3, #34	@ 0x22
 800a5b8:	f8ce 3000 	str.w	r3, [lr]
 800a5bc:	4660      	mov	r0, ip
 800a5be:	f1b8 0f00 	cmp.w	r8, #0
 800a5c2:	d0a0      	beq.n	800a506 <_strtol_l.isra.0+0x1a>
 800a5c4:	1e69      	subs	r1, r5, #1
 800a5c6:	e006      	b.n	800a5d6 <_strtol_l.isra.0+0xea>
 800a5c8:	b106      	cbz	r6, 800a5cc <_strtol_l.isra.0+0xe0>
 800a5ca:	4240      	negs	r0, r0
 800a5cc:	f1b8 0f00 	cmp.w	r8, #0
 800a5d0:	d099      	beq.n	800a506 <_strtol_l.isra.0+0x1a>
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d1f6      	bne.n	800a5c4 <_strtol_l.isra.0+0xd8>
 800a5d6:	f8c8 1000 	str.w	r1, [r8]
 800a5da:	e794      	b.n	800a506 <_strtol_l.isra.0+0x1a>
 800a5dc:	0800c361 	.word	0x0800c361

0800a5e0 <_strtol_r>:
 800a5e0:	f7ff bf84 	b.w	800a4ec <_strtol_l.isra.0>

0800a5e4 <__ssputs_r>:
 800a5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e8:	688e      	ldr	r6, [r1, #8]
 800a5ea:	461f      	mov	r7, r3
 800a5ec:	42be      	cmp	r6, r7
 800a5ee:	680b      	ldr	r3, [r1, #0]
 800a5f0:	4682      	mov	sl, r0
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	4690      	mov	r8, r2
 800a5f6:	d82d      	bhi.n	800a654 <__ssputs_r+0x70>
 800a5f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a600:	d026      	beq.n	800a650 <__ssputs_r+0x6c>
 800a602:	6965      	ldr	r5, [r4, #20]
 800a604:	6909      	ldr	r1, [r1, #16]
 800a606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a60a:	eba3 0901 	sub.w	r9, r3, r1
 800a60e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a612:	1c7b      	adds	r3, r7, #1
 800a614:	444b      	add	r3, r9
 800a616:	106d      	asrs	r5, r5, #1
 800a618:	429d      	cmp	r5, r3
 800a61a:	bf38      	it	cc
 800a61c:	461d      	movcc	r5, r3
 800a61e:	0553      	lsls	r3, r2, #21
 800a620:	d527      	bpl.n	800a672 <__ssputs_r+0x8e>
 800a622:	4629      	mov	r1, r5
 800a624:	f7fe fc24 	bl	8008e70 <_malloc_r>
 800a628:	4606      	mov	r6, r0
 800a62a:	b360      	cbz	r0, 800a686 <__ssputs_r+0xa2>
 800a62c:	6921      	ldr	r1, [r4, #16]
 800a62e:	464a      	mov	r2, r9
 800a630:	f000 fd98 	bl	800b164 <memcpy>
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	6126      	str	r6, [r4, #16]
 800a642:	6165      	str	r5, [r4, #20]
 800a644:	444e      	add	r6, r9
 800a646:	eba5 0509 	sub.w	r5, r5, r9
 800a64a:	6026      	str	r6, [r4, #0]
 800a64c:	60a5      	str	r5, [r4, #8]
 800a64e:	463e      	mov	r6, r7
 800a650:	42be      	cmp	r6, r7
 800a652:	d900      	bls.n	800a656 <__ssputs_r+0x72>
 800a654:	463e      	mov	r6, r7
 800a656:	6820      	ldr	r0, [r4, #0]
 800a658:	4632      	mov	r2, r6
 800a65a:	4641      	mov	r1, r8
 800a65c:	f000 fd57 	bl	800b10e <memmove>
 800a660:	68a3      	ldr	r3, [r4, #8]
 800a662:	1b9b      	subs	r3, r3, r6
 800a664:	60a3      	str	r3, [r4, #8]
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	4433      	add	r3, r6
 800a66a:	6023      	str	r3, [r4, #0]
 800a66c:	2000      	movs	r0, #0
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	462a      	mov	r2, r5
 800a674:	f001 f909 	bl	800b88a <_realloc_r>
 800a678:	4606      	mov	r6, r0
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d1e0      	bne.n	800a640 <__ssputs_r+0x5c>
 800a67e:	6921      	ldr	r1, [r4, #16]
 800a680:	4650      	mov	r0, sl
 800a682:	f7fe fb81 	bl	8008d88 <_free_r>
 800a686:	230c      	movs	r3, #12
 800a688:	f8ca 3000 	str.w	r3, [sl]
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	f04f 30ff 	mov.w	r0, #4294967295
 800a698:	e7e9      	b.n	800a66e <__ssputs_r+0x8a>
	...

0800a69c <_svfiprintf_r>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	4698      	mov	r8, r3
 800a6a2:	898b      	ldrh	r3, [r1, #12]
 800a6a4:	061b      	lsls	r3, r3, #24
 800a6a6:	b09d      	sub	sp, #116	@ 0x74
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	d510      	bpl.n	800a6d2 <_svfiprintf_r+0x36>
 800a6b0:	690b      	ldr	r3, [r1, #16]
 800a6b2:	b973      	cbnz	r3, 800a6d2 <_svfiprintf_r+0x36>
 800a6b4:	2140      	movs	r1, #64	@ 0x40
 800a6b6:	f7fe fbdb 	bl	8008e70 <_malloc_r>
 800a6ba:	6028      	str	r0, [r5, #0]
 800a6bc:	6128      	str	r0, [r5, #16]
 800a6be:	b930      	cbnz	r0, 800a6ce <_svfiprintf_r+0x32>
 800a6c0:	230c      	movs	r3, #12
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	b01d      	add	sp, #116	@ 0x74
 800a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ce:	2340      	movs	r3, #64	@ 0x40
 800a6d0:	616b      	str	r3, [r5, #20]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6d6:	2320      	movs	r3, #32
 800a6d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6e0:	2330      	movs	r3, #48	@ 0x30
 800a6e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a880 <_svfiprintf_r+0x1e4>
 800a6e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6ea:	f04f 0901 	mov.w	r9, #1
 800a6ee:	4623      	mov	r3, r4
 800a6f0:	469a      	mov	sl, r3
 800a6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f6:	b10a      	cbz	r2, 800a6fc <_svfiprintf_r+0x60>
 800a6f8:	2a25      	cmp	r2, #37	@ 0x25
 800a6fa:	d1f9      	bne.n	800a6f0 <_svfiprintf_r+0x54>
 800a6fc:	ebba 0b04 	subs.w	fp, sl, r4
 800a700:	d00b      	beq.n	800a71a <_svfiprintf_r+0x7e>
 800a702:	465b      	mov	r3, fp
 800a704:	4622      	mov	r2, r4
 800a706:	4629      	mov	r1, r5
 800a708:	4638      	mov	r0, r7
 800a70a:	f7ff ff6b 	bl	800a5e4 <__ssputs_r>
 800a70e:	3001      	adds	r0, #1
 800a710:	f000 80a7 	beq.w	800a862 <_svfiprintf_r+0x1c6>
 800a714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a716:	445a      	add	r2, fp
 800a718:	9209      	str	r2, [sp, #36]	@ 0x24
 800a71a:	f89a 3000 	ldrb.w	r3, [sl]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 809f 	beq.w	800a862 <_svfiprintf_r+0x1c6>
 800a724:	2300      	movs	r3, #0
 800a726:	f04f 32ff 	mov.w	r2, #4294967295
 800a72a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a72e:	f10a 0a01 	add.w	sl, sl, #1
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	9307      	str	r3, [sp, #28]
 800a736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a73a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a73c:	4654      	mov	r4, sl
 800a73e:	2205      	movs	r2, #5
 800a740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a744:	484e      	ldr	r0, [pc, #312]	@ (800a880 <_svfiprintf_r+0x1e4>)
 800a746:	f7f5 fd53 	bl	80001f0 <memchr>
 800a74a:	9a04      	ldr	r2, [sp, #16]
 800a74c:	b9d8      	cbnz	r0, 800a786 <_svfiprintf_r+0xea>
 800a74e:	06d0      	lsls	r0, r2, #27
 800a750:	bf44      	itt	mi
 800a752:	2320      	movmi	r3, #32
 800a754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a758:	0711      	lsls	r1, r2, #28
 800a75a:	bf44      	itt	mi
 800a75c:	232b      	movmi	r3, #43	@ 0x2b
 800a75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a762:	f89a 3000 	ldrb.w	r3, [sl]
 800a766:	2b2a      	cmp	r3, #42	@ 0x2a
 800a768:	d015      	beq.n	800a796 <_svfiprintf_r+0xfa>
 800a76a:	9a07      	ldr	r2, [sp, #28]
 800a76c:	4654      	mov	r4, sl
 800a76e:	2000      	movs	r0, #0
 800a770:	f04f 0c0a 	mov.w	ip, #10
 800a774:	4621      	mov	r1, r4
 800a776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a77a:	3b30      	subs	r3, #48	@ 0x30
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	d94b      	bls.n	800a818 <_svfiprintf_r+0x17c>
 800a780:	b1b0      	cbz	r0, 800a7b0 <_svfiprintf_r+0x114>
 800a782:	9207      	str	r2, [sp, #28]
 800a784:	e014      	b.n	800a7b0 <_svfiprintf_r+0x114>
 800a786:	eba0 0308 	sub.w	r3, r0, r8
 800a78a:	fa09 f303 	lsl.w	r3, r9, r3
 800a78e:	4313      	orrs	r3, r2
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	46a2      	mov	sl, r4
 800a794:	e7d2      	b.n	800a73c <_svfiprintf_r+0xa0>
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	1d19      	adds	r1, r3, #4
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	9103      	str	r1, [sp, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	bfbb      	ittet	lt
 800a7a2:	425b      	neglt	r3, r3
 800a7a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a8:	9307      	strge	r3, [sp, #28]
 800a7aa:	9307      	strlt	r3, [sp, #28]
 800a7ac:	bfb8      	it	lt
 800a7ae:	9204      	strlt	r2, [sp, #16]
 800a7b0:	7823      	ldrb	r3, [r4, #0]
 800a7b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7b4:	d10a      	bne.n	800a7cc <_svfiprintf_r+0x130>
 800a7b6:	7863      	ldrb	r3, [r4, #1]
 800a7b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ba:	d132      	bne.n	800a822 <_svfiprintf_r+0x186>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	1d1a      	adds	r2, r3, #4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	9203      	str	r2, [sp, #12]
 800a7c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7c8:	3402      	adds	r4, #2
 800a7ca:	9305      	str	r3, [sp, #20]
 800a7cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a890 <_svfiprintf_r+0x1f4>
 800a7d0:	7821      	ldrb	r1, [r4, #0]
 800a7d2:	2203      	movs	r2, #3
 800a7d4:	4650      	mov	r0, sl
 800a7d6:	f7f5 fd0b 	bl	80001f0 <memchr>
 800a7da:	b138      	cbz	r0, 800a7ec <_svfiprintf_r+0x150>
 800a7dc:	9b04      	ldr	r3, [sp, #16]
 800a7de:	eba0 000a 	sub.w	r0, r0, sl
 800a7e2:	2240      	movs	r2, #64	@ 0x40
 800a7e4:	4082      	lsls	r2, r0
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	3401      	adds	r4, #1
 800a7ea:	9304      	str	r3, [sp, #16]
 800a7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f0:	4824      	ldr	r0, [pc, #144]	@ (800a884 <_svfiprintf_r+0x1e8>)
 800a7f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7f6:	2206      	movs	r2, #6
 800a7f8:	f7f5 fcfa 	bl	80001f0 <memchr>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d036      	beq.n	800a86e <_svfiprintf_r+0x1d2>
 800a800:	4b21      	ldr	r3, [pc, #132]	@ (800a888 <_svfiprintf_r+0x1ec>)
 800a802:	bb1b      	cbnz	r3, 800a84c <_svfiprintf_r+0x1b0>
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	3307      	adds	r3, #7
 800a808:	f023 0307 	bic.w	r3, r3, #7
 800a80c:	3308      	adds	r3, #8
 800a80e:	9303      	str	r3, [sp, #12]
 800a810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a812:	4433      	add	r3, r6
 800a814:	9309      	str	r3, [sp, #36]	@ 0x24
 800a816:	e76a      	b.n	800a6ee <_svfiprintf_r+0x52>
 800a818:	fb0c 3202 	mla	r2, ip, r2, r3
 800a81c:	460c      	mov	r4, r1
 800a81e:	2001      	movs	r0, #1
 800a820:	e7a8      	b.n	800a774 <_svfiprintf_r+0xd8>
 800a822:	2300      	movs	r3, #0
 800a824:	3401      	adds	r4, #1
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	4619      	mov	r1, r3
 800a82a:	f04f 0c0a 	mov.w	ip, #10
 800a82e:	4620      	mov	r0, r4
 800a830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a834:	3a30      	subs	r2, #48	@ 0x30
 800a836:	2a09      	cmp	r2, #9
 800a838:	d903      	bls.n	800a842 <_svfiprintf_r+0x1a6>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0c6      	beq.n	800a7cc <_svfiprintf_r+0x130>
 800a83e:	9105      	str	r1, [sp, #20]
 800a840:	e7c4      	b.n	800a7cc <_svfiprintf_r+0x130>
 800a842:	fb0c 2101 	mla	r1, ip, r1, r2
 800a846:	4604      	mov	r4, r0
 800a848:	2301      	movs	r3, #1
 800a84a:	e7f0      	b.n	800a82e <_svfiprintf_r+0x192>
 800a84c:	ab03      	add	r3, sp, #12
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	462a      	mov	r2, r5
 800a852:	4b0e      	ldr	r3, [pc, #56]	@ (800a88c <_svfiprintf_r+0x1f0>)
 800a854:	a904      	add	r1, sp, #16
 800a856:	4638      	mov	r0, r7
 800a858:	f7fc fc6c 	bl	8007134 <_printf_float>
 800a85c:	1c42      	adds	r2, r0, #1
 800a85e:	4606      	mov	r6, r0
 800a860:	d1d6      	bne.n	800a810 <_svfiprintf_r+0x174>
 800a862:	89ab      	ldrh	r3, [r5, #12]
 800a864:	065b      	lsls	r3, r3, #25
 800a866:	f53f af2d 	bmi.w	800a6c4 <_svfiprintf_r+0x28>
 800a86a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a86c:	e72c      	b.n	800a6c8 <_svfiprintf_r+0x2c>
 800a86e:	ab03      	add	r3, sp, #12
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	462a      	mov	r2, r5
 800a874:	4b05      	ldr	r3, [pc, #20]	@ (800a88c <_svfiprintf_r+0x1f0>)
 800a876:	a904      	add	r1, sp, #16
 800a878:	4638      	mov	r0, r7
 800a87a:	f7fc fef3 	bl	8007664 <_printf_i>
 800a87e:	e7ed      	b.n	800a85c <_svfiprintf_r+0x1c0>
 800a880:	0800c143 	.word	0x0800c143
 800a884:	0800c14d 	.word	0x0800c14d
 800a888:	08007135 	.word	0x08007135
 800a88c:	0800a5e5 	.word	0x0800a5e5
 800a890:	0800c149 	.word	0x0800c149

0800a894 <_sungetc_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	1c4b      	adds	r3, r1, #1
 800a898:	4614      	mov	r4, r2
 800a89a:	d103      	bne.n	800a8a4 <_sungetc_r+0x10>
 800a89c:	f04f 35ff 	mov.w	r5, #4294967295
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	8993      	ldrh	r3, [r2, #12]
 800a8a6:	f023 0320 	bic.w	r3, r3, #32
 800a8aa:	8193      	strh	r3, [r2, #12]
 800a8ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ae:	6852      	ldr	r2, [r2, #4]
 800a8b0:	b2cd      	uxtb	r5, r1
 800a8b2:	b18b      	cbz	r3, 800a8d8 <_sungetc_r+0x44>
 800a8b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	dd08      	ble.n	800a8cc <_sungetc_r+0x38>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	1e5a      	subs	r2, r3, #1
 800a8be:	6022      	str	r2, [r4, #0]
 800a8c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a8c4:	6863      	ldr	r3, [r4, #4]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	6063      	str	r3, [r4, #4]
 800a8ca:	e7e9      	b.n	800a8a0 <_sungetc_r+0xc>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	f000 fbe4 	bl	800b09a <__submore>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d0f1      	beq.n	800a8ba <_sungetc_r+0x26>
 800a8d6:	e7e1      	b.n	800a89c <_sungetc_r+0x8>
 800a8d8:	6921      	ldr	r1, [r4, #16]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	b151      	cbz	r1, 800a8f4 <_sungetc_r+0x60>
 800a8de:	4299      	cmp	r1, r3
 800a8e0:	d208      	bcs.n	800a8f4 <_sungetc_r+0x60>
 800a8e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a8e6:	42a9      	cmp	r1, r5
 800a8e8:	d104      	bne.n	800a8f4 <_sungetc_r+0x60>
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	6062      	str	r2, [r4, #4]
 800a8f2:	e7d5      	b.n	800a8a0 <_sungetc_r+0xc>
 800a8f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8fe:	2303      	movs	r3, #3
 800a900:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a902:	4623      	mov	r3, r4
 800a904:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	2301      	movs	r3, #1
 800a90c:	e7dc      	b.n	800a8c8 <_sungetc_r+0x34>

0800a90e <__ssrefill_r>:
 800a90e:	b510      	push	{r4, lr}
 800a910:	460c      	mov	r4, r1
 800a912:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a914:	b169      	cbz	r1, 800a932 <__ssrefill_r+0x24>
 800a916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a91a:	4299      	cmp	r1, r3
 800a91c:	d001      	beq.n	800a922 <__ssrefill_r+0x14>
 800a91e:	f7fe fa33 	bl	8008d88 <_free_r>
 800a922:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a924:	6063      	str	r3, [r4, #4]
 800a926:	2000      	movs	r0, #0
 800a928:	6360      	str	r0, [r4, #52]	@ 0x34
 800a92a:	b113      	cbz	r3, 800a932 <__ssrefill_r+0x24>
 800a92c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a92e:	6023      	str	r3, [r4, #0]
 800a930:	bd10      	pop	{r4, pc}
 800a932:	6923      	ldr	r3, [r4, #16]
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	6063      	str	r3, [r4, #4]
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	f043 0320 	orr.w	r3, r3, #32
 800a940:	81a3      	strh	r3, [r4, #12]
 800a942:	f04f 30ff 	mov.w	r0, #4294967295
 800a946:	e7f3      	b.n	800a930 <__ssrefill_r+0x22>

0800a948 <__ssvfiscanf_r>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	460c      	mov	r4, r1
 800a94e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a952:	2100      	movs	r1, #0
 800a954:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a958:	49a6      	ldr	r1, [pc, #664]	@ (800abf4 <__ssvfiscanf_r+0x2ac>)
 800a95a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a95c:	f10d 0804 	add.w	r8, sp, #4
 800a960:	49a5      	ldr	r1, [pc, #660]	@ (800abf8 <__ssvfiscanf_r+0x2b0>)
 800a962:	4fa6      	ldr	r7, [pc, #664]	@ (800abfc <__ssvfiscanf_r+0x2b4>)
 800a964:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a968:	4606      	mov	r6, r0
 800a96a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	f892 9000 	ldrb.w	r9, [r2]
 800a972:	f1b9 0f00 	cmp.w	r9, #0
 800a976:	f000 8158 	beq.w	800ac2a <__ssvfiscanf_r+0x2e2>
 800a97a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a97e:	f013 0308 	ands.w	r3, r3, #8
 800a982:	f102 0501 	add.w	r5, r2, #1
 800a986:	d019      	beq.n	800a9bc <__ssvfiscanf_r+0x74>
 800a988:	6863      	ldr	r3, [r4, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	dd0f      	ble.n	800a9ae <__ssvfiscanf_r+0x66>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	781a      	ldrb	r2, [r3, #0]
 800a992:	5cba      	ldrb	r2, [r7, r2]
 800a994:	0712      	lsls	r2, r2, #28
 800a996:	d401      	bmi.n	800a99c <__ssvfiscanf_r+0x54>
 800a998:	462a      	mov	r2, r5
 800a99a:	e7e8      	b.n	800a96e <__ssvfiscanf_r+0x26>
 800a99c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a99e:	3201      	adds	r2, #1
 800a9a0:	9245      	str	r2, [sp, #276]	@ 0x114
 800a9a2:	6862      	ldr	r2, [r4, #4]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	3a01      	subs	r2, #1
 800a9a8:	6062      	str	r2, [r4, #4]
 800a9aa:	6023      	str	r3, [r4, #0]
 800a9ac:	e7ec      	b.n	800a988 <__ssvfiscanf_r+0x40>
 800a9ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4798      	blx	r3
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d0e9      	beq.n	800a98e <__ssvfiscanf_r+0x46>
 800a9ba:	e7ed      	b.n	800a998 <__ssvfiscanf_r+0x50>
 800a9bc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a9c0:	f040 8085 	bne.w	800aace <__ssvfiscanf_r+0x186>
 800a9c4:	9341      	str	r3, [sp, #260]	@ 0x104
 800a9c6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a9c8:	7853      	ldrb	r3, [r2, #1]
 800a9ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9cc:	bf02      	ittt	eq
 800a9ce:	2310      	moveq	r3, #16
 800a9d0:	1c95      	addeq	r5, r2, #2
 800a9d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a9d4:	220a      	movs	r2, #10
 800a9d6:	46aa      	mov	sl, r5
 800a9d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a9dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a9e0:	2b09      	cmp	r3, #9
 800a9e2:	d91e      	bls.n	800aa22 <__ssvfiscanf_r+0xda>
 800a9e4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800ac00 <__ssvfiscanf_r+0x2b8>
 800a9e8:	2203      	movs	r2, #3
 800a9ea:	4658      	mov	r0, fp
 800a9ec:	f7f5 fc00 	bl	80001f0 <memchr>
 800a9f0:	b138      	cbz	r0, 800aa02 <__ssvfiscanf_r+0xba>
 800a9f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a9f4:	eba0 000b 	sub.w	r0, r0, fp
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4083      	lsls	r3, r0
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	9341      	str	r3, [sp, #260]	@ 0x104
 800aa00:	4655      	mov	r5, sl
 800aa02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa06:	2b78      	cmp	r3, #120	@ 0x78
 800aa08:	d806      	bhi.n	800aa18 <__ssvfiscanf_r+0xd0>
 800aa0a:	2b57      	cmp	r3, #87	@ 0x57
 800aa0c:	d810      	bhi.n	800aa30 <__ssvfiscanf_r+0xe8>
 800aa0e:	2b25      	cmp	r3, #37	@ 0x25
 800aa10:	d05d      	beq.n	800aace <__ssvfiscanf_r+0x186>
 800aa12:	d857      	bhi.n	800aac4 <__ssvfiscanf_r+0x17c>
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d075      	beq.n	800ab04 <__ssvfiscanf_r+0x1bc>
 800aa18:	2303      	movs	r3, #3
 800aa1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800aa1c:	230a      	movs	r3, #10
 800aa1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800aa20:	e088      	b.n	800ab34 <__ssvfiscanf_r+0x1ec>
 800aa22:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800aa24:	fb02 1103 	mla	r1, r2, r3, r1
 800aa28:	3930      	subs	r1, #48	@ 0x30
 800aa2a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800aa2c:	4655      	mov	r5, sl
 800aa2e:	e7d2      	b.n	800a9d6 <__ssvfiscanf_r+0x8e>
 800aa30:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800aa34:	2a20      	cmp	r2, #32
 800aa36:	d8ef      	bhi.n	800aa18 <__ssvfiscanf_r+0xd0>
 800aa38:	a101      	add	r1, pc, #4	@ (adr r1, 800aa40 <__ssvfiscanf_r+0xf8>)
 800aa3a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa3e:	bf00      	nop
 800aa40:	0800ab13 	.word	0x0800ab13
 800aa44:	0800aa19 	.word	0x0800aa19
 800aa48:	0800aa19 	.word	0x0800aa19
 800aa4c:	0800ab6d 	.word	0x0800ab6d
 800aa50:	0800aa19 	.word	0x0800aa19
 800aa54:	0800aa19 	.word	0x0800aa19
 800aa58:	0800aa19 	.word	0x0800aa19
 800aa5c:	0800aa19 	.word	0x0800aa19
 800aa60:	0800aa19 	.word	0x0800aa19
 800aa64:	0800aa19 	.word	0x0800aa19
 800aa68:	0800aa19 	.word	0x0800aa19
 800aa6c:	0800ab83 	.word	0x0800ab83
 800aa70:	0800ab69 	.word	0x0800ab69
 800aa74:	0800aacb 	.word	0x0800aacb
 800aa78:	0800aacb 	.word	0x0800aacb
 800aa7c:	0800aacb 	.word	0x0800aacb
 800aa80:	0800aa19 	.word	0x0800aa19
 800aa84:	0800ab25 	.word	0x0800ab25
 800aa88:	0800aa19 	.word	0x0800aa19
 800aa8c:	0800aa19 	.word	0x0800aa19
 800aa90:	0800aa19 	.word	0x0800aa19
 800aa94:	0800aa19 	.word	0x0800aa19
 800aa98:	0800ab93 	.word	0x0800ab93
 800aa9c:	0800ab2d 	.word	0x0800ab2d
 800aaa0:	0800ab0b 	.word	0x0800ab0b
 800aaa4:	0800aa19 	.word	0x0800aa19
 800aaa8:	0800aa19 	.word	0x0800aa19
 800aaac:	0800ab8f 	.word	0x0800ab8f
 800aab0:	0800aa19 	.word	0x0800aa19
 800aab4:	0800ab69 	.word	0x0800ab69
 800aab8:	0800aa19 	.word	0x0800aa19
 800aabc:	0800aa19 	.word	0x0800aa19
 800aac0:	0800ab13 	.word	0x0800ab13
 800aac4:	3b45      	subs	r3, #69	@ 0x45
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d8a6      	bhi.n	800aa18 <__ssvfiscanf_r+0xd0>
 800aaca:	2305      	movs	r3, #5
 800aacc:	e031      	b.n	800ab32 <__ssvfiscanf_r+0x1ea>
 800aace:	6863      	ldr	r3, [r4, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dd0d      	ble.n	800aaf0 <__ssvfiscanf_r+0x1a8>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	781a      	ldrb	r2, [r3, #0]
 800aad8:	454a      	cmp	r2, r9
 800aada:	f040 80a6 	bne.w	800ac2a <__ssvfiscanf_r+0x2e2>
 800aade:	3301      	adds	r3, #1
 800aae0:	6862      	ldr	r2, [r4, #4]
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800aae6:	3a01      	subs	r2, #1
 800aae8:	3301      	adds	r3, #1
 800aaea:	6062      	str	r2, [r4, #4]
 800aaec:	9345      	str	r3, [sp, #276]	@ 0x114
 800aaee:	e753      	b.n	800a998 <__ssvfiscanf_r+0x50>
 800aaf0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	4798      	blx	r3
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0eb      	beq.n	800aad4 <__ssvfiscanf_r+0x18c>
 800aafc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800aafe:	2800      	cmp	r0, #0
 800ab00:	f040 808b 	bne.w	800ac1a <__ssvfiscanf_r+0x2d2>
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	e08b      	b.n	800ac22 <__ssvfiscanf_r+0x2da>
 800ab0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ab0c:	f042 0220 	orr.w	r2, r2, #32
 800ab10:	9241      	str	r2, [sp, #260]	@ 0x104
 800ab12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ab14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab18:	9241      	str	r2, [sp, #260]	@ 0x104
 800ab1a:	2210      	movs	r2, #16
 800ab1c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab1e:	9242      	str	r2, [sp, #264]	@ 0x108
 800ab20:	d902      	bls.n	800ab28 <__ssvfiscanf_r+0x1e0>
 800ab22:	e005      	b.n	800ab30 <__ssvfiscanf_r+0x1e8>
 800ab24:	2300      	movs	r3, #0
 800ab26:	9342      	str	r3, [sp, #264]	@ 0x108
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e002      	b.n	800ab32 <__ssvfiscanf_r+0x1ea>
 800ab2c:	2308      	movs	r3, #8
 800ab2e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ab30:	2304      	movs	r3, #4
 800ab32:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ab34:	6863      	ldr	r3, [r4, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	dd39      	ble.n	800abae <__ssvfiscanf_r+0x266>
 800ab3a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ab3c:	0659      	lsls	r1, r3, #25
 800ab3e:	d404      	bmi.n	800ab4a <__ssvfiscanf_r+0x202>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	781a      	ldrb	r2, [r3, #0]
 800ab44:	5cba      	ldrb	r2, [r7, r2]
 800ab46:	0712      	lsls	r2, r2, #28
 800ab48:	d438      	bmi.n	800abbc <__ssvfiscanf_r+0x274>
 800ab4a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	dc47      	bgt.n	800abe0 <__ssvfiscanf_r+0x298>
 800ab50:	466b      	mov	r3, sp
 800ab52:	4622      	mov	r2, r4
 800ab54:	a941      	add	r1, sp, #260	@ 0x104
 800ab56:	4630      	mov	r0, r6
 800ab58:	f000 f86c 	bl	800ac34 <_scanf_chars>
 800ab5c:	2801      	cmp	r0, #1
 800ab5e:	d064      	beq.n	800ac2a <__ssvfiscanf_r+0x2e2>
 800ab60:	2802      	cmp	r0, #2
 800ab62:	f47f af19 	bne.w	800a998 <__ssvfiscanf_r+0x50>
 800ab66:	e7c9      	b.n	800aafc <__ssvfiscanf_r+0x1b4>
 800ab68:	220a      	movs	r2, #10
 800ab6a:	e7d7      	b.n	800ab1c <__ssvfiscanf_r+0x1d4>
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4640      	mov	r0, r8
 800ab70:	f000 fa5a 	bl	800b028 <__sccl>
 800ab74:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ab76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab7a:	9341      	str	r3, [sp, #260]	@ 0x104
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e7d7      	b.n	800ab32 <__ssvfiscanf_r+0x1ea>
 800ab82:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ab84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab88:	9341      	str	r3, [sp, #260]	@ 0x104
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	e7d1      	b.n	800ab32 <__ssvfiscanf_r+0x1ea>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	e7cf      	b.n	800ab32 <__ssvfiscanf_r+0x1ea>
 800ab92:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ab94:	06c3      	lsls	r3, r0, #27
 800ab96:	f53f aeff 	bmi.w	800a998 <__ssvfiscanf_r+0x50>
 800ab9a:	9b00      	ldr	r3, [sp, #0]
 800ab9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ab9e:	1d19      	adds	r1, r3, #4
 800aba0:	9100      	str	r1, [sp, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	07c0      	lsls	r0, r0, #31
 800aba6:	bf4c      	ite	mi
 800aba8:	801a      	strhmi	r2, [r3, #0]
 800abaa:	601a      	strpl	r2, [r3, #0]
 800abac:	e6f4      	b.n	800a998 <__ssvfiscanf_r+0x50>
 800abae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800abb0:	4621      	mov	r1, r4
 800abb2:	4630      	mov	r0, r6
 800abb4:	4798      	blx	r3
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d0bf      	beq.n	800ab3a <__ssvfiscanf_r+0x1f2>
 800abba:	e79f      	b.n	800aafc <__ssvfiscanf_r+0x1b4>
 800abbc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800abbe:	3201      	adds	r2, #1
 800abc0:	9245      	str	r2, [sp, #276]	@ 0x114
 800abc2:	6862      	ldr	r2, [r4, #4]
 800abc4:	3a01      	subs	r2, #1
 800abc6:	2a00      	cmp	r2, #0
 800abc8:	6062      	str	r2, [r4, #4]
 800abca:	dd02      	ble.n	800abd2 <__ssvfiscanf_r+0x28a>
 800abcc:	3301      	adds	r3, #1
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	e7b6      	b.n	800ab40 <__ssvfiscanf_r+0x1f8>
 800abd2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800abd4:	4621      	mov	r1, r4
 800abd6:	4630      	mov	r0, r6
 800abd8:	4798      	blx	r3
 800abda:	2800      	cmp	r0, #0
 800abdc:	d0b0      	beq.n	800ab40 <__ssvfiscanf_r+0x1f8>
 800abde:	e78d      	b.n	800aafc <__ssvfiscanf_r+0x1b4>
 800abe0:	2b04      	cmp	r3, #4
 800abe2:	dc0f      	bgt.n	800ac04 <__ssvfiscanf_r+0x2bc>
 800abe4:	466b      	mov	r3, sp
 800abe6:	4622      	mov	r2, r4
 800abe8:	a941      	add	r1, sp, #260	@ 0x104
 800abea:	4630      	mov	r0, r6
 800abec:	f000 f87c 	bl	800ace8 <_scanf_i>
 800abf0:	e7b4      	b.n	800ab5c <__ssvfiscanf_r+0x214>
 800abf2:	bf00      	nop
 800abf4:	0800a895 	.word	0x0800a895
 800abf8:	0800a90f 	.word	0x0800a90f
 800abfc:	0800c361 	.word	0x0800c361
 800ac00:	0800c149 	.word	0x0800c149
 800ac04:	4b0a      	ldr	r3, [pc, #40]	@ (800ac30 <__ssvfiscanf_r+0x2e8>)
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f43f aec6 	beq.w	800a998 <__ssvfiscanf_r+0x50>
 800ac0c:	466b      	mov	r3, sp
 800ac0e:	4622      	mov	r2, r4
 800ac10:	a941      	add	r1, sp, #260	@ 0x104
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7fc fe44 	bl	80078a0 <_scanf_float>
 800ac18:	e7a0      	b.n	800ab5c <__ssvfiscanf_r+0x214>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	065b      	lsls	r3, r3, #25
 800ac1e:	f53f af71 	bmi.w	800ab04 <__ssvfiscanf_r+0x1bc>
 800ac22:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800ac26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ac2c:	e7f9      	b.n	800ac22 <__ssvfiscanf_r+0x2da>
 800ac2e:	bf00      	nop
 800ac30:	080078a1 	.word	0x080078a1

0800ac34 <_scanf_chars>:
 800ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac38:	4615      	mov	r5, r2
 800ac3a:	688a      	ldr	r2, [r1, #8]
 800ac3c:	4680      	mov	r8, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	b932      	cbnz	r2, 800ac50 <_scanf_chars+0x1c>
 800ac42:	698a      	ldr	r2, [r1, #24]
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	bf14      	ite	ne
 800ac48:	f04f 32ff 	movne.w	r2, #4294967295
 800ac4c:	2201      	moveq	r2, #1
 800ac4e:	608a      	str	r2, [r1, #8]
 800ac50:	6822      	ldr	r2, [r4, #0]
 800ac52:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ace4 <_scanf_chars+0xb0>
 800ac56:	06d1      	lsls	r1, r2, #27
 800ac58:	bf5f      	itttt	pl
 800ac5a:	681a      	ldrpl	r2, [r3, #0]
 800ac5c:	1d11      	addpl	r1, r2, #4
 800ac5e:	6019      	strpl	r1, [r3, #0]
 800ac60:	6816      	ldrpl	r6, [r2, #0]
 800ac62:	2700      	movs	r7, #0
 800ac64:	69a0      	ldr	r0, [r4, #24]
 800ac66:	b188      	cbz	r0, 800ac8c <_scanf_chars+0x58>
 800ac68:	2801      	cmp	r0, #1
 800ac6a:	d107      	bne.n	800ac7c <_scanf_chars+0x48>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	781a      	ldrb	r2, [r3, #0]
 800ac70:	6963      	ldr	r3, [r4, #20]
 800ac72:	5c9b      	ldrb	r3, [r3, r2]
 800ac74:	b953      	cbnz	r3, 800ac8c <_scanf_chars+0x58>
 800ac76:	2f00      	cmp	r7, #0
 800ac78:	d031      	beq.n	800acde <_scanf_chars+0xaa>
 800ac7a:	e022      	b.n	800acc2 <_scanf_chars+0x8e>
 800ac7c:	2802      	cmp	r0, #2
 800ac7e:	d120      	bne.n	800acc2 <_scanf_chars+0x8e>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ac88:	071b      	lsls	r3, r3, #28
 800ac8a:	d41a      	bmi.n	800acc2 <_scanf_chars+0x8e>
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	06da      	lsls	r2, r3, #27
 800ac90:	bf5e      	ittt	pl
 800ac92:	682b      	ldrpl	r3, [r5, #0]
 800ac94:	781b      	ldrbpl	r3, [r3, #0]
 800ac96:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ac9a:	682a      	ldr	r2, [r5, #0]
 800ac9c:	686b      	ldr	r3, [r5, #4]
 800ac9e:	3201      	adds	r2, #1
 800aca0:	602a      	str	r2, [r5, #0]
 800aca2:	68a2      	ldr	r2, [r4, #8]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	3a01      	subs	r2, #1
 800aca8:	606b      	str	r3, [r5, #4]
 800acaa:	3701      	adds	r7, #1
 800acac:	60a2      	str	r2, [r4, #8]
 800acae:	b142      	cbz	r2, 800acc2 <_scanf_chars+0x8e>
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	dcd7      	bgt.n	800ac64 <_scanf_chars+0x30>
 800acb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800acb8:	4629      	mov	r1, r5
 800acba:	4640      	mov	r0, r8
 800acbc:	4798      	blx	r3
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0d0      	beq.n	800ac64 <_scanf_chars+0x30>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	f013 0310 	ands.w	r3, r3, #16
 800acc8:	d105      	bne.n	800acd6 <_scanf_chars+0xa2>
 800acca:	68e2      	ldr	r2, [r4, #12]
 800accc:	3201      	adds	r2, #1
 800acce:	60e2      	str	r2, [r4, #12]
 800acd0:	69a2      	ldr	r2, [r4, #24]
 800acd2:	b102      	cbz	r2, 800acd6 <_scanf_chars+0xa2>
 800acd4:	7033      	strb	r3, [r6, #0]
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	443b      	add	r3, r7
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	2000      	movs	r0, #0
 800acde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace2:	bf00      	nop
 800ace4:	0800c361 	.word	0x0800c361

0800ace8 <_scanf_i>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	4698      	mov	r8, r3
 800acee:	4b74      	ldr	r3, [pc, #464]	@ (800aec0 <_scanf_i+0x1d8>)
 800acf0:	460c      	mov	r4, r1
 800acf2:	4682      	mov	sl, r0
 800acf4:	4616      	mov	r6, r2
 800acf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800acfa:	b087      	sub	sp, #28
 800acfc:	ab03      	add	r3, sp, #12
 800acfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ad02:	4b70      	ldr	r3, [pc, #448]	@ (800aec4 <_scanf_i+0x1dc>)
 800ad04:	69a1      	ldr	r1, [r4, #24]
 800ad06:	4a70      	ldr	r2, [pc, #448]	@ (800aec8 <_scanf_i+0x1e0>)
 800ad08:	2903      	cmp	r1, #3
 800ad0a:	bf08      	it	eq
 800ad0c:	461a      	moveq	r2, r3
 800ad0e:	68a3      	ldr	r3, [r4, #8]
 800ad10:	9201      	str	r2, [sp, #4]
 800ad12:	1e5a      	subs	r2, r3, #1
 800ad14:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ad18:	bf88      	it	hi
 800ad1a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ad1e:	4627      	mov	r7, r4
 800ad20:	bf82      	ittt	hi
 800ad22:	eb03 0905 	addhi.w	r9, r3, r5
 800ad26:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ad2a:	60a3      	strhi	r3, [r4, #8]
 800ad2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ad30:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ad34:	bf98      	it	ls
 800ad36:	f04f 0900 	movls.w	r9, #0
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	463d      	mov	r5, r7
 800ad3e:	f04f 0b00 	mov.w	fp, #0
 800ad42:	6831      	ldr	r1, [r6, #0]
 800ad44:	ab03      	add	r3, sp, #12
 800ad46:	7809      	ldrb	r1, [r1, #0]
 800ad48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	f7f5 fa4f 	bl	80001f0 <memchr>
 800ad52:	b328      	cbz	r0, 800ada0 <_scanf_i+0xb8>
 800ad54:	f1bb 0f01 	cmp.w	fp, #1
 800ad58:	d159      	bne.n	800ae0e <_scanf_i+0x126>
 800ad5a:	6862      	ldr	r2, [r4, #4]
 800ad5c:	b92a      	cbnz	r2, 800ad6a <_scanf_i+0x82>
 800ad5e:	6822      	ldr	r2, [r4, #0]
 800ad60:	2108      	movs	r1, #8
 800ad62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad66:	6061      	str	r1, [r4, #4]
 800ad68:	6022      	str	r2, [r4, #0]
 800ad6a:	6822      	ldr	r2, [r4, #0]
 800ad6c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	68a2      	ldr	r2, [r4, #8]
 800ad74:	1e51      	subs	r1, r2, #1
 800ad76:	60a1      	str	r1, [r4, #8]
 800ad78:	b192      	cbz	r2, 800ada0 <_scanf_i+0xb8>
 800ad7a:	6832      	ldr	r2, [r6, #0]
 800ad7c:	1c51      	adds	r1, r2, #1
 800ad7e:	6031      	str	r1, [r6, #0]
 800ad80:	7812      	ldrb	r2, [r2, #0]
 800ad82:	f805 2b01 	strb.w	r2, [r5], #1
 800ad86:	6872      	ldr	r2, [r6, #4]
 800ad88:	3a01      	subs	r2, #1
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	6072      	str	r2, [r6, #4]
 800ad8e:	dc07      	bgt.n	800ada0 <_scanf_i+0xb8>
 800ad90:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ad94:	4631      	mov	r1, r6
 800ad96:	4650      	mov	r0, sl
 800ad98:	4790      	blx	r2
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	f040 8085 	bne.w	800aeaa <_scanf_i+0x1c2>
 800ada0:	f10b 0b01 	add.w	fp, fp, #1
 800ada4:	f1bb 0f03 	cmp.w	fp, #3
 800ada8:	d1cb      	bne.n	800ad42 <_scanf_i+0x5a>
 800adaa:	6863      	ldr	r3, [r4, #4]
 800adac:	b90b      	cbnz	r3, 800adb2 <_scanf_i+0xca>
 800adae:	230a      	movs	r3, #10
 800adb0:	6063      	str	r3, [r4, #4]
 800adb2:	6863      	ldr	r3, [r4, #4]
 800adb4:	4945      	ldr	r1, [pc, #276]	@ (800aecc <_scanf_i+0x1e4>)
 800adb6:	6960      	ldr	r0, [r4, #20]
 800adb8:	1ac9      	subs	r1, r1, r3
 800adba:	f000 f935 	bl	800b028 <__sccl>
 800adbe:	f04f 0b00 	mov.w	fp, #0
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	6822      	ldr	r2, [r4, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d03d      	beq.n	800ae46 <_scanf_i+0x15e>
 800adca:	6831      	ldr	r1, [r6, #0]
 800adcc:	6960      	ldr	r0, [r4, #20]
 800adce:	f891 c000 	ldrb.w	ip, [r1]
 800add2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800add6:	2800      	cmp	r0, #0
 800add8:	d035      	beq.n	800ae46 <_scanf_i+0x15e>
 800adda:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800adde:	d124      	bne.n	800ae2a <_scanf_i+0x142>
 800ade0:	0510      	lsls	r0, r2, #20
 800ade2:	d522      	bpl.n	800ae2a <_scanf_i+0x142>
 800ade4:	f10b 0b01 	add.w	fp, fp, #1
 800ade8:	f1b9 0f00 	cmp.w	r9, #0
 800adec:	d003      	beq.n	800adf6 <_scanf_i+0x10e>
 800adee:	3301      	adds	r3, #1
 800adf0:	f109 39ff 	add.w	r9, r9, #4294967295
 800adf4:	60a3      	str	r3, [r4, #8]
 800adf6:	6873      	ldr	r3, [r6, #4]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	6073      	str	r3, [r6, #4]
 800adfe:	dd1b      	ble.n	800ae38 <_scanf_i+0x150>
 800ae00:	6833      	ldr	r3, [r6, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	6033      	str	r3, [r6, #0]
 800ae06:	68a3      	ldr	r3, [r4, #8]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	60a3      	str	r3, [r4, #8]
 800ae0c:	e7d9      	b.n	800adc2 <_scanf_i+0xda>
 800ae0e:	f1bb 0f02 	cmp.w	fp, #2
 800ae12:	d1ae      	bne.n	800ad72 <_scanf_i+0x8a>
 800ae14:	6822      	ldr	r2, [r4, #0]
 800ae16:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ae1a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ae1e:	d1c4      	bne.n	800adaa <_scanf_i+0xc2>
 800ae20:	2110      	movs	r1, #16
 800ae22:	6061      	str	r1, [r4, #4]
 800ae24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae28:	e7a2      	b.n	800ad70 <_scanf_i+0x88>
 800ae2a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ae2e:	6022      	str	r2, [r4, #0]
 800ae30:	780b      	ldrb	r3, [r1, #0]
 800ae32:	f805 3b01 	strb.w	r3, [r5], #1
 800ae36:	e7de      	b.n	800adf6 <_scanf_i+0x10e>
 800ae38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4650      	mov	r0, sl
 800ae40:	4798      	blx	r3
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d0df      	beq.n	800ae06 <_scanf_i+0x11e>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	05d9      	lsls	r1, r3, #23
 800ae4a:	d50d      	bpl.n	800ae68 <_scanf_i+0x180>
 800ae4c:	42bd      	cmp	r5, r7
 800ae4e:	d909      	bls.n	800ae64 <_scanf_i+0x17c>
 800ae50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ae54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	4798      	blx	r3
 800ae5e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ae62:	464d      	mov	r5, r9
 800ae64:	42bd      	cmp	r5, r7
 800ae66:	d028      	beq.n	800aeba <_scanf_i+0x1d2>
 800ae68:	6822      	ldr	r2, [r4, #0]
 800ae6a:	f012 0210 	ands.w	r2, r2, #16
 800ae6e:	d113      	bne.n	800ae98 <_scanf_i+0x1b0>
 800ae70:	702a      	strb	r2, [r5, #0]
 800ae72:	6863      	ldr	r3, [r4, #4]
 800ae74:	9e01      	ldr	r6, [sp, #4]
 800ae76:	4639      	mov	r1, r7
 800ae78:	4650      	mov	r0, sl
 800ae7a:	47b0      	blx	r6
 800ae7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae80:	6821      	ldr	r1, [r4, #0]
 800ae82:	1d1a      	adds	r2, r3, #4
 800ae84:	f8c8 2000 	str.w	r2, [r8]
 800ae88:	f011 0f20 	tst.w	r1, #32
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	d00f      	beq.n	800aeb0 <_scanf_i+0x1c8>
 800ae90:	6018      	str	r0, [r3, #0]
 800ae92:	68e3      	ldr	r3, [r4, #12]
 800ae94:	3301      	adds	r3, #1
 800ae96:	60e3      	str	r3, [r4, #12]
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	1bed      	subs	r5, r5, r7
 800ae9c:	445d      	add	r5, fp
 800ae9e:	442b      	add	r3, r5
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	2000      	movs	r0, #0
 800aea4:	b007      	add	sp, #28
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	f04f 0b00 	mov.w	fp, #0
 800aeae:	e7ca      	b.n	800ae46 <_scanf_i+0x15e>
 800aeb0:	07ca      	lsls	r2, r1, #31
 800aeb2:	bf4c      	ite	mi
 800aeb4:	8018      	strhmi	r0, [r3, #0]
 800aeb6:	6018      	strpl	r0, [r3, #0]
 800aeb8:	e7eb      	b.n	800ae92 <_scanf_i+0x1aa>
 800aeba:	2001      	movs	r0, #1
 800aebc:	e7f2      	b.n	800aea4 <_scanf_i+0x1bc>
 800aebe:	bf00      	nop
 800aec0:	0800bff8 	.word	0x0800bff8
 800aec4:	0800a5e1 	.word	0x0800a5e1
 800aec8:	0800b9c5 	.word	0x0800b9c5
 800aecc:	0800c164 	.word	0x0800c164

0800aed0 <__sflush_r>:
 800aed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed8:	0716      	lsls	r6, r2, #28
 800aeda:	4605      	mov	r5, r0
 800aedc:	460c      	mov	r4, r1
 800aede:	d454      	bmi.n	800af8a <__sflush_r+0xba>
 800aee0:	684b      	ldr	r3, [r1, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dc02      	bgt.n	800aeec <__sflush_r+0x1c>
 800aee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	dd48      	ble.n	800af7e <__sflush_r+0xae>
 800aeec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	d045      	beq.n	800af7e <__sflush_r+0xae>
 800aef2:	2300      	movs	r3, #0
 800aef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aef8:	682f      	ldr	r7, [r5, #0]
 800aefa:	6a21      	ldr	r1, [r4, #32]
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	d030      	beq.n	800af62 <__sflush_r+0x92>
 800af00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	0759      	lsls	r1, r3, #29
 800af06:	d505      	bpl.n	800af14 <__sflush_r+0x44>
 800af08:	6863      	ldr	r3, [r4, #4]
 800af0a:	1ad2      	subs	r2, r2, r3
 800af0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af0e:	b10b      	cbz	r3, 800af14 <__sflush_r+0x44>
 800af10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af12:	1ad2      	subs	r2, r2, r3
 800af14:	2300      	movs	r3, #0
 800af16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af18:	6a21      	ldr	r1, [r4, #32]
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b0      	blx	r6
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	d106      	bne.n	800af32 <__sflush_r+0x62>
 800af24:	6829      	ldr	r1, [r5, #0]
 800af26:	291d      	cmp	r1, #29
 800af28:	d82b      	bhi.n	800af82 <__sflush_r+0xb2>
 800af2a:	4a2a      	ldr	r2, [pc, #168]	@ (800afd4 <__sflush_r+0x104>)
 800af2c:	40ca      	lsrs	r2, r1
 800af2e:	07d6      	lsls	r6, r2, #31
 800af30:	d527      	bpl.n	800af82 <__sflush_r+0xb2>
 800af32:	2200      	movs	r2, #0
 800af34:	6062      	str	r2, [r4, #4]
 800af36:	04d9      	lsls	r1, r3, #19
 800af38:	6922      	ldr	r2, [r4, #16]
 800af3a:	6022      	str	r2, [r4, #0]
 800af3c:	d504      	bpl.n	800af48 <__sflush_r+0x78>
 800af3e:	1c42      	adds	r2, r0, #1
 800af40:	d101      	bne.n	800af46 <__sflush_r+0x76>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b903      	cbnz	r3, 800af48 <__sflush_r+0x78>
 800af46:	6560      	str	r0, [r4, #84]	@ 0x54
 800af48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af4a:	602f      	str	r7, [r5, #0]
 800af4c:	b1b9      	cbz	r1, 800af7e <__sflush_r+0xae>
 800af4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af52:	4299      	cmp	r1, r3
 800af54:	d002      	beq.n	800af5c <__sflush_r+0x8c>
 800af56:	4628      	mov	r0, r5
 800af58:	f7fd ff16 	bl	8008d88 <_free_r>
 800af5c:	2300      	movs	r3, #0
 800af5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800af60:	e00d      	b.n	800af7e <__sflush_r+0xae>
 800af62:	2301      	movs	r3, #1
 800af64:	4628      	mov	r0, r5
 800af66:	47b0      	blx	r6
 800af68:	4602      	mov	r2, r0
 800af6a:	1c50      	adds	r0, r2, #1
 800af6c:	d1c9      	bne.n	800af02 <__sflush_r+0x32>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d0c6      	beq.n	800af02 <__sflush_r+0x32>
 800af74:	2b1d      	cmp	r3, #29
 800af76:	d001      	beq.n	800af7c <__sflush_r+0xac>
 800af78:	2b16      	cmp	r3, #22
 800af7a:	d11e      	bne.n	800afba <__sflush_r+0xea>
 800af7c:	602f      	str	r7, [r5, #0]
 800af7e:	2000      	movs	r0, #0
 800af80:	e022      	b.n	800afc8 <__sflush_r+0xf8>
 800af82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af86:	b21b      	sxth	r3, r3
 800af88:	e01b      	b.n	800afc2 <__sflush_r+0xf2>
 800af8a:	690f      	ldr	r7, [r1, #16]
 800af8c:	2f00      	cmp	r7, #0
 800af8e:	d0f6      	beq.n	800af7e <__sflush_r+0xae>
 800af90:	0793      	lsls	r3, r2, #30
 800af92:	680e      	ldr	r6, [r1, #0]
 800af94:	bf08      	it	eq
 800af96:	694b      	ldreq	r3, [r1, #20]
 800af98:	600f      	str	r7, [r1, #0]
 800af9a:	bf18      	it	ne
 800af9c:	2300      	movne	r3, #0
 800af9e:	eba6 0807 	sub.w	r8, r6, r7
 800afa2:	608b      	str	r3, [r1, #8]
 800afa4:	f1b8 0f00 	cmp.w	r8, #0
 800afa8:	dde9      	ble.n	800af7e <__sflush_r+0xae>
 800afaa:	6a21      	ldr	r1, [r4, #32]
 800afac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afae:	4643      	mov	r3, r8
 800afb0:	463a      	mov	r2, r7
 800afb2:	4628      	mov	r0, r5
 800afb4:	47b0      	blx	r6
 800afb6:	2800      	cmp	r0, #0
 800afb8:	dc08      	bgt.n	800afcc <__sflush_r+0xfc>
 800afba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afc2:	81a3      	strh	r3, [r4, #12]
 800afc4:	f04f 30ff 	mov.w	r0, #4294967295
 800afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afcc:	4407      	add	r7, r0
 800afce:	eba8 0800 	sub.w	r8, r8, r0
 800afd2:	e7e7      	b.n	800afa4 <__sflush_r+0xd4>
 800afd4:	20400001 	.word	0x20400001

0800afd8 <_fflush_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	690b      	ldr	r3, [r1, #16]
 800afdc:	4605      	mov	r5, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	b913      	cbnz	r3, 800afe8 <_fflush_r+0x10>
 800afe2:	2500      	movs	r5, #0
 800afe4:	4628      	mov	r0, r5
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	b118      	cbz	r0, 800aff2 <_fflush_r+0x1a>
 800afea:	6a03      	ldr	r3, [r0, #32]
 800afec:	b90b      	cbnz	r3, 800aff2 <_fflush_r+0x1a>
 800afee:	f7fc fef1 	bl	8007dd4 <__sinit>
 800aff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0f3      	beq.n	800afe2 <_fflush_r+0xa>
 800affa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800affc:	07d0      	lsls	r0, r2, #31
 800affe:	d404      	bmi.n	800b00a <_fflush_r+0x32>
 800b000:	0599      	lsls	r1, r3, #22
 800b002:	d402      	bmi.n	800b00a <_fflush_r+0x32>
 800b004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b006:	f7fd f85e 	bl	80080c6 <__retarget_lock_acquire_recursive>
 800b00a:	4628      	mov	r0, r5
 800b00c:	4621      	mov	r1, r4
 800b00e:	f7ff ff5f 	bl	800aed0 <__sflush_r>
 800b012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b014:	07da      	lsls	r2, r3, #31
 800b016:	4605      	mov	r5, r0
 800b018:	d4e4      	bmi.n	800afe4 <_fflush_r+0xc>
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	059b      	lsls	r3, r3, #22
 800b01e:	d4e1      	bmi.n	800afe4 <_fflush_r+0xc>
 800b020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b022:	f7fd f851 	bl	80080c8 <__retarget_lock_release_recursive>
 800b026:	e7dd      	b.n	800afe4 <_fflush_r+0xc>

0800b028 <__sccl>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	780b      	ldrb	r3, [r1, #0]
 800b02c:	4604      	mov	r4, r0
 800b02e:	2b5e      	cmp	r3, #94	@ 0x5e
 800b030:	bf0b      	itete	eq
 800b032:	784b      	ldrbeq	r3, [r1, #1]
 800b034:	1c4a      	addne	r2, r1, #1
 800b036:	1c8a      	addeq	r2, r1, #2
 800b038:	2100      	movne	r1, #0
 800b03a:	bf08      	it	eq
 800b03c:	2101      	moveq	r1, #1
 800b03e:	3801      	subs	r0, #1
 800b040:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b044:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b048:	42a8      	cmp	r0, r5
 800b04a:	d1fb      	bne.n	800b044 <__sccl+0x1c>
 800b04c:	b90b      	cbnz	r3, 800b052 <__sccl+0x2a>
 800b04e:	1e50      	subs	r0, r2, #1
 800b050:	bd70      	pop	{r4, r5, r6, pc}
 800b052:	f081 0101 	eor.w	r1, r1, #1
 800b056:	54e1      	strb	r1, [r4, r3]
 800b058:	4610      	mov	r0, r2
 800b05a:	4602      	mov	r2, r0
 800b05c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b060:	2d2d      	cmp	r5, #45	@ 0x2d
 800b062:	d005      	beq.n	800b070 <__sccl+0x48>
 800b064:	2d5d      	cmp	r5, #93	@ 0x5d
 800b066:	d016      	beq.n	800b096 <__sccl+0x6e>
 800b068:	2d00      	cmp	r5, #0
 800b06a:	d0f1      	beq.n	800b050 <__sccl+0x28>
 800b06c:	462b      	mov	r3, r5
 800b06e:	e7f2      	b.n	800b056 <__sccl+0x2e>
 800b070:	7846      	ldrb	r6, [r0, #1]
 800b072:	2e5d      	cmp	r6, #93	@ 0x5d
 800b074:	d0fa      	beq.n	800b06c <__sccl+0x44>
 800b076:	42b3      	cmp	r3, r6
 800b078:	dcf8      	bgt.n	800b06c <__sccl+0x44>
 800b07a:	3002      	adds	r0, #2
 800b07c:	461a      	mov	r2, r3
 800b07e:	3201      	adds	r2, #1
 800b080:	4296      	cmp	r6, r2
 800b082:	54a1      	strb	r1, [r4, r2]
 800b084:	dcfb      	bgt.n	800b07e <__sccl+0x56>
 800b086:	1af2      	subs	r2, r6, r3
 800b088:	3a01      	subs	r2, #1
 800b08a:	1c5d      	adds	r5, r3, #1
 800b08c:	42b3      	cmp	r3, r6
 800b08e:	bfa8      	it	ge
 800b090:	2200      	movge	r2, #0
 800b092:	18ab      	adds	r3, r5, r2
 800b094:	e7e1      	b.n	800b05a <__sccl+0x32>
 800b096:	4610      	mov	r0, r2
 800b098:	e7da      	b.n	800b050 <__sccl+0x28>

0800b09a <__submore>:
 800b09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09e:	460c      	mov	r4, r1
 800b0a0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b0a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0a6:	4299      	cmp	r1, r3
 800b0a8:	d11d      	bne.n	800b0e6 <__submore+0x4c>
 800b0aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b0ae:	f7fd fedf 	bl	8008e70 <_malloc_r>
 800b0b2:	b918      	cbnz	r0, 800b0bc <__submore+0x22>
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b0c2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b0c6:	6360      	str	r0, [r4, #52]	@ 0x34
 800b0c8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b0cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b0d0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b0d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b0d8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b0dc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b0e0:	6020      	str	r0, [r4, #0]
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e7e8      	b.n	800b0b8 <__submore+0x1e>
 800b0e6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b0e8:	0077      	lsls	r7, r6, #1
 800b0ea:	463a      	mov	r2, r7
 800b0ec:	f000 fbcd 	bl	800b88a <_realloc_r>
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d0de      	beq.n	800b0b4 <__submore+0x1a>
 800b0f6:	eb00 0806 	add.w	r8, r0, r6
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	4632      	mov	r2, r6
 800b0fe:	4640      	mov	r0, r8
 800b100:	f000 f830 	bl	800b164 <memcpy>
 800b104:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b108:	f8c4 8000 	str.w	r8, [r4]
 800b10c:	e7e9      	b.n	800b0e2 <__submore+0x48>

0800b10e <memmove>:
 800b10e:	4288      	cmp	r0, r1
 800b110:	b510      	push	{r4, lr}
 800b112:	eb01 0402 	add.w	r4, r1, r2
 800b116:	d902      	bls.n	800b11e <memmove+0x10>
 800b118:	4284      	cmp	r4, r0
 800b11a:	4623      	mov	r3, r4
 800b11c:	d807      	bhi.n	800b12e <memmove+0x20>
 800b11e:	1e43      	subs	r3, r0, #1
 800b120:	42a1      	cmp	r1, r4
 800b122:	d008      	beq.n	800b136 <memmove+0x28>
 800b124:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b128:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b12c:	e7f8      	b.n	800b120 <memmove+0x12>
 800b12e:	4402      	add	r2, r0
 800b130:	4601      	mov	r1, r0
 800b132:	428a      	cmp	r2, r1
 800b134:	d100      	bne.n	800b138 <memmove+0x2a>
 800b136:	bd10      	pop	{r4, pc}
 800b138:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b13c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b140:	e7f7      	b.n	800b132 <memmove+0x24>
	...

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d06      	ldr	r5, [pc, #24]	@ (800b160 <_sbrk_r+0x1c>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7f7 fe9c 	bl	8002e8c <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	200019e8 	.word	0x200019e8

0800b164 <memcpy>:
 800b164:	440a      	add	r2, r1
 800b166:	4291      	cmp	r1, r2
 800b168:	f100 33ff 	add.w	r3, r0, #4294967295
 800b16c:	d100      	bne.n	800b170 <memcpy+0xc>
 800b16e:	4770      	bx	lr
 800b170:	b510      	push	{r4, lr}
 800b172:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b17a:	4291      	cmp	r1, r2
 800b17c:	d1f9      	bne.n	800b172 <memcpy+0xe>
 800b17e:	bd10      	pop	{r4, pc}

0800b180 <nan>:
 800b180:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b188 <nan+0x8>
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	00000000 	.word	0x00000000
 800b18c:	7ff80000 	.word	0x7ff80000

0800b190 <__assert_func>:
 800b190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b192:	4614      	mov	r4, r2
 800b194:	461a      	mov	r2, r3
 800b196:	4b09      	ldr	r3, [pc, #36]	@ (800b1bc <__assert_func+0x2c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4605      	mov	r5, r0
 800b19c:	68d8      	ldr	r0, [r3, #12]
 800b19e:	b14c      	cbz	r4, 800b1b4 <__assert_func+0x24>
 800b1a0:	4b07      	ldr	r3, [pc, #28]	@ (800b1c0 <__assert_func+0x30>)
 800b1a2:	9100      	str	r1, [sp, #0]
 800b1a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1a8:	4906      	ldr	r1, [pc, #24]	@ (800b1c4 <__assert_func+0x34>)
 800b1aa:	462b      	mov	r3, r5
 800b1ac:	f000 fc1a 	bl	800b9e4 <fiprintf>
 800b1b0:	f000 fc2a 	bl	800ba08 <abort>
 800b1b4:	4b04      	ldr	r3, [pc, #16]	@ (800b1c8 <__assert_func+0x38>)
 800b1b6:	461c      	mov	r4, r3
 800b1b8:	e7f3      	b.n	800b1a2 <__assert_func+0x12>
 800b1ba:	bf00      	nop
 800b1bc:	2000101c 	.word	0x2000101c
 800b1c0:	0800c177 	.word	0x0800c177
 800b1c4:	0800c184 	.word	0x0800c184
 800b1c8:	0800c1b2 	.word	0x0800c1b2

0800b1cc <_calloc_r>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	fba1 5402 	umull	r5, r4, r1, r2
 800b1d2:	b934      	cbnz	r4, 800b1e2 <_calloc_r+0x16>
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	f7fd fe4b 	bl	8008e70 <_malloc_r>
 800b1da:	4606      	mov	r6, r0
 800b1dc:	b928      	cbnz	r0, 800b1ea <_calloc_r+0x1e>
 800b1de:	4630      	mov	r0, r6
 800b1e0:	bd70      	pop	{r4, r5, r6, pc}
 800b1e2:	220c      	movs	r2, #12
 800b1e4:	6002      	str	r2, [r0, #0]
 800b1e6:	2600      	movs	r6, #0
 800b1e8:	e7f9      	b.n	800b1de <_calloc_r+0x12>
 800b1ea:	462a      	mov	r2, r5
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	f7fc fedb 	bl	8007fa8 <memset>
 800b1f2:	e7f4      	b.n	800b1de <_calloc_r+0x12>

0800b1f4 <rshift>:
 800b1f4:	6903      	ldr	r3, [r0, #16]
 800b1f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b202:	f100 0414 	add.w	r4, r0, #20
 800b206:	dd45      	ble.n	800b294 <rshift+0xa0>
 800b208:	f011 011f 	ands.w	r1, r1, #31
 800b20c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b210:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b214:	d10c      	bne.n	800b230 <rshift+0x3c>
 800b216:	f100 0710 	add.w	r7, r0, #16
 800b21a:	4629      	mov	r1, r5
 800b21c:	42b1      	cmp	r1, r6
 800b21e:	d334      	bcc.n	800b28a <rshift+0x96>
 800b220:	1a9b      	subs	r3, r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	1eea      	subs	r2, r5, #3
 800b226:	4296      	cmp	r6, r2
 800b228:	bf38      	it	cc
 800b22a:	2300      	movcc	r3, #0
 800b22c:	4423      	add	r3, r4
 800b22e:	e015      	b.n	800b25c <rshift+0x68>
 800b230:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b234:	f1c1 0820 	rsb	r8, r1, #32
 800b238:	40cf      	lsrs	r7, r1
 800b23a:	f105 0e04 	add.w	lr, r5, #4
 800b23e:	46a1      	mov	r9, r4
 800b240:	4576      	cmp	r6, lr
 800b242:	46f4      	mov	ip, lr
 800b244:	d815      	bhi.n	800b272 <rshift+0x7e>
 800b246:	1a9a      	subs	r2, r3, r2
 800b248:	0092      	lsls	r2, r2, #2
 800b24a:	3a04      	subs	r2, #4
 800b24c:	3501      	adds	r5, #1
 800b24e:	42ae      	cmp	r6, r5
 800b250:	bf38      	it	cc
 800b252:	2200      	movcc	r2, #0
 800b254:	18a3      	adds	r3, r4, r2
 800b256:	50a7      	str	r7, [r4, r2]
 800b258:	b107      	cbz	r7, 800b25c <rshift+0x68>
 800b25a:	3304      	adds	r3, #4
 800b25c:	1b1a      	subs	r2, r3, r4
 800b25e:	42a3      	cmp	r3, r4
 800b260:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b264:	bf08      	it	eq
 800b266:	2300      	moveq	r3, #0
 800b268:	6102      	str	r2, [r0, #16]
 800b26a:	bf08      	it	eq
 800b26c:	6143      	streq	r3, [r0, #20]
 800b26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b272:	f8dc c000 	ldr.w	ip, [ip]
 800b276:	fa0c fc08 	lsl.w	ip, ip, r8
 800b27a:	ea4c 0707 	orr.w	r7, ip, r7
 800b27e:	f849 7b04 	str.w	r7, [r9], #4
 800b282:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b286:	40cf      	lsrs	r7, r1
 800b288:	e7da      	b.n	800b240 <rshift+0x4c>
 800b28a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b28e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b292:	e7c3      	b.n	800b21c <rshift+0x28>
 800b294:	4623      	mov	r3, r4
 800b296:	e7e1      	b.n	800b25c <rshift+0x68>

0800b298 <__hexdig_fun>:
 800b298:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b29c:	2b09      	cmp	r3, #9
 800b29e:	d802      	bhi.n	800b2a6 <__hexdig_fun+0xe>
 800b2a0:	3820      	subs	r0, #32
 800b2a2:	b2c0      	uxtb	r0, r0
 800b2a4:	4770      	bx	lr
 800b2a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b2aa:	2b05      	cmp	r3, #5
 800b2ac:	d801      	bhi.n	800b2b2 <__hexdig_fun+0x1a>
 800b2ae:	3847      	subs	r0, #71	@ 0x47
 800b2b0:	e7f7      	b.n	800b2a2 <__hexdig_fun+0xa>
 800b2b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b2b6:	2b05      	cmp	r3, #5
 800b2b8:	d801      	bhi.n	800b2be <__hexdig_fun+0x26>
 800b2ba:	3827      	subs	r0, #39	@ 0x27
 800b2bc:	e7f1      	b.n	800b2a2 <__hexdig_fun+0xa>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <__gethex>:
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	b085      	sub	sp, #20
 800b2ca:	468a      	mov	sl, r1
 800b2cc:	9302      	str	r3, [sp, #8]
 800b2ce:	680b      	ldr	r3, [r1, #0]
 800b2d0:	9001      	str	r0, [sp, #4]
 800b2d2:	4690      	mov	r8, r2
 800b2d4:	1c9c      	adds	r4, r3, #2
 800b2d6:	46a1      	mov	r9, r4
 800b2d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b2dc:	2830      	cmp	r0, #48	@ 0x30
 800b2de:	d0fa      	beq.n	800b2d6 <__gethex+0x12>
 800b2e0:	eba9 0303 	sub.w	r3, r9, r3
 800b2e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b2e8:	f7ff ffd6 	bl	800b298 <__hexdig_fun>
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d168      	bne.n	800b3c4 <__gethex+0x100>
 800b2f2:	49a0      	ldr	r1, [pc, #640]	@ (800b574 <__gethex+0x2b0>)
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	4648      	mov	r0, r9
 800b2f8:	f7fc fe5e 	bl	8007fb8 <strncmp>
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d167      	bne.n	800b3d2 <__gethex+0x10e>
 800b302:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b306:	4626      	mov	r6, r4
 800b308:	f7ff ffc6 	bl	800b298 <__hexdig_fun>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d062      	beq.n	800b3d6 <__gethex+0x112>
 800b310:	4623      	mov	r3, r4
 800b312:	7818      	ldrb	r0, [r3, #0]
 800b314:	2830      	cmp	r0, #48	@ 0x30
 800b316:	4699      	mov	r9, r3
 800b318:	f103 0301 	add.w	r3, r3, #1
 800b31c:	d0f9      	beq.n	800b312 <__gethex+0x4e>
 800b31e:	f7ff ffbb 	bl	800b298 <__hexdig_fun>
 800b322:	fab0 f580 	clz	r5, r0
 800b326:	096d      	lsrs	r5, r5, #5
 800b328:	f04f 0b01 	mov.w	fp, #1
 800b32c:	464a      	mov	r2, r9
 800b32e:	4616      	mov	r6, r2
 800b330:	3201      	adds	r2, #1
 800b332:	7830      	ldrb	r0, [r6, #0]
 800b334:	f7ff ffb0 	bl	800b298 <__hexdig_fun>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d1f8      	bne.n	800b32e <__gethex+0x6a>
 800b33c:	498d      	ldr	r1, [pc, #564]	@ (800b574 <__gethex+0x2b0>)
 800b33e:	2201      	movs	r2, #1
 800b340:	4630      	mov	r0, r6
 800b342:	f7fc fe39 	bl	8007fb8 <strncmp>
 800b346:	2800      	cmp	r0, #0
 800b348:	d13f      	bne.n	800b3ca <__gethex+0x106>
 800b34a:	b944      	cbnz	r4, 800b35e <__gethex+0x9a>
 800b34c:	1c74      	adds	r4, r6, #1
 800b34e:	4622      	mov	r2, r4
 800b350:	4616      	mov	r6, r2
 800b352:	3201      	adds	r2, #1
 800b354:	7830      	ldrb	r0, [r6, #0]
 800b356:	f7ff ff9f 	bl	800b298 <__hexdig_fun>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d1f8      	bne.n	800b350 <__gethex+0x8c>
 800b35e:	1ba4      	subs	r4, r4, r6
 800b360:	00a7      	lsls	r7, r4, #2
 800b362:	7833      	ldrb	r3, [r6, #0]
 800b364:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b368:	2b50      	cmp	r3, #80	@ 0x50
 800b36a:	d13e      	bne.n	800b3ea <__gethex+0x126>
 800b36c:	7873      	ldrb	r3, [r6, #1]
 800b36e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b370:	d033      	beq.n	800b3da <__gethex+0x116>
 800b372:	2b2d      	cmp	r3, #45	@ 0x2d
 800b374:	d034      	beq.n	800b3e0 <__gethex+0x11c>
 800b376:	1c71      	adds	r1, r6, #1
 800b378:	2400      	movs	r4, #0
 800b37a:	7808      	ldrb	r0, [r1, #0]
 800b37c:	f7ff ff8c 	bl	800b298 <__hexdig_fun>
 800b380:	1e43      	subs	r3, r0, #1
 800b382:	b2db      	uxtb	r3, r3
 800b384:	2b18      	cmp	r3, #24
 800b386:	d830      	bhi.n	800b3ea <__gethex+0x126>
 800b388:	f1a0 0210 	sub.w	r2, r0, #16
 800b38c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b390:	f7ff ff82 	bl	800b298 <__hexdig_fun>
 800b394:	f100 3cff 	add.w	ip, r0, #4294967295
 800b398:	fa5f fc8c 	uxtb.w	ip, ip
 800b39c:	f1bc 0f18 	cmp.w	ip, #24
 800b3a0:	f04f 030a 	mov.w	r3, #10
 800b3a4:	d91e      	bls.n	800b3e4 <__gethex+0x120>
 800b3a6:	b104      	cbz	r4, 800b3aa <__gethex+0xe6>
 800b3a8:	4252      	negs	r2, r2
 800b3aa:	4417      	add	r7, r2
 800b3ac:	f8ca 1000 	str.w	r1, [sl]
 800b3b0:	b1ed      	cbz	r5, 800b3ee <__gethex+0x12a>
 800b3b2:	f1bb 0f00 	cmp.w	fp, #0
 800b3b6:	bf0c      	ite	eq
 800b3b8:	2506      	moveq	r5, #6
 800b3ba:	2500      	movne	r5, #0
 800b3bc:	4628      	mov	r0, r5
 800b3be:	b005      	add	sp, #20
 800b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c4:	2500      	movs	r5, #0
 800b3c6:	462c      	mov	r4, r5
 800b3c8:	e7b0      	b.n	800b32c <__gethex+0x68>
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	d1c7      	bne.n	800b35e <__gethex+0x9a>
 800b3ce:	4627      	mov	r7, r4
 800b3d0:	e7c7      	b.n	800b362 <__gethex+0x9e>
 800b3d2:	464e      	mov	r6, r9
 800b3d4:	462f      	mov	r7, r5
 800b3d6:	2501      	movs	r5, #1
 800b3d8:	e7c3      	b.n	800b362 <__gethex+0x9e>
 800b3da:	2400      	movs	r4, #0
 800b3dc:	1cb1      	adds	r1, r6, #2
 800b3de:	e7cc      	b.n	800b37a <__gethex+0xb6>
 800b3e0:	2401      	movs	r4, #1
 800b3e2:	e7fb      	b.n	800b3dc <__gethex+0x118>
 800b3e4:	fb03 0002 	mla	r0, r3, r2, r0
 800b3e8:	e7ce      	b.n	800b388 <__gethex+0xc4>
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	e7de      	b.n	800b3ac <__gethex+0xe8>
 800b3ee:	eba6 0309 	sub.w	r3, r6, r9
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	2b07      	cmp	r3, #7
 800b3f8:	dc0a      	bgt.n	800b410 <__gethex+0x14c>
 800b3fa:	9801      	ldr	r0, [sp, #4]
 800b3fc:	f7fd fdc4 	bl	8008f88 <_Balloc>
 800b400:	4604      	mov	r4, r0
 800b402:	b940      	cbnz	r0, 800b416 <__gethex+0x152>
 800b404:	4b5c      	ldr	r3, [pc, #368]	@ (800b578 <__gethex+0x2b4>)
 800b406:	4602      	mov	r2, r0
 800b408:	21e4      	movs	r1, #228	@ 0xe4
 800b40a:	485c      	ldr	r0, [pc, #368]	@ (800b57c <__gethex+0x2b8>)
 800b40c:	f7ff fec0 	bl	800b190 <__assert_func>
 800b410:	3101      	adds	r1, #1
 800b412:	105b      	asrs	r3, r3, #1
 800b414:	e7ef      	b.n	800b3f6 <__gethex+0x132>
 800b416:	f100 0a14 	add.w	sl, r0, #20
 800b41a:	2300      	movs	r3, #0
 800b41c:	4655      	mov	r5, sl
 800b41e:	469b      	mov	fp, r3
 800b420:	45b1      	cmp	r9, r6
 800b422:	d337      	bcc.n	800b494 <__gethex+0x1d0>
 800b424:	f845 bb04 	str.w	fp, [r5], #4
 800b428:	eba5 050a 	sub.w	r5, r5, sl
 800b42c:	10ad      	asrs	r5, r5, #2
 800b42e:	6125      	str	r5, [r4, #16]
 800b430:	4658      	mov	r0, fp
 800b432:	f7fd fe9b 	bl	800916c <__hi0bits>
 800b436:	016d      	lsls	r5, r5, #5
 800b438:	f8d8 6000 	ldr.w	r6, [r8]
 800b43c:	1a2d      	subs	r5, r5, r0
 800b43e:	42b5      	cmp	r5, r6
 800b440:	dd54      	ble.n	800b4ec <__gethex+0x228>
 800b442:	1bad      	subs	r5, r5, r6
 800b444:	4629      	mov	r1, r5
 800b446:	4620      	mov	r0, r4
 800b448:	f7fe fa27 	bl	800989a <__any_on>
 800b44c:	4681      	mov	r9, r0
 800b44e:	b178      	cbz	r0, 800b470 <__gethex+0x1ac>
 800b450:	1e6b      	subs	r3, r5, #1
 800b452:	1159      	asrs	r1, r3, #5
 800b454:	f003 021f 	and.w	r2, r3, #31
 800b458:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b45c:	f04f 0901 	mov.w	r9, #1
 800b460:	fa09 f202 	lsl.w	r2, r9, r2
 800b464:	420a      	tst	r2, r1
 800b466:	d003      	beq.n	800b470 <__gethex+0x1ac>
 800b468:	454b      	cmp	r3, r9
 800b46a:	dc36      	bgt.n	800b4da <__gethex+0x216>
 800b46c:	f04f 0902 	mov.w	r9, #2
 800b470:	4629      	mov	r1, r5
 800b472:	4620      	mov	r0, r4
 800b474:	f7ff febe 	bl	800b1f4 <rshift>
 800b478:	442f      	add	r7, r5
 800b47a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b47e:	42bb      	cmp	r3, r7
 800b480:	da42      	bge.n	800b508 <__gethex+0x244>
 800b482:	9801      	ldr	r0, [sp, #4]
 800b484:	4621      	mov	r1, r4
 800b486:	f7fd fdbf 	bl	8009008 <_Bfree>
 800b48a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b48c:	2300      	movs	r3, #0
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	25a3      	movs	r5, #163	@ 0xa3
 800b492:	e793      	b.n	800b3bc <__gethex+0xf8>
 800b494:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b498:	2a2e      	cmp	r2, #46	@ 0x2e
 800b49a:	d012      	beq.n	800b4c2 <__gethex+0x1fe>
 800b49c:	2b20      	cmp	r3, #32
 800b49e:	d104      	bne.n	800b4aa <__gethex+0x1e6>
 800b4a0:	f845 bb04 	str.w	fp, [r5], #4
 800b4a4:	f04f 0b00 	mov.w	fp, #0
 800b4a8:	465b      	mov	r3, fp
 800b4aa:	7830      	ldrb	r0, [r6, #0]
 800b4ac:	9303      	str	r3, [sp, #12]
 800b4ae:	f7ff fef3 	bl	800b298 <__hexdig_fun>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	f000 000f 	and.w	r0, r0, #15
 800b4b8:	4098      	lsls	r0, r3
 800b4ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800b4be:	3304      	adds	r3, #4
 800b4c0:	e7ae      	b.n	800b420 <__gethex+0x15c>
 800b4c2:	45b1      	cmp	r9, r6
 800b4c4:	d8ea      	bhi.n	800b49c <__gethex+0x1d8>
 800b4c6:	492b      	ldr	r1, [pc, #172]	@ (800b574 <__gethex+0x2b0>)
 800b4c8:	9303      	str	r3, [sp, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f7fc fd73 	bl	8007fb8 <strncmp>
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d1e1      	bne.n	800b49c <__gethex+0x1d8>
 800b4d8:	e7a2      	b.n	800b420 <__gethex+0x15c>
 800b4da:	1ea9      	subs	r1, r5, #2
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f7fe f9dc 	bl	800989a <__any_on>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d0c2      	beq.n	800b46c <__gethex+0x1a8>
 800b4e6:	f04f 0903 	mov.w	r9, #3
 800b4ea:	e7c1      	b.n	800b470 <__gethex+0x1ac>
 800b4ec:	da09      	bge.n	800b502 <__gethex+0x23e>
 800b4ee:	1b75      	subs	r5, r6, r5
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	9801      	ldr	r0, [sp, #4]
 800b4f4:	462a      	mov	r2, r5
 800b4f6:	f7fd ff97 	bl	8009428 <__lshift>
 800b4fa:	1b7f      	subs	r7, r7, r5
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	f100 0a14 	add.w	sl, r0, #20
 800b502:	f04f 0900 	mov.w	r9, #0
 800b506:	e7b8      	b.n	800b47a <__gethex+0x1b6>
 800b508:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b50c:	42bd      	cmp	r5, r7
 800b50e:	dd6f      	ble.n	800b5f0 <__gethex+0x32c>
 800b510:	1bed      	subs	r5, r5, r7
 800b512:	42ae      	cmp	r6, r5
 800b514:	dc34      	bgt.n	800b580 <__gethex+0x2bc>
 800b516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d022      	beq.n	800b564 <__gethex+0x2a0>
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d024      	beq.n	800b56c <__gethex+0x2a8>
 800b522:	2b01      	cmp	r3, #1
 800b524:	d115      	bne.n	800b552 <__gethex+0x28e>
 800b526:	42ae      	cmp	r6, r5
 800b528:	d113      	bne.n	800b552 <__gethex+0x28e>
 800b52a:	2e01      	cmp	r6, #1
 800b52c:	d10b      	bne.n	800b546 <__gethex+0x282>
 800b52e:	9a02      	ldr	r2, [sp, #8]
 800b530:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	2301      	movs	r3, #1
 800b538:	6123      	str	r3, [r4, #16]
 800b53a:	f8ca 3000 	str.w	r3, [sl]
 800b53e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b540:	2562      	movs	r5, #98	@ 0x62
 800b542:	601c      	str	r4, [r3, #0]
 800b544:	e73a      	b.n	800b3bc <__gethex+0xf8>
 800b546:	1e71      	subs	r1, r6, #1
 800b548:	4620      	mov	r0, r4
 800b54a:	f7fe f9a6 	bl	800989a <__any_on>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d1ed      	bne.n	800b52e <__gethex+0x26a>
 800b552:	9801      	ldr	r0, [sp, #4]
 800b554:	4621      	mov	r1, r4
 800b556:	f7fd fd57 	bl	8009008 <_Bfree>
 800b55a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b55c:	2300      	movs	r3, #0
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	2550      	movs	r5, #80	@ 0x50
 800b562:	e72b      	b.n	800b3bc <__gethex+0xf8>
 800b564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f3      	bne.n	800b552 <__gethex+0x28e>
 800b56a:	e7e0      	b.n	800b52e <__gethex+0x26a>
 800b56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1dd      	bne.n	800b52e <__gethex+0x26a>
 800b572:	e7ee      	b.n	800b552 <__gethex+0x28e>
 800b574:	0800c141 	.word	0x0800c141
 800b578:	0800c0d7 	.word	0x0800c0d7
 800b57c:	0800c1b3 	.word	0x0800c1b3
 800b580:	1e6f      	subs	r7, r5, #1
 800b582:	f1b9 0f00 	cmp.w	r9, #0
 800b586:	d130      	bne.n	800b5ea <__gethex+0x326>
 800b588:	b127      	cbz	r7, 800b594 <__gethex+0x2d0>
 800b58a:	4639      	mov	r1, r7
 800b58c:	4620      	mov	r0, r4
 800b58e:	f7fe f984 	bl	800989a <__any_on>
 800b592:	4681      	mov	r9, r0
 800b594:	117a      	asrs	r2, r7, #5
 800b596:	2301      	movs	r3, #1
 800b598:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b59c:	f007 071f 	and.w	r7, r7, #31
 800b5a0:	40bb      	lsls	r3, r7
 800b5a2:	4213      	tst	r3, r2
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	bf18      	it	ne
 800b5aa:	f049 0902 	orrne.w	r9, r9, #2
 800b5ae:	f7ff fe21 	bl	800b1f4 <rshift>
 800b5b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b5b6:	1b76      	subs	r6, r6, r5
 800b5b8:	2502      	movs	r5, #2
 800b5ba:	f1b9 0f00 	cmp.w	r9, #0
 800b5be:	d047      	beq.n	800b650 <__gethex+0x38c>
 800b5c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d015      	beq.n	800b5f4 <__gethex+0x330>
 800b5c8:	2b03      	cmp	r3, #3
 800b5ca:	d017      	beq.n	800b5fc <__gethex+0x338>
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d109      	bne.n	800b5e4 <__gethex+0x320>
 800b5d0:	f019 0f02 	tst.w	r9, #2
 800b5d4:	d006      	beq.n	800b5e4 <__gethex+0x320>
 800b5d6:	f8da 3000 	ldr.w	r3, [sl]
 800b5da:	ea49 0903 	orr.w	r9, r9, r3
 800b5de:	f019 0f01 	tst.w	r9, #1
 800b5e2:	d10e      	bne.n	800b602 <__gethex+0x33e>
 800b5e4:	f045 0510 	orr.w	r5, r5, #16
 800b5e8:	e032      	b.n	800b650 <__gethex+0x38c>
 800b5ea:	f04f 0901 	mov.w	r9, #1
 800b5ee:	e7d1      	b.n	800b594 <__gethex+0x2d0>
 800b5f0:	2501      	movs	r5, #1
 800b5f2:	e7e2      	b.n	800b5ba <__gethex+0x2f6>
 800b5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5f6:	f1c3 0301 	rsb	r3, r3, #1
 800b5fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0f0      	beq.n	800b5e4 <__gethex+0x320>
 800b602:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b606:	f104 0314 	add.w	r3, r4, #20
 800b60a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b60e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b612:	f04f 0c00 	mov.w	ip, #0
 800b616:	4618      	mov	r0, r3
 800b618:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b620:	d01b      	beq.n	800b65a <__gethex+0x396>
 800b622:	3201      	adds	r2, #1
 800b624:	6002      	str	r2, [r0, #0]
 800b626:	2d02      	cmp	r5, #2
 800b628:	f104 0314 	add.w	r3, r4, #20
 800b62c:	d13c      	bne.n	800b6a8 <__gethex+0x3e4>
 800b62e:	f8d8 2000 	ldr.w	r2, [r8]
 800b632:	3a01      	subs	r2, #1
 800b634:	42b2      	cmp	r2, r6
 800b636:	d109      	bne.n	800b64c <__gethex+0x388>
 800b638:	1171      	asrs	r1, r6, #5
 800b63a:	2201      	movs	r2, #1
 800b63c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b640:	f006 061f 	and.w	r6, r6, #31
 800b644:	fa02 f606 	lsl.w	r6, r2, r6
 800b648:	421e      	tst	r6, r3
 800b64a:	d13a      	bne.n	800b6c2 <__gethex+0x3fe>
 800b64c:	f045 0520 	orr.w	r5, r5, #32
 800b650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b652:	601c      	str	r4, [r3, #0]
 800b654:	9b02      	ldr	r3, [sp, #8]
 800b656:	601f      	str	r7, [r3, #0]
 800b658:	e6b0      	b.n	800b3bc <__gethex+0xf8>
 800b65a:	4299      	cmp	r1, r3
 800b65c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b660:	d8d9      	bhi.n	800b616 <__gethex+0x352>
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	459b      	cmp	fp, r3
 800b666:	db17      	blt.n	800b698 <__gethex+0x3d4>
 800b668:	6861      	ldr	r1, [r4, #4]
 800b66a:	9801      	ldr	r0, [sp, #4]
 800b66c:	3101      	adds	r1, #1
 800b66e:	f7fd fc8b 	bl	8008f88 <_Balloc>
 800b672:	4681      	mov	r9, r0
 800b674:	b918      	cbnz	r0, 800b67e <__gethex+0x3ba>
 800b676:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e0 <__gethex+0x41c>)
 800b678:	4602      	mov	r2, r0
 800b67a:	2184      	movs	r1, #132	@ 0x84
 800b67c:	e6c5      	b.n	800b40a <__gethex+0x146>
 800b67e:	6922      	ldr	r2, [r4, #16]
 800b680:	3202      	adds	r2, #2
 800b682:	f104 010c 	add.w	r1, r4, #12
 800b686:	0092      	lsls	r2, r2, #2
 800b688:	300c      	adds	r0, #12
 800b68a:	f7ff fd6b 	bl	800b164 <memcpy>
 800b68e:	4621      	mov	r1, r4
 800b690:	9801      	ldr	r0, [sp, #4]
 800b692:	f7fd fcb9 	bl	8009008 <_Bfree>
 800b696:	464c      	mov	r4, r9
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	1c5a      	adds	r2, r3, #1
 800b69c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6a0:	6122      	str	r2, [r4, #16]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	615a      	str	r2, [r3, #20]
 800b6a6:	e7be      	b.n	800b626 <__gethex+0x362>
 800b6a8:	6922      	ldr	r2, [r4, #16]
 800b6aa:	455a      	cmp	r2, fp
 800b6ac:	dd0b      	ble.n	800b6c6 <__gethex+0x402>
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f7ff fd9f 	bl	800b1f4 <rshift>
 800b6b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6ba:	3701      	adds	r7, #1
 800b6bc:	42bb      	cmp	r3, r7
 800b6be:	f6ff aee0 	blt.w	800b482 <__gethex+0x1be>
 800b6c2:	2501      	movs	r5, #1
 800b6c4:	e7c2      	b.n	800b64c <__gethex+0x388>
 800b6c6:	f016 061f 	ands.w	r6, r6, #31
 800b6ca:	d0fa      	beq.n	800b6c2 <__gethex+0x3fe>
 800b6cc:	4453      	add	r3, sl
 800b6ce:	f1c6 0620 	rsb	r6, r6, #32
 800b6d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6d6:	f7fd fd49 	bl	800916c <__hi0bits>
 800b6da:	42b0      	cmp	r0, r6
 800b6dc:	dbe7      	blt.n	800b6ae <__gethex+0x3ea>
 800b6de:	e7f0      	b.n	800b6c2 <__gethex+0x3fe>
 800b6e0:	0800c0d7 	.word	0x0800c0d7

0800b6e4 <L_shift>:
 800b6e4:	f1c2 0208 	rsb	r2, r2, #8
 800b6e8:	0092      	lsls	r2, r2, #2
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	f1c2 0620 	rsb	r6, r2, #32
 800b6f0:	6843      	ldr	r3, [r0, #4]
 800b6f2:	6804      	ldr	r4, [r0, #0]
 800b6f4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6f8:	432c      	orrs	r4, r5
 800b6fa:	40d3      	lsrs	r3, r2
 800b6fc:	6004      	str	r4, [r0, #0]
 800b6fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800b702:	4288      	cmp	r0, r1
 800b704:	d3f4      	bcc.n	800b6f0 <L_shift+0xc>
 800b706:	bd70      	pop	{r4, r5, r6, pc}

0800b708 <__match>:
 800b708:	b530      	push	{r4, r5, lr}
 800b70a:	6803      	ldr	r3, [r0, #0]
 800b70c:	3301      	adds	r3, #1
 800b70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b712:	b914      	cbnz	r4, 800b71a <__match+0x12>
 800b714:	6003      	str	r3, [r0, #0]
 800b716:	2001      	movs	r0, #1
 800b718:	bd30      	pop	{r4, r5, pc}
 800b71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b722:	2d19      	cmp	r5, #25
 800b724:	bf98      	it	ls
 800b726:	3220      	addls	r2, #32
 800b728:	42a2      	cmp	r2, r4
 800b72a:	d0f0      	beq.n	800b70e <__match+0x6>
 800b72c:	2000      	movs	r0, #0
 800b72e:	e7f3      	b.n	800b718 <__match+0x10>

0800b730 <__hexnan>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	680b      	ldr	r3, [r1, #0]
 800b736:	6801      	ldr	r1, [r0, #0]
 800b738:	115e      	asrs	r6, r3, #5
 800b73a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b73e:	f013 031f 	ands.w	r3, r3, #31
 800b742:	b087      	sub	sp, #28
 800b744:	bf18      	it	ne
 800b746:	3604      	addne	r6, #4
 800b748:	2500      	movs	r5, #0
 800b74a:	1f37      	subs	r7, r6, #4
 800b74c:	4682      	mov	sl, r0
 800b74e:	4690      	mov	r8, r2
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	f846 5c04 	str.w	r5, [r6, #-4]
 800b756:	46b9      	mov	r9, r7
 800b758:	463c      	mov	r4, r7
 800b75a:	9502      	str	r5, [sp, #8]
 800b75c:	46ab      	mov	fp, r5
 800b75e:	784a      	ldrb	r2, [r1, #1]
 800b760:	1c4b      	adds	r3, r1, #1
 800b762:	9303      	str	r3, [sp, #12]
 800b764:	b342      	cbz	r2, 800b7b8 <__hexnan+0x88>
 800b766:	4610      	mov	r0, r2
 800b768:	9105      	str	r1, [sp, #20]
 800b76a:	9204      	str	r2, [sp, #16]
 800b76c:	f7ff fd94 	bl	800b298 <__hexdig_fun>
 800b770:	2800      	cmp	r0, #0
 800b772:	d151      	bne.n	800b818 <__hexnan+0xe8>
 800b774:	9a04      	ldr	r2, [sp, #16]
 800b776:	9905      	ldr	r1, [sp, #20]
 800b778:	2a20      	cmp	r2, #32
 800b77a:	d818      	bhi.n	800b7ae <__hexnan+0x7e>
 800b77c:	9b02      	ldr	r3, [sp, #8]
 800b77e:	459b      	cmp	fp, r3
 800b780:	dd13      	ble.n	800b7aa <__hexnan+0x7a>
 800b782:	454c      	cmp	r4, r9
 800b784:	d206      	bcs.n	800b794 <__hexnan+0x64>
 800b786:	2d07      	cmp	r5, #7
 800b788:	dc04      	bgt.n	800b794 <__hexnan+0x64>
 800b78a:	462a      	mov	r2, r5
 800b78c:	4649      	mov	r1, r9
 800b78e:	4620      	mov	r0, r4
 800b790:	f7ff ffa8 	bl	800b6e4 <L_shift>
 800b794:	4544      	cmp	r4, r8
 800b796:	d952      	bls.n	800b83e <__hexnan+0x10e>
 800b798:	2300      	movs	r3, #0
 800b79a:	f1a4 0904 	sub.w	r9, r4, #4
 800b79e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7a2:	f8cd b008 	str.w	fp, [sp, #8]
 800b7a6:	464c      	mov	r4, r9
 800b7a8:	461d      	mov	r5, r3
 800b7aa:	9903      	ldr	r1, [sp, #12]
 800b7ac:	e7d7      	b.n	800b75e <__hexnan+0x2e>
 800b7ae:	2a29      	cmp	r2, #41	@ 0x29
 800b7b0:	d157      	bne.n	800b862 <__hexnan+0x132>
 800b7b2:	3102      	adds	r1, #2
 800b7b4:	f8ca 1000 	str.w	r1, [sl]
 800b7b8:	f1bb 0f00 	cmp.w	fp, #0
 800b7bc:	d051      	beq.n	800b862 <__hexnan+0x132>
 800b7be:	454c      	cmp	r4, r9
 800b7c0:	d206      	bcs.n	800b7d0 <__hexnan+0xa0>
 800b7c2:	2d07      	cmp	r5, #7
 800b7c4:	dc04      	bgt.n	800b7d0 <__hexnan+0xa0>
 800b7c6:	462a      	mov	r2, r5
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7ff ff8a 	bl	800b6e4 <L_shift>
 800b7d0:	4544      	cmp	r4, r8
 800b7d2:	d936      	bls.n	800b842 <__hexnan+0x112>
 800b7d4:	f1a8 0204 	sub.w	r2, r8, #4
 800b7d8:	4623      	mov	r3, r4
 800b7da:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7de:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7e2:	429f      	cmp	r7, r3
 800b7e4:	d2f9      	bcs.n	800b7da <__hexnan+0xaa>
 800b7e6:	1b3b      	subs	r3, r7, r4
 800b7e8:	f023 0303 	bic.w	r3, r3, #3
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	3401      	adds	r4, #1
 800b7f0:	3e03      	subs	r6, #3
 800b7f2:	42b4      	cmp	r4, r6
 800b7f4:	bf88      	it	hi
 800b7f6:	2304      	movhi	r3, #4
 800b7f8:	4443      	add	r3, r8
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f843 2b04 	str.w	r2, [r3], #4
 800b800:	429f      	cmp	r7, r3
 800b802:	d2fb      	bcs.n	800b7fc <__hexnan+0xcc>
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	b91b      	cbnz	r3, 800b810 <__hexnan+0xe0>
 800b808:	4547      	cmp	r7, r8
 800b80a:	d128      	bne.n	800b85e <__hexnan+0x12e>
 800b80c:	2301      	movs	r3, #1
 800b80e:	603b      	str	r3, [r7, #0]
 800b810:	2005      	movs	r0, #5
 800b812:	b007      	add	sp, #28
 800b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b818:	3501      	adds	r5, #1
 800b81a:	2d08      	cmp	r5, #8
 800b81c:	f10b 0b01 	add.w	fp, fp, #1
 800b820:	dd06      	ble.n	800b830 <__hexnan+0x100>
 800b822:	4544      	cmp	r4, r8
 800b824:	d9c1      	bls.n	800b7aa <__hexnan+0x7a>
 800b826:	2300      	movs	r3, #0
 800b828:	f844 3c04 	str.w	r3, [r4, #-4]
 800b82c:	2501      	movs	r5, #1
 800b82e:	3c04      	subs	r4, #4
 800b830:	6822      	ldr	r2, [r4, #0]
 800b832:	f000 000f 	and.w	r0, r0, #15
 800b836:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b83a:	6020      	str	r0, [r4, #0]
 800b83c:	e7b5      	b.n	800b7aa <__hexnan+0x7a>
 800b83e:	2508      	movs	r5, #8
 800b840:	e7b3      	b.n	800b7aa <__hexnan+0x7a>
 800b842:	9b01      	ldr	r3, [sp, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0dd      	beq.n	800b804 <__hexnan+0xd4>
 800b848:	f1c3 0320 	rsb	r3, r3, #32
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295
 800b850:	40da      	lsrs	r2, r3
 800b852:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b856:	4013      	ands	r3, r2
 800b858:	f846 3c04 	str.w	r3, [r6, #-4]
 800b85c:	e7d2      	b.n	800b804 <__hexnan+0xd4>
 800b85e:	3f04      	subs	r7, #4
 800b860:	e7d0      	b.n	800b804 <__hexnan+0xd4>
 800b862:	2004      	movs	r0, #4
 800b864:	e7d5      	b.n	800b812 <__hexnan+0xe2>

0800b866 <__ascii_mbtowc>:
 800b866:	b082      	sub	sp, #8
 800b868:	b901      	cbnz	r1, 800b86c <__ascii_mbtowc+0x6>
 800b86a:	a901      	add	r1, sp, #4
 800b86c:	b142      	cbz	r2, 800b880 <__ascii_mbtowc+0x1a>
 800b86e:	b14b      	cbz	r3, 800b884 <__ascii_mbtowc+0x1e>
 800b870:	7813      	ldrb	r3, [r2, #0]
 800b872:	600b      	str	r3, [r1, #0]
 800b874:	7812      	ldrb	r2, [r2, #0]
 800b876:	1e10      	subs	r0, r2, #0
 800b878:	bf18      	it	ne
 800b87a:	2001      	movne	r0, #1
 800b87c:	b002      	add	sp, #8
 800b87e:	4770      	bx	lr
 800b880:	4610      	mov	r0, r2
 800b882:	e7fb      	b.n	800b87c <__ascii_mbtowc+0x16>
 800b884:	f06f 0001 	mvn.w	r0, #1
 800b888:	e7f8      	b.n	800b87c <__ascii_mbtowc+0x16>

0800b88a <_realloc_r>:
 800b88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88e:	4607      	mov	r7, r0
 800b890:	4614      	mov	r4, r2
 800b892:	460d      	mov	r5, r1
 800b894:	b921      	cbnz	r1, 800b8a0 <_realloc_r+0x16>
 800b896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b89a:	4611      	mov	r1, r2
 800b89c:	f7fd bae8 	b.w	8008e70 <_malloc_r>
 800b8a0:	b92a      	cbnz	r2, 800b8ae <_realloc_r+0x24>
 800b8a2:	f7fd fa71 	bl	8008d88 <_free_r>
 800b8a6:	4625      	mov	r5, r4
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ae:	f000 f8b2 	bl	800ba16 <_malloc_usable_size_r>
 800b8b2:	4284      	cmp	r4, r0
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	d802      	bhi.n	800b8be <_realloc_r+0x34>
 800b8b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8bc:	d8f4      	bhi.n	800b8a8 <_realloc_r+0x1e>
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f7fd fad5 	bl	8008e70 <_malloc_r>
 800b8c6:	4680      	mov	r8, r0
 800b8c8:	b908      	cbnz	r0, 800b8ce <_realloc_r+0x44>
 800b8ca:	4645      	mov	r5, r8
 800b8cc:	e7ec      	b.n	800b8a8 <_realloc_r+0x1e>
 800b8ce:	42b4      	cmp	r4, r6
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	bf28      	it	cs
 800b8d6:	4632      	movcs	r2, r6
 800b8d8:	f7ff fc44 	bl	800b164 <memcpy>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f7fd fa52 	bl	8008d88 <_free_r>
 800b8e4:	e7f1      	b.n	800b8ca <_realloc_r+0x40>
	...

0800b8e8 <_strtoul_l.isra.0>:
 800b8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8ec:	4e34      	ldr	r6, [pc, #208]	@ (800b9c0 <_strtoul_l.isra.0+0xd8>)
 800b8ee:	4686      	mov	lr, r0
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8f8:	5d37      	ldrb	r7, [r6, r4]
 800b8fa:	f017 0708 	ands.w	r7, r7, #8
 800b8fe:	d1f8      	bne.n	800b8f2 <_strtoul_l.isra.0+0xa>
 800b900:	2c2d      	cmp	r4, #45	@ 0x2d
 800b902:	d110      	bne.n	800b926 <_strtoul_l.isra.0+0x3e>
 800b904:	782c      	ldrb	r4, [r5, #0]
 800b906:	2701      	movs	r7, #1
 800b908:	1c85      	adds	r5, r0, #2
 800b90a:	f033 0010 	bics.w	r0, r3, #16
 800b90e:	d115      	bne.n	800b93c <_strtoul_l.isra.0+0x54>
 800b910:	2c30      	cmp	r4, #48	@ 0x30
 800b912:	d10d      	bne.n	800b930 <_strtoul_l.isra.0+0x48>
 800b914:	7828      	ldrb	r0, [r5, #0]
 800b916:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b91a:	2858      	cmp	r0, #88	@ 0x58
 800b91c:	d108      	bne.n	800b930 <_strtoul_l.isra.0+0x48>
 800b91e:	786c      	ldrb	r4, [r5, #1]
 800b920:	3502      	adds	r5, #2
 800b922:	2310      	movs	r3, #16
 800b924:	e00a      	b.n	800b93c <_strtoul_l.isra.0+0x54>
 800b926:	2c2b      	cmp	r4, #43	@ 0x2b
 800b928:	bf04      	itt	eq
 800b92a:	782c      	ldrbeq	r4, [r5, #0]
 800b92c:	1c85      	addeq	r5, r0, #2
 800b92e:	e7ec      	b.n	800b90a <_strtoul_l.isra.0+0x22>
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1f6      	bne.n	800b922 <_strtoul_l.isra.0+0x3a>
 800b934:	2c30      	cmp	r4, #48	@ 0x30
 800b936:	bf14      	ite	ne
 800b938:	230a      	movne	r3, #10
 800b93a:	2308      	moveq	r3, #8
 800b93c:	f04f 38ff 	mov.w	r8, #4294967295
 800b940:	2600      	movs	r6, #0
 800b942:	fbb8 f8f3 	udiv	r8, r8, r3
 800b946:	fb03 f908 	mul.w	r9, r3, r8
 800b94a:	ea6f 0909 	mvn.w	r9, r9
 800b94e:	4630      	mov	r0, r6
 800b950:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b954:	f1bc 0f09 	cmp.w	ip, #9
 800b958:	d810      	bhi.n	800b97c <_strtoul_l.isra.0+0x94>
 800b95a:	4664      	mov	r4, ip
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	dd1e      	ble.n	800b99e <_strtoul_l.isra.0+0xb6>
 800b960:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b964:	d007      	beq.n	800b976 <_strtoul_l.isra.0+0x8e>
 800b966:	4580      	cmp	r8, r0
 800b968:	d316      	bcc.n	800b998 <_strtoul_l.isra.0+0xb0>
 800b96a:	d101      	bne.n	800b970 <_strtoul_l.isra.0+0x88>
 800b96c:	45a1      	cmp	r9, r4
 800b96e:	db13      	blt.n	800b998 <_strtoul_l.isra.0+0xb0>
 800b970:	fb00 4003 	mla	r0, r0, r3, r4
 800b974:	2601      	movs	r6, #1
 800b976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b97a:	e7e9      	b.n	800b950 <_strtoul_l.isra.0+0x68>
 800b97c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b980:	f1bc 0f19 	cmp.w	ip, #25
 800b984:	d801      	bhi.n	800b98a <_strtoul_l.isra.0+0xa2>
 800b986:	3c37      	subs	r4, #55	@ 0x37
 800b988:	e7e8      	b.n	800b95c <_strtoul_l.isra.0+0x74>
 800b98a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b98e:	f1bc 0f19 	cmp.w	ip, #25
 800b992:	d804      	bhi.n	800b99e <_strtoul_l.isra.0+0xb6>
 800b994:	3c57      	subs	r4, #87	@ 0x57
 800b996:	e7e1      	b.n	800b95c <_strtoul_l.isra.0+0x74>
 800b998:	f04f 36ff 	mov.w	r6, #4294967295
 800b99c:	e7eb      	b.n	800b976 <_strtoul_l.isra.0+0x8e>
 800b99e:	1c73      	adds	r3, r6, #1
 800b9a0:	d106      	bne.n	800b9b0 <_strtoul_l.isra.0+0xc8>
 800b9a2:	2322      	movs	r3, #34	@ 0x22
 800b9a4:	f8ce 3000 	str.w	r3, [lr]
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	b932      	cbnz	r2, 800b9ba <_strtoul_l.isra.0+0xd2>
 800b9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9b0:	b107      	cbz	r7, 800b9b4 <_strtoul_l.isra.0+0xcc>
 800b9b2:	4240      	negs	r0, r0
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	d0f9      	beq.n	800b9ac <_strtoul_l.isra.0+0xc4>
 800b9b8:	b106      	cbz	r6, 800b9bc <_strtoul_l.isra.0+0xd4>
 800b9ba:	1e69      	subs	r1, r5, #1
 800b9bc:	6011      	str	r1, [r2, #0]
 800b9be:	e7f5      	b.n	800b9ac <_strtoul_l.isra.0+0xc4>
 800b9c0:	0800c361 	.word	0x0800c361

0800b9c4 <_strtoul_r>:
 800b9c4:	f7ff bf90 	b.w	800b8e8 <_strtoul_l.isra.0>

0800b9c8 <__ascii_wctomb>:
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	b141      	cbz	r1, 800b9e0 <__ascii_wctomb+0x18>
 800b9ce:	2aff      	cmp	r2, #255	@ 0xff
 800b9d0:	d904      	bls.n	800b9dc <__ascii_wctomb+0x14>
 800b9d2:	228a      	movs	r2, #138	@ 0x8a
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9da:	4770      	bx	lr
 800b9dc:	700a      	strb	r2, [r1, #0]
 800b9de:	2001      	movs	r0, #1
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <fiprintf>:
 800b9e4:	b40e      	push	{r1, r2, r3}
 800b9e6:	b503      	push	{r0, r1, lr}
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	ab03      	add	r3, sp, #12
 800b9ec:	4805      	ldr	r0, [pc, #20]	@ (800ba04 <fiprintf+0x20>)
 800b9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f2:	6800      	ldr	r0, [r0, #0]
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	f000 f83f 	bl	800ba78 <_vfiprintf_r>
 800b9fa:	b002      	add	sp, #8
 800b9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba00:	b003      	add	sp, #12
 800ba02:	4770      	bx	lr
 800ba04:	2000101c 	.word	0x2000101c

0800ba08 <abort>:
 800ba08:	b508      	push	{r3, lr}
 800ba0a:	2006      	movs	r0, #6
 800ba0c:	f000 fa08 	bl	800be20 <raise>
 800ba10:	2001      	movs	r0, #1
 800ba12:	f7f7 f9c3 	bl	8002d9c <_exit>

0800ba16 <_malloc_usable_size_r>:
 800ba16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba1a:	1f18      	subs	r0, r3, #4
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	bfbc      	itt	lt
 800ba20:	580b      	ldrlt	r3, [r1, r0]
 800ba22:	18c0      	addlt	r0, r0, r3
 800ba24:	4770      	bx	lr

0800ba26 <__sfputc_r>:
 800ba26:	6893      	ldr	r3, [r2, #8]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	b410      	push	{r4}
 800ba2e:	6093      	str	r3, [r2, #8]
 800ba30:	da08      	bge.n	800ba44 <__sfputc_r+0x1e>
 800ba32:	6994      	ldr	r4, [r2, #24]
 800ba34:	42a3      	cmp	r3, r4
 800ba36:	db01      	blt.n	800ba3c <__sfputc_r+0x16>
 800ba38:	290a      	cmp	r1, #10
 800ba3a:	d103      	bne.n	800ba44 <__sfputc_r+0x1e>
 800ba3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba40:	f000 b932 	b.w	800bca8 <__swbuf_r>
 800ba44:	6813      	ldr	r3, [r2, #0]
 800ba46:	1c58      	adds	r0, r3, #1
 800ba48:	6010      	str	r0, [r2, #0]
 800ba4a:	7019      	strb	r1, [r3, #0]
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <__sfputs_r>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	4606      	mov	r6, r0
 800ba58:	460f      	mov	r7, r1
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	18d5      	adds	r5, r2, r3
 800ba5e:	42ac      	cmp	r4, r5
 800ba60:	d101      	bne.n	800ba66 <__sfputs_r+0x12>
 800ba62:	2000      	movs	r0, #0
 800ba64:	e007      	b.n	800ba76 <__sfputs_r+0x22>
 800ba66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6a:	463a      	mov	r2, r7
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff ffda 	bl	800ba26 <__sfputc_r>
 800ba72:	1c43      	adds	r3, r0, #1
 800ba74:	d1f3      	bne.n	800ba5e <__sfputs_r+0xa>
 800ba76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba78 <_vfiprintf_r>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	b09d      	sub	sp, #116	@ 0x74
 800ba80:	4614      	mov	r4, r2
 800ba82:	4698      	mov	r8, r3
 800ba84:	4606      	mov	r6, r0
 800ba86:	b118      	cbz	r0, 800ba90 <_vfiprintf_r+0x18>
 800ba88:	6a03      	ldr	r3, [r0, #32]
 800ba8a:	b90b      	cbnz	r3, 800ba90 <_vfiprintf_r+0x18>
 800ba8c:	f7fc f9a2 	bl	8007dd4 <__sinit>
 800ba90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba92:	07d9      	lsls	r1, r3, #31
 800ba94:	d405      	bmi.n	800baa2 <_vfiprintf_r+0x2a>
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	059a      	lsls	r2, r3, #22
 800ba9a:	d402      	bmi.n	800baa2 <_vfiprintf_r+0x2a>
 800ba9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba9e:	f7fc fb12 	bl	80080c6 <__retarget_lock_acquire_recursive>
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	071b      	lsls	r3, r3, #28
 800baa6:	d501      	bpl.n	800baac <_vfiprintf_r+0x34>
 800baa8:	692b      	ldr	r3, [r5, #16]
 800baaa:	b99b      	cbnz	r3, 800bad4 <_vfiprintf_r+0x5c>
 800baac:	4629      	mov	r1, r5
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 f938 	bl	800bd24 <__swsetup_r>
 800bab4:	b170      	cbz	r0, 800bad4 <_vfiprintf_r+0x5c>
 800bab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bab8:	07dc      	lsls	r4, r3, #31
 800baba:	d504      	bpl.n	800bac6 <_vfiprintf_r+0x4e>
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	b01d      	add	sp, #116	@ 0x74
 800bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac6:	89ab      	ldrh	r3, [r5, #12]
 800bac8:	0598      	lsls	r0, r3, #22
 800baca:	d4f7      	bmi.n	800babc <_vfiprintf_r+0x44>
 800bacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bace:	f7fc fafb 	bl	80080c8 <__retarget_lock_release_recursive>
 800bad2:	e7f3      	b.n	800babc <_vfiprintf_r+0x44>
 800bad4:	2300      	movs	r3, #0
 800bad6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad8:	2320      	movs	r3, #32
 800bada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bade:	f8cd 800c 	str.w	r8, [sp, #12]
 800bae2:	2330      	movs	r3, #48	@ 0x30
 800bae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc94 <_vfiprintf_r+0x21c>
 800bae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baec:	f04f 0901 	mov.w	r9, #1
 800baf0:	4623      	mov	r3, r4
 800baf2:	469a      	mov	sl, r3
 800baf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baf8:	b10a      	cbz	r2, 800bafe <_vfiprintf_r+0x86>
 800bafa:	2a25      	cmp	r2, #37	@ 0x25
 800bafc:	d1f9      	bne.n	800baf2 <_vfiprintf_r+0x7a>
 800bafe:	ebba 0b04 	subs.w	fp, sl, r4
 800bb02:	d00b      	beq.n	800bb1c <_vfiprintf_r+0xa4>
 800bb04:	465b      	mov	r3, fp
 800bb06:	4622      	mov	r2, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7ff ffa2 	bl	800ba54 <__sfputs_r>
 800bb10:	3001      	adds	r0, #1
 800bb12:	f000 80a7 	beq.w	800bc64 <_vfiprintf_r+0x1ec>
 800bb16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb18:	445a      	add	r2, fp
 800bb1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 809f 	beq.w	800bc64 <_vfiprintf_r+0x1ec>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb30:	f10a 0a01 	add.w	sl, sl, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	9307      	str	r3, [sp, #28]
 800bb38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb3e:	4654      	mov	r4, sl
 800bb40:	2205      	movs	r2, #5
 800bb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb46:	4853      	ldr	r0, [pc, #332]	@ (800bc94 <_vfiprintf_r+0x21c>)
 800bb48:	f7f4 fb52 	bl	80001f0 <memchr>
 800bb4c:	9a04      	ldr	r2, [sp, #16]
 800bb4e:	b9d8      	cbnz	r0, 800bb88 <_vfiprintf_r+0x110>
 800bb50:	06d1      	lsls	r1, r2, #27
 800bb52:	bf44      	itt	mi
 800bb54:	2320      	movmi	r3, #32
 800bb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5a:	0713      	lsls	r3, r2, #28
 800bb5c:	bf44      	itt	mi
 800bb5e:	232b      	movmi	r3, #43	@ 0x2b
 800bb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb64:	f89a 3000 	ldrb.w	r3, [sl]
 800bb68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb6a:	d015      	beq.n	800bb98 <_vfiprintf_r+0x120>
 800bb6c:	9a07      	ldr	r2, [sp, #28]
 800bb6e:	4654      	mov	r4, sl
 800bb70:	2000      	movs	r0, #0
 800bb72:	f04f 0c0a 	mov.w	ip, #10
 800bb76:	4621      	mov	r1, r4
 800bb78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb7c:	3b30      	subs	r3, #48	@ 0x30
 800bb7e:	2b09      	cmp	r3, #9
 800bb80:	d94b      	bls.n	800bc1a <_vfiprintf_r+0x1a2>
 800bb82:	b1b0      	cbz	r0, 800bbb2 <_vfiprintf_r+0x13a>
 800bb84:	9207      	str	r2, [sp, #28]
 800bb86:	e014      	b.n	800bbb2 <_vfiprintf_r+0x13a>
 800bb88:	eba0 0308 	sub.w	r3, r0, r8
 800bb8c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb90:	4313      	orrs	r3, r2
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	46a2      	mov	sl, r4
 800bb96:	e7d2      	b.n	800bb3e <_vfiprintf_r+0xc6>
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	1d19      	adds	r1, r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	9103      	str	r1, [sp, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	bfbb      	ittet	lt
 800bba4:	425b      	neglt	r3, r3
 800bba6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbaa:	9307      	strge	r3, [sp, #28]
 800bbac:	9307      	strlt	r3, [sp, #28]
 800bbae:	bfb8      	it	lt
 800bbb0:	9204      	strlt	r2, [sp, #16]
 800bbb2:	7823      	ldrb	r3, [r4, #0]
 800bbb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbb6:	d10a      	bne.n	800bbce <_vfiprintf_r+0x156>
 800bbb8:	7863      	ldrb	r3, [r4, #1]
 800bbba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbbc:	d132      	bne.n	800bc24 <_vfiprintf_r+0x1ac>
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	1d1a      	adds	r2, r3, #4
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	9203      	str	r2, [sp, #12]
 800bbc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbca:	3402      	adds	r4, #2
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bca4 <_vfiprintf_r+0x22c>
 800bbd2:	7821      	ldrb	r1, [r4, #0]
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	f7f4 fb0a 	bl	80001f0 <memchr>
 800bbdc:	b138      	cbz	r0, 800bbee <_vfiprintf_r+0x176>
 800bbde:	9b04      	ldr	r3, [sp, #16]
 800bbe0:	eba0 000a 	sub.w	r0, r0, sl
 800bbe4:	2240      	movs	r2, #64	@ 0x40
 800bbe6:	4082      	lsls	r2, r0
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	3401      	adds	r4, #1
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf2:	4829      	ldr	r0, [pc, #164]	@ (800bc98 <_vfiprintf_r+0x220>)
 800bbf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbf8:	2206      	movs	r2, #6
 800bbfa:	f7f4 faf9 	bl	80001f0 <memchr>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d03f      	beq.n	800bc82 <_vfiprintf_r+0x20a>
 800bc02:	4b26      	ldr	r3, [pc, #152]	@ (800bc9c <_vfiprintf_r+0x224>)
 800bc04:	bb1b      	cbnz	r3, 800bc4e <_vfiprintf_r+0x1d6>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	3307      	adds	r3, #7
 800bc0a:	f023 0307 	bic.w	r3, r3, #7
 800bc0e:	3308      	adds	r3, #8
 800bc10:	9303      	str	r3, [sp, #12]
 800bc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc14:	443b      	add	r3, r7
 800bc16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc18:	e76a      	b.n	800baf0 <_vfiprintf_r+0x78>
 800bc1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc1e:	460c      	mov	r4, r1
 800bc20:	2001      	movs	r0, #1
 800bc22:	e7a8      	b.n	800bb76 <_vfiprintf_r+0xfe>
 800bc24:	2300      	movs	r3, #0
 800bc26:	3401      	adds	r4, #1
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	f04f 0c0a 	mov.w	ip, #10
 800bc30:	4620      	mov	r0, r4
 800bc32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc36:	3a30      	subs	r2, #48	@ 0x30
 800bc38:	2a09      	cmp	r2, #9
 800bc3a:	d903      	bls.n	800bc44 <_vfiprintf_r+0x1cc>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0c6      	beq.n	800bbce <_vfiprintf_r+0x156>
 800bc40:	9105      	str	r1, [sp, #20]
 800bc42:	e7c4      	b.n	800bbce <_vfiprintf_r+0x156>
 800bc44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc48:	4604      	mov	r4, r0
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e7f0      	b.n	800bc30 <_vfiprintf_r+0x1b8>
 800bc4e:	ab03      	add	r3, sp, #12
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	462a      	mov	r2, r5
 800bc54:	4b12      	ldr	r3, [pc, #72]	@ (800bca0 <_vfiprintf_r+0x228>)
 800bc56:	a904      	add	r1, sp, #16
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7fb fa6b 	bl	8007134 <_printf_float>
 800bc5e:	4607      	mov	r7, r0
 800bc60:	1c78      	adds	r0, r7, #1
 800bc62:	d1d6      	bne.n	800bc12 <_vfiprintf_r+0x19a>
 800bc64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc66:	07d9      	lsls	r1, r3, #31
 800bc68:	d405      	bmi.n	800bc76 <_vfiprintf_r+0x1fe>
 800bc6a:	89ab      	ldrh	r3, [r5, #12]
 800bc6c:	059a      	lsls	r2, r3, #22
 800bc6e:	d402      	bmi.n	800bc76 <_vfiprintf_r+0x1fe>
 800bc70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc72:	f7fc fa29 	bl	80080c8 <__retarget_lock_release_recursive>
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	065b      	lsls	r3, r3, #25
 800bc7a:	f53f af1f 	bmi.w	800babc <_vfiprintf_r+0x44>
 800bc7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc80:	e71e      	b.n	800bac0 <_vfiprintf_r+0x48>
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4b05      	ldr	r3, [pc, #20]	@ (800bca0 <_vfiprintf_r+0x228>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7fb fce9 	bl	8007664 <_printf_i>
 800bc92:	e7e4      	b.n	800bc5e <_vfiprintf_r+0x1e6>
 800bc94:	0800c143 	.word	0x0800c143
 800bc98:	0800c14d 	.word	0x0800c14d
 800bc9c:	08007135 	.word	0x08007135
 800bca0:	0800ba55 	.word	0x0800ba55
 800bca4:	0800c149 	.word	0x0800c149

0800bca8 <__swbuf_r>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	460e      	mov	r6, r1
 800bcac:	4614      	mov	r4, r2
 800bcae:	4605      	mov	r5, r0
 800bcb0:	b118      	cbz	r0, 800bcba <__swbuf_r+0x12>
 800bcb2:	6a03      	ldr	r3, [r0, #32]
 800bcb4:	b90b      	cbnz	r3, 800bcba <__swbuf_r+0x12>
 800bcb6:	f7fc f88d 	bl	8007dd4 <__sinit>
 800bcba:	69a3      	ldr	r3, [r4, #24]
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	071a      	lsls	r2, r3, #28
 800bcc2:	d501      	bpl.n	800bcc8 <__swbuf_r+0x20>
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	b943      	cbnz	r3, 800bcda <__swbuf_r+0x32>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f000 f82a 	bl	800bd24 <__swsetup_r>
 800bcd0:	b118      	cbz	r0, 800bcda <__swbuf_r+0x32>
 800bcd2:	f04f 37ff 	mov.w	r7, #4294967295
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	6922      	ldr	r2, [r4, #16]
 800bcde:	1a98      	subs	r0, r3, r2
 800bce0:	6963      	ldr	r3, [r4, #20]
 800bce2:	b2f6      	uxtb	r6, r6
 800bce4:	4283      	cmp	r3, r0
 800bce6:	4637      	mov	r7, r6
 800bce8:	dc05      	bgt.n	800bcf6 <__swbuf_r+0x4e>
 800bcea:	4621      	mov	r1, r4
 800bcec:	4628      	mov	r0, r5
 800bcee:	f7ff f973 	bl	800afd8 <_fflush_r>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d1ed      	bne.n	800bcd2 <__swbuf_r+0x2a>
 800bcf6:	68a3      	ldr	r3, [r4, #8]
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	60a3      	str	r3, [r4, #8]
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	6022      	str	r2, [r4, #0]
 800bd02:	701e      	strb	r6, [r3, #0]
 800bd04:	6962      	ldr	r2, [r4, #20]
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d004      	beq.n	800bd16 <__swbuf_r+0x6e>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	07db      	lsls	r3, r3, #31
 800bd10:	d5e1      	bpl.n	800bcd6 <__swbuf_r+0x2e>
 800bd12:	2e0a      	cmp	r6, #10
 800bd14:	d1df      	bne.n	800bcd6 <__swbuf_r+0x2e>
 800bd16:	4621      	mov	r1, r4
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f7ff f95d 	bl	800afd8 <_fflush_r>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d0d9      	beq.n	800bcd6 <__swbuf_r+0x2e>
 800bd22:	e7d6      	b.n	800bcd2 <__swbuf_r+0x2a>

0800bd24 <__swsetup_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	4b29      	ldr	r3, [pc, #164]	@ (800bdcc <__swsetup_r+0xa8>)
 800bd28:	4605      	mov	r5, r0
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	b118      	cbz	r0, 800bd38 <__swsetup_r+0x14>
 800bd30:	6a03      	ldr	r3, [r0, #32]
 800bd32:	b90b      	cbnz	r3, 800bd38 <__swsetup_r+0x14>
 800bd34:	f7fc f84e 	bl	8007dd4 <__sinit>
 800bd38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3c:	0719      	lsls	r1, r3, #28
 800bd3e:	d422      	bmi.n	800bd86 <__swsetup_r+0x62>
 800bd40:	06da      	lsls	r2, r3, #27
 800bd42:	d407      	bmi.n	800bd54 <__swsetup_r+0x30>
 800bd44:	2209      	movs	r2, #9
 800bd46:	602a      	str	r2, [r5, #0]
 800bd48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd52:	e033      	b.n	800bdbc <__swsetup_r+0x98>
 800bd54:	0758      	lsls	r0, r3, #29
 800bd56:	d512      	bpl.n	800bd7e <__swsetup_r+0x5a>
 800bd58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd5a:	b141      	cbz	r1, 800bd6e <__swsetup_r+0x4a>
 800bd5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd60:	4299      	cmp	r1, r3
 800bd62:	d002      	beq.n	800bd6a <__swsetup_r+0x46>
 800bd64:	4628      	mov	r0, r5
 800bd66:	f7fd f80f 	bl	8008d88 <_free_r>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	2300      	movs	r3, #0
 800bd78:	6063      	str	r3, [r4, #4]
 800bd7a:	6923      	ldr	r3, [r4, #16]
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	f043 0308 	orr.w	r3, r3, #8
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	b94b      	cbnz	r3, 800bd9e <__swsetup_r+0x7a>
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd94:	d003      	beq.n	800bd9e <__swsetup_r+0x7a>
 800bd96:	4621      	mov	r1, r4
 800bd98:	4628      	mov	r0, r5
 800bd9a:	f000 f883 	bl	800bea4 <__smakebuf_r>
 800bd9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda2:	f013 0201 	ands.w	r2, r3, #1
 800bda6:	d00a      	beq.n	800bdbe <__swsetup_r+0x9a>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	60a2      	str	r2, [r4, #8]
 800bdac:	6962      	ldr	r2, [r4, #20]
 800bdae:	4252      	negs	r2, r2
 800bdb0:	61a2      	str	r2, [r4, #24]
 800bdb2:	6922      	ldr	r2, [r4, #16]
 800bdb4:	b942      	cbnz	r2, 800bdc8 <__swsetup_r+0xa4>
 800bdb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bdba:	d1c5      	bne.n	800bd48 <__swsetup_r+0x24>
 800bdbc:	bd38      	pop	{r3, r4, r5, pc}
 800bdbe:	0799      	lsls	r1, r3, #30
 800bdc0:	bf58      	it	pl
 800bdc2:	6962      	ldrpl	r2, [r4, #20]
 800bdc4:	60a2      	str	r2, [r4, #8]
 800bdc6:	e7f4      	b.n	800bdb2 <__swsetup_r+0x8e>
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e7f7      	b.n	800bdbc <__swsetup_r+0x98>
 800bdcc:	2000101c 	.word	0x2000101c

0800bdd0 <_raise_r>:
 800bdd0:	291f      	cmp	r1, #31
 800bdd2:	b538      	push	{r3, r4, r5, lr}
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	d904      	bls.n	800bde4 <_raise_r+0x14>
 800bdda:	2316      	movs	r3, #22
 800bddc:	6003      	str	r3, [r0, #0]
 800bdde:	f04f 30ff 	mov.w	r0, #4294967295
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bde6:	b112      	cbz	r2, 800bdee <_raise_r+0x1e>
 800bde8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdec:	b94b      	cbnz	r3, 800be02 <_raise_r+0x32>
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f000 f830 	bl	800be54 <_getpid_r>
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdfe:	f000 b817 	b.w	800be30 <_kill_r>
 800be02:	2b01      	cmp	r3, #1
 800be04:	d00a      	beq.n	800be1c <_raise_r+0x4c>
 800be06:	1c59      	adds	r1, r3, #1
 800be08:	d103      	bne.n	800be12 <_raise_r+0x42>
 800be0a:	2316      	movs	r3, #22
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	2001      	movs	r0, #1
 800be10:	e7e7      	b.n	800bde2 <_raise_r+0x12>
 800be12:	2100      	movs	r1, #0
 800be14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be18:	4620      	mov	r0, r4
 800be1a:	4798      	blx	r3
 800be1c:	2000      	movs	r0, #0
 800be1e:	e7e0      	b.n	800bde2 <_raise_r+0x12>

0800be20 <raise>:
 800be20:	4b02      	ldr	r3, [pc, #8]	@ (800be2c <raise+0xc>)
 800be22:	4601      	mov	r1, r0
 800be24:	6818      	ldr	r0, [r3, #0]
 800be26:	f7ff bfd3 	b.w	800bdd0 <_raise_r>
 800be2a:	bf00      	nop
 800be2c:	2000101c 	.word	0x2000101c

0800be30 <_kill_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	@ (800be50 <_kill_r+0x20>)
 800be34:	2300      	movs	r3, #0
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	4611      	mov	r1, r2
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	f7f6 ff9d 	bl	8002d7c <_kill>
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	d102      	bne.n	800be4c <_kill_r+0x1c>
 800be46:	682b      	ldr	r3, [r5, #0]
 800be48:	b103      	cbz	r3, 800be4c <_kill_r+0x1c>
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	bf00      	nop
 800be50:	200019e8 	.word	0x200019e8

0800be54 <_getpid_r>:
 800be54:	f7f6 bf8a 	b.w	8002d6c <_getpid>

0800be58 <__swhatbuf_r>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	460c      	mov	r4, r1
 800be5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be60:	2900      	cmp	r1, #0
 800be62:	b096      	sub	sp, #88	@ 0x58
 800be64:	4615      	mov	r5, r2
 800be66:	461e      	mov	r6, r3
 800be68:	da0d      	bge.n	800be86 <__swhatbuf_r+0x2e>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be70:	f04f 0100 	mov.w	r1, #0
 800be74:	bf14      	ite	ne
 800be76:	2340      	movne	r3, #64	@ 0x40
 800be78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be7c:	2000      	movs	r0, #0
 800be7e:	6031      	str	r1, [r6, #0]
 800be80:	602b      	str	r3, [r5, #0]
 800be82:	b016      	add	sp, #88	@ 0x58
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	466a      	mov	r2, sp
 800be88:	f000 f848 	bl	800bf1c <_fstat_r>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	dbec      	blt.n	800be6a <__swhatbuf_r+0x12>
 800be90:	9901      	ldr	r1, [sp, #4]
 800be92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be9a:	4259      	negs	r1, r3
 800be9c:	4159      	adcs	r1, r3
 800be9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bea2:	e7eb      	b.n	800be7c <__swhatbuf_r+0x24>

0800bea4 <__smakebuf_r>:
 800bea4:	898b      	ldrh	r3, [r1, #12]
 800bea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bea8:	079d      	lsls	r5, r3, #30
 800beaa:	4606      	mov	r6, r0
 800beac:	460c      	mov	r4, r1
 800beae:	d507      	bpl.n	800bec0 <__smakebuf_r+0x1c>
 800beb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	2301      	movs	r3, #1
 800beba:	6163      	str	r3, [r4, #20]
 800bebc:	b003      	add	sp, #12
 800bebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec0:	ab01      	add	r3, sp, #4
 800bec2:	466a      	mov	r2, sp
 800bec4:	f7ff ffc8 	bl	800be58 <__swhatbuf_r>
 800bec8:	9f00      	ldr	r7, [sp, #0]
 800beca:	4605      	mov	r5, r0
 800becc:	4639      	mov	r1, r7
 800bece:	4630      	mov	r0, r6
 800bed0:	f7fc ffce 	bl	8008e70 <_malloc_r>
 800bed4:	b948      	cbnz	r0, 800beea <__smakebuf_r+0x46>
 800bed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beda:	059a      	lsls	r2, r3, #22
 800bedc:	d4ee      	bmi.n	800bebc <__smakebuf_r+0x18>
 800bede:	f023 0303 	bic.w	r3, r3, #3
 800bee2:	f043 0302 	orr.w	r3, r3, #2
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	e7e2      	b.n	800beb0 <__smakebuf_r+0xc>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	6020      	str	r0, [r4, #0]
 800beee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	9b01      	ldr	r3, [sp, #4]
 800bef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800befa:	b15b      	cbz	r3, 800bf14 <__smakebuf_r+0x70>
 800befc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f81d 	bl	800bf40 <_isatty_r>
 800bf06:	b128      	cbz	r0, 800bf14 <__smakebuf_r+0x70>
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f023 0303 	bic.w	r3, r3, #3
 800bf0e:	f043 0301 	orr.w	r3, r3, #1
 800bf12:	81a3      	strh	r3, [r4, #12]
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	431d      	orrs	r5, r3
 800bf18:	81a5      	strh	r5, [r4, #12]
 800bf1a:	e7cf      	b.n	800bebc <__smakebuf_r+0x18>

0800bf1c <_fstat_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4d07      	ldr	r5, [pc, #28]	@ (800bf3c <_fstat_r+0x20>)
 800bf20:	2300      	movs	r3, #0
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	4611      	mov	r1, r2
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	f7f6 ff87 	bl	8002e3c <_fstat>
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	d102      	bne.n	800bf38 <_fstat_r+0x1c>
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	b103      	cbz	r3, 800bf38 <_fstat_r+0x1c>
 800bf36:	6023      	str	r3, [r4, #0]
 800bf38:	bd38      	pop	{r3, r4, r5, pc}
 800bf3a:	bf00      	nop
 800bf3c:	200019e8 	.word	0x200019e8

0800bf40 <_isatty_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d06      	ldr	r5, [pc, #24]	@ (800bf5c <_isatty_r+0x1c>)
 800bf44:	2300      	movs	r3, #0
 800bf46:	4604      	mov	r4, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	f7f6 ff86 	bl	8002e5c <_isatty>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_isatty_r+0x1a>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_isatty_r+0x1a>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	200019e8 	.word	0x200019e8

0800bf60 <_init>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr

0800bf6c <_fini>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	bf00      	nop
 800bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf72:	bc08      	pop	{r3}
 800bf74:	469e      	mov	lr, r3
 800bf76:	4770      	bx	lr
