
FFC_Firmware_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800bfd0  0800bfd0  0001bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c534  0800c534  000209dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c53c  0800c53c  000209dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c53c  0800c53c  0001c53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009dc  20000000  0800c544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000209dc  2**0
                  CONTENTS
 10 .bss          000006dc  200009e0  200009e0  000209e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200010bc  200010bc  000209e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000209dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001369e  00000000  00000000  00020a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f6  00000000  00000000  000340aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00036aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f98  00000000  00000000  00037b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259b7  00000000  00000000  00038ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133b6  00000000  00000000  0005e487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dea0b  00000000  00000000  0007183d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150248  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d44  00000000  00000000  00150298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200009e0 	.word	0x200009e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bfb4 	.word	0x0800bfb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200009e4 	.word	0x200009e4
 80001ec:	0800bfb4 	.word	0x0800bfb4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <ADS1220_writeRegister>:
 * ADS1220 driver for STM32 with HAL.
 */

#include "ADS1220.h"
void ADS1220_writeRegister(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t value)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
	uint8_t arr[2] =
	{ ADS1220_WREG | (address << 2), value };
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	b25b      	sxtb	r3, r3
 800102e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2db      	uxtb	r3, r3
	uint8_t arr[2] =
 8001036:	733b      	strb	r3, [r7, #12]
 8001038:	78bb      	ldrb	r3, [r7, #2]
 800103a:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(hspi, arr, 2, 100);
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2202      	movs	r2, #2
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f003 fb6a 	bl	800471e <HAL_SPI_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <ADS1220_readRegister>:

uint8_t ADS1220_readRegister(SPI_HandleTypeDef *hspi, uint8_t address)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af02      	add	r7, sp, #8
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] =
 800105e:	2300      	movs	r3, #0
 8001060:	81bb      	strh	r3, [r7, #12]
	{ 0, 0 };

	uint8_t txd[2] =
	{ (ADS1220_RREG | (address << 2)), 0xFF };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	b25b      	sxtb	r3, r3
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2db      	uxtb	r3, r3
	uint8_t txd[2] =
 8001070:	723b      	strb	r3, [r7, #8]
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	727b      	strb	r3, [r7, #9]

	HAL_SPI_TransmitReceive(hspi, txd, data, 2, 1000); // When doing bidirectional, transmit a dummy byte(0xFF), 2 in total, received register is in [1]
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	f107 0108 	add.w	r1, r7, #8
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2302      	movs	r3, #2
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f003 fd96 	bl	8004bb8 <HAL_SPI_TransmitReceive>
	return data[1];
 800108c:	7b7b      	ldrb	r3, [r7, #13]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <ADS1220_reset>:

void ADS1220_reset(SPI_HandleTypeDef *hspi)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_RESET;
 800109e:	2306      	movs	r3, #6
 80010a0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 80010a2:	f107 010f 	add.w	r1, r7, #15
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f003 fb37 	bl	800471e <HAL_SPI_Transmit>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <ADS1220_init>:

uint8_t ADS1220_init(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	ADS1220_reset(hspi);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffe7 	bl	8001096 <ADS1220_reset>
	HAL_Delay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f001 feef 	bl	8002eac <HAL_Delay>

	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS, r->cfg_reg0);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	2100      	movs	r1, #0
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff9e 	bl	8001018 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	461a      	mov	r2, r3
 80010e2:	2101      	movs	r1, #1
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff97 	bl	8001018 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS, r->cfg_reg2);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	461a      	mov	r2, r3
 80010f0:	2102      	movs	r1, #2
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff90 	bl	8001018 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS, r->cfg_reg3);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	78db      	ldrb	r3, [r3, #3]
 80010fc:	461a      	mov	r2, r3
 80010fe:	2103      	movs	r1, #3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff89 	bl	8001018 <ADS1220_writeRegister>

	uint8_t CR0 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS);
 8001106:	2100      	movs	r1, #0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ffa2 	bl	8001052 <ADS1220_readRegister>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
	uint8_t CR1 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS);
 8001112:	2101      	movs	r1, #1
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff9c 	bl	8001052 <ADS1220_readRegister>
 800111a:	4603      	mov	r3, r0
 800111c:	73bb      	strb	r3, [r7, #14]
	uint8_t CR2 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS);
 800111e:	2102      	movs	r1, #2
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff96 	bl	8001052 <ADS1220_readRegister>
 8001126:	4603      	mov	r3, r0
 8001128:	737b      	strb	r3, [r7, #13]
	uint8_t CR3 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS);
 800112a:	2103      	movs	r1, #3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff90 	bl	8001052 <ADS1220_readRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	733b      	strb	r3, [r7, #12]

	return (CR0 == r->cfg_reg0 && CR1 == r->cfg_reg1 && CR2 == r->cfg_reg2 && CR3 == r->cfg_reg3);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	429a      	cmp	r2, r3
 800113e:	d110      	bne.n	8001162 <ADS1220_init+0xaa>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	7bba      	ldrb	r2, [r7, #14]
 8001146:	429a      	cmp	r2, r3
 8001148:	d10b      	bne.n	8001162 <ADS1220_init+0xaa>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	7b7a      	ldrb	r2, [r7, #13]
 8001150:	429a      	cmp	r2, r3
 8001152:	d106      	bne.n	8001162 <ADS1220_init+0xaa>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	78db      	ldrb	r3, [r3, #3]
 8001158:	7b3a      	ldrb	r2, [r7, #12]
 800115a:	429a      	cmp	r2, r3
 800115c:	d101      	bne.n	8001162 <ADS1220_init+0xaa>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <ADS1220_init+0xac>
 8001162:	2300      	movs	r3, #0
 8001164:	b2db      	uxtb	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <ADS1220_start_conversion>:

void ADS1220_start_conversion(SPI_HandleTypeDef *hspi)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_START;
 8001176:	2308      	movs	r3, #8
 8001178:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 800117a:	f107 010f 	add.w	r1, r7, #15
 800117e:	2364      	movs	r3, #100	; 0x64
 8001180:	2201      	movs	r2, #1
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f003 facb 	bl	800471e <HAL_SPI_Transmit>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <ADS1220_set_conv_mode_single_shot>:
	r->cfg_reg1 |= _BV(2);
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
}

void ADS1220_set_conv_mode_single_shot(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	r->cfg_reg1 &= ~_BV(2);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	f023 0304 	bic.w	r3, r3, #4
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	705a      	strb	r2, [r3, #1]
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2101      	movs	r1, #1
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff31 	bl	8001018 <ADS1220_writeRegister>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ADS1220_read_blocking>:

	return cfgbuf;
}

int32_t ADS1220_read_blocking(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, uint16_t timeout) // Timeout should be at least as long as sampletime+some clock cycles, obviously
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	460b      	mov	r3, r1
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	4613      	mov	r3, r2
 80011d4:	80bb      	strh	r3, [r7, #4]
	uint8_t SPIbuf[3] = {0};
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <ADS1220_read_blocking+0x94>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	823b      	strh	r3, [r7, #16]
 80011dc:	2300      	movs	r3, #0
 80011de:	74bb      	strb	r3, [r7, #18]
	int32_t result32 = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
	long int bit24;

	uint32_t maxTime = HAL_GetTick() + timeout;
 80011e4:	f001 fe56 	bl	8002e94 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	88bb      	ldrh	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]

	while (HAL_GPIO_ReadPin(DRDY_PORT, DRDY_PIN) == GPIO_PIN_SET)
 80011f0:	e00a      	b.n	8001208 <ADS1220_read_blocking+0x48>
	{
		if (HAL_GetTick() >= maxTime){
 80011f2:	f001 fe4f 	bl	8002e94 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d804      	bhi.n	8001208 <ADS1220_read_blocking+0x48>
			HAL_Delay(200);
 80011fe:	20c8      	movs	r0, #200	; 0xc8
 8001200:	f001 fe54 	bl	8002eac <HAL_Delay>
			return 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e021      	b.n	800124c <ADS1220_read_blocking+0x8c>
	while (HAL_GPIO_ReadPin(DRDY_PORT, DRDY_PIN) == GPIO_PIN_SET)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	4619      	mov	r1, r3
 800120c:	68b8      	ldr	r0, [r7, #8]
 800120e:	f002 fd01 	bl	8003c14 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d0ec      	beq.n	80011f2 <ADS1220_read_blocking+0x32>
		}
	}

	HAL_SPI_Receive(hspi, SPIbuf, 3, 100);
 8001218:	f107 0110 	add.w	r1, r7, #16
 800121c:	2364      	movs	r3, #100	; 0x64
 800121e:	2203      	movs	r2, #3
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f003 fbb8 	bl	8004996 <HAL_SPI_Receive>

	bit24 = SPIbuf[0];
 8001226:	7c3b      	ldrb	r3, [r7, #16]
 8001228:	617b      	str	r3, [r7, #20]
	bit24 = (bit24 << 8) | SPIbuf[1];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	7c7a      	ldrb	r2, [r7, #17]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
	bit24 = (bit24 << 8) | SPIbuf[2]; //Converting 3 bytes to a 24 bit int
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	7cba      	ldrb	r2, [r7, #18]
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]

	bit24 = (bit24 << 8);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	617b      	str	r3, [r7, #20]
	result32 = (bit24 >> 8); //Converting 24 bit two's complement to 32 bit two's complement
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	121b      	asrs	r3, r3, #8
 8001248:	61fb      	str	r3, [r7, #28]

	return result32;
 800124a:	69fb      	ldr	r3, [r7, #28]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800bfd0 	.word	0x0800bfd0

08001258 <ADS1220_read_singleshot>:

int32_t ADS1220_read_singleshot(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, uint16_t timeout)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	460b      	mov	r3, r1
 8001268:	80fb      	strh	r3, [r7, #6]
 800126a:	4613      	mov	r3, r2
 800126c:	80bb      	strh	r3, [r7, #4]
	ADS1220_start_conversion(hspi);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff ff7d 	bl	800116e <ADS1220_start_conversion>

	return ADS1220_read_blocking(hspi, DRDY_PORT, DRDY_PIN, timeout);
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	88fa      	ldrh	r2, [r7, #6]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff ffa0 	bl	80011c0 <ADS1220_read_blocking>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <Compute_PI>:
 *
 * */


//https://uk.mathworks.com/help/sps/ref/discretepicontroller.html
float Compute_PI(piCon_t *con, float setpoint, float input){
 800128c:	b480      	push	{r7}
 800128e:	b08b      	sub	sp, #44	; 0x2c
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	ed87 0a02 	vstr	s0, [r7, #8]
 8001298:	edc7 0a01 	vstr	s1, [r7, #4]

	float dt = (float)con->dt / 1000000;	// Convert dt to (s)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012a8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001368 <Compute_PI+0xdc>
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Calculate the error term
    float error = setpoint - input;
 80012b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c0:	edc7 7a08 	vstr	s15, [r7, #32]

    // Calculate the integral term
    float temp_iTerm = con->iTerm + (con->ki * dt * error);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	ed93 7a05 	vldr	s14, [r3, #20]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80012d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e4:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate the output
    float u = (con->kp * error) + con->iTerm;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80012f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	edc7 7a06 	vstr	s15, [r7, #24]

    // Saturate the output
    float u_sat = CONSTRAIN( u, con->outMin, con->outMax );
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	edd3 7a04 	vldr	s15, [r3, #16]
 800130a:	ed97 7a06 	vldr	s14, [r7, #24]
 800130e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	d502      	bpl.n	800131e <Compute_PI+0x92>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	e00d      	b.n	800133a <Compute_PI+0xae>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	edd3 7a03 	vldr	s15, [r3, #12]
 8001324:	ed97 7a06 	vldr	s14, [r7, #24]
 8001328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dd02      	ble.n	8001338 <Compute_PI+0xac>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	e000      	b.n	800133a <Compute_PI+0xae>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	617b      	str	r3, [r7, #20]

    if(u_sat == u) con->iTerm = temp_iTerm; 	// If output clipping, do not update controller iTerm
 800133c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001340:	edd7 7a06 	vldr	s15, [r7, #24]
 8001344:	eeb4 7a67 	vcmp.f32	s14, s15
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d102      	bne.n	8001354 <Compute_PI+0xc8>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	615a      	str	r2, [r3, #20]

    return u_sat;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	ee07 3a90 	vmov	s15, r3

}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	372c      	adds	r7, #44	; 0x2c
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	49742400 	.word	0x49742400
 800136c:	00000000 	.word	0x00000000

08001370 <refModel_Tick>:
/*
 * Mass-spring-damper model with stick/slip friction
 * Compute system status for a given input force and position
 */

void refModel_Tick(rMod_t *mod, double iForce, double iPosition){
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
 8001376:	6178      	str	r0, [r7, #20]
 8001378:	ed87 0b02 	vstr	d0, [r7, #8]
 800137c:	ed87 1b00 	vstr	d1, [r7]

	double frictionForce = 0;
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint8_t stuck = 0;			/* = 1 when velocity is under dynamic friction velocity threshold (dfv) */
 800138c:	2300      	movs	r3, #0
 800138e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	double dt = (double)mod->dt / 1000000;	// Convert dt to (s)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8c4 	bl	8000524 <__aeabi_ui2d>
 800139c:	a3fa      	add	r3, pc, #1000	; (adr r3, 8001788 <refModel_Tick+0x418>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff fa63 	bl	800086c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Compute ref Velocity
	mod->vel = mod->vel_1 + (dt * mod->acc_1);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80013ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013be:	f7ff f92b 	bl	8000618 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7fe ff6f 	bl	80002ac <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	6979      	ldr	r1, [r7, #20]
 80013d4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	// Limit Velocity Hard Stops
	mod->vSaturated = 0;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	if(mod->vel > mod->velMaxLim){
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8bc 	bl	8000568 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fb9e 	bl	8000b38 <__aeabi_dcmpgt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00d      	beq.n	800141e <refModel_Tick+0xae>

		mod->vel = mod->velMaxLim;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8ae 	bl	8000568 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	6979      	ldr	r1, [r7, #20]
 8001412:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->vSaturated = 1;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}

	if(mod->vel < mod->velMinLim){
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f89d 	bl	8000568 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff fb61 	bl	8000afc <__aeabi_dcmplt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00d      	beq.n	800145c <refModel_Tick+0xec>

		mod->vel = mod->velMinLim;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f88f 	bl	8000568 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	6979      	ldr	r1, [r7, #20]
 8001450:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->vSaturated = 1;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}

	// Compute ref Position
	mod->pos = mod->pos_1 + (dt * mod->vel);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800146c:	f7ff f8d4 	bl	8000618 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff18 	bl	80002ac <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	6979      	ldr	r1, [r7, #20]
 8001482:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	// Limit position Hard Stops
	mod->pSaturated = 0;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	
	if(mod->pos >= mod->posMaxLim){
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f865 	bl	8000568 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7ff fb3d 	bl	8000b24 <__aeabi_dcmpge>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d014      	beq.n	80014da <refModel_Tick+0x16a>

		mod->pos = mod->posMaxLim;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f857 	bl	8000568 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		mod->vel = 0;
 80014c4:	6979      	ldr	r1, [r7, #20]
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->pSaturated = 1;		
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	if(mod->pos <= mod->posMinLim){
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f83f 	bl	8000568 <__aeabi_f2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4620      	mov	r0, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	f7ff fb0d 	bl	8000b10 <__aeabi_dcmple>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d014      	beq.n	8001526 <refModel_Tick+0x1b6>

		mod->pos = mod->posMinLim;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f831 	bl	8000568 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	6979      	ldr	r1, [r7, #20]
 800150c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		mod->vel = 0;
 8001510:	6979      	ldr	r1, [r7, #20]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->pSaturated = 1;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	/* Calculate forces relative to the position of the system */
	double springForce = interpolate_force(mod, mod->pos);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800152c:	eeb0 0a47 	vmov.f32	s0, s14
 8001530:	eef0 0a67 	vmov.f32	s1, s15
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f000 f92b 	bl	8001790 <interpolate_force>
 800153a:	ee10 3a10 	vmov	r3, s0
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f812 	bl	8000568 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
//	double springForce = (mod->k * mod->pos);

	/* Calculate damping force */
	double dampingForce = (mod->c * mod->vel);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f809 	bl	8000568 <__aeabi_f2d>
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800155c:	f7ff f85c 	bl	8000618 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	/* Friction Model --------------------------------------------------------------------------------*/
	// F = u * N -> where N is the Normal force between the moving object and the sliding surface.

	/* Velocity - Hit crossing (threshold) */
	if( mod->vel < mod->dfv && mod->vel > (-mod->dfv)) stuck = 1;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fff8 	bl	8000568 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7ff fabc 	bl	8000afc <__aeabi_dcmplt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d018      	beq.n	80015bc <refModel_Tick+0x24c>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001596:	eef1 7a67 	vneg.f32	s15, s15
 800159a:	ee17 3a90 	vmov	r3, s15
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffe2 	bl	8000568 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7ff fac4 	bl	8000b38 <__aeabi_dcmpgt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <refModel_Tick+0x24c>
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if(stuck){
 80015bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d05f      	beq.n	8001684 <refModel_Tick+0x314>

		int8_t sign = ((iForce - springForce) > 0) ? 1 : -1; 	// Get the sign of the applied force (input-spring)
 80015c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015cc:	f7fe fe6c 	bl	80002a8 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f7ff faaa 	bl	8000b38 <__aeabi_dcmpgt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <refModel_Tick+0x27e>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e001      	b.n	80015f2 <refModel_Tick+0x282>
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		double modForce = fabs(iForce - springForce);			// Get the module of the applied force
 80015f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015fe:	f7fe fe53 	bl	80002a8 <__aeabi_dsub>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4611      	mov	r1, r2
 8001608:	61b9      	str	r1, [r7, #24]
 800160a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800160e:	61fb      	str	r3, [r7, #28]

		/* Choose the smallest force: [applied force] Vs [Static Friction] */
		frictionForce = (modForce < (mod->us * mod->N)) ? (sign) * modForce : (sign) * (mod->us * mod->N);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	ed93 7a06 	vldr	s14, [r3, #24]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	edd3 7a08 	vldr	s15, [r3, #32]
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	ee17 0a90 	vmov	r0, s15
 8001624:	f7fe ffa0 	bl	8000568 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001630:	f7ff fa64 	bl	8000afc <__aeabi_dcmplt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <refModel_Tick+0x2e2>
 800163a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff80 	bl	8000544 <__aeabi_i2d>
 8001644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001648:	f7fe ffe6 	bl	8000618 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e015      	b.n	800167e <refModel_Tick+0x30e>
 8001652:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	edd3 6a06 	vldr	s13, [r3, #24]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	edd3 7a08 	vldr	s15, [r3, #32]
 800166a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	ee17 0a90 	vmov	r0, s15
 8001676:	f7fe ff77 	bl	8000568 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001682:	e029      	b.n	80016d8 <refModel_Tick+0x368>

	}else{

		int8_t sign = (mod->vel > 0) ? 1 : -1;					// Get the sign of the velocity
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	f7ff fa51 	bl	8000b38 <__aeabi_dcmpgt>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <refModel_Tick+0x330>
 800169c:	2301      	movs	r3, #1
 800169e:	e001      	b.n	80016a4 <refModel_Tick+0x334>
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		frictionForce = (sign) * (mod->ud * mod->N);			// Calculate dynamic friction
 80016a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	edd3 6a07 	vldr	s13, [r3, #28]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80016c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c8:	ee17 0a90 	vmov	r0, s15
 80016cc:	f7fe ff4c 	bl	8000568 <__aeabi_f2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	/*------------------------------------------------------------------------------------------------*/

	 if(mod->pos > mod->posMaxLim){ /* Just for debugging - Remove if not used */
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff40 	bl	8000568 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f7ff fa22 	bl	8000b38 <__aeabi_dcmpgt>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d000      	beq.n	80016fc <refModel_Tick+0x38c>
		 asm("NOP");
 80016fa:	bf00      	nop
	/* Do I want to have mass dependent to the position? for instance I could emulate backslash */
	/* Do I want to have damping and friction dependent to the position? emulate different surfaces? */
	/* In a two axis controller the forces relatives to position will depend on a 2 dimensional array */

	// Compute ref Acceleration ->  ∑F = m * a
	mod->acc = ((1 / (mod->m)) * (iForce - dampingForce - frictionForce - springForce ));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001706:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800170a:	ee16 0a90 	vmov	r0, s13
 800170e:	f7fe ff2b 	bl	8000568 <__aeabi_f2d>
 8001712:	4604      	mov	r4, r0
 8001714:	460d      	mov	r5, r1
 8001716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800171a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800171e:	f7fe fdc3 	bl	80002a8 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800172e:	f7fe fdbb 	bl	80002a8 <__aeabi_dsub>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800173e:	f7fe fdb3 	bl	80002a8 <__aeabi_dsub>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe ff65 	bl	8000618 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Store previous values
	mod->pos_1 = mod->pos;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	mod->vel_1 = mod->vel;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800176a:	6979      	ldr	r1, [r7, #20]
 800176c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	mod->acc_1 = mod->acc;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001776:	6979      	ldr	r1, [r7, #20]
 8001778:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

}
 800177c:	bf00      	nop
 800177e:	3750      	adds	r7, #80	; 0x50
 8001780:	46bd      	mov	sp, r7
 8001782:	bdb0      	pop	{r4, r5, r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	412e8480 	.word	0x412e8480

08001790 <interpolate_force>:
 * Linear Interpolation (y) = y1 + [(x-x1) × (y2-y1)]/ (x2-x1)
 * Where (x1,y1) & (x2,y2) are coordinates
 * x is the point to perform interpolation
 * y is the interpolated value.
 * */
static float interpolate_force(rMod_t *mod, double x){
 8001790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001794:	b088      	sub	sp, #32
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	ed87 0b00 	vstr	d0, [r7]

	if(!mod->cMap_size) 	return 0; // Empty vector
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <interpolate_force+0x1c>
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e0c5      	b.n	8001938 <interpolate_force+0x1a8>
	if(mod->cMap == NULL) 	return 0; // No vector defined
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <interpolate_force+0x2a>
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e0be      	b.n	8001938 <interpolate_force+0x1a8>

	cMap_1d_t* cMap = (cMap_1d_t*)mod->cMap;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
	uint8_t last = mod->cMap_size - 1;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	75fb      	strb	r3, [r7, #23]

	/* if pos < min known value > saturate */
	if(x < cMap[0].x)				return cMap[0].f;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fecb 	bl	8000568 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017da:	f7ff f98f 	bl	8000afc <__aeabi_dcmplt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <interpolate_force+0x5a>
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	e0a6      	b.n	8001938 <interpolate_force+0x1a8>

	/* if pos > max known value > saturate */
	else if(x > cMap[last].x)		return cMap[last].f;
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe feb7 	bl	8000568 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001802:	f7ff f999 	bl	8000b38 <__aeabi_dcmpgt>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <interpolate_force+0x88>
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4413      	add	r3, r2
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	e08f      	b.n	8001938 <interpolate_force+0x1a8>

	/* otherwise find the adjacent upper and lower points in the array to interpolate */
	for(int i=0; i<last; i++){
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	e085      	b.n	800192a <interpolate_force+0x19a>

		if( cMap[i].x <= x && cMap[i+1].x >= x)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe9d 	bl	8000568 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001836:	f7ff f975 	bl	8000b24 <__aeabi_dcmpge>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d071      	beq.n	8001924 <interpolate_force+0x194>
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4413      	add	r3, r2
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe8b 	bl	8000568 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185a:	f7ff f959 	bl	8000b10 <__aeabi_dcmple>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d05f      	beq.n	8001924 <interpolate_force+0x194>
			return  cMap[i].f + ((x - cMap[i].x) * (cMap[i+1].f - cMap[i].f)) / (cMap[i+1].x - cMap[i].x);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4413      	add	r3, r2
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe7a 	bl	8000568 <__aeabi_f2d>
 8001874:	4604      	mov	r4, r0
 8001876:	460d      	mov	r5, r1
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4413      	add	r3, r2
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe70 	bl	8000568 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001890:	f7fe fd0a 	bl	80002a8 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4690      	mov	r8, r2
 800189a:	4699      	mov	r9, r3
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4413      	add	r3, r2
 80018a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4413      	add	r3, r2
 80018b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe53 	bl	8000568 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4640      	mov	r0, r8
 80018c8:	4649      	mov	r1, r9
 80018ca:	f7fe fea5 	bl	8000618 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4690      	mov	r8, r2
 80018d4:	4699      	mov	r9, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4413      	add	r3, r2
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4413      	add	r3, r2
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	ee17 0a90 	vmov	r0, s15
 80018f8:	f7fe fe36 	bl	8000568 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4640      	mov	r0, r8
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe ffb2 	bl	800086c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fccc 	bl	80002ac <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f974 	bl	8000c08 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	e009      	b.n	8001938 <interpolate_force+0x1a8>
	for(int i=0; i<last; i++){
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3301      	adds	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	429a      	cmp	r2, r3
 8001930:	f6ff af75 	blt.w	800181e <interpolate_force+0x8e>

	}

	return 0; /* The program should never reach this line */
 8001934:	f04f 0300 	mov.w	r3, #0
}
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001948 <StepCon_GetPosition>:

static uint16_t stepLimit = 0; // anti-stall, prevents the motor running if the refModel is not ticking.


/* Returns actuator position in mm */
float StepCon_GetPosition(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

	return MotorPos;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <StepCon_GetPosition+0x20>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f957 	bl	8000c08 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	ee07 3a90 	vmov	s15, r3
}
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000a08 	.word	0x20000a08
 800196c:	00000000 	.word	0x00000000

08001970 <StepCon_Speed>:

// set linear actuator to a speed of speed mm/s
void StepCon_Speed(float speed){
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	ed87 0a01 	vstr	s0, [r7, #4]

	if (speed < 0.0001 && speed > -0.0001) pulseTime = 0; // Dead band
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7fe fdf4 	bl	8000568 <__aeabi_f2d>
 8001980:	a337      	add	r3, pc, #220	; (adr r3, 8001a60 <StepCon_Speed+0xf0>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7ff f8b9 	bl	8000afc <__aeabi_dcmplt>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00e      	beq.n	80019ae <StepCon_Speed+0x3e>
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7fe fde9 	bl	8000568 <__aeabi_f2d>
 8001996:	a334      	add	r3, pc, #208	; (adr r3, 8001a68 <StepCon_Speed+0xf8>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7ff f8cc 	bl	8000b38 <__aeabi_dcmpgt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <StepCon_Speed+0x3e>
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <StepCon_Speed+0xd0>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	e041      	b.n	8001a32 <StepCon_Speed+0xc2>

	else if(speed < 0){
 80019ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	d51d      	bpl.n	80019f8 <StepCon_Speed+0x88>
		dir = 0;
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <StepCon_Speed+0xd4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
		StepCon_CCW; 			// CCW Direction
 80019c2:	2200      	movs	r2, #0
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	4820      	ldr	r0, [pc, #128]	; (8001a48 <StepCon_Speed+0xd8>)
 80019c8:	f002 f93c 	bl	8003c44 <HAL_GPIO_WritePin>
		pulseTime = -1000000/((speed/MM_PER_REV)* MICROSTEP);
 80019cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80019d0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001a4c <StepCon_Speed+0xdc>
 80019d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a50 <StepCon_Speed+0xe0>
 80019dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019e0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001a54 <StepCon_Speed+0xe4>
 80019e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ec:	ee17 3a90 	vmov	r3, s15
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <StepCon_Speed+0xd0>)
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	e01c      	b.n	8001a32 <StepCon_Speed+0xc2>
	}
	else{
		dir = 1;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <StepCon_Speed+0xd4>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
		StepCon_CW; 			// CW Direction
 80019fe:	2201      	movs	r2, #1
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	4811      	ldr	r0, [pc, #68]	; (8001a48 <StepCon_Speed+0xd8>)
 8001a04:	f002 f91e 	bl	8003c44 <HAL_GPIO_WritePin>
		pulseTime = 1000000/((speed/MM_PER_REV)* MICROSTEP);
 8001a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a0c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001a4c <StepCon_Speed+0xdc>
 8001a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a14:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001a50 <StepCon_Speed+0xe0>
 8001a18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a1c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a58 <StepCon_Speed+0xe8>
 8001a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <StepCon_Speed+0xd0>)
 8001a30:	801a      	strh	r2, [r3, #0]
	}

	stepLimit = 0;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <StepCon_Speed+0xec>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	801a      	strh	r2, [r3, #0]

}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200009fc 	.word	0x200009fc
 8001a44:	200009fe 	.word	0x200009fe
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	42200000 	.word	0x42200000
 8001a50:	461c4000 	.word	0x461c4000
 8001a54:	c9742400 	.word	0xc9742400
 8001a58:	49742400 	.word	0x49742400
 8001a5c:	20000a10 	.word	0x20000a10
 8001a60:	eb1c432d 	.word	0xeb1c432d
 8001a64:	3f1a36e2 	.word	0x3f1a36e2
 8001a68:	eb1c432d 	.word	0xeb1c432d
 8001a6c:	bf1a36e2 	.word	0xbf1a36e2

08001a70 <StepCon_pulseTick>:


/*
 * Timer callback routine
 **/
void StepCon_pulseTick(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0



	if(!pulseTime){
 8001a74:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <StepCon_pulseTick+0x100>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <StepCon_pulseTick+0x18>
		__HAL_TIM_SET_COUNTER(&htim2, 1000);
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <StepCon_pulseTick+0x104>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
		return;
 8001a86:	e06e      	b.n	8001b66 <StepCon_pulseTick+0xf6>
	}

	if(pulseTime<4){
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <StepCon_pulseTick+0x100>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d806      	bhi.n	8001a9e <StepCon_pulseTick+0x2e>
		__HAL_TIM_SET_COUNTER(&htim2, 1000);
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <StepCon_pulseTick+0x104>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
		asm("NOP");
 8001a9a:	bf00      	nop
		return;
 8001a9c:	e063      	b.n	8001b66 <StepCon_pulseTick+0xf6>
	}

	__HAL_TIM_SET_COUNTER(&htim2, pulseTime);
 8001a9e:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <StepCon_pulseTick+0x100>)
 8001aa0:	881a      	ldrh	r2, [r3, #0]
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <StepCon_pulseTick+0x104>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <StepCon_pulseTick+0x108>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00a      	beq.n	8001ac6 <StepCon_pulseTick+0x56>
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <StepCon_pulseTick+0x10c>)
 8001ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <StepCon_pulseTick+0x110>)
 8001abc:	f7ff f83c 	bl	8000b38 <__aeabi_dcmpgt>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d14a      	bne.n	8001b5c <StepCon_pulseTick+0xec>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <StepCon_pulseTick+0x108>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <StepCon_pulseTick+0x74>
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <StepCon_pulseTick+0x10c>)
 8001ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <StepCon_pulseTick+0x114>)
 8001ada:	f7ff f80f 	bl	8000afc <__aeabi_dcmplt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d13d      	bne.n	8001b60 <StepCon_pulseTick+0xf0>

	if(stepLimit > 240) return;
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <StepCon_pulseTick+0x118>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	2bf0      	cmp	r3, #240	; 0xf0
 8001aea:	d83b      	bhi.n	8001b64 <StepCon_pulseTick+0xf4>
	stepLimit++;
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <StepCon_pulseTick+0x118>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <StepCon_pulseTick+0x118>)
 8001af6:	801a      	strh	r2, [r3, #0]

	/*Send pulse */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2120      	movs	r1, #32
 8001afc:	4823      	ldr	r0, [pc, #140]	; (8001b8c <StepCon_pulseTick+0x11c>)
 8001afe:	f002 f8a1 	bl	8003c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2120      	movs	r1, #32
 8001b06:	4821      	ldr	r0, [pc, #132]	; (8001b8c <StepCon_pulseTick+0x11c>)
 8001b08:	f002 f89c 	bl	8003c44 <HAL_GPIO_WritePin>

	if(dir) stepCount++;		/* Track how many pulses have been sent to the stepper */
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <StepCon_pulseTick+0x108>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <StepCon_pulseTick+0xb0>
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <StepCon_pulseTick+0x120>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <StepCon_pulseTick+0x120>)
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e004      	b.n	8001b2a <StepCon_pulseTick+0xba>
	else 	stepCount--;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <StepCon_pulseTick+0x120>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <StepCon_pulseTick+0x120>)
 8001b28:	6013      	str	r3, [r2, #0]



	MotorPos = ((double)stepCount / MICROSTEP) * MM_PER_REV;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <StepCon_pulseTick+0x120>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd08 	bl	8000544 <__aeabi_i2d>
 8001b34:	a30c      	add	r3, pc, #48	; (adr r3, 8001b68 <StepCon_pulseTick+0xf8>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fe97 	bl	800086c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <StepCon_pulseTick+0x124>)
 8001b4c:	f7fe fd64 	bl	8000618 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4909      	ldr	r1, [pc, #36]	; (8001b7c <StepCon_pulseTick+0x10c>)
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
 8001b5a:	e004      	b.n	8001b66 <StepCon_pulseTick+0xf6>
	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001b5c:	bf00      	nop
 8001b5e:	e002      	b.n	8001b66 <StepCon_pulseTick+0xf6>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001b60:	bf00      	nop
 8001b62:	e000      	b.n	8001b66 <StepCon_pulseTick+0xf6>
	if(stepLimit > 240) return;
 8001b64:	bf00      	nop
}
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40c38800 	.word	0x40c38800
 8001b70:	200009fc 	.word	0x200009fc
 8001b74:	20000e94 	.word	0x20000e94
 8001b78:	200009fe 	.word	0x200009fe
 8001b7c:	20000a08 	.word	0x20000a08
 8001b80:	405b8000 	.word	0x405b8000
 8001b84:	c05b8000 	.word	0xc05b8000
 8001b88:	20000a10 	.word	0x20000a10
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	20000a00 	.word	0x20000a00
 8001b94:	40440000 	.word	0x40440000

08001b98 <UART1_Init>:

	/*----------------------------*/
}


void UART1_Init(){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

  HAL_UART_Receive_DMA(&huart1, (uint8_t *)UART1_Rx_Buf, UART1_BUF_LEN);  // Initializes DMA for UART1
 8001b9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ba0:	4902      	ldr	r1, [pc, #8]	; (8001bac <UART1_Init+0x14>)
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <UART1_Init+0x18>)
 8001ba4:	f004 f856 	bl	8005c54 <HAL_UART_Receive_DMA>

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000a14 	.word	0x20000a14
 8001bb0:	20000f24 	.word	0x20000f24

08001bb4 <UART1_Handler>:

/*@Brief Gets Commands from UART1 RingBuffer
 *
 */
void UART1_Handler(){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

	static uint8_t UART1_CMD_Buff[300];	/* Command Handler Buffer */
	static uint16_t UART1_cmdPtr = 0;

	while(UART1_DataAvailable()){
 8001bba:	e02a      	b.n	8001c12 <UART1_Handler+0x5e>

		uint8_t aux = UART1_getChar();
 8001bbc:	f000 f8b4 	bl	8001d28 <UART1_getChar>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]

		if(aux == '\n' || aux == '\r' ) { // End Command
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b0a      	cmp	r3, #10
 8001bc8:	d002      	beq.n	8001bd0 <UART1_Handler+0x1c>
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b0d      	cmp	r3, #13
 8001bce:	d10f      	bne.n	8001bf0 <UART1_Handler+0x3c>

				UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <UART1_Handler+0x74>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <UART1_Handler+0x78>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	5453      	strb	r3, [r2, r1]
				UART1_Cmd_Callback(UART1_CMD_Buff, UART1_cmdPtr);
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <UART1_Handler+0x74>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4812      	ldr	r0, [pc, #72]	; (8001c2c <UART1_Handler+0x78>)
 8001be4:	f000 fcbc 	bl	8002560 <UART1_Cmd_Callback>
				UART1_cmdPtr=0;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <UART1_Handler+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	e010      	b.n	8001c12 <UART1_Handler+0x5e>

		}else{             				// Command body

		UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <UART1_Handler+0x74>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <UART1_Handler+0x78>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	5453      	strb	r3, [r2, r1]
		if (UART1_cmdPtr < 299) UART1_cmdPtr++;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <UART1_Handler+0x74>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001c04:	d805      	bhi.n	8001c12 <UART1_Handler+0x5e>
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <UART1_Handler+0x74>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <UART1_Handler+0x74>)
 8001c10:	801a      	strh	r2, [r3, #0]
	while(UART1_DataAvailable()){
 8001c12:	f000 f84b 	bl	8001cac <UART1_DataAvailable>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1cf      	bne.n	8001bbc <UART1_Handler+0x8>

		}
	}
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000c0c 	.word	0x20000c0c
 8001c2c:	20000c10 	.word	0x20000c10

08001c30 <UART1_printf>:

void UART1_printf(const char *fmt, ...){
 8001c30:	b40f      	push	{r0, r1, r2, r3}
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0

	static char tempBuff[256];

	memset(tempBuff, 0, 256);
 8001c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	480e      	ldr	r0, [pc, #56]	; (8001c78 <UART1_printf+0x48>)
 8001c40:	f005 f8e6 	bl	8006e10 <memset>
	va_list arg;

	va_start (arg, fmt);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	607b      	str	r3, [r7, #4]
	vsprintf(tempBuff,fmt, arg);
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	480a      	ldr	r0, [pc, #40]	; (8001c78 <UART1_printf+0x48>)
 8001c50:	f006 fed0 	bl	80089f4 <vsiprintf>
	va_end (arg);

	//HAL_UART_Transmit(&huart1, (const uint8_t*)tempBuff, strlen(tempBuff), 0xff); /* Transmit over uart */
	HAL_UART_Transmit_IT(&huart1, (const uint8_t*)tempBuff, strlen(tempBuff)); /* Transmit over uart */
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <UART1_printf+0x48>)
 8001c56:	f7fe facb 	bl	80001f0 <strlen>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4905      	ldr	r1, [pc, #20]	; (8001c78 <UART1_printf+0x48>)
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <UART1_printf+0x4c>)
 8001c64:	f003 ffb1 	bl	8005bca <HAL_UART_Transmit_IT>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c72:	b004      	add	sp, #16
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000d3c 	.word	0x20000d3c
 8001c7c:	20000f24 	.word	0x20000f24

08001c80 <HAL_UART_RxCpltCallback>:

//  HAL_UART_Receive_DMA(&huart2, (uint8_t *)GPS_Rx_Buf, GPS_BUF_LEN);  // Initializes DMA for GPS
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

    if(huart == &huart1){
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_UART_RxCpltCallback+0x24>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d102      	bne.n	8001c96 <HAL_UART_RxCpltCallback+0x16>
      UART1_DMA_Ovrn = 1;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_UART_RxCpltCallback+0x28>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
    }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000f24 	.word	0x20000f24
 8001ca8:	20000c08 	.word	0x20000c08

08001cac <UART1_DataAvailable>:

static uint8_t UART1_DataAvailable() {
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  if (((UART1_oPtr < UART1_iPtr) && !UART1_DMA_Ovrn) || ((UART1_oPtr > UART1_iPtr) && UART1_DMA_Ovrn)) {
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <UART1_DataAvailable+0x70>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <UART1_DataAvailable+0x74>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d203      	bcs.n	8001ccc <UART1_DataAvailable+0x20>
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <UART1_DataAvailable+0x78>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <UART1_DataAvailable+0x3c>
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <UART1_DataAvailable+0x70>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <UART1_DataAvailable+0x74>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d905      	bls.n	8001cec <UART1_DataAvailable+0x40>
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <UART1_DataAvailable+0x78>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <UART1_DataAvailable+0x40>
    return 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e012      	b.n	8001d12 <UART1_DataAvailable+0x66>
  } else if (UART1_DMA_Ovrn){
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <UART1_DataAvailable+0x78>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <UART1_DataAvailable+0x64>
    UART1_oPtr = UART1_iPtr;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <UART1_DataAvailable+0x74>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <UART1_DataAvailable+0x70>)
 8001d04:	801a      	strh	r2, [r3, #0]
    UART1_DMA_Ovrn = 0;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <UART1_DataAvailable+0x78>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <UART1_DataAvailable+0x66>
  }
  return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000c0a 	.word	0x20000c0a
 8001d20:	20000f68 	.word	0x20000f68
 8001d24:	20000c08 	.word	0x20000c08

08001d28 <UART1_getChar>:

static uint8_t UART1_getChar() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if (UART1_DataAvailable()) {
 8001d32:	f7ff ffbb 	bl	8001cac <UART1_DataAvailable>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d014      	beq.n	8001d66 <UART1_getChar+0x3e>
    ch = UART1_Rx_Buf[UART1_oPtr++];
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <UART1_getChar+0x48>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	b291      	uxth	r1, r2
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <UART1_getChar+0x48>)
 8001d46:	8011      	strh	r1, [r2, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <UART1_getChar+0x4c>)
 8001d4c:	5c9b      	ldrb	r3, [r3, r2]
 8001d4e:	71fb      	strb	r3, [r7, #7]
    if (UART1_oPtr >= UART1_BUF_LEN) {
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <UART1_getChar+0x48>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d58:	d305      	bcc.n	8001d66 <UART1_getChar+0x3e>
      UART1_oPtr = 0;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <UART1_getChar+0x48>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
      UART1_DMA_Ovrn = 0;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <UART1_getChar+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
    }
  }
  return ch;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000c0a 	.word	0x20000c0a
 8001d74:	20000a14 	.word	0x20000a14
 8001d78:	20000c08 	.word	0x20000c08

08001d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d82:	f001 f851 	bl	8002e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d86:	f000 f98f 	bl	80020a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8a:	f000 fb13 	bl	80023b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d8e:	f000 faf1 	bl	8002374 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d92:	f000 fac5 	bl	8002320 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001d96:	f000 fa29 	bl	80021ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d9a:	f000 fa73 	bl	8002284 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001d9e:	f000 f9ef 	bl	8002180 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001da2:	48a8      	ldr	r0, [pc, #672]	; (8002044 <main+0x2c8>)
 8001da4:	f003 fa2a 	bl	80051fc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001da8:	48a7      	ldr	r0, [pc, #668]	; (8002048 <main+0x2cc>)
 8001daa:	f003 fa8f 	bl	80052cc <HAL_TIM_Base_Start_IT>
  UART1_Init();
 8001dae:	f7ff fef3 	bl	8001b98 <UART1_Init>
//  ADS1220_set_conv_mode_continuous(&hspi1, &regs);
//  ADS1220_set_voltage_ref(&hspi1, ADS1220_VREF_EXT_REF_1, &regs);
//  ADS1220_enable_PSW(&hspi1, &regs);
//  ADS1220_get_config(&hspi1, &regs);

  ADS1220_regs regs = { 0x3E, 0xD4, 0x88, 0x00 };
 8001db2:	4ba6      	ldr	r3, [pc, #664]	; (800204c <main+0x2d0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	607b      	str	r3, [r7, #4]
  ADS1220_init(&hspi1, &regs); // Optionally check for failure
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	48a4      	ldr	r0, [pc, #656]	; (8002050 <main+0x2d4>)
 8001dbe:	f7ff f97b 	bl	80010b8 <ADS1220_init>
  ADS1220_set_conv_mode_single_shot(&hspi1, &regs);
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	48a2      	ldr	r0, [pc, #648]	; (8002050 <main+0x2d4>)
 8001dc8:	f7ff f9e2 	bl	8001190 <ADS1220_set_conv_mode_single_shot>
  //ADS1220_start_conversion(&hspi1);


  	uint32_t timeStamp = 0; /* Timer for UART tx */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]

  	//force emulation
	int32_t fOffset = 137;
 8001dd0:	2389      	movs	r3, #137	; 0x89
 8001dd2:	61bb      	str	r3, [r7, #24]
	float scalingFactor_N = 84.5;  // bits per Newton
 8001dd4:	4b9f      	ldr	r3, [pc, #636]	; (8002054 <main+0x2d8>)
 8001dd6:	617b      	str	r3, [r7, #20]

	hmod1.dt = 500; 	// us /* This can go lower than 500us due ADC timing limitations */
 8001dd8:	4b9f      	ldr	r3, [pc, #636]	; (8002058 <main+0x2dc>)
 8001dda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dde:	601a      	str	r2, [r3, #0]

	hmod1.m = 0.5;
 8001de0:	4b9d      	ldr	r3, [pc, #628]	; (8002058 <main+0x2dc>)
 8001de2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001de6:	60da      	str	r2, [r3, #12]
	hmod1.c = 10; 		// N.s/m
 8001de8:	4b9b      	ldr	r3, [pc, #620]	; (8002058 <main+0x2dc>)
 8001dea:	4a9c      	ldr	r2, [pc, #624]	; (800205c <main+0x2e0>)
 8001dec:	611a      	str	r2, [r3, #16]
	hmod1.k = 50; 		// N/m
 8001dee:	4b9a      	ldr	r3, [pc, #616]	; (8002058 <main+0x2dc>)
 8001df0:	4a9b      	ldr	r2, [pc, #620]	; (8002060 <main+0x2e4>)
 8001df2:	615a      	str	r2, [r3, #20]

	hmod1.cMap = &curve;
 8001df4:	4b98      	ldr	r3, [pc, #608]	; (8002058 <main+0x2dc>)
 8001df6:	4a9b      	ldr	r2, [pc, #620]	; (8002064 <main+0x2e8>)
 8001df8:	609a      	str	r2, [r3, #8]
	hmod1.cMap_size = 2;
 8001dfa:	4b97      	ldr	r3, [pc, #604]	; (8002058 <main+0x2dc>)
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	711a      	strb	r2, [r3, #4]

	hmod1.us = 0.2; 		// Dynamic friction coefficient
 8001e00:	4b95      	ldr	r3, [pc, #596]	; (8002058 <main+0x2dc>)
 8001e02:	4a99      	ldr	r2, [pc, #612]	; (8002068 <main+0x2ec>)
 8001e04:	619a      	str	r2, [r3, #24]
	hmod1.ud = 0.2; 		// Static friction coefficient
 8001e06:	4b94      	ldr	r3, [pc, #592]	; (8002058 <main+0x2dc>)
 8001e08:	4a97      	ldr	r2, [pc, #604]	; (8002068 <main+0x2ec>)
 8001e0a:	61da      	str	r2, [r3, #28]
	hmod1.N = 1; 			// Normal Force (Weight)
 8001e0c:	4b92      	ldr	r3, [pc, #584]	; (8002058 <main+0x2dc>)
 8001e0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e12:	621a      	str	r2, [r3, #32]
	hmod1.dfv = 0.00001;	// m/s
 8001e14:	4b90      	ldr	r3, [pc, #576]	; (8002058 <main+0x2dc>)
 8001e16:	4a95      	ldr	r2, [pc, #596]	; (800206c <main+0x2f0>)
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24

	hmod1.posMaxLim = 0.12; // Model Hard Stops
 8001e1a:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <main+0x2dc>)
 8001e1c:	4a94      	ldr	r2, [pc, #592]	; (8002070 <main+0x2f4>)
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
	hmod1.posMinLim = -0.12;
 8001e20:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <main+0x2dc>)
 8001e22:	4a94      	ldr	r2, [pc, #592]	; (8002074 <main+0x2f8>)
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c

	hmod1.velMaxLim = 1;	// Hardware max reachable speed.
 8001e26:	4b8c      	ldr	r3, [pc, #560]	; (8002058 <main+0x2dc>)
 8001e28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
	hmod1.velMinLim = -1;
 8001e2e:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <main+0x2dc>)
 8001e30:	4a91      	ldr	r2, [pc, #580]	; (8002078 <main+0x2fc>)
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34

	hcon1.dt = hmod1.dt;
 8001e34:	4b88      	ldr	r3, [pc, #544]	; (8002058 <main+0x2dc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a90      	ldr	r2, [pc, #576]	; (800207c <main+0x300>)
 8001e3a:	6013      	str	r3, [r2, #0]
	hcon1.kp = 50;
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	; (800207c <main+0x300>)
 8001e3e:	4a88      	ldr	r2, [pc, #544]	; (8002060 <main+0x2e4>)
 8001e40:	605a      	str	r2, [r3, #4]
	hcon1.ki = 0.5;
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <main+0x300>)
 8001e44:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001e48:	609a      	str	r2, [r3, #8]
	hcon1.outMax = hmod1.velMaxLim;
 8001e4a:	4b83      	ldr	r3, [pc, #524]	; (8002058 <main+0x2dc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a8b      	ldr	r2, [pc, #556]	; (800207c <main+0x300>)
 8001e50:	60d3      	str	r3, [r2, #12]
	hcon1.outMin = hmod1.velMinLim;
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <main+0x2dc>)
 8001e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e56:	4a89      	ldr	r2, [pc, #548]	; (800207c <main+0x300>)
 8001e58:	6113      	str	r3, [r2, #16]
//	Sensor_Receive();

  while (1)
  {

	  UART1_Handler();
 8001e5a:	f7ff feab 	bl	8001bb4 <UART1_Handler>

	  int16_t raw = ((ADS1220_read_singleshot(&hspi1, GPIOC, GPIO_PIN_4, 10) & 0x00FFFF00)>>8) + fOffset;
 8001e5e:	230a      	movs	r3, #10
 8001e60:	2210      	movs	r2, #16
 8001e62:	4987      	ldr	r1, [pc, #540]	; (8002080 <main+0x304>)
 8001e64:	487a      	ldr	r0, [pc, #488]	; (8002050 <main+0x2d4>)
 8001e66:	f7ff f9f7 	bl	8001258 <ADS1220_read_singleshot>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	121b      	asrs	r3, r3, #8
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	827b      	strh	r3, [r7, #18]
	  force = (float)raw / scalingFactor_N;
 8001e7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8e:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <main+0x308>)
 8001e90:	edc3 7a00 	vstr	s15, [r3]

	// Filter Force
	  static float smoothForce = 0;
	  float LPF_Beta = 0.6; // 0<ß<1
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <main+0x30c>)
 8001e96:	60fb      	str	r3, [r7, #12]
	  smoothForce = smoothForce - (LPF_Beta * (smoothForce - force));
 8001e98:	4b7c      	ldr	r3, [pc, #496]	; (800208c <main+0x310>)
 8001e9a:	ed93 7a00 	vldr	s14, [r3]
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	; (800208c <main+0x310>)
 8001ea0:	edd3 6a00 	vldr	s13, [r3]
 8001ea4:	4b77      	ldr	r3, [pc, #476]	; (8002084 <main+0x308>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eba:	4b74      	ldr	r3, [pc, #464]	; (800208c <main+0x310>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]

	// Reference model
	//------------------------------------------//
	 refModel_Tick(&hmod1, smoothForce, (StepCon_GetPosition()/1000));
 8001ec0:	4b72      	ldr	r3, [pc, #456]	; (800208c <main+0x310>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb4f 	bl	8000568 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	f7ff fd3b 	bl	8001948 <StepCon_GetPosition>
 8001ed2:	eef0 7a40 	vmov.f32	s15, s0
 8001ed6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002090 <main+0x314>
 8001eda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ede:	ee16 0a90 	vmov	r0, s13
 8001ee2:	f7fe fb41 	bl	8000568 <__aeabi_f2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	ec43 2b11 	vmov	d1, r2, r3
 8001eee:	ec45 4b10 	vmov	d0, r4, r5
 8001ef2:	4859      	ldr	r0, [pc, #356]	; (8002058 <main+0x2dc>)
 8001ef4:	f7ff fa3c 	bl	8001370 <refModel_Tick>
	//------------------------------------------//

	 if(hmod1.pos > hmod1.posMaxLim){
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <main+0x2dc>)
 8001efa:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001efe:	4b56      	ldr	r3, [pc, #344]	; (8002058 <main+0x2dc>)
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb30 	bl	8000568 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4629      	mov	r1, r5
 8001f10:	f7fe fe12 	bl	8000b38 <__aeabi_dcmpgt>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d000      	beq.n	8001f1c <main+0x1a0>
		 asm("NOP");
 8001f1a:	bf00      	nop
	 }
	// Position Controller
	//------------------------------------------//
	 //posCont_Tick(&hcon1, hmod1.pos, (StepCon_GetPosition()/1000));
	float refSpeed = Compute_PI(&hcon1, hmod1.pos, (StepCon_GetPosition()/1000));
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <main+0x2dc>)
 8001f1e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fe6f 	bl	8000c08 <__aeabi_d2f>
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	f7ff fd0c 	bl	8001948 <StepCon_GetPosition>
 8001f30:	eeb0 7a40 	vmov.f32	s14, s0
 8001f34:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002090 <main+0x314>
 8001f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3c:	eef0 0a67 	vmov.f32	s1, s15
 8001f40:	ee00 4a10 	vmov	s0, r4
 8001f44:	484d      	ldr	r0, [pc, #308]	; (800207c <main+0x300>)
 8001f46:	f7ff f9a1 	bl	800128c <Compute_PI>
 8001f4a:	ed87 0a02 	vstr	s0, [r7, #8]

	//------------------------------------------//

	if((StepCon_GetPosition()/1000) > hmod1.posMaxLim){
 8001f4e:	f7ff fcfb 	bl	8001948 <StepCon_GetPosition>
 8001f52:	eef0 7a40 	vmov.f32	s15, s0
 8001f56:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002090 <main+0x314>
 8001f5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <main+0x2dc>)
 8001f60:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	dd00      	ble.n	8001f70 <main+0x1f4>
		asm("NOP");
 8001f6e:	bf00      	nop
	}

	 /* Drive motor Speed with corrected ref velocity */
	 speed = (hmod1.vel + refSpeed) * 1000; // to mm/s
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <main+0x2dc>)
 8001f72:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f76:	68b8      	ldr	r0, [r7, #8]
 8001f78:	f7fe faf6 	bl	8000568 <__aeabi_f2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe f992 	bl	80002ac <__adddf3>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <main+0x318>)
 8001f96:	f7fe fb3f 	bl	8000618 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fe31 	bl	8000c08 <__aeabi_d2f>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <main+0x31c>)
 8001faa:	6013      	str	r3, [r2, #0]

	 if(enable) StepCon_Speed(speed);
 8001fac:	4b3b      	ldr	r3, [pc, #236]	; (800209c <main+0x320>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <main+0x248>
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <main+0x31c>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eeb0 0a67 	vmov.f32	s0, s15
 8001fbe:	f7ff fcd7 	bl	8001970 <StepCon_Speed>
 8001fc2:	e003      	b.n	8001fcc <main+0x250>
	 else 		StepCon_Speed(0);
 8001fc4:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80020a0 <main+0x324>
 8001fc8:	f7ff fcd2 	bl	8001970 <StepCon_Speed>

	 // Console logs
	 if(timeStamp + 50 < HAL_GetTick()){
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001fd2:	f000 ff5f 	bl	8002e94 <HAL_GetTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	429c      	cmp	r4, r3
 8001fda:	d21e      	bcs.n	800201a <main+0x29e>
		 UART1_printf("cmd=%.4f, %.4f\r\n", (float)(StepCon_GetPosition()/1000)/*hmod1.pos*/, smoothForce);
 8001fdc:	f7ff fcb4 	bl	8001948 <StepCon_GetPosition>
 8001fe0:	eef0 7a40 	vmov.f32	s15, s0
 8001fe4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002090 <main+0x314>
 8001fe8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fec:	ee16 0a90 	vmov	r0, s13
 8001ff0:	f7fe faba 	bl	8000568 <__aeabi_f2d>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460d      	mov	r5, r1
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <main+0x310>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fab3 	bl	8000568 <__aeabi_f2d>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	e9cd 2300 	strd	r2, r3, [sp]
 800200a:	4622      	mov	r2, r4
 800200c:	462b      	mov	r3, r5
 800200e:	4825      	ldr	r0, [pc, #148]	; (80020a4 <main+0x328>)
 8002010:	f7ff fe0e 	bl	8001c30 <UART1_printf>
		 timeStamp = HAL_GetTick();
 8002014:	f000 ff3e 	bl	8002e94 <HAL_GetTick>
 8002018:	61f8      	str	r0, [r7, #28]
//	//	 * You can compare the timer counter and trigger an alarm
//	//	 * if the time was already gone by the time the program
//	//	 * reached this point
//	//	 **/

	  if(__HAL_TIM_GET_COUNTER(&htim3) < hmod1.dt){
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <main+0x2c8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <main+0x2dc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <main+0x2bc>

		  while(__HAL_TIM_GET_COUNTER(&htim3) < hmod1.dt);
 8002028:	bf00      	nop
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <main+0x2c8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <main+0x2dc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d3f8      	bcc.n	800202a <main+0x2ae>
	  }else{
		  //UART1_printf("TIMING ERROR\n\r");
	  }
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <main+0x2c8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
  {
 8002040:	e70b      	b.n	8001e5a <main+0xde>
 8002042:	bf00      	nop
 8002044:	20000edc 	.word	0x20000edc
 8002048:	20000e94 	.word	0x20000e94
 800204c:	0800bfe8 	.word	0x0800bfe8
 8002050:	20000e3c 	.word	0x20000e3c
 8002054:	42a90000 	.word	0x42a90000
 8002058:	20000fd0 	.word	0x20000fd0
 800205c:	41200000 	.word	0x41200000
 8002060:	42480000 	.word	0x42480000
 8002064:	20000004 	.word	0x20000004
 8002068:	3e4ccccd 	.word	0x3e4ccccd
 800206c:	3727c5ac 	.word	0x3727c5ac
 8002070:	3df5c28f 	.word	0x3df5c28f
 8002074:	bdf5c28f 	.word	0xbdf5c28f
 8002078:	bf800000 	.word	0xbf800000
 800207c:	20001040 	.word	0x20001040
 8002080:	40020800 	.word	0x40020800
 8002084:	20000fcc 	.word	0x20000fcc
 8002088:	3f19999a 	.word	0x3f19999a
 800208c:	20001058 	.word	0x20001058
 8002090:	447a0000 	.word	0x447a0000
 8002094:	408f4000 	.word	0x408f4000
 8002098:	20000fc8 	.word	0x20000fc8
 800209c:	20000000 	.word	0x20000000
 80020a0:	00000000 	.word	0x00000000
 80020a4:	0800bfd4 	.word	0x0800bfd4

080020a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b094      	sub	sp, #80	; 0x50
 80020ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	2230      	movs	r2, #48	; 0x30
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 feaa 	bl	8006e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <SystemClock_Config+0xd0>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <SystemClock_Config+0xd0>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <SystemClock_Config+0xd0>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <SystemClock_Config+0xd4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020f4:	4a21      	ldr	r2, [pc, #132]	; (800217c <SystemClock_Config+0xd4>)
 80020f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <SystemClock_Config+0xd4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002108:	2301      	movs	r3, #1
 800210a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800210c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002112:	2302      	movs	r3, #2
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800211c:	2304      	movs	r3, #4
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002120:	2348      	movs	r3, #72	; 0x48
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002124:	2302      	movs	r3, #2
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002128:	2303      	movs	r3, #3
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212c:	f107 0320 	add.w	r3, r7, #32
 8002130:	4618      	mov	r0, r3
 8002132:	f001 fda1 	bl	8003c78 <HAL_RCC_OscConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800213c:	f000 fb6c 	bl	8002818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002140:	230f      	movs	r3, #15
 8002142:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002144:	2302      	movs	r3, #2
 8002146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002150:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002156:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2102      	movs	r1, #2
 800215e:	4618      	mov	r0, r3
 8002160:	f002 f802 	bl	8004168 <HAL_RCC_ClockConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800216a:	f000 fb55 	bl	8002818 <Error_Handler>
  }
}
 800216e:	bf00      	nop
 8002170:	3750      	adds	r7, #80	; 0x50
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000

08002180 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <MX_SPI1_Init+0x64>)
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <MX_SPI1_Init+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <MX_SPI1_Init+0x64>)
 800218c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_SPI1_Init+0x64>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_SPI1_Init+0x64>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021b4:	2218      	movs	r2, #24
 80021b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021cc:	220a      	movs	r2, #10
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_SPI1_Init+0x64>)
 80021d2:	f002 fa1b 	bl	800460c <HAL_SPI_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021dc:	f000 fb1c 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000e3c 	.word	0x20000e3c
 80021e8:	40013000 	.word	0x40013000

080021ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <MX_TIM2_Init+0x94>)
 800220a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <MX_TIM2_Init+0x94>)
 8002212:	2247      	movs	r2, #71	; 0x47
 8002214:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <MX_TIM2_Init+0x94>)
 8002218:	2210      	movs	r2, #16
 800221a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <MX_TIM2_Init+0x94>)
 800221e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <MX_TIM2_Init+0x94>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_TIM2_Init+0x94>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002230:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_TIM2_Init+0x94>)
 8002232:	f002 ff93 	bl	800515c <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800223c:	f000 faec 	bl	8002818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4619      	mov	r1, r3
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <MX_TIM2_Init+0x94>)
 800224e:	f003 f9b5 	bl	80055bc <HAL_TIM_ConfigClockSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002258:	f000 fade 	bl	8002818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002264:	463b      	mov	r3, r7
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_TIM2_Init+0x94>)
 800226a:	f003 fbd1 	bl	8005a10 <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002274:	f000 fad0 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000e94 	.word	0x20000e94

08002284 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <MX_TIM3_Init+0x94>)
 80022a2:	4a1e      	ldr	r2, [pc, #120]	; (800231c <MX_TIM3_Init+0x98>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_TIM3_Init+0x94>)
 80022a8:	2247      	movs	r2, #71	; 0x47
 80022aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_TIM3_Init+0x94>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <MX_TIM3_Init+0x94>)
 80022b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_TIM3_Init+0x94>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_TIM3_Init+0x94>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022c6:	4814      	ldr	r0, [pc, #80]	; (8002318 <MX_TIM3_Init+0x94>)
 80022c8:	f002 ff48 	bl	800515c <HAL_TIM_Base_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80022d2:	f000 faa1 	bl	8002818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	4619      	mov	r1, r3
 80022e2:	480d      	ldr	r0, [pc, #52]	; (8002318 <MX_TIM3_Init+0x94>)
 80022e4:	f003 f96a 	bl	80055bc <HAL_TIM_ConfigClockSource>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80022ee:	f000 fa93 	bl	8002818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022fa:	463b      	mov	r3, r7
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <MX_TIM3_Init+0x94>)
 8002300:	f003 fb86 	bl	8005a10 <HAL_TIMEx_MasterConfigSynchronization>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800230a:	f000 fa85 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000edc 	.word	0x20000edc
 800231c:	40000400 	.word	0x40000400

08002320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_USART1_UART_Init+0x4c>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <MX_USART1_UART_Init+0x50>)
 8002328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <MX_USART1_UART_Init+0x4c>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_USART1_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_USART1_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_USART1_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_USART1_UART_Init+0x4c>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <MX_USART1_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_USART1_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_USART1_UART_Init+0x4c>)
 8002358:	f003 fbea 	bl	8005b30 <HAL_UART_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002362:	f000 fa59 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000f24 	.word	0x20000f24
 8002370:	40011000 	.word	0x40011000

08002374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_DMA_Init+0x3c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <MX_DMA_Init+0x3c>)
 8002384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_DMA_Init+0x3c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	203a      	movs	r0, #58	; 0x3a
 800239c:	f000 fe62 	bl	8003064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023a0:	203a      	movs	r0, #58	; 0x3a
 80023a2:	f000 fe7b 	bl	800309c <HAL_NVIC_EnableIRQ>

}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800

080023b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <MX_GPIO_Init+0x198>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a5e      	ldr	r2, [pc, #376]	; (800254c <MX_GPIO_Init+0x198>)
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b5c      	ldr	r3, [pc, #368]	; (800254c <MX_GPIO_Init+0x198>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b58      	ldr	r3, [pc, #352]	; (800254c <MX_GPIO_Init+0x198>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a57      	ldr	r2, [pc, #348]	; (800254c <MX_GPIO_Init+0x198>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b55      	ldr	r3, [pc, #340]	; (800254c <MX_GPIO_Init+0x198>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b51      	ldr	r3, [pc, #324]	; (800254c <MX_GPIO_Init+0x198>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a50      	ldr	r2, [pc, #320]	; (800254c <MX_GPIO_Init+0x198>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <MX_GPIO_Init+0x198>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <MX_GPIO_Init+0x198>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a49      	ldr	r2, [pc, #292]	; (800254c <MX_GPIO_Init+0x198>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <MX_GPIO_Init+0x198>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	4b43      	ldr	r3, [pc, #268]	; (800254c <MX_GPIO_Init+0x198>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a42      	ldr	r2, [pc, #264]	; (800254c <MX_GPIO_Init+0x198>)
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b40      	ldr	r3, [pc, #256]	; (800254c <MX_GPIO_Init+0x198>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	2110      	movs	r1, #16
 800245a:	483d      	ldr	r0, [pc, #244]	; (8002550 <MX_GPIO_Init+0x19c>)
 800245c:	f001 fbf2 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002466:	483b      	ldr	r0, [pc, #236]	; (8002554 <MX_GPIO_Init+0x1a0>)
 8002468:	f001 fbec 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_7|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	f246 01a0 	movw	r1, #24736	; 0x60a0
 8002472:	4839      	ldr	r0, [pc, #228]	; (8002558 <MX_GPIO_Init+0x1a4>)
 8002474:	f001 fbe6 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2140      	movs	r1, #64	; 0x40
 800247c:	4837      	ldr	r0, [pc, #220]	; (800255c <MX_GPIO_Init+0x1a8>)
 800247e:	f001 fbe1 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002482:	2301      	movs	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002486:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	482e      	ldr	r0, [pc, #184]	; (8002550 <MX_GPIO_Init+0x19c>)
 8002498:	f001 fa10 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800249c:	2310      	movs	r3, #16
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	4827      	ldr	r0, [pc, #156]	; (8002550 <MX_GPIO_Init+0x19c>)
 80024b4:	f001 fa02 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b8:	2310      	movs	r3, #16
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4824      	ldr	r0, [pc, #144]	; (800255c <MX_GPIO_Init+0x1a8>)
 80024cc:	f001 f9f6 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	481b      	ldr	r0, [pc, #108]	; (8002554 <MX_GPIO_Init+0x1a0>)
 80024e6:	f001 f9e9 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80024ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_GPIO_Init+0x1a0>)
 8002504:	f001 f9da 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 PG7 LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|LD3_Pin|LD4_Pin;
 8002508:	f246 03a0 	movw	r3, #24736	; 0x60a0
 800250c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250e:	2301      	movs	r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <MX_GPIO_Init+0x1a4>)
 8002522:	f001 f9cb 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002526:	2340      	movs	r3, #64	; 0x40
 8002528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252a:	2301      	movs	r3, #1
 800252c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	4807      	ldr	r0, [pc, #28]	; (800255c <MX_GPIO_Init+0x1a8>)
 800253e:	f001 f9bd 	bl	80038bc <HAL_GPIO_Init>

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021800 	.word	0x40021800
 800255c:	40020800 	.word	0x40020800

08002560 <UART1_Cmd_Callback>:

/* USER CODE BEGIN 4 */


void UART1_Cmd_Callback(uint8_t* cmd, uint16_t len){
 8002560:	b580      	push	{r7, lr}
 8002562:	b092      	sub	sp, #72	; 0x48
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]

	/* Process your commands here */
	float aux = 0;
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	617b      	str	r3, [r7, #20]

	if(!len) return; /* Ignore empty commands */
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8115 	beq.w	80027a4 <UART1_Cmd_Callback+0x244>


	if( isCmd("cmap=") ) {
 800257a:	2205      	movs	r2, #5
 800257c:	498c      	ldr	r1, [pc, #560]	; (80027b0 <UART1_Cmd_Callback+0x250>)
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f005 fb5f 	bl	8007c42 <strncmp>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8099 	bne.w	80026be <UART1_Cmd_Callback+0x15e>

		cMap_1d_t* points = (cMap_1d_t*) hmod1.cMap;
 800258c:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	623b      	str	r3, [r7, #32]

		// Skip the "cmap=" prefix
		const char* data_start = (const char*)cmd + 5;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3305      	adds	r3, #5
 8002596:	61fb      	str	r3, [r7, #28]

		// Determine the number of pairs by counting commas
		uint16_t num_pairs = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		const char* ptr = data_start;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	643b      	str	r3, [r7, #64]	; 0x40
		//while (*ptr) {
		for (int i=0;i<(len-5);i++){
 80025a2:	2300      	movs	r3, #0
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a6:	e00e      	b.n	80025c6 <UART1_Cmd_Callback+0x66>
			if (*ptr == ',') {
 80025a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b2c      	cmp	r3, #44	; 0x2c
 80025ae:	d104      	bne.n	80025ba <UART1_Cmd_Callback+0x5a>
				num_pairs++;
 80025b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80025b4:	3301      	adds	r3, #1
 80025b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}
			ptr++;
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	3301      	adds	r3, #1
 80025be:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i=0;i<(len-5);i++){
 80025c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c2:	3301      	adds	r3, #1
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	3b05      	subs	r3, #5
 80025ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dbeb      	blt.n	80025a8 <UART1_Cmd_Callback+0x48>
		}

		// Each pair has two values, so number of pairs is half the commas
		num_pairs = (num_pairs + 1) / 2;
 80025d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80025d4:	3301      	adds	r3, #1
 80025d6:	0fda      	lsrs	r2, r3, #31
 80025d8:	4413      	add	r3, r2
 80025da:	105b      	asrs	r3, r3, #1
 80025dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if (num_pairs > 255) return;
 80025e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80025e4:	2bff      	cmp	r3, #255	; 0xff
 80025e6:	f200 80df 	bhi.w	80027a8 <UART1_Cmd_Callback+0x248>

		// Parse the data points using sscanf
		size_t index = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
		ptr = data_start;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
		while (index < num_pairs && *ptr) {
 80025f2:	e046      	b.n	8002682 <UART1_Cmd_Callback+0x122>
			float x, y;
			int scanned = sscanf(ptr, "%f,%f", &x, &y);
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	f107 0210 	add.w	r2, r7, #16
 80025fc:	496e      	ldr	r1, [pc, #440]	; (80027b8 <UART1_Cmd_Callback+0x258>)
 80025fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002600:	f005 faae 	bl	8007b60 <siscanf>
 8002604:	61b8      	str	r0, [r7, #24]
			if (scanned == 2) {
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d118      	bne.n	800263e <UART1_Cmd_Callback+0xde>
				points[index].x = x / 1000;
 800260c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	4413      	add	r3, r2
 8002618:	eddf 6a68 	vldr	s13, [pc, #416]	; 80027bc <UART1_Cmd_Callback+0x25c>
 800261c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002620:	edc3 7a00 	vstr	s15, [r3]
				points[index].f = y;
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	4413      	add	r3, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
				index++;
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	3301      	adds	r3, #1
 8002634:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			// Move pointer to the next pair
			while (*ptr && *ptr != ',') ptr++;
 8002636:	e002      	b.n	800263e <UART1_Cmd_Callback+0xde>
 8002638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263a:	3301      	adds	r3, #1
 800263c:	643b      	str	r3, [r7, #64]	; 0x40
 800263e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <UART1_Cmd_Callback+0xee>
 8002646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b2c      	cmp	r3, #44	; 0x2c
 800264c:	d1f4      	bne.n	8002638 <UART1_Cmd_Callback+0xd8>
			if (*ptr == ',') ptr++;
 800264e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b2c      	cmp	r3, #44	; 0x2c
 8002654:	d106      	bne.n	8002664 <UART1_Cmd_Callback+0x104>
 8002656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002658:	3301      	adds	r3, #1
 800265a:	643b      	str	r3, [r7, #64]	; 0x40
			while (*ptr && *ptr != ',') ptr++;
 800265c:	e002      	b.n	8002664 <UART1_Cmd_Callback+0x104>
 800265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002660:	3301      	adds	r3, #1
 8002662:	643b      	str	r3, [r7, #64]	; 0x40
 8002664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <UART1_Cmd_Callback+0x114>
 800266c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b2c      	cmp	r3, #44	; 0x2c
 8002672:	d1f4      	bne.n	800265e <UART1_Cmd_Callback+0xfe>
			if (*ptr == ',') ptr++;
 8002674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b2c      	cmp	r3, #44	; 0x2c
 800267a:	d102      	bne.n	8002682 <UART1_Cmd_Callback+0x122>
 800267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267e:	3301      	adds	r3, #1
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
		while (index < num_pairs && *ptr) {
 8002682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002688:	429a      	cmp	r2, r3
 800268a:	d203      	bcs.n	8002694 <UART1_Cmd_Callback+0x134>
 800268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1af      	bne.n	80025f4 <UART1_Cmd_Callback+0x94>
		}

		hmod1.cMap_size = num_pairs;
 8002694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 800269c:	711a      	strb	r2, [r3, #4]

		hmod1.posMinLim = points[0].x;
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a44      	ldr	r2, [pc, #272]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 80026a4:	62d3      	str	r3, [r2, #44]	; 0x2c
		hmod1.posMaxLim = points[num_pairs-1].x;
 80026a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80026ae:	3b01      	subs	r3, #1
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	6a3a      	ldr	r2, [r7, #32]
 80026b4:	4413      	add	r3, r2
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3e      	ldr	r2, [pc, #248]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 80026ba:	6293      	str	r3, [r2, #40]	; 0x28
 80026bc:	e075      	b.n	80027aa <UART1_Cmd_Callback+0x24a>

	}else if( isCmd("mass=") ) {
 80026be:	2205      	movs	r2, #5
 80026c0:	493f      	ldr	r1, [pc, #252]	; (80027c0 <UART1_Cmd_Callback+0x260>)
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f005 fabd 	bl	8007c42 <strncmp>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10e      	bne.n	80026ec <UART1_Cmd_Callback+0x18c>

		int res = sscanf((const char*)cmd,"mass=%f", &aux);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	461a      	mov	r2, r3
 80026d4:	493b      	ldr	r1, [pc, #236]	; (80027c4 <UART1_Cmd_Callback+0x264>)
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f005 fa42 	bl	8007b60 <siscanf>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24
		if(res) {
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d062      	beq.n	80027aa <UART1_Cmd_Callback+0x24a>
			hmod1.m = aux;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 80026e8:	60d3      	str	r3, [r2, #12]
 80026ea:	e05e      	b.n	80027aa <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("damp=") ) {
 80026ec:	2205      	movs	r2, #5
 80026ee:	4936      	ldr	r1, [pc, #216]	; (80027c8 <UART1_Cmd_Callback+0x268>)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f005 faa6 	bl	8007c42 <strncmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10e      	bne.n	800271a <UART1_Cmd_Callback+0x1ba>
		int res = sscanf((const char*)cmd,"damp=%f", &aux);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	461a      	mov	r2, r3
 8002702:	4932      	ldr	r1, [pc, #200]	; (80027cc <UART1_Cmd_Callback+0x26c>)
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f005 fa2b 	bl	8007b60 <siscanf>
 800270a:	62b8      	str	r0, [r7, #40]	; 0x28
		if(res) {
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d04b      	beq.n	80027aa <UART1_Cmd_Callback+0x24a>
			hmod1.c = aux;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 8002716:	6113      	str	r3, [r2, #16]
 8002718:	e047      	b.n	80027aa <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("frcn=") ) {
 800271a:	2205      	movs	r2, #5
 800271c:	492c      	ldr	r1, [pc, #176]	; (80027d0 <UART1_Cmd_Callback+0x270>)
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f005 fa8f 	bl	8007c42 <strncmp>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10e      	bne.n	8002748 <UART1_Cmd_Callback+0x1e8>
		int res = sscanf((const char*)cmd,"frcn=%f", &aux);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	461a      	mov	r2, r3
 8002730:	4928      	ldr	r1, [pc, #160]	; (80027d4 <UART1_Cmd_Callback+0x274>)
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f005 fa14 	bl	8007b60 <siscanf>
 8002738:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(res) {
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d034      	beq.n	80027aa <UART1_Cmd_Callback+0x24a>
			hmod1.N = aux;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	e030      	b.n	80027aa <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("vmax=") ) {
 8002748:	2205      	movs	r2, #5
 800274a:	4923      	ldr	r1, [pc, #140]	; (80027d8 <UART1_Cmd_Callback+0x278>)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f005 fa78 	bl	8007c42 <strncmp>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10e      	bne.n	8002776 <UART1_Cmd_Callback+0x216>
		int res = sscanf((const char*)cmd,"vmax=%f", &aux);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	461a      	mov	r2, r3
 800275e:	491f      	ldr	r1, [pc, #124]	; (80027dc <UART1_Cmd_Callback+0x27c>)
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f005 f9fd 	bl	8007b60 <siscanf>
 8002766:	6338      	str	r0, [r7, #48]	; 0x30
		if(res) {
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01d      	beq.n	80027aa <UART1_Cmd_Callback+0x24a>
			hmod1.velMaxLim = aux;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 8002772:	6313      	str	r3, [r2, #48]	; 0x30
 8002774:	e019      	b.n	80027aa <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("vmin=") ) {
 8002776:	2205      	movs	r2, #5
 8002778:	4919      	ldr	r1, [pc, #100]	; (80027e0 <UART1_Cmd_Callback+0x280>)
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f005 fa61 	bl	8007c42 <strncmp>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d111      	bne.n	80027aa <UART1_Cmd_Callback+0x24a>
		int res = sscanf((const char*)cmd,"vmin=%f", &aux);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	461a      	mov	r2, r3
 800278c:	4915      	ldr	r1, [pc, #84]	; (80027e4 <UART1_Cmd_Callback+0x284>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f005 f9e6 	bl	8007b60 <siscanf>
 8002794:	6378      	str	r0, [r7, #52]	; 0x34
		if(res) {
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <UART1_Cmd_Callback+0x24a>
			hmod1.velMinLim = aux;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <UART1_Cmd_Callback+0x254>)
 80027a0:	6353      	str	r3, [r2, #52]	; 0x34
 80027a2:	e002      	b.n	80027aa <UART1_Cmd_Callback+0x24a>
	if(!len) return; /* Ignore empty commands */
 80027a4:	bf00      	nop
 80027a6:	e000      	b.n	80027aa <UART1_Cmd_Callback+0x24a>
		if (num_pairs > 255) return;
 80027a8:	bf00      	nop
		}
	}


	/*----------------------------*/
}
 80027aa:	3748      	adds	r7, #72	; 0x48
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	0800bfec 	.word	0x0800bfec
 80027b4:	20000fd0 	.word	0x20000fd0
 80027b8:	0800bff4 	.word	0x0800bff4
 80027bc:	447a0000 	.word	0x447a0000
 80027c0:	0800bffc 	.word	0x0800bffc
 80027c4:	0800c004 	.word	0x0800c004
 80027c8:	0800c00c 	.word	0x0800c00c
 80027cc:	0800c014 	.word	0x0800c014
 80027d0:	0800c01c 	.word	0x0800c01c
 80027d4:	0800c024 	.word	0x0800c024
 80027d8:	0800c02c 	.word	0x0800c02c
 80027dc:	0800c034 	.word	0x0800c034
 80027e0:	0800c03c 	.word	0x0800c03c
 80027e4:	0800c044 	.word	0x0800c044

080027e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_PeriodElapsedCallback+0x16>
		StepCon_pulseTick();
 80027fa:	f7ff f939 	bl	8001a70 <StepCon_pulseTick>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8002808:	f000 fb30 	bl	8002e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40001000 	.word	0x40001000

08002818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002820:	e7fe      	b.n	8002820 <Error_Handler+0x8>
	...

08002824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_MspInit+0x4c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_MspInit+0x4c>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_MspInit+0x4c>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_MspInit+0x4c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_MspInit+0x4c>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_MspInit+0x4c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800

08002874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_SPI_MspInit+0x84>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d12c      	bne.n	80028f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_SPI_MspInit+0x88>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_SPI_MspInit+0x88>)
 80028a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_SPI_MspInit+0x88>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_SPI_MspInit+0x88>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_SPI_MspInit+0x88>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_SPI_MspInit+0x88>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80028ce:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028e0:	2305      	movs	r3, #5
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <HAL_SPI_MspInit+0x8c>)
 80028ec:	f000 ffe6 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013000 	.word	0x40013000
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020000 	.word	0x40020000

08002904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d116      	bne.n	8002944 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_TIM_Base_MspInit+0x70>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	201c      	movs	r0, #28
 8002938:	f000 fb94 	bl	8003064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800293c:	201c      	movs	r0, #28
 800293e:	f000 fbad 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002942:	e012      	b.n	800296a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_TIM_Base_MspInit+0x74>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40000400 	.word	0x40000400

0800297c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a35      	ldr	r2, [pc, #212]	; (8002a70 <HAL_UART_MspInit+0xf4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d163      	bne.n	8002a66 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <HAL_UART_MspInit+0xf8>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a33      	ldr	r2, [pc, #204]	; (8002a74 <HAL_UART_MspInit+0xf8>)
 80029a8:	f043 0310 	orr.w	r3, r3, #16
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0xf8>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_UART_MspInit+0xf8>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <HAL_UART_MspInit+0xf8>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_UART_MspInit+0xf8>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029e8:	2307      	movs	r3, #7
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4821      	ldr	r0, [pc, #132]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 80029f4:	f000 ff62 	bl	80038bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_UART_MspInit+0x100>)
 80029fa:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <HAL_UART_MspInit+0x104>)
 80029fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029fe:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a18:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a3a:	4810      	ldr	r0, [pc, #64]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a3c:	f000 fb3c 	bl	80030b8 <HAL_DMA_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002a46:	f7ff fee7 	bl	8002818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_UART_MspInit+0x100>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2025      	movs	r0, #37	; 0x25
 8002a5c:	f000 fb02 	bl	8003064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a60:	2025      	movs	r0, #37	; 0x25
 8002a62:	f000 fb1b 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40011000 	.word	0x40011000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	20000f68 	.word	0x20000f68
 8002a80:	40026440 	.word	0x40026440

08002a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <HAL_InitTick+0xe4>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a32      	ldr	r2, [pc, #200]	; (8002b68 <HAL_InitTick+0xe4>)
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_InitTick+0xe4>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ab0:	f107 0210 	add.w	r2, r7, #16
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 fd74 	bl	80045a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002aca:	f001 fd45 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8002ace:	6378      	str	r0, [r7, #52]	; 0x34
 8002ad0:	e004      	b.n	8002adc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ad2:	f001 fd41 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ade:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <HAL_InitTick+0xe8>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_InitTick+0xec>)
 8002aec:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_InitTick+0xf0>)
 8002aee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <HAL_InitTick+0xec>)
 8002af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002af6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002af8:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_InitTick+0xec>)
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_InitTick+0xec>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_InitTick+0xec>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_InitTick+0xec>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002b10:	4817      	ldr	r0, [pc, #92]	; (8002b70 <HAL_InitTick+0xec>)
 8002b12:	f002 fb23 	bl	800515c <HAL_TIM_Base_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11b      	bne.n	8002b5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002b24:	4812      	ldr	r0, [pc, #72]	; (8002b70 <HAL_InitTick+0xec>)
 8002b26:	f002 fbd1 	bl	80052cc <HAL_TIM_Base_Start_IT>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d111      	bne.n	8002b5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b38:	2036      	movs	r0, #54	; 0x36
 8002b3a:	f000 faaf 	bl	800309c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d808      	bhi.n	8002b56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	2036      	movs	r0, #54	; 0x36
 8002b4a:	f000 fa8b 	bl	8003064 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <HAL_InitTick+0xf4>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	e002      	b.n	8002b5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3738      	adds	r7, #56	; 0x38
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	431bde83 	.word	0x431bde83
 8002b70:	2000105c 	.word	0x2000105c
 8002b74:	40001000 	.word	0x40001000
 8002b78:	20000800 	.word	0x20000800

08002b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <NMI_Handler+0x4>

08002b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <HardFault_Handler+0x4>

08002b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <MemManage_Handler+0x4>

08002b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <TIM2_IRQHandler+0x10>)
 8002bda:	f002 fbe7 	bl	80053ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000e94 	.word	0x20000e94

08002be8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <USART1_IRQHandler+0x10>)
 8002bee:	f003 f861 	bl	8005cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000f24 	.word	0x20000f24

08002bfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM6_DAC_IRQHandler+0x10>)
 8002c02:	f002 fbd3 	bl	80053ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000105c 	.word	0x2000105c

08002c10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA2_Stream2_IRQHandler+0x10>)
 8002c16:	f000 fbe7 	bl	80033e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000f68 	.word	0x20000f68

08002c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_kill>:

int _kill(int pid, int sig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c3e:	f004 f8bd 	bl	8006dbc <__errno>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2216      	movs	r2, #22
 8002c46:	601a      	str	r2, [r3, #0]
  return -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_exit>:

void _exit (int status)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ffe7 	bl	8002c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c66:	e7fe      	b.n	8002c66 <_exit+0x12>

08002c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e00a      	b.n	8002c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c7a:	f3af 8000 	nop.w
 8002c7e:	4601      	mov	r1, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60ba      	str	r2, [r7, #8]
 8002c86:	b2ca      	uxtb	r2, r1
 8002c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbf0      	blt.n	8002c7a <_read+0x12>
  }

  return len;
 8002c98:	687b      	ldr	r3, [r7, #4]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e009      	b.n	8002cc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	60ba      	str	r2, [r7, #8]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	dbf1      	blt.n	8002cb4 <_write+0x12>
  }
  return len;
 8002cd0:	687b      	ldr	r3, [r7, #4]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_close>:

int _close(int file)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d02:	605a      	str	r2, [r3, #4]
  return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <_isatty>:

int _isatty(int file)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <_sbrk+0x5c>)
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <_sbrk+0x60>)
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <_sbrk+0x64>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <_sbrk+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d207      	bcs.n	8002d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d74:	f004 f822 	bl	8006dbc <__errno>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e009      	b.n	8002d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <_sbrk+0x64>)
 8002d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20030000 	.word	0x20030000
 8002da4:	00000400 	.word	0x00000400
 8002da8:	200010a4 	.word	0x200010a4
 8002dac:	200010c0 	.word	0x200010c0

08002db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <SystemInit+0x20>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <SystemInit+0x20>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e0c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dda:	490e      	ldr	r1, [pc, #56]	; (8002e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de0:	e002      	b.n	8002de8 <LoopCopyDataInit>

08002de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de6:	3304      	adds	r3, #4

08002de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dec:	d3f9      	bcc.n	8002de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002df0:	4c0b      	ldr	r4, [pc, #44]	; (8002e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df4:	e001      	b.n	8002dfa <LoopFillZerobss>

08002df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df8:	3204      	adds	r2, #4

08002dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dfc:	d3fb      	bcc.n	8002df6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dfe:	f7ff ffd7 	bl	8002db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e02:	f003 ffe1 	bl	8006dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e06:	f7fe ffb9 	bl	8001d7c <main>
  bx  lr    
 8002e0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	200009dc 	.word	0x200009dc
  ldr r2, =_sidata
 8002e18:	0800c544 	.word	0x0800c544
  ldr r2, =_sbss
 8002e1c:	200009e0 	.word	0x200009e0
  ldr r4, =_ebss
 8002e20:	200010bc 	.word	0x200010bc

08002e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC_IRQHandler>
	...

08002e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_Init+0x40>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_Init+0x40>)
 8002e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_Init+0x40>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_Init+0x40>)
 8002e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_Init+0x40>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <HAL_Init+0x40>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e50:	2003      	movs	r0, #3
 8002e52:	f000 f8fc 	bl	800304e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e56:	200f      	movs	r0, #15
 8002e58:	f7ff fe14 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e5c:	f7ff fce2 	bl	8002824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000804 	.word	0x20000804
 8002e90:	200010a8 	.word	0x200010a8

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200010a8 	.word	0x200010a8

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff ffee 	bl	8002e94 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000804 	.word	0x20000804

08002ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <__NVIC_GetPriorityGrouping+0x18>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 0307 	and.w	r3, r3, #7
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db0b      	blt.n	8002f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4907      	ldr	r1, [pc, #28]	; (8002f90 <__NVIC_EnableIRQ+0x38>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	; (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff4c 	bl	8002ef4 <__NVIC_SetPriorityGrouping>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003076:	f7ff ff61 	bl	8002f3c <__NVIC_GetPriorityGrouping>
 800307a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f7ff ffb1 	bl	8002fe8 <NVIC_EncodePriority>
 8003086:	4602      	mov	r2, r0
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff80 	bl	8002f94 <__NVIC_SetPriority>
}
 8003094:	bf00      	nop
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff54 	bl	8002f58 <__NVIC_EnableIRQ>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff fee6 	bl	8002e94 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e099      	b.n	8003208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f4:	e00f      	b.n	8003116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f6:	f7ff fecd 	bl	8002e94 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b05      	cmp	r3, #5
 8003102:	d908      	bls.n	8003116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e078      	b.n	8003208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e8      	bne.n	80030f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4b38      	ldr	r3, [pc, #224]	; (8003210 <HAL_DMA_Init+0x158>)
 8003130:	4013      	ands	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4313      	orrs	r3, r2
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0307 	bic.w	r3, r3, #7
 8003196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d117      	bne.n	80031da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fb01 	bl	80037c4 <DMA_CheckFifoParam>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031d6:	2301      	movs	r3, #1
 80031d8:	e016      	b.n	8003208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fab8 	bl	8003758 <DMA_CalcBaseAndBitshift>
 80031e8:	4603      	mov	r3, r0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	223f      	movs	r2, #63	; 0x3f
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	f010803f 	.word	0xf010803f

08003214 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_DMA_Start_IT+0x26>
 8003236:	2302      	movs	r3, #2
 8003238:	e040      	b.n	80032bc <HAL_DMA_Start_IT+0xa8>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d12f      	bne.n	80032ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fa4a 	bl	80036fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	223f      	movs	r2, #63	; 0x3f
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0216 	orr.w	r2, r2, #22
 8003282:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e005      	b.n	80032ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032d2:	f7ff fddf 	bl	8002e94 <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d008      	beq.n	80032f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e052      	b.n	800339c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0216 	bic.w	r2, r2, #22
 8003304:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003314:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <HAL_DMA_Abort+0x62>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	e013      	b.n	8003370 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003348:	f7ff fda4 	bl	8002e94 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b05      	cmp	r3, #5
 8003354:	d90c      	bls.n	8003370 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2203      	movs	r2, #3
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e015      	b.n	800339c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e4      	bne.n	8003348 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	223f      	movs	r2, #63	; 0x3f
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e00c      	b.n	80033dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2205      	movs	r2, #5
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033f4:	4b8e      	ldr	r3, [pc, #568]	; (8003630 <HAL_DMA_IRQHandler+0x248>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a8e      	ldr	r2, [pc, #568]	; (8003634 <HAL_DMA_IRQHandler+0x24c>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	0a9b      	lsrs	r3, r3, #10
 8003400:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	2208      	movs	r2, #8
 8003414:	409a      	lsls	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01a      	beq.n	8003454 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0204 	bic.w	r2, r2, #4
 800343a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	2208      	movs	r2, #8
 8003442:	409a      	lsls	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	2201      	movs	r2, #1
 800345a:	409a      	lsls	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	2201      	movs	r2, #1
 8003478:	409a      	lsls	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f043 0202 	orr.w	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	2204      	movs	r2, #4
 8003490:	409a      	lsls	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00b      	beq.n	80034c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	2204      	movs	r2, #4
 80034ae:	409a      	lsls	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	f043 0204 	orr.w	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	2210      	movs	r2, #16
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d043      	beq.n	8003558 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03c      	beq.n	8003558 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	2210      	movs	r2, #16
 80034e4:	409a      	lsls	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d018      	beq.n	800352a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d024      	beq.n	8003558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
 8003516:	e01f      	b.n	8003558 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01b      	beq.n	8003558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
 8003528:	e016      	b.n	8003558 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0208 	bic.w	r2, r2, #8
 8003546:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	2220      	movs	r2, #32
 800355e:	409a      	lsls	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 808f 	beq.w	8003688 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8087 	beq.w	8003688 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	2220      	movs	r2, #32
 8003580:	409a      	lsls	r2, r3
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b05      	cmp	r3, #5
 8003590:	d136      	bne.n	8003600 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0216 	bic.w	r2, r2, #22
 80035a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_DMA_IRQHandler+0x1da>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0208 	bic.w	r2, r2, #8
 80035d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	223f      	movs	r2, #63	; 0x3f
 80035d8:	409a      	lsls	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d07e      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
        }
        return;
 80035fe:	e079      	b.n	80036f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01d      	beq.n	800364a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10d      	bne.n	8003638 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	2b00      	cmp	r3, #0
 8003622:	d031      	beq.n	8003688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
 800362c:	e02c      	b.n	8003688 <HAL_DMA_IRQHandler+0x2a0>
 800362e:	bf00      	nop
 8003630:	200007fc 	.word	0x200007fc
 8003634:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d023      	beq.n	8003688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
 8003648:	e01e      	b.n	8003688 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10f      	bne.n	8003678 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0210 	bic.w	r2, r2, #16
 8003666:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	2b00      	cmp	r3, #0
 800368e:	d032      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d022      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2205      	movs	r2, #5
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3301      	adds	r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d307      	bcc.n	80036d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f2      	bne.n	80036b4 <HAL_DMA_IRQHandler+0x2cc>
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
 80036f2:	e000      	b.n	80036f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036f4:	bf00      	nop
    }
  }
}
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003718:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d108      	bne.n	800373c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800373a:	e007      	b.n	800374c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	3b10      	subs	r3, #16
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <DMA_CalcBaseAndBitshift+0x64>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d909      	bls.n	800379a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	659a      	str	r2, [r3, #88]	; 0x58
 8003798:	e007      	b.n	80037aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	aaaaaaab 	.word	0xaaaaaaab
 80037c0:	0800c070 	.word	0x0800c070

080037c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11f      	bne.n	800381e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d856      	bhi.n	8003892 <DMA_CheckFifoParam+0xce>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <DMA_CheckFifoParam+0x28>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	0800380f 	.word	0x0800380f
 80037f4:	080037fd 	.word	0x080037fd
 80037f8:	08003893 	.word	0x08003893
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d046      	beq.n	8003896 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380c:	e043      	b.n	8003896 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003816:	d140      	bne.n	800389a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e03d      	b.n	800389a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003826:	d121      	bne.n	800386c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d837      	bhi.n	800389e <DMA_CheckFifoParam+0xda>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <DMA_CheckFifoParam+0x70>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003845 	.word	0x08003845
 8003838:	0800384b 	.word	0x0800384b
 800383c:	08003845 	.word	0x08003845
 8003840:	0800385d 	.word	0x0800385d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
      break;
 8003848:	e030      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d025      	beq.n	80038a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385a:	e022      	b.n	80038a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003864:	d11f      	bne.n	80038a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800386a:	e01c      	b.n	80038a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d903      	bls.n	800387a <DMA_CheckFifoParam+0xb6>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d003      	beq.n	8003880 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003878:	e018      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      break;
 800387e:	e015      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      break;
 8003890:	e00b      	b.n	80038aa <DMA_CheckFifoParam+0xe6>
      break;
 8003892:	bf00      	nop
 8003894:	e00a      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      break;
 8003896:	bf00      	nop
 8003898:	e008      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      break;
 800389a:	bf00      	nop
 800389c:	e006      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      break;
 800389e:	bf00      	nop
 80038a0:	e004      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      break;
 80038a2:	bf00      	nop
 80038a4:	e002      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      break;   
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <DMA_CheckFifoParam+0xe8>
      break;
 80038aa:	bf00      	nop
    }
  } 
  
  return status; 
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	e177      	b.n	8003bc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d8:	2201      	movs	r2, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	f040 8166 	bne.w	8003bc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d005      	beq.n	800390e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800390a:	2b02      	cmp	r3, #2
 800390c:	d130      	bne.n	8003970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	2203      	movs	r2, #3
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003944:	2201      	movs	r2, #1
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 0201 	and.w	r2, r3, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b03      	cmp	r3, #3
 800397a:	d017      	beq.n	80039ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d123      	bne.n	8003a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	08da      	lsrs	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3208      	adds	r2, #8
 80039c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	220f      	movs	r2, #15
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	08da      	lsrs	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3208      	adds	r2, #8
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0203 	and.w	r2, r3, #3
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80c0 	beq.w	8003bc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_GPIO_Init+0x324>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_GPIO_Init+0x324>)
 8003a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a50:	6453      	str	r3, [r2, #68]	; 0x44
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_GPIO_Init+0x324>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a5e:	4a61      	ldr	r2, [pc, #388]	; (8003be4 <HAL_GPIO_Init+0x328>)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	089b      	lsrs	r3, r3, #2
 8003a64:	3302      	adds	r3, #2
 8003a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	220f      	movs	r2, #15
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a58      	ldr	r2, [pc, #352]	; (8003be8 <HAL_GPIO_Init+0x32c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d037      	beq.n	8003afa <HAL_GPIO_Init+0x23e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a57      	ldr	r2, [pc, #348]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_GPIO_Init+0x23a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a56      	ldr	r2, [pc, #344]	; (8003bf0 <HAL_GPIO_Init+0x334>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02b      	beq.n	8003af2 <HAL_GPIO_Init+0x236>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a55      	ldr	r2, [pc, #340]	; (8003bf4 <HAL_GPIO_Init+0x338>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d025      	beq.n	8003aee <HAL_GPIO_Init+0x232>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a54      	ldr	r2, [pc, #336]	; (8003bf8 <HAL_GPIO_Init+0x33c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <HAL_GPIO_Init+0x22e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a53      	ldr	r2, [pc, #332]	; (8003bfc <HAL_GPIO_Init+0x340>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d019      	beq.n	8003ae6 <HAL_GPIO_Init+0x22a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_GPIO_Init+0x344>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_Init+0x226>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_GPIO_Init+0x348>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00d      	beq.n	8003ade <HAL_GPIO_Init+0x222>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a50      	ldr	r2, [pc, #320]	; (8003c08 <HAL_GPIO_Init+0x34c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <HAL_GPIO_Init+0x21e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4f      	ldr	r2, [pc, #316]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_GPIO_Init+0x21a>
 8003ad2:	2309      	movs	r3, #9
 8003ad4:	e012      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ad6:	230a      	movs	r3, #10
 8003ad8:	e010      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ada:	2308      	movs	r3, #8
 8003adc:	e00e      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ade:	2307      	movs	r3, #7
 8003ae0:	e00c      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ae2:	2306      	movs	r3, #6
 8003ae4:	e00a      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ae6:	2305      	movs	r3, #5
 8003ae8:	e008      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003aea:	2304      	movs	r3, #4
 8003aec:	e006      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003aee:	2303      	movs	r3, #3
 8003af0:	e004      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e002      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003afa:	2300      	movs	r3, #0
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f002 0203 	and.w	r2, r2, #3
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	4093      	lsls	r3, r2
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b0c:	4935      	ldr	r1, [pc, #212]	; (8003be4 <HAL_GPIO_Init+0x328>)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3302      	adds	r3, #2
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b3e:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b68:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b6e:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b92:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bbc:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <HAL_GPIO_Init+0x354>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	f67f ae84 	bls.w	80038d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3724      	adds	r7, #36	; 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40013800 	.word	0x40013800
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40020400 	.word	0x40020400
 8003bf0:	40020800 	.word	0x40020800
 8003bf4:	40020c00 	.word	0x40020c00
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40021400 	.word	0x40021400
 8003c00:	40021800 	.word	0x40021800
 8003c04:	40021c00 	.word	0x40021c00
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40022400 	.word	0x40022400
 8003c10:	40013c00 	.word	0x40013c00

08003c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	887b      	ldrh	r3, [r7, #2]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e001      	b.n	8003c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c54:	787b      	ldrb	r3, [r7, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c60:	e003      	b.n	8003c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	619a      	str	r2, [r3, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e267      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d075      	beq.n	8003d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c96:	4b88      	ldr	r3, [pc, #544]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d00c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca2:	4b85      	ldr	r3, [pc, #532]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d112      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b82      	ldr	r3, [pc, #520]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cba:	d10b      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	4b7e      	ldr	r3, [pc, #504]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d05b      	beq.n	8003d80 <HAL_RCC_OscConfig+0x108>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d157      	bne.n	8003d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e242      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cdc:	d106      	bne.n	8003cec <HAL_RCC_OscConfig+0x74>
 8003cde:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a75      	ldr	r2, [pc, #468]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e01d      	b.n	8003d28 <HAL_RCC_OscConfig+0xb0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x98>
 8003cf6:	4b70      	ldr	r3, [pc, #448]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6f      	ldr	r2, [pc, #444]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	4b6d      	ldr	r3, [pc, #436]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6c      	ldr	r2, [pc, #432]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCC_OscConfig+0xb0>
 8003d10:	4b69      	ldr	r3, [pc, #420]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a68      	ldr	r2, [pc, #416]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b66      	ldr	r3, [pc, #408]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a65      	ldr	r2, [pc, #404]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7ff f8b0 	bl	8002e94 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d38:	f7ff f8ac 	bl	8002e94 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e207      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0xc0>
 8003d56:	e014      	b.n	8003d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7ff f89c 	bl	8002e94 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d60:	f7ff f898 	bl	8002e94 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e1f3      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	4b51      	ldr	r3, [pc, #324]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0xe8>
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d063      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d8e:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d11c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d116      	bne.n	8003de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_RCC_OscConfig+0x152>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e1c7      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4937      	ldr	r1, [pc, #220]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	e03a      	b.n	8003e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d020      	beq.n	8003e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de8:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <HAL_RCC_OscConfig+0x244>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7ff f851 	bl	8002e94 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df6:	f7ff f84d 	bl	8002e94 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e1a8      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e14:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4925      	ldr	r1, [pc, #148]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	600b      	str	r3, [r1, #0]
 8003e28:	e015      	b.n	8003e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_RCC_OscConfig+0x244>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7ff f830 	bl	8002e94 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e38:	f7ff f82c 	bl	8002e94 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e187      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4a:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d036      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <HAL_RCC_OscConfig+0x248>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7ff f810 	bl	8002e94 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e78:	f7ff f80c 	bl	8002e94 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e167      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x200>
 8003e96:	e01b      	b.n	8003ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_RCC_OscConfig+0x248>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe fff9 	bl	8002e94 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea4:	e00e      	b.n	8003ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea6:	f7fe fff5 	bl	8002e94 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d907      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e150      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	42470000 	.word	0x42470000
 8003ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	4b88      	ldr	r3, [pc, #544]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ea      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8097 	beq.w	800400c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee2:	4b81      	ldr	r3, [pc, #516]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	4b7d      	ldr	r3, [pc, #500]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a7c      	ldr	r2, [pc, #496]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b7a      	ldr	r3, [pc, #488]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0e:	4b77      	ldr	r3, [pc, #476]	; (80040ec <HAL_RCC_OscConfig+0x474>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d118      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1a:	4b74      	ldr	r3, [pc, #464]	; (80040ec <HAL_RCC_OscConfig+0x474>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a73      	ldr	r2, [pc, #460]	; (80040ec <HAL_RCC_OscConfig+0x474>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f26:	f7fe ffb5 	bl	8002e94 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2e:	f7fe ffb1 	bl	8002e94 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e10c      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <HAL_RCC_OscConfig+0x474>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x2ea>
 8003f54:	4b64      	ldr	r3, [pc, #400]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a63      	ldr	r2, [pc, #396]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	e01c      	b.n	8003f9c <HAL_RCC_OscConfig+0x324>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x30c>
 8003f6a:	4b5f      	ldr	r3, [pc, #380]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	4a5e      	ldr	r2, [pc, #376]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	6713      	str	r3, [r2, #112]	; 0x70
 8003f76:	4b5c      	ldr	r3, [pc, #368]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a5b      	ldr	r2, [pc, #364]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	e00b      	b.n	8003f9c <HAL_RCC_OscConfig+0x324>
 8003f84:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	4a57      	ldr	r2, [pc, #348]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f90:	4b55      	ldr	r3, [pc, #340]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a54      	ldr	r2, [pc, #336]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f023 0304 	bic.w	r3, r3, #4
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d015      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fe ff76 	bl	8002e94 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fe ff72 	bl	8002e94 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0cb      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc2:	4b49      	ldr	r3, [pc, #292]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0ee      	beq.n	8003fac <HAL_RCC_OscConfig+0x334>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd0:	f7fe ff60 	bl	8002e94 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fe ff5c 	bl	8002e94 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0b5      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fee:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1ee      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004000:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4a38      	ldr	r2, [pc, #224]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a1 	beq.w	8004158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b08      	cmp	r3, #8
 8004020:	d05c      	beq.n	80040dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d141      	bne.n	80040ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_RCC_OscConfig+0x478>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe ff30 	bl	8002e94 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe ff2c 	bl	8002e94 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e087      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	019b      	lsls	r3, r3, #6
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	3b01      	subs	r3, #1
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	491b      	ldr	r1, [pc, #108]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_RCC_OscConfig+0x478>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fe ff05 	bl	8002e94 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408e:	f7fe ff01 	bl	8002e94 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e05c      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x416>
 80040ac:	e054      	b.n	8004158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_RCC_OscConfig+0x478>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe feee 	bl	8002e94 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fe feea 	bl	8002e94 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e045      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_OscConfig+0x470>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x444>
 80040da:	e03d      	b.n	8004158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e038      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40007000 	.word	0x40007000
 80040f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCC_OscConfig+0x4ec>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d028      	beq.n	8004154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d121      	bne.n	8004154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d11a      	bne.n	8004154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800412a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800412c:	4293      	cmp	r3, r2
 800412e:	d111      	bne.n	8004154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	3b01      	subs	r3, #1
 800413e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d107      	bne.n	8004154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800

08004168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0cc      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b68      	ldr	r3, [pc, #416]	; (8004320 <HAL_RCC_ClockConfig+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d90c      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b65      	ldr	r3, [pc, #404]	; (8004320 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b63      	ldr	r3, [pc, #396]	; (8004320 <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0b8      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041bc:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4a58      	ldr	r2, [pc, #352]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d4:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a52      	ldr	r2, [pc, #328]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b50      	ldr	r3, [pc, #320]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	494d      	ldr	r1, [pc, #308]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d044      	beq.n	8004288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	4b47      	ldr	r3, [pc, #284]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d119      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07f      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d003      	beq.n	8004226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004222:	2b03      	cmp	r3, #3
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	4b3f      	ldr	r3, [pc, #252]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e06f      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e067      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004246:	4b37      	ldr	r3, [pc, #220]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4934      	ldr	r1, [pc, #208]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004258:	f7fe fe1c 	bl	8002e94 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fe fe18 	bl	8002e94 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e04f      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	4b2b      	ldr	r3, [pc, #172]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 020c 	and.w	r2, r3, #12
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	429a      	cmp	r2, r3
 8004286:	d1eb      	bne.n	8004260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <HAL_RCC_ClockConfig+0x1b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d20c      	bcs.n	80042b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e032      	b.n	8004316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4916      	ldr	r1, [pc, #88]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	490e      	ldr	r1, [pc, #56]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ee:	f000 f821 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	490a      	ldr	r1, [pc, #40]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 8004300:	5ccb      	ldrb	r3, [r1, r3]
 8004302:	fa22 f303 	lsr.w	r3, r2, r3
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fbb8 	bl	8002a84 <HAL_InitTick>

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023c00 	.word	0x40023c00
 8004324:	40023800 	.word	0x40023800
 8004328:	0800c058 	.word	0x0800c058
 800432c:	200007fc 	.word	0x200007fc
 8004330:	20000800 	.word	0x20000800

08004334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004338:	b094      	sub	sp, #80	; 0x50
 800433a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	647b      	str	r3, [r7, #68]	; 0x44
 8004340:	2300      	movs	r3, #0
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004344:	2300      	movs	r3, #0
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800434c:	4b79      	ldr	r3, [pc, #484]	; (8004534 <HAL_RCC_GetSysClockFreq+0x200>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b08      	cmp	r3, #8
 8004356:	d00d      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x40>
 8004358:	2b08      	cmp	r3, #8
 800435a:	f200 80e1 	bhi.w	8004520 <HAL_RCC_GetSysClockFreq+0x1ec>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x34>
 8004362:	2b04      	cmp	r3, #4
 8004364:	d003      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0x3a>
 8004366:	e0db      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004368:	4b73      	ldr	r3, [pc, #460]	; (8004538 <HAL_RCC_GetSysClockFreq+0x204>)
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800436c:	e0db      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436e:	4b73      	ldr	r3, [pc, #460]	; (800453c <HAL_RCC_GetSysClockFreq+0x208>)
 8004370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004372:	e0d8      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004374:	4b6f      	ldr	r3, [pc, #444]	; (8004534 <HAL_RCC_GetSysClockFreq+0x200>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437e:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_GetSysClockFreq+0x200>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d063      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438a:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <HAL_RCC_GetSysClockFreq+0x200>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	2200      	movs	r2, #0
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38
 8004394:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439c:	633b      	str	r3, [r7, #48]	; 0x30
 800439e:	2300      	movs	r3, #0
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
 80043a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043a6:	4622      	mov	r2, r4
 80043a8:	462b      	mov	r3, r5
 80043aa:	f04f 0000 	mov.w	r0, #0
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	0159      	lsls	r1, r3, #5
 80043b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b8:	0150      	lsls	r0, r2, #5
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4621      	mov	r1, r4
 80043c0:	1a51      	subs	r1, r2, r1
 80043c2:	6139      	str	r1, [r7, #16]
 80043c4:	4629      	mov	r1, r5
 80043c6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d8:	4659      	mov	r1, fp
 80043da:	018b      	lsls	r3, r1, #6
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043e2:	4651      	mov	r1, sl
 80043e4:	018a      	lsls	r2, r1, #6
 80043e6:	4651      	mov	r1, sl
 80043e8:	ebb2 0801 	subs.w	r8, r2, r1
 80043ec:	4659      	mov	r1, fp
 80043ee:	eb63 0901 	sbc.w	r9, r3, r1
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004406:	4690      	mov	r8, r2
 8004408:	4699      	mov	r9, r3
 800440a:	4623      	mov	r3, r4
 800440c:	eb18 0303 	adds.w	r3, r8, r3
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	462b      	mov	r3, r5
 8004414:	eb49 0303 	adc.w	r3, r9, r3
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004426:	4629      	mov	r1, r5
 8004428:	024b      	lsls	r3, r1, #9
 800442a:	4621      	mov	r1, r4
 800442c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004430:	4621      	mov	r1, r4
 8004432:	024a      	lsls	r2, r1, #9
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443a:	2200      	movs	r2, #0
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
 800443e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004444:	f7fc fc30 	bl	8000ca8 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4613      	mov	r3, r2
 800444e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004450:	e058      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004452:	4b38      	ldr	r3, [pc, #224]	; (8004534 <HAL_RCC_GetSysClockFreq+0x200>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	2200      	movs	r2, #0
 800445a:	4618      	mov	r0, r3
 800445c:	4611      	mov	r1, r2
 800445e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	f04f 0000 	mov.w	r0, #0
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	0159      	lsls	r1, r3, #5
 800447a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447e:	0150      	lsls	r0, r2, #5
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4641      	mov	r1, r8
 8004486:	ebb2 0a01 	subs.w	sl, r2, r1
 800448a:	4649      	mov	r1, r9
 800448c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800449c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a4:	ebb2 040a 	subs.w	r4, r2, sl
 80044a8:	eb63 050b 	sbc.w	r5, r3, fp
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	00eb      	lsls	r3, r5, #3
 80044b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ba:	00e2      	lsls	r2, r4, #3
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	4643      	mov	r3, r8
 80044c2:	18e3      	adds	r3, r4, r3
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	464b      	mov	r3, r9
 80044c8:	eb45 0303 	adc.w	r3, r5, r3
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044da:	4629      	mov	r1, r5
 80044dc:	028b      	lsls	r3, r1, #10
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e4:	4621      	mov	r1, r4
 80044e6:	028a      	lsls	r2, r1, #10
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ee:	2200      	movs	r2, #0
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	61fa      	str	r2, [r7, #28]
 80044f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f8:	f7fc fbd6 	bl	8000ca8 <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4613      	mov	r3, r2
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_GetSysClockFreq+0x200>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	3301      	adds	r3, #1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800451e:	e002      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetSysClockFreq+0x204>)
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004528:	4618      	mov	r0, r3
 800452a:	3750      	adds	r7, #80	; 0x50
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	00f42400 	.word	0x00f42400
 800453c:	007a1200 	.word	0x007a1200

08004540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_RCC_GetHCLKFreq+0x14>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200007fc 	.word	0x200007fc

08004558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800455c:	f7ff fff0 	bl	8004540 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0a9b      	lsrs	r3, r3, #10
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4903      	ldr	r1, [pc, #12]	; (800457c <HAL_RCC_GetPCLK1Freq+0x24>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	0800c068 	.word	0x0800c068

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004584:	f7ff ffdc 	bl	8004540 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0b5b      	lsrs	r3, r3, #13
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4903      	ldr	r1, [pc, #12]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	0800c068 	.word	0x0800c068

080045a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	220f      	movs	r2, #15
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0203 	and.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <HAL_RCC_GetClockConfig+0x60>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 020f 	and.w	r2, r3, #15
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	40023c00 	.word	0x40023c00

0800460c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07b      	b.n	8004716 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d108      	bne.n	8004638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462e:	d009      	beq.n	8004644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	61da      	str	r2, [r3, #28]
 8004636:	e005      	b.n	8004644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fe f908 	bl	8002874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c8:	ea42 0103 	orr.w	r1, r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0104 	and.w	r1, r3, #4
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0210 	and.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004704:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_SPI_Transmit+0x22>
 800473c:	2302      	movs	r3, #2
 800473e:	e126      	b.n	800498e <HAL_SPI_Transmit+0x270>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004748:	f7fe fba4 	bl	8002e94 <HAL_GetTick>
 800474c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d002      	beq.n	8004764 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004762:	e10b      	b.n	800497c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Transmit+0x52>
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004774:	e102      	b.n	800497c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047bc:	d10f      	bne.n	80047de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d007      	beq.n	80047fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004804:	d14b      	bne.n	800489e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0xf6>
 800480e:	8afb      	ldrh	r3, [r7, #22]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d13e      	bne.n	8004892 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004838:	e02b      	b.n	8004892 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	d112      	bne.n	800486e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	1c9a      	adds	r2, r3, #2
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	86da      	strh	r2, [r3, #54]	; 0x36
 800486c:	e011      	b.n	8004892 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800486e:	f7fe fb11 	bl	8002e94 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d803      	bhi.n	8004886 <HAL_SPI_Transmit+0x168>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d102      	bne.n	800488c <HAL_SPI_Transmit+0x16e>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004890:	e074      	b.n	800497c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ce      	bne.n	800483a <HAL_SPI_Transmit+0x11c>
 800489c:	e04c      	b.n	8004938 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_SPI_Transmit+0x18e>
 80048a6:	8afb      	ldrh	r3, [r7, #22]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d140      	bne.n	800492e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048d2:	e02c      	b.n	800492e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d113      	bne.n	800490a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	86da      	strh	r2, [r3, #54]	; 0x36
 8004908:	e011      	b.n	800492e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800490a:	f7fe fac3 	bl	8002e94 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d803      	bhi.n	8004922 <HAL_SPI_Transmit+0x204>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d102      	bne.n	8004928 <HAL_SPI_Transmit+0x20a>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800492c:	e026      	b.n	800497c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1cd      	bne.n	80048d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	6839      	ldr	r1, [r7, #0]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fbcb 	bl	80050d8 <SPI_EndRxTxTransaction>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e000      	b.n	800497c <HAL_SPI_Transmit+0x25e>
  }

error:
 800497a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800498c:	7ffb      	ldrb	r3, [r7, #31]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b088      	sub	sp, #32
 800499a:	af02      	add	r7, sp, #8
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b2:	d112      	bne.n	80049da <HAL_SPI_Receive+0x44>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10e      	bne.n	80049da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2204      	movs	r2, #4
 80049c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f8f1 	bl	8004bb8 <HAL_SPI_TransmitReceive>
 80049d6:	4603      	mov	r3, r0
 80049d8:	e0ea      	b.n	8004bb0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_SPI_Receive+0x52>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0e3      	b.n	8004bb0 <HAL_SPI_Receive+0x21a>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049f0:	f7fe fa50 	bl	8002e94 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
 8004a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a06:	e0ca      	b.n	8004b9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_SPI_Receive+0x7e>
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a18:	e0c1      	b.n	8004b9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	d10f      	bne.n	8004a82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d007      	beq.n	8004aa0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d162      	bne.n	8004b6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004aa8:	e02e      	b.n	8004b08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d115      	bne.n	8004ae4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f103 020c 	add.w	r2, r3, #12
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae2:	e011      	b.n	8004b08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae4:	f7fe f9d6 	bl	8002e94 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d803      	bhi.n	8004afc <HAL_SPI_Receive+0x166>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d102      	bne.n	8004b02 <HAL_SPI_Receive+0x16c>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b06:	e04a      	b.n	8004b9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1cb      	bne.n	8004aaa <HAL_SPI_Receive+0x114>
 8004b12:	e031      	b.n	8004b78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d113      	bne.n	8004b4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	1c9a      	adds	r2, r3, #2
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b48:	e011      	b.n	8004b6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4a:	f7fe f9a3 	bl	8002e94 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d803      	bhi.n	8004b62 <HAL_SPI_Receive+0x1cc>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d102      	bne.n	8004b68 <HAL_SPI_Receive+0x1d2>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b6c:	e017      	b.n	8004b9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1cd      	bne.n	8004b14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fa45 	bl	800500c <SPI_EndRxTransaction>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
 8004b9a:	e000      	b.n	8004b9e <HAL_SPI_Receive+0x208>
  }

error :
 8004b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	; 0x30
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x26>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e18a      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x33c>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be6:	f7fe f955 	bl	8002e94 <HAL_GetTick>
 8004bea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d00f      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x70>
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d107      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x68>
 8004c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d003      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c26:	e15b      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_SPI_TransmitReceive+0x82>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_TransmitReceive+0x82>
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c40:	e14e      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d003      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2205      	movs	r2, #5
 8004c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	887a      	ldrh	r2, [r7, #2]
 8004c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	887a      	ldrh	r2, [r7, #2]
 8004c6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	887a      	ldrh	r2, [r7, #2]
 8004c78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	887a      	ldrh	r2, [r7, #2]
 8004c7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d007      	beq.n	8004caa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb2:	d178      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x10a>
 8004cbc:	8b7b      	ldrh	r3, [r7, #26]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d166      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	1c9a      	adds	r2, r3, #2
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce6:	e053      	b.n	8004d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d11b      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x176>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d016      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x176>
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d113      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	881a      	ldrh	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x1b8>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d014      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	b292      	uxth	r2, r2
 8004d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d70:	f7fe f890 	bl	8002e94 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d807      	bhi.n	8004d90 <HAL_SPI_TransmitReceive+0x1d8>
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d003      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d8e:	e0a7      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1a6      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x130>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1a1      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x130>
 8004da4:	e07c      	b.n	8004ea0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x1fc>
 8004dae:	8b7b      	ldrh	r3, [r7, #26]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d16b      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dda:	e057      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d11c      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x26c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d017      	beq.n	8004e24 <HAL_SPI_TransmitReceive+0x26c>
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d114      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d119      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x2ae>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d014      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e62:	2301      	movs	r3, #1
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e66:	f7fe f815 	bl	8002e94 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d803      	bhi.n	8004e7e <HAL_SPI_TransmitReceive+0x2c6>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d102      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x2cc>
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d103      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e8a:	e029      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1a2      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x224>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d19d      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f917 	bl	80050d8 <SPI_EndRxTxTransaction>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ebc:	e010      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	e000      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3730      	adds	r7, #48	; 0x30
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f0c:	f7fd ffc2 	bl	8002e94 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f1c:	f7fd ffba 	bl	8002e94 <HAL_GetTick>
 8004f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f22:	4b39      	ldr	r3, [pc, #228]	; (8005008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	015b      	lsls	r3, r3, #5
 8004f28:	0d1b      	lsrs	r3, r3, #20
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f32:	e054      	b.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d050      	beq.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f3c:	f7fd ffaa 	bl	8002e94 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d902      	bls.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d13d      	bne.n	8004fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6a:	d111      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f74:	d004      	beq.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7e:	d107      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d10f      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e017      	b.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d19b      	bne.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200007fc 	.word	0x200007fc

0800500c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005020:	d111      	bne.n	8005046 <SPI_EndRxTransaction+0x3a>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502a:	d004      	beq.n	8005036 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005034:	d107      	bne.n	8005046 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d12a      	bne.n	80050a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005058:	d012      	beq.n	8005080 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2200      	movs	r2, #0
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff ff49 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02d      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e026      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	2101      	movs	r1, #1
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ff36 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01a      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e013      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2101      	movs	r1, #1
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff23 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e000      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <SPI_EndRxTxTransaction+0x7c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <SPI_EndRxTxTransaction+0x80>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0d5b      	lsrs	r3, r3, #21
 80050f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005102:	d112      	bne.n	800512a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fef4 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e00f      	b.n	800514a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	3b01      	subs	r3, #1
 8005134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005140:	2b80      	cmp	r3, #128	; 0x80
 8005142:	d0f2      	beq.n	800512a <SPI_EndRxTxTransaction+0x52>
 8005144:	e000      	b.n	8005148 <SPI_EndRxTxTransaction+0x70>
        break;
 8005146:	bf00      	nop
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	200007fc 	.word	0x200007fc
 8005158:	165e9f81 	.word	0x165e9f81

0800515c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e041      	b.n	80051f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fd fbbe 	bl	8002904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f000 fafe 	bl	800579c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e046      	b.n	80052a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <HAL_TIM_Base_Start+0xb4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d022      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d01d      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <HAL_TIM_Base_Start+0xb8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d018      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <HAL_TIM_Base_Start+0xbc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <HAL_TIM_Base_Start+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00e      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_TIM_Base_Start+0xc4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <HAL_TIM_Base_Start+0xc8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_TIM_Base_Start+0xcc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d111      	bne.n	8005290 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b06      	cmp	r3, #6
 800527c:	d010      	beq.n	80052a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	e007      	b.n	80052a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40000c00 	.word	0x40000c00
 80052c0:	40010400 	.word	0x40010400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d001      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e04e      	b.n	8005382 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a23      	ldr	r2, [pc, #140]	; (8005390 <HAL_TIM_Base_Start_IT+0xc4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d022      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d01d      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_TIM_Base_Start_IT+0xc8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d018      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_TIM_Base_Start_IT+0xcc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1c      	ldr	r2, [pc, #112]	; (800539c <HAL_TIM_Base_Start_IT+0xd0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d111      	bne.n	8005370 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b06      	cmp	r3, #6
 800535c:	d010      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	e007      	b.n	8005380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40001800 	.word	0x40001800

080053ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0202 	mvn.w	r2, #2
 80053d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9b5 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9a7 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f9b8 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0204 	mvn.w	r2, #4
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f98b 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f97d 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f98e 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b08      	cmp	r3, #8
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0208 	mvn.w	r2, #8
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2204      	movs	r2, #4
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f961 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f953 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f964 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0210 	mvn.w	r2, #16
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2208      	movs	r2, #8
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f937 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f929 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f93a 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0201 	mvn.w	r2, #1
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fd f95c 	bl	80027e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fae0 	bl	8005b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f8ff 	bl	8005786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b20      	cmp	r3, #32
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0220 	mvn.w	r2, #32
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 faaa 	bl	8005b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e0b4      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x186>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005610:	d03e      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0xd4>
 8005612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005616:	f200 8087 	bhi.w	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561e:	f000 8086 	beq.w	800572e <HAL_TIM_ConfigClockSource+0x172>
 8005622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005626:	d87f      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b70      	cmp	r3, #112	; 0x70
 800562a:	d01a      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0xa6>
 800562c:	2b70      	cmp	r3, #112	; 0x70
 800562e:	d87b      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b60      	cmp	r3, #96	; 0x60
 8005632:	d050      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005634:	2b60      	cmp	r3, #96	; 0x60
 8005636:	d877      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b50      	cmp	r3, #80	; 0x50
 800563a:	d03c      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0xfa>
 800563c:	2b50      	cmp	r3, #80	; 0x50
 800563e:	d873      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d058      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d86f      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	d064      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15a>
 800564c:	2b30      	cmp	r3, #48	; 0x30
 800564e:	d86b      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d060      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15a>
 8005654:	2b20      	cmp	r3, #32
 8005656:	d867      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d05c      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15a>
 800565c:	2b10      	cmp	r3, #16
 800565e:	d05a      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15a>
 8005660:	e062      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f000 f9ad 	bl	80059d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	609a      	str	r2, [r3, #8]
      break;
 800568e:	e04f      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6899      	ldr	r1, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f000 f996 	bl	80059d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b2:	609a      	str	r2, [r3, #8]
      break;
 80056b4:	e03c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 f90a 	bl	80058dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2150      	movs	r1, #80	; 0x50
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f963 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 80056d4:	e02c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 f929 	bl	800593a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2160      	movs	r1, #96	; 0x60
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f953 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 80056f4:	e01c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	461a      	mov	r2, r3
 8005704:	f000 f8ea 	bl	80058dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2140      	movs	r1, #64	; 0x40
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f943 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 8005714:	e00c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f000 f93a 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 8005726:	e003      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e000      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800572e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a40      	ldr	r2, [pc, #256]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ba:	d00f      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3d      	ldr	r2, [pc, #244]	; (80058b4 <TIM_Base_SetConfig+0x118>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3c      	ldr	r2, [pc, #240]	; (80058b8 <TIM_Base_SetConfig+0x11c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a3b      	ldr	r2, [pc, #236]	; (80058bc <TIM_Base_SetConfig+0x120>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a3a      	ldr	r2, [pc, #232]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d108      	bne.n	80057ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d02b      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d027      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2c      	ldr	r2, [pc, #176]	; (80058b4 <TIM_Base_SetConfig+0x118>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d023      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2b      	ldr	r2, [pc, #172]	; (80058b8 <TIM_Base_SetConfig+0x11c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01f      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <TIM_Base_SetConfig+0x120>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01b      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a29      	ldr	r2, [pc, #164]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d017      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <TIM_Base_SetConfig+0x128>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <TIM_Base_SetConfig+0x12c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00f      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <TIM_Base_SetConfig+0x130>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00b      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a25      	ldr	r2, [pc, #148]	; (80058d0 <TIM_Base_SetConfig+0x134>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a24      	ldr	r2, [pc, #144]	; (80058d4 <TIM_Base_SetConfig+0x138>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a23      	ldr	r2, [pc, #140]	; (80058d8 <TIM_Base_SetConfig+0x13c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d108      	bne.n	8005860 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a0c      	ldr	r2, [pc, #48]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d103      	bne.n	800589c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	615a      	str	r2, [r3, #20]
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00
 80058c0:	40010400 	.word	0x40010400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800
 80058d0:	40001800 	.word	0x40001800
 80058d4:	40001c00 	.word	0x40001c00
 80058d8:	40002000 	.word	0x40002000

080058dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f023 0201 	bic.w	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f023 030a 	bic.w	r3, r3, #10
 8005918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800593a:	b480      	push	{r7}
 800593c:	b087      	sub	sp, #28
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0210 	bic.w	r2, r3, #16
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	031b      	lsls	r3, r3, #12
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005976:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f043 0307 	orr.w	r3, r3, #7
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	021a      	lsls	r2, r3, #8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	609a      	str	r2, [r3, #8]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e05a      	b.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a21      	ldr	r2, [pc, #132]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a74:	d01d      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d10c      	bne.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40010400 	.word	0x40010400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40001800 	.word	0x40001800

08005b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e03f      	b.n	8005bc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fc ff10 	bl	800297c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2224      	movs	r2, #36	; 0x24
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fead 	bl	80068d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d130      	bne.n	8005c46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_UART_Transmit_IT+0x26>
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e029      	b.n	8005c48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Transmit_IT+0x38>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e022      	b.n	8005c48 <HAL_UART_Transmit_IT+0x7e>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2221      	movs	r2, #33	; 0x21
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e000      	b.n	8005c48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d11d      	bne.n	8005caa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_UART_Receive_DMA+0x26>
 8005c74:	88fb      	ldrh	r3, [r7, #6]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e016      	b.n	8005cac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_UART_Receive_DMA+0x38>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e00f      	b.n	8005cac <HAL_UART_Receive_DMA+0x58>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fbb7 	bl	8006414 <UART_Start_Receive_DMA>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	e000      	b.n	8005cac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
  }
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b0ba      	sub	sp, #232	; 0xe8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10f      	bne.n	8005d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_UART_IRQHandler+0x66>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fd23 	bl	800675e <UART_Receive_IT>
      return;
 8005d18:	e256      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80de 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x22c>
 8005d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80d1 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <HAL_UART_IRQHandler+0xae>
 8005d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_UART_IRQHandler+0xd2>
 8005d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f043 0202 	orr.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_UART_IRQHandler+0xf6>
 8005d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f043 0204 	orr.w	r2, r3, #4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d011      	beq.n	8005dda <HAL_UART_IRQHandler+0x126>
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f043 0208 	orr.w	r2, r3, #8
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 81ed 	beq.w	80061be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_UART_IRQHandler+0x14e>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fcae 	bl	800675e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_UART_IRQHandler+0x17a>
 8005e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d04f      	beq.n	8005ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fbb6 	bl	80065a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d141      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d9      	bne.n	8005e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	4a7d      	ldr	r2, [pc, #500]	; (8006090 <HAL_UART_IRQHandler+0x3dc>)
 8005e9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd fa7e 	bl	80033a4 <HAL_DMA_Abort_IT>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	e00e      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f99a 	bl	80061f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e00a      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f996 	bl	80061f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	e006      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f992 	bl	80061f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005eda:	e170      	b.n	80061be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005edc:	bf00      	nop
    return;
 8005ede:	e16e      	b.n	80061be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f040 814a 	bne.w	800617e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8143 	beq.w	800617e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 813c 	beq.w	800617e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	f040 80b4 	bne.w	8006094 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8140 	beq.w	80061c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	f080 8139 	bcs.w	80061c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f62:	f000 8088 	beq.w	8006076 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1d9      	bne.n	8005f66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e1      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006012:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006014:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006018:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e3      	bne.n	8005fee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006058:	65ba      	str	r2, [r7, #88]	; 0x58
 800605a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800605e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e3      	bne.n	8006034 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	4618      	mov	r0, r3
 8006072:	f7fd f927 	bl	80032c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800607e:	b29b      	uxth	r3, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8c0 	bl	800620c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800608c:	e099      	b.n	80061c2 <HAL_UART_IRQHandler+0x50e>
 800608e:	bf00      	nop
 8006090:	08006667 	.word	0x08006667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800609c:	b29b      	uxth	r3, r3
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 808b 	beq.w	80061c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80060b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8086 	beq.w	80061c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060de:	647a      	str	r2, [r7, #68]	; 0x44
 80060e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e3      	bne.n	80060ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3314      	adds	r3, #20
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	623b      	str	r3, [r7, #32]
   return(result);
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3314      	adds	r3, #20
 8006112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006116:	633a      	str	r2, [r7, #48]	; 0x30
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800611c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e3      	bne.n	80060f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	60fb      	str	r3, [r7, #12]
   return(result);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0310 	bic.w	r3, r3, #16
 800614e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800615c:	61fa      	str	r2, [r7, #28]
 800615e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	617b      	str	r3, [r7, #20]
   return(result);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e3      	bne.n	8006138 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f848 	bl	800620c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800617c:	e023      	b.n	80061c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <HAL_UART_IRQHandler+0x4ea>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fa79 	bl	800668e <UART_Transmit_IT>
    return;
 800619c:	e014      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800619e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00e      	beq.n	80061c8 <HAL_UART_IRQHandler+0x514>
 80061aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fab9 	bl	800672e <UART_EndTransmit_IT>
    return;
 80061bc:	e004      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
    return;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
      return;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
      return;
 80061c6:	bf00      	nop
  }
}
 80061c8:	37e8      	adds	r7, #232	; 0xe8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop

080061d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b09c      	sub	sp, #112	; 0x70
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d172      	bne.n	8006326 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006242:	2200      	movs	r2, #0
 8006244:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625c:	66bb      	str	r3, [r7, #104]	; 0x68
 800625e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006266:	65ba      	str	r2, [r7, #88]	; 0x58
 8006268:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800626c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e5      	bne.n	8006246 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3314      	adds	r3, #20
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	667b      	str	r3, [r7, #100]	; 0x64
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3314      	adds	r3, #20
 8006298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800629a:	647a      	str	r2, [r7, #68]	; 0x44
 800629c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e5      	bne.n	800627a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3314      	adds	r3, #20
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	623b      	str	r3, [r7, #32]
   return(result);
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ce:	633a      	str	r2, [r7, #48]	; 0x30
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e5      	bne.n	80062ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d119      	bne.n	8006326 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	60fb      	str	r3, [r7, #12]
   return(result);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006312:	61fa      	str	r2, [r7, #28]
 8006314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	69b9      	ldr	r1, [r7, #24]
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	617b      	str	r3, [r7, #20]
   return(result);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	2b01      	cmp	r3, #1
 800632c:	d106      	bne.n	800633c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006332:	4619      	mov	r1, r3
 8006334:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006336:	f7ff ff69 	bl	800620c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800633a:	e002      	b.n	8006342 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800633c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800633e:	f7fb fc9f 	bl	8001c80 <HAL_UART_RxCpltCallback>
}
 8006342:	bf00      	nop
 8006344:	3770      	adds	r7, #112	; 0x70
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	2b01      	cmp	r3, #1
 800635e:	d108      	bne.n	8006372 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	b29b      	uxth	r3, r3
 8006368:	4619      	mov	r1, r3
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff ff4e 	bl	800620c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006370:	e002      	b.n	8006378 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ff36 	bl	80061e4 <HAL_UART_RxHalfCpltCallback>
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	bf0c      	ite	eq
 80063a0:	2301      	moveq	r3, #1
 80063a2:	2300      	movne	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b21      	cmp	r3, #33	; 0x21
 80063b2:	d108      	bne.n	80063c6 <UART_DMAError+0x46>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2200      	movs	r2, #0
 80063be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f000 f8c5 	bl	8006550 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b22      	cmp	r3, #34	; 0x22
 80063e6:	d108      	bne.n	80063fa <UART_DMAError+0x7a>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2200      	movs	r2, #0
 80063f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063f4:	68b8      	ldr	r0, [r7, #8]
 80063f6:	f000 f8d3 	bl	80065a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f043 0210 	orr.w	r2, r3, #16
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006406:	68b8      	ldr	r0, [r7, #8]
 8006408:	f7ff fef6 	bl	80061f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b098      	sub	sp, #96	; 0x60
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2222      	movs	r2, #34	; 0x22
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	4a40      	ldr	r2, [pc, #256]	; (8006544 <UART_Start_Receive_DMA+0x130>)
 8006442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	4a3f      	ldr	r2, [pc, #252]	; (8006548 <UART_Start_Receive_DMA+0x134>)
 800644a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	4a3e      	ldr	r2, [pc, #248]	; (800654c <UART_Start_Receive_DMA+0x138>)
 8006452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	2200      	movs	r2, #0
 800645a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3304      	adds	r3, #4
 800646c:	4619      	mov	r1, r3
 800646e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	f7fc fece 	bl	8003214 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d019      	beq.n	80064d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330c      	adds	r3, #12
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80064c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e5      	bne.n	800649e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3314      	adds	r3, #20
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	657b      	str	r3, [r7, #84]	; 0x54
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3314      	adds	r3, #20
 80064f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e5      	bne.n	80064d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3314      	adds	r3, #20
 800650c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	617b      	str	r3, [r7, #20]
   return(result);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651c:	653b      	str	r3, [r7, #80]	; 0x50
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3314      	adds	r3, #20
 8006524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006526:	627a      	str	r2, [r7, #36]	; 0x24
 8006528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6a39      	ldr	r1, [r7, #32]
 800652c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	61fb      	str	r3, [r7, #28]
   return(result);
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e5      	bne.n	8006506 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3760      	adds	r7, #96	; 0x60
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	08006225 	.word	0x08006225
 8006548:	0800634b 	.word	0x0800634b
 800654c:	08006381 	.word	0x08006381

08006550 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	60bb      	str	r3, [r7, #8]
   return(result);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	61ba      	str	r2, [r7, #24]
 800657a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6979      	ldr	r1, [r7, #20]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	613b      	str	r3, [r7, #16]
   return(result);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e5      	bne.n	8006558 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006594:	bf00      	nop
 8006596:	3724      	adds	r7, #36	; 0x24
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b095      	sub	sp, #84	; 0x54
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065c8:	643a      	str	r2, [r7, #64]	; 0x40
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3314      	adds	r3, #20
 80065e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	2b01      	cmp	r3, #1
 8006616:	d119      	bne.n	800664c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	60bb      	str	r3, [r7, #8]
   return(result);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006638:	61ba      	str	r2, [r7, #24]
 800663a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6979      	ldr	r1, [r7, #20]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	613b      	str	r3, [r7, #16]
   return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800665a:	bf00      	nop
 800665c:	3754      	adds	r7, #84	; 0x54
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff fdb9 	bl	80061f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b21      	cmp	r3, #33	; 0x21
 80066a0:	d13e      	bne.n	8006720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066aa:	d114      	bne.n	80066d6 <UART_Transmit_IT+0x48>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d110      	bne.n	80066d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	1c9a      	adds	r2, r3, #2
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	621a      	str	r2, [r3, #32]
 80066d4:	e008      	b.n	80066e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6211      	str	r1, [r2, #32]
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4619      	mov	r1, r3
 80066f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10f      	bne.n	800671c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800670a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800671a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fd3e 	bl	80061d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b08c      	sub	sp, #48	; 0x30
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b22      	cmp	r3, #34	; 0x22
 8006770:	f040 80ab 	bne.w	80068ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d117      	bne.n	80067ae <UART_Receive_IT+0x50>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d113      	bne.n	80067ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679c:	b29a      	uxth	r2, r3
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	1c9a      	adds	r2, r3, #2
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	629a      	str	r2, [r3, #40]	; 0x28
 80067ac:	e026      	b.n	80067fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c0:	d007      	beq.n	80067d2 <UART_Receive_IT+0x74>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <UART_Receive_IT+0x82>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e008      	b.n	80067f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29b      	uxth	r3, r3
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4619      	mov	r1, r3
 800680a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800680c:	2b00      	cmp	r3, #0
 800680e:	d15a      	bne.n	80068c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0220 	bic.w	r2, r2, #32
 800681e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800682e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695a      	ldr	r2, [r3, #20]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	2b01      	cmp	r3, #1
 800684e:	d135      	bne.n	80068bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	613b      	str	r3, [r7, #16]
   return(result);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f023 0310 	bic.w	r3, r3, #16
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	623a      	str	r2, [r7, #32]
 8006878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	61bb      	str	r3, [r7, #24]
   return(result);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d10a      	bne.n	80068ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fca9 	bl	800620c <HAL_UARTEx_RxEventCallback>
 80068ba:	e002      	b.n	80068c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fb f9df 	bl	8001c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e002      	b.n	80068cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e000      	b.n	80068cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068ca:	2302      	movs	r3, #2
  }
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3730      	adds	r7, #48	; 0x30
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068d8:	b0c0      	sub	sp, #256	; 0x100
 80068da:	af00      	add	r7, sp, #0
 80068dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	68d9      	ldr	r1, [r3, #12]
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	ea40 0301 	orr.w	r3, r0, r1
 80068fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	431a      	orrs	r2, r3
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	431a      	orrs	r2, r3
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800692c:	f021 010c 	bic.w	r1, r1, #12
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800693a:	430b      	orrs	r3, r1
 800693c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800693e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800694a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694e:	6999      	ldr	r1, [r3, #24]
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	ea40 0301 	orr.w	r3, r0, r1
 800695a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	4b8f      	ldr	r3, [pc, #572]	; (8006ba0 <UART_SetConfig+0x2cc>)
 8006964:	429a      	cmp	r2, r3
 8006966:	d005      	beq.n	8006974 <UART_SetConfig+0xa0>
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b8d      	ldr	r3, [pc, #564]	; (8006ba4 <UART_SetConfig+0x2d0>)
 8006970:	429a      	cmp	r2, r3
 8006972:	d104      	bne.n	800697e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fd fe04 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8006978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800697c:	e003      	b.n	8006986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800697e:	f7fd fdeb 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8006982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006990:	f040 810c 	bne.w	8006bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006998:	2200      	movs	r2, #0
 800699a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800699e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069a6:	4622      	mov	r2, r4
 80069a8:	462b      	mov	r3, r5
 80069aa:	1891      	adds	r1, r2, r2
 80069ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80069ae:	415b      	adcs	r3, r3
 80069b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069b6:	4621      	mov	r1, r4
 80069b8:	eb12 0801 	adds.w	r8, r2, r1
 80069bc:	4629      	mov	r1, r5
 80069be:	eb43 0901 	adc.w	r9, r3, r1
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069d6:	4690      	mov	r8, r2
 80069d8:	4699      	mov	r9, r3
 80069da:	4623      	mov	r3, r4
 80069dc:	eb18 0303 	adds.w	r3, r8, r3
 80069e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069e4:	462b      	mov	r3, r5
 80069e6:	eb49 0303 	adc.w	r3, r9, r3
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a02:	460b      	mov	r3, r1
 8006a04:	18db      	adds	r3, r3, r3
 8006a06:	653b      	str	r3, [r7, #80]	; 0x50
 8006a08:	4613      	mov	r3, r2
 8006a0a:	eb42 0303 	adc.w	r3, r2, r3
 8006a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a18:	f7fa f946 	bl	8000ca8 <__aeabi_uldivmod>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4b61      	ldr	r3, [pc, #388]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006a22:	fba3 2302 	umull	r2, r3, r3, r2
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	011c      	lsls	r4, r3, #4
 8006a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	1891      	adds	r1, r2, r2
 8006a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a44:	415b      	adcs	r3, r3
 8006a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a52:	4649      	mov	r1, r9
 8006a54:	eb43 0b01 	adc.w	fp, r3, r1
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a6c:	4692      	mov	sl, r2
 8006a6e:	469b      	mov	fp, r3
 8006a70:	4643      	mov	r3, r8
 8006a72:	eb1a 0303 	adds.w	r3, sl, r3
 8006a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	18db      	adds	r3, r3, r3
 8006a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006aae:	f7fa f8fb 	bl	8000ca8 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4b3b      	ldr	r3, [pc, #236]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006aba:	fba3 2301 	umull	r2, r3, r3, r1
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2264      	movs	r2, #100	; 0x64
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	1acb      	subs	r3, r1, r3
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ace:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006adc:	441c      	add	r4, r3
 8006ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006af0:	4642      	mov	r2, r8
 8006af2:	464b      	mov	r3, r9
 8006af4:	1891      	adds	r1, r2, r2
 8006af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006af8:	415b      	adcs	r3, r3
 8006afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b00:	4641      	mov	r1, r8
 8006b02:	1851      	adds	r1, r2, r1
 8006b04:	6339      	str	r1, [r7, #48]	; 0x30
 8006b06:	4649      	mov	r1, r9
 8006b08:	414b      	adcs	r3, r1
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b18:	4659      	mov	r1, fp
 8006b1a:	00cb      	lsls	r3, r1, #3
 8006b1c:	4651      	mov	r1, sl
 8006b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b22:	4651      	mov	r1, sl
 8006b24:	00ca      	lsls	r2, r1, #3
 8006b26:	4610      	mov	r0, r2
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	189b      	adds	r3, r3, r2
 8006b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b34:	464b      	mov	r3, r9
 8006b36:	460a      	mov	r2, r1
 8006b38:	eb42 0303 	adc.w	r3, r2, r3
 8006b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b54:	460b      	mov	r3, r1
 8006b56:	18db      	adds	r3, r3, r3
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	eb42 0303 	adc.w	r3, r2, r3
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b6a:	f7fa f89d 	bl	8000ca8 <__aeabi_uldivmod>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006b74:	fba3 1302 	umull	r1, r3, r3, r2
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	2164      	movs	r1, #100	; 0x64
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	3332      	adds	r3, #50	; 0x32
 8006b86:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006b88:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	f003 0207 	and.w	r2, r3, #7
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4422      	add	r2, r4
 8006b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b9c:	e105      	b.n	8006daa <UART_SetConfig+0x4d6>
 8006b9e:	bf00      	nop
 8006ba0:	40011000 	.word	0x40011000
 8006ba4:	40011400 	.word	0x40011400
 8006ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	1891      	adds	r1, r2, r2
 8006bc4:	6239      	str	r1, [r7, #32]
 8006bc6:	415b      	adcs	r3, r3
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bce:	4641      	mov	r1, r8
 8006bd0:	1854      	adds	r4, r2, r1
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	eb43 0501 	adc.w	r5, r3, r1
 8006bd8:	f04f 0200 	mov.w	r2, #0
 8006bdc:	f04f 0300 	mov.w	r3, #0
 8006be0:	00eb      	lsls	r3, r5, #3
 8006be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006be6:	00e2      	lsls	r2, r4, #3
 8006be8:	4614      	mov	r4, r2
 8006bea:	461d      	mov	r5, r3
 8006bec:	4643      	mov	r3, r8
 8006bee:	18e3      	adds	r3, r4, r3
 8006bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	eb45 0303 	adc.w	r3, r5, r3
 8006bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	008b      	lsls	r3, r1, #2
 8006c1e:	4621      	mov	r1, r4
 8006c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c24:	4621      	mov	r1, r4
 8006c26:	008a      	lsls	r2, r1, #2
 8006c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c2c:	f7fa f83c 	bl	8000ca8 <__aeabi_uldivmod>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4b60      	ldr	r3, [pc, #384]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006c36:	fba3 2302 	umull	r2, r3, r3, r2
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	011c      	lsls	r4, r3, #4
 8006c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	1891      	adds	r1, r2, r2
 8006c56:	61b9      	str	r1, [r7, #24]
 8006c58:	415b      	adcs	r3, r3
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c60:	4641      	mov	r1, r8
 8006c62:	1851      	adds	r1, r2, r1
 8006c64:	6139      	str	r1, [r7, #16]
 8006c66:	4649      	mov	r1, r9
 8006c68:	414b      	adcs	r3, r1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c78:	4659      	mov	r1, fp
 8006c7a:	00cb      	lsls	r3, r1, #3
 8006c7c:	4651      	mov	r1, sl
 8006c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c82:	4651      	mov	r1, sl
 8006c84:	00ca      	lsls	r2, r1, #3
 8006c86:	4610      	mov	r0, r2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	189b      	adds	r3, r3, r2
 8006c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c94:	464b      	mov	r3, r9
 8006c96:	460a      	mov	r2, r1
 8006c98:	eb42 0303 	adc.w	r3, r2, r3
 8006c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cb8:	4649      	mov	r1, r9
 8006cba:	008b      	lsls	r3, r1, #2
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	008a      	lsls	r2, r1, #2
 8006cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cca:	f7f9 ffed 	bl	8000ca8 <__aeabi_uldivmod>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	2164      	movs	r1, #100	; 0x64
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	3332      	adds	r3, #50	; 0x32
 8006ce6:	4a34      	ldr	r2, [pc, #208]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cf2:	441c      	add	r4, r3
 8006cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8006cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8006cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d02:	4642      	mov	r2, r8
 8006d04:	464b      	mov	r3, r9
 8006d06:	1891      	adds	r1, r2, r2
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	415b      	adcs	r3, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d12:	4641      	mov	r1, r8
 8006d14:	1851      	adds	r1, r2, r1
 8006d16:	6039      	str	r1, [r7, #0]
 8006d18:	4649      	mov	r1, r9
 8006d1a:	414b      	adcs	r3, r1
 8006d1c:	607b      	str	r3, [r7, #4]
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d2a:	4659      	mov	r1, fp
 8006d2c:	00cb      	lsls	r3, r1, #3
 8006d2e:	4651      	mov	r1, sl
 8006d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d34:	4651      	mov	r1, sl
 8006d36:	00ca      	lsls	r2, r1, #3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4642      	mov	r2, r8
 8006d40:	189b      	adds	r3, r3, r2
 8006d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d44:	464b      	mov	r3, r9
 8006d46:	460a      	mov	r2, r1
 8006d48:	eb42 0303 	adc.w	r3, r2, r3
 8006d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	663b      	str	r3, [r7, #96]	; 0x60
 8006d58:	667a      	str	r2, [r7, #100]	; 0x64
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d66:	4649      	mov	r1, r9
 8006d68:	008b      	lsls	r3, r1, #2
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d70:	4641      	mov	r1, r8
 8006d72:	008a      	lsls	r2, r1, #2
 8006d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d78:	f7f9 ff96 	bl	8000ca8 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006d82:	fba3 1302 	umull	r1, r3, r3, r2
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2164      	movs	r1, #100	; 0x64
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	3332      	adds	r3, #50	; 0x32
 8006d94:	4a08      	ldr	r2, [pc, #32]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006d96:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4422      	add	r2, r4
 8006da8:	609a      	str	r2, [r3, #8]
}
 8006daa:	bf00      	nop
 8006dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006db0:	46bd      	mov	sp, r7
 8006db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db6:	bf00      	nop
 8006db8:	51eb851f 	.word	0x51eb851f

08006dbc <__errno>:
 8006dbc:	4b01      	ldr	r3, [pc, #4]	; (8006dc4 <__errno+0x8>)
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000808 	.word	0x20000808

08006dc8 <__libc_init_array>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4d0d      	ldr	r5, [pc, #52]	; (8006e00 <__libc_init_array+0x38>)
 8006dcc:	4c0d      	ldr	r4, [pc, #52]	; (8006e04 <__libc_init_array+0x3c>)
 8006dce:	1b64      	subs	r4, r4, r5
 8006dd0:	10a4      	asrs	r4, r4, #2
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	42a6      	cmp	r6, r4
 8006dd6:	d109      	bne.n	8006dec <__libc_init_array+0x24>
 8006dd8:	4d0b      	ldr	r5, [pc, #44]	; (8006e08 <__libc_init_array+0x40>)
 8006dda:	4c0c      	ldr	r4, [pc, #48]	; (8006e0c <__libc_init_array+0x44>)
 8006ddc:	f005 f8ea 	bl	800bfb4 <_init>
 8006de0:	1b64      	subs	r4, r4, r5
 8006de2:	10a4      	asrs	r4, r4, #2
 8006de4:	2600      	movs	r6, #0
 8006de6:	42a6      	cmp	r6, r4
 8006de8:	d105      	bne.n	8006df6 <__libc_init_array+0x2e>
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df0:	4798      	blx	r3
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7ee      	b.n	8006dd4 <__libc_init_array+0xc>
 8006df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfa:	4798      	blx	r3
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	e7f2      	b.n	8006de6 <__libc_init_array+0x1e>
 8006e00:	0800c53c 	.word	0x0800c53c
 8006e04:	0800c53c 	.word	0x0800c53c
 8006e08:	0800c53c 	.word	0x0800c53c
 8006e0c:	0800c540 	.word	0x0800c540

08006e10 <memset>:
 8006e10:	4402      	add	r2, r0
 8006e12:	4603      	mov	r3, r0
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d100      	bne.n	8006e1a <memset+0xa>
 8006e18:	4770      	bx	lr
 8006e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1e:	e7f9      	b.n	8006e14 <memset+0x4>

08006e20 <__cvt>:
 8006e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e24:	ec55 4b10 	vmov	r4, r5, d0
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	462b      	mov	r3, r5
 8006e30:	bfbb      	ittet	lt
 8006e32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e36:	461d      	movlt	r5, r3
 8006e38:	2300      	movge	r3, #0
 8006e3a:	232d      	movlt	r3, #45	; 0x2d
 8006e3c:	700b      	strb	r3, [r1, #0]
 8006e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e44:	4691      	mov	r9, r2
 8006e46:	f023 0820 	bic.w	r8, r3, #32
 8006e4a:	bfbc      	itt	lt
 8006e4c:	4622      	movlt	r2, r4
 8006e4e:	4614      	movlt	r4, r2
 8006e50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e54:	d005      	beq.n	8006e62 <__cvt+0x42>
 8006e56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e5a:	d100      	bne.n	8006e5e <__cvt+0x3e>
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	2102      	movs	r1, #2
 8006e60:	e000      	b.n	8006e64 <__cvt+0x44>
 8006e62:	2103      	movs	r1, #3
 8006e64:	ab03      	add	r3, sp, #12
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	ab02      	add	r3, sp, #8
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	ec45 4b10 	vmov	d0, r4, r5
 8006e70:	4653      	mov	r3, sl
 8006e72:	4632      	mov	r2, r6
 8006e74:	f001 fe78 	bl	8008b68 <_dtoa_r>
 8006e78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	d102      	bne.n	8006e86 <__cvt+0x66>
 8006e80:	f019 0f01 	tst.w	r9, #1
 8006e84:	d022      	beq.n	8006ecc <__cvt+0xac>
 8006e86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e8a:	eb07 0906 	add.w	r9, r7, r6
 8006e8e:	d110      	bne.n	8006eb2 <__cvt+0x92>
 8006e90:	783b      	ldrb	r3, [r7, #0]
 8006e92:	2b30      	cmp	r3, #48	; 0x30
 8006e94:	d10a      	bne.n	8006eac <__cvt+0x8c>
 8006e96:	2200      	movs	r2, #0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	f7f9 fe23 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ea2:	b918      	cbnz	r0, 8006eac <__cvt+0x8c>
 8006ea4:	f1c6 0601 	rsb	r6, r6, #1
 8006ea8:	f8ca 6000 	str.w	r6, [sl]
 8006eac:	f8da 3000 	ldr.w	r3, [sl]
 8006eb0:	4499      	add	r9, r3
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 fe15 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ebe:	b108      	cbz	r0, 8006ec4 <__cvt+0xa4>
 8006ec0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ec4:	2230      	movs	r2, #48	; 0x30
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	454b      	cmp	r3, r9
 8006eca:	d307      	bcc.n	8006edc <__cvt+0xbc>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ed0:	1bdb      	subs	r3, r3, r7
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	b004      	add	sp, #16
 8006ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006edc:	1c59      	adds	r1, r3, #1
 8006ede:	9103      	str	r1, [sp, #12]
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e7f0      	b.n	8006ec6 <__cvt+0xa6>

08006ee4 <__exponent>:
 8006ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	bfb8      	it	lt
 8006eec:	4249      	neglt	r1, r1
 8006eee:	f803 2b02 	strb.w	r2, [r3], #2
 8006ef2:	bfb4      	ite	lt
 8006ef4:	222d      	movlt	r2, #45	; 0x2d
 8006ef6:	222b      	movge	r2, #43	; 0x2b
 8006ef8:	2909      	cmp	r1, #9
 8006efa:	7042      	strb	r2, [r0, #1]
 8006efc:	dd2a      	ble.n	8006f54 <__exponent+0x70>
 8006efe:	f10d 0407 	add.w	r4, sp, #7
 8006f02:	46a4      	mov	ip, r4
 8006f04:	270a      	movs	r7, #10
 8006f06:	46a6      	mov	lr, r4
 8006f08:	460a      	mov	r2, r1
 8006f0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f0e:	fb07 1516 	mls	r5, r7, r6, r1
 8006f12:	3530      	adds	r5, #48	; 0x30
 8006f14:	2a63      	cmp	r2, #99	; 0x63
 8006f16:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f1e:	4631      	mov	r1, r6
 8006f20:	dcf1      	bgt.n	8006f06 <__exponent+0x22>
 8006f22:	3130      	adds	r1, #48	; 0x30
 8006f24:	f1ae 0502 	sub.w	r5, lr, #2
 8006f28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f2c:	1c44      	adds	r4, r0, #1
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4561      	cmp	r1, ip
 8006f32:	d30a      	bcc.n	8006f4a <__exponent+0x66>
 8006f34:	f10d 0209 	add.w	r2, sp, #9
 8006f38:	eba2 020e 	sub.w	r2, r2, lr
 8006f3c:	4565      	cmp	r5, ip
 8006f3e:	bf88      	it	hi
 8006f40:	2200      	movhi	r2, #0
 8006f42:	4413      	add	r3, r2
 8006f44:	1a18      	subs	r0, r3, r0
 8006f46:	b003      	add	sp, #12
 8006f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f52:	e7ed      	b.n	8006f30 <__exponent+0x4c>
 8006f54:	2330      	movs	r3, #48	; 0x30
 8006f56:	3130      	adds	r1, #48	; 0x30
 8006f58:	7083      	strb	r3, [r0, #2]
 8006f5a:	70c1      	strb	r1, [r0, #3]
 8006f5c:	1d03      	adds	r3, r0, #4
 8006f5e:	e7f1      	b.n	8006f44 <__exponent+0x60>

08006f60 <_printf_float>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	ed2d 8b02 	vpush	{d8}
 8006f68:	b08d      	sub	sp, #52	; 0x34
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f70:	4616      	mov	r6, r2
 8006f72:	461f      	mov	r7, r3
 8006f74:	4605      	mov	r5, r0
 8006f76:	f002 ff55 	bl	8009e24 <_localeconv_r>
 8006f7a:	f8d0 a000 	ldr.w	sl, [r0]
 8006f7e:	4650      	mov	r0, sl
 8006f80:	f7f9 f936 	bl	80001f0 <strlen>
 8006f84:	2300      	movs	r3, #0
 8006f86:	930a      	str	r3, [sp, #40]	; 0x28
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f94:	3307      	adds	r3, #7
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	f103 0208 	add.w	r2, r3, #8
 8006f9e:	f8c8 2000 	str.w	r2, [r8]
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006faa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006fae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fb2:	9307      	str	r3, [sp, #28]
 8006fb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fb8:	ee08 0a10 	vmov	s16, r0
 8006fbc:	4b9f      	ldr	r3, [pc, #636]	; (800723c <_printf_float+0x2dc>)
 8006fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc6:	f7f9 fdc1 	bl	8000b4c <__aeabi_dcmpun>
 8006fca:	bb88      	cbnz	r0, 8007030 <_printf_float+0xd0>
 8006fcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fd0:	4b9a      	ldr	r3, [pc, #616]	; (800723c <_printf_float+0x2dc>)
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	f7f9 fd9b 	bl	8000b10 <__aeabi_dcmple>
 8006fda:	bb48      	cbnz	r0, 8007030 <_printf_float+0xd0>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f7f9 fd8a 	bl	8000afc <__aeabi_dcmplt>
 8006fe8:	b110      	cbz	r0, 8006ff0 <_printf_float+0x90>
 8006fea:	232d      	movs	r3, #45	; 0x2d
 8006fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff0:	4b93      	ldr	r3, [pc, #588]	; (8007240 <_printf_float+0x2e0>)
 8006ff2:	4894      	ldr	r0, [pc, #592]	; (8007244 <_printf_float+0x2e4>)
 8006ff4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ff8:	bf94      	ite	ls
 8006ffa:	4698      	movls	r8, r3
 8006ffc:	4680      	movhi	r8, r0
 8006ffe:	2303      	movs	r3, #3
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	9b05      	ldr	r3, [sp, #20]
 8007004:	f023 0204 	bic.w	r2, r3, #4
 8007008:	6022      	str	r2, [r4, #0]
 800700a:	f04f 0900 	mov.w	r9, #0
 800700e:	9700      	str	r7, [sp, #0]
 8007010:	4633      	mov	r3, r6
 8007012:	aa0b      	add	r2, sp, #44	; 0x2c
 8007014:	4621      	mov	r1, r4
 8007016:	4628      	mov	r0, r5
 8007018:	f000 f9d8 	bl	80073cc <_printf_common>
 800701c:	3001      	adds	r0, #1
 800701e:	f040 8090 	bne.w	8007142 <_printf_float+0x1e2>
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	b00d      	add	sp, #52	; 0x34
 8007028:	ecbd 8b02 	vpop	{d8}
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 fd88 	bl	8000b4c <__aeabi_dcmpun>
 800703c:	b140      	cbz	r0, 8007050 <_printf_float+0xf0>
 800703e:	464b      	mov	r3, r9
 8007040:	2b00      	cmp	r3, #0
 8007042:	bfbc      	itt	lt
 8007044:	232d      	movlt	r3, #45	; 0x2d
 8007046:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800704a:	487f      	ldr	r0, [pc, #508]	; (8007248 <_printf_float+0x2e8>)
 800704c:	4b7f      	ldr	r3, [pc, #508]	; (800724c <_printf_float+0x2ec>)
 800704e:	e7d1      	b.n	8006ff4 <_printf_float+0x94>
 8007050:	6863      	ldr	r3, [r4, #4]
 8007052:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007056:	9206      	str	r2, [sp, #24]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	d13f      	bne.n	80070dc <_printf_float+0x17c>
 800705c:	2306      	movs	r3, #6
 800705e:	6063      	str	r3, [r4, #4]
 8007060:	9b05      	ldr	r3, [sp, #20]
 8007062:	6861      	ldr	r1, [r4, #4]
 8007064:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007068:	2300      	movs	r3, #0
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	ab0a      	add	r3, sp, #40	; 0x28
 800706e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007072:	ab09      	add	r3, sp, #36	; 0x24
 8007074:	ec49 8b10 	vmov	d0, r8, r9
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	6022      	str	r2, [r4, #0]
 800707c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff fecd 	bl	8006e20 <__cvt>
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	9909      	ldr	r1, [sp, #36]	; 0x24
 800708a:	2b47      	cmp	r3, #71	; 0x47
 800708c:	4680      	mov	r8, r0
 800708e:	d108      	bne.n	80070a2 <_printf_float+0x142>
 8007090:	1cc8      	adds	r0, r1, #3
 8007092:	db02      	blt.n	800709a <_printf_float+0x13a>
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	4299      	cmp	r1, r3
 8007098:	dd41      	ble.n	800711e <_printf_float+0x1be>
 800709a:	f1ab 0b02 	sub.w	fp, fp, #2
 800709e:	fa5f fb8b 	uxtb.w	fp, fp
 80070a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070a6:	d820      	bhi.n	80070ea <_printf_float+0x18a>
 80070a8:	3901      	subs	r1, #1
 80070aa:	465a      	mov	r2, fp
 80070ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070b0:	9109      	str	r1, [sp, #36]	; 0x24
 80070b2:	f7ff ff17 	bl	8006ee4 <__exponent>
 80070b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b8:	1813      	adds	r3, r2, r0
 80070ba:	2a01      	cmp	r2, #1
 80070bc:	4681      	mov	r9, r0
 80070be:	6123      	str	r3, [r4, #16]
 80070c0:	dc02      	bgt.n	80070c8 <_printf_float+0x168>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	07d2      	lsls	r2, r2, #31
 80070c6:	d501      	bpl.n	80070cc <_printf_float+0x16c>
 80070c8:	3301      	adds	r3, #1
 80070ca:	6123      	str	r3, [r4, #16]
 80070cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d09c      	beq.n	800700e <_printf_float+0xae>
 80070d4:	232d      	movs	r3, #45	; 0x2d
 80070d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070da:	e798      	b.n	800700e <_printf_float+0xae>
 80070dc:	9a06      	ldr	r2, [sp, #24]
 80070de:	2a47      	cmp	r2, #71	; 0x47
 80070e0:	d1be      	bne.n	8007060 <_printf_float+0x100>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1bc      	bne.n	8007060 <_printf_float+0x100>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e7b9      	b.n	800705e <_printf_float+0xfe>
 80070ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070ee:	d118      	bne.n	8007122 <_printf_float+0x1c2>
 80070f0:	2900      	cmp	r1, #0
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	dd0b      	ble.n	800710e <_printf_float+0x1ae>
 80070f6:	6121      	str	r1, [r4, #16]
 80070f8:	b913      	cbnz	r3, 8007100 <_printf_float+0x1a0>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	07d0      	lsls	r0, r2, #31
 80070fe:	d502      	bpl.n	8007106 <_printf_float+0x1a6>
 8007100:	3301      	adds	r3, #1
 8007102:	440b      	add	r3, r1
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	65a1      	str	r1, [r4, #88]	; 0x58
 8007108:	f04f 0900 	mov.w	r9, #0
 800710c:	e7de      	b.n	80070cc <_printf_float+0x16c>
 800710e:	b913      	cbnz	r3, 8007116 <_printf_float+0x1b6>
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	07d2      	lsls	r2, r2, #31
 8007114:	d501      	bpl.n	800711a <_printf_float+0x1ba>
 8007116:	3302      	adds	r3, #2
 8007118:	e7f4      	b.n	8007104 <_printf_float+0x1a4>
 800711a:	2301      	movs	r3, #1
 800711c:	e7f2      	b.n	8007104 <_printf_float+0x1a4>
 800711e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	4299      	cmp	r1, r3
 8007126:	db05      	blt.n	8007134 <_printf_float+0x1d4>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	6121      	str	r1, [r4, #16]
 800712c:	07d8      	lsls	r0, r3, #31
 800712e:	d5ea      	bpl.n	8007106 <_printf_float+0x1a6>
 8007130:	1c4b      	adds	r3, r1, #1
 8007132:	e7e7      	b.n	8007104 <_printf_float+0x1a4>
 8007134:	2900      	cmp	r1, #0
 8007136:	bfd4      	ite	le
 8007138:	f1c1 0202 	rsble	r2, r1, #2
 800713c:	2201      	movgt	r2, #1
 800713e:	4413      	add	r3, r2
 8007140:	e7e0      	b.n	8007104 <_printf_float+0x1a4>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	055a      	lsls	r2, r3, #21
 8007146:	d407      	bmi.n	8007158 <_printf_float+0x1f8>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	4642      	mov	r2, r8
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	d12c      	bne.n	80071b0 <_printf_float+0x250>
 8007156:	e764      	b.n	8007022 <_printf_float+0xc2>
 8007158:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800715c:	f240 80e0 	bls.w	8007320 <_printf_float+0x3c0>
 8007160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007164:	2200      	movs	r2, #0
 8007166:	2300      	movs	r3, #0
 8007168:	f7f9 fcbe 	bl	8000ae8 <__aeabi_dcmpeq>
 800716c:	2800      	cmp	r0, #0
 800716e:	d034      	beq.n	80071da <_printf_float+0x27a>
 8007170:	4a37      	ldr	r2, [pc, #220]	; (8007250 <_printf_float+0x2f0>)
 8007172:	2301      	movs	r3, #1
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	f43f af51 	beq.w	8007022 <_printf_float+0xc2>
 8007180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007184:	429a      	cmp	r2, r3
 8007186:	db02      	blt.n	800718e <_printf_float+0x22e>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	07d8      	lsls	r0, r3, #31
 800718c:	d510      	bpl.n	80071b0 <_printf_float+0x250>
 800718e:	ee18 3a10 	vmov	r3, s16
 8007192:	4652      	mov	r2, sl
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	f43f af41 	beq.w	8007022 <_printf_float+0xc2>
 80071a0:	f04f 0800 	mov.w	r8, #0
 80071a4:	f104 091a 	add.w	r9, r4, #26
 80071a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071aa:	3b01      	subs	r3, #1
 80071ac:	4543      	cmp	r3, r8
 80071ae:	dc09      	bgt.n	80071c4 <_printf_float+0x264>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	079b      	lsls	r3, r3, #30
 80071b4:	f100 8105 	bmi.w	80073c2 <_printf_float+0x462>
 80071b8:	68e0      	ldr	r0, [r4, #12]
 80071ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071bc:	4298      	cmp	r0, r3
 80071be:	bfb8      	it	lt
 80071c0:	4618      	movlt	r0, r3
 80071c2:	e730      	b.n	8007026 <_printf_float+0xc6>
 80071c4:	2301      	movs	r3, #1
 80071c6:	464a      	mov	r2, r9
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f af27 	beq.w	8007022 <_printf_float+0xc2>
 80071d4:	f108 0801 	add.w	r8, r8, #1
 80071d8:	e7e6      	b.n	80071a8 <_printf_float+0x248>
 80071da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc39      	bgt.n	8007254 <_printf_float+0x2f4>
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <_printf_float+0x2f0>)
 80071e2:	2301      	movs	r3, #1
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af19 	beq.w	8007022 <_printf_float+0xc2>
 80071f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d102      	bne.n	80071fe <_printf_float+0x29e>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	07d9      	lsls	r1, r3, #31
 80071fc:	d5d8      	bpl.n	80071b0 <_printf_float+0x250>
 80071fe:	ee18 3a10 	vmov	r3, s16
 8007202:	4652      	mov	r2, sl
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af09 	beq.w	8007022 <_printf_float+0xc2>
 8007210:	f04f 0900 	mov.w	r9, #0
 8007214:	f104 0a1a 	add.w	sl, r4, #26
 8007218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721a:	425b      	negs	r3, r3
 800721c:	454b      	cmp	r3, r9
 800721e:	dc01      	bgt.n	8007224 <_printf_float+0x2c4>
 8007220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007222:	e792      	b.n	800714a <_printf_float+0x1ea>
 8007224:	2301      	movs	r3, #1
 8007226:	4652      	mov	r2, sl
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f aef7 	beq.w	8007022 <_printf_float+0xc2>
 8007234:	f109 0901 	add.w	r9, r9, #1
 8007238:	e7ee      	b.n	8007218 <_printf_float+0x2b8>
 800723a:	bf00      	nop
 800723c:	7fefffff 	.word	0x7fefffff
 8007240:	0800c07c 	.word	0x0800c07c
 8007244:	0800c080 	.word	0x0800c080
 8007248:	0800c088 	.word	0x0800c088
 800724c:	0800c084 	.word	0x0800c084
 8007250:	0800c481 	.word	0x0800c481
 8007254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007258:	429a      	cmp	r2, r3
 800725a:	bfa8      	it	ge
 800725c:	461a      	movge	r2, r3
 800725e:	2a00      	cmp	r2, #0
 8007260:	4691      	mov	r9, r2
 8007262:	dc37      	bgt.n	80072d4 <_printf_float+0x374>
 8007264:	f04f 0b00 	mov.w	fp, #0
 8007268:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800726c:	f104 021a 	add.w	r2, r4, #26
 8007270:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007272:	9305      	str	r3, [sp, #20]
 8007274:	eba3 0309 	sub.w	r3, r3, r9
 8007278:	455b      	cmp	r3, fp
 800727a:	dc33      	bgt.n	80072e4 <_printf_float+0x384>
 800727c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007280:	429a      	cmp	r2, r3
 8007282:	db3b      	blt.n	80072fc <_printf_float+0x39c>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	07da      	lsls	r2, r3, #31
 8007288:	d438      	bmi.n	80072fc <_printf_float+0x39c>
 800728a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728c:	9a05      	ldr	r2, [sp, #20]
 800728e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007290:	1a9a      	subs	r2, r3, r2
 8007292:	eba3 0901 	sub.w	r9, r3, r1
 8007296:	4591      	cmp	r9, r2
 8007298:	bfa8      	it	ge
 800729a:	4691      	movge	r9, r2
 800729c:	f1b9 0f00 	cmp.w	r9, #0
 80072a0:	dc35      	bgt.n	800730e <_printf_float+0x3ae>
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072aa:	f104 0a1a 	add.w	sl, r4, #26
 80072ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	eba3 0309 	sub.w	r3, r3, r9
 80072b8:	4543      	cmp	r3, r8
 80072ba:	f77f af79 	ble.w	80071b0 <_printf_float+0x250>
 80072be:	2301      	movs	r3, #1
 80072c0:	4652      	mov	r2, sl
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	f43f aeaa 	beq.w	8007022 <_printf_float+0xc2>
 80072ce:	f108 0801 	add.w	r8, r8, #1
 80072d2:	e7ec      	b.n	80072ae <_printf_float+0x34e>
 80072d4:	4613      	mov	r3, r2
 80072d6:	4631      	mov	r1, r6
 80072d8:	4642      	mov	r2, r8
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	d1c0      	bne.n	8007264 <_printf_float+0x304>
 80072e2:	e69e      	b.n	8007022 <_printf_float+0xc2>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	9205      	str	r2, [sp, #20]
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f ae97 	beq.w	8007022 <_printf_float+0xc2>
 80072f4:	9a05      	ldr	r2, [sp, #20]
 80072f6:	f10b 0b01 	add.w	fp, fp, #1
 80072fa:	e7b9      	b.n	8007270 <_printf_float+0x310>
 80072fc:	ee18 3a10 	vmov	r3, s16
 8007300:	4652      	mov	r2, sl
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	d1be      	bne.n	800728a <_printf_float+0x32a>
 800730c:	e689      	b.n	8007022 <_printf_float+0xc2>
 800730e:	9a05      	ldr	r2, [sp, #20]
 8007310:	464b      	mov	r3, r9
 8007312:	4442      	add	r2, r8
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d1c1      	bne.n	80072a2 <_printf_float+0x342>
 800731e:	e680      	b.n	8007022 <_printf_float+0xc2>
 8007320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007322:	2a01      	cmp	r2, #1
 8007324:	dc01      	bgt.n	800732a <_printf_float+0x3ca>
 8007326:	07db      	lsls	r3, r3, #31
 8007328:	d538      	bpl.n	800739c <_printf_float+0x43c>
 800732a:	2301      	movs	r3, #1
 800732c:	4642      	mov	r2, r8
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f ae74 	beq.w	8007022 <_printf_float+0xc2>
 800733a:	ee18 3a10 	vmov	r3, s16
 800733e:	4652      	mov	r2, sl
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f ae6b 	beq.w	8007022 <_printf_float+0xc2>
 800734c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007350:	2200      	movs	r2, #0
 8007352:	2300      	movs	r3, #0
 8007354:	f7f9 fbc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007358:	b9d8      	cbnz	r0, 8007392 <_printf_float+0x432>
 800735a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735c:	f108 0201 	add.w	r2, r8, #1
 8007360:	3b01      	subs	r3, #1
 8007362:	4631      	mov	r1, r6
 8007364:	4628      	mov	r0, r5
 8007366:	47b8      	blx	r7
 8007368:	3001      	adds	r0, #1
 800736a:	d10e      	bne.n	800738a <_printf_float+0x42a>
 800736c:	e659      	b.n	8007022 <_printf_float+0xc2>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	f43f ae52 	beq.w	8007022 <_printf_float+0xc2>
 800737e:	f108 0801 	add.w	r8, r8, #1
 8007382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007384:	3b01      	subs	r3, #1
 8007386:	4543      	cmp	r3, r8
 8007388:	dcf1      	bgt.n	800736e <_printf_float+0x40e>
 800738a:	464b      	mov	r3, r9
 800738c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007390:	e6dc      	b.n	800714c <_printf_float+0x1ec>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	f104 0a1a 	add.w	sl, r4, #26
 800739a:	e7f2      	b.n	8007382 <_printf_float+0x422>
 800739c:	2301      	movs	r3, #1
 800739e:	4642      	mov	r2, r8
 80073a0:	e7df      	b.n	8007362 <_printf_float+0x402>
 80073a2:	2301      	movs	r3, #1
 80073a4:	464a      	mov	r2, r9
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f ae38 	beq.w	8007022 <_printf_float+0xc2>
 80073b2:	f108 0801 	add.w	r8, r8, #1
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ba:	1a5b      	subs	r3, r3, r1
 80073bc:	4543      	cmp	r3, r8
 80073be:	dcf0      	bgt.n	80073a2 <_printf_float+0x442>
 80073c0:	e6fa      	b.n	80071b8 <_printf_float+0x258>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	f104 0919 	add.w	r9, r4, #25
 80073ca:	e7f4      	b.n	80073b6 <_printf_float+0x456>

080073cc <_printf_common>:
 80073cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	4616      	mov	r6, r2
 80073d2:	4699      	mov	r9, r3
 80073d4:	688a      	ldr	r2, [r1, #8]
 80073d6:	690b      	ldr	r3, [r1, #16]
 80073d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073dc:	4293      	cmp	r3, r2
 80073de:	bfb8      	it	lt
 80073e0:	4613      	movlt	r3, r2
 80073e2:	6033      	str	r3, [r6, #0]
 80073e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073e8:	4607      	mov	r7, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b10a      	cbz	r2, 80073f2 <_printf_common+0x26>
 80073ee:	3301      	adds	r3, #1
 80073f0:	6033      	str	r3, [r6, #0]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	0699      	lsls	r1, r3, #26
 80073f6:	bf42      	ittt	mi
 80073f8:	6833      	ldrmi	r3, [r6, #0]
 80073fa:	3302      	addmi	r3, #2
 80073fc:	6033      	strmi	r3, [r6, #0]
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	f015 0506 	ands.w	r5, r5, #6
 8007404:	d106      	bne.n	8007414 <_printf_common+0x48>
 8007406:	f104 0a19 	add.w	sl, r4, #25
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	6832      	ldr	r2, [r6, #0]
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	42ab      	cmp	r3, r5
 8007412:	dc26      	bgt.n	8007462 <_printf_common+0x96>
 8007414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007418:	1e13      	subs	r3, r2, #0
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	bf18      	it	ne
 800741e:	2301      	movne	r3, #1
 8007420:	0692      	lsls	r2, r2, #26
 8007422:	d42b      	bmi.n	800747c <_printf_common+0xb0>
 8007424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007428:	4649      	mov	r1, r9
 800742a:	4638      	mov	r0, r7
 800742c:	47c0      	blx	r8
 800742e:	3001      	adds	r0, #1
 8007430:	d01e      	beq.n	8007470 <_printf_common+0xa4>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	68e5      	ldr	r5, [r4, #12]
 8007436:	6832      	ldr	r2, [r6, #0]
 8007438:	f003 0306 	and.w	r3, r3, #6
 800743c:	2b04      	cmp	r3, #4
 800743e:	bf08      	it	eq
 8007440:	1aad      	subeq	r5, r5, r2
 8007442:	68a3      	ldr	r3, [r4, #8]
 8007444:	6922      	ldr	r2, [r4, #16]
 8007446:	bf0c      	ite	eq
 8007448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800744c:	2500      	movne	r5, #0
 800744e:	4293      	cmp	r3, r2
 8007450:	bfc4      	itt	gt
 8007452:	1a9b      	subgt	r3, r3, r2
 8007454:	18ed      	addgt	r5, r5, r3
 8007456:	2600      	movs	r6, #0
 8007458:	341a      	adds	r4, #26
 800745a:	42b5      	cmp	r5, r6
 800745c:	d11a      	bne.n	8007494 <_printf_common+0xc8>
 800745e:	2000      	movs	r0, #0
 8007460:	e008      	b.n	8007474 <_printf_common+0xa8>
 8007462:	2301      	movs	r3, #1
 8007464:	4652      	mov	r2, sl
 8007466:	4649      	mov	r1, r9
 8007468:	4638      	mov	r0, r7
 800746a:	47c0      	blx	r8
 800746c:	3001      	adds	r0, #1
 800746e:	d103      	bne.n	8007478 <_printf_common+0xac>
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007478:	3501      	adds	r5, #1
 800747a:	e7c6      	b.n	800740a <_printf_common+0x3e>
 800747c:	18e1      	adds	r1, r4, r3
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	2030      	movs	r0, #48	; 0x30
 8007482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007486:	4422      	add	r2, r4
 8007488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800748c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007490:	3302      	adds	r3, #2
 8007492:	e7c7      	b.n	8007424 <_printf_common+0x58>
 8007494:	2301      	movs	r3, #1
 8007496:	4622      	mov	r2, r4
 8007498:	4649      	mov	r1, r9
 800749a:	4638      	mov	r0, r7
 800749c:	47c0      	blx	r8
 800749e:	3001      	adds	r0, #1
 80074a0:	d0e6      	beq.n	8007470 <_printf_common+0xa4>
 80074a2:	3601      	adds	r6, #1
 80074a4:	e7d9      	b.n	800745a <_printf_common+0x8e>
	...

080074a8 <_printf_i>:
 80074a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ac:	7e0f      	ldrb	r7, [r1, #24]
 80074ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b0:	2f78      	cmp	r7, #120	; 0x78
 80074b2:	4691      	mov	r9, r2
 80074b4:	4680      	mov	r8, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	469a      	mov	sl, r3
 80074ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074be:	d807      	bhi.n	80074d0 <_printf_i+0x28>
 80074c0:	2f62      	cmp	r7, #98	; 0x62
 80074c2:	d80a      	bhi.n	80074da <_printf_i+0x32>
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	f000 80d8 	beq.w	800767a <_printf_i+0x1d2>
 80074ca:	2f58      	cmp	r7, #88	; 0x58
 80074cc:	f000 80a3 	beq.w	8007616 <_printf_i+0x16e>
 80074d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074d8:	e03a      	b.n	8007550 <_printf_i+0xa8>
 80074da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074de:	2b15      	cmp	r3, #21
 80074e0:	d8f6      	bhi.n	80074d0 <_printf_i+0x28>
 80074e2:	a101      	add	r1, pc, #4	; (adr r1, 80074e8 <_printf_i+0x40>)
 80074e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e8:	08007541 	.word	0x08007541
 80074ec:	08007555 	.word	0x08007555
 80074f0:	080074d1 	.word	0x080074d1
 80074f4:	080074d1 	.word	0x080074d1
 80074f8:	080074d1 	.word	0x080074d1
 80074fc:	080074d1 	.word	0x080074d1
 8007500:	08007555 	.word	0x08007555
 8007504:	080074d1 	.word	0x080074d1
 8007508:	080074d1 	.word	0x080074d1
 800750c:	080074d1 	.word	0x080074d1
 8007510:	080074d1 	.word	0x080074d1
 8007514:	08007661 	.word	0x08007661
 8007518:	08007585 	.word	0x08007585
 800751c:	08007643 	.word	0x08007643
 8007520:	080074d1 	.word	0x080074d1
 8007524:	080074d1 	.word	0x080074d1
 8007528:	08007683 	.word	0x08007683
 800752c:	080074d1 	.word	0x080074d1
 8007530:	08007585 	.word	0x08007585
 8007534:	080074d1 	.word	0x080074d1
 8007538:	080074d1 	.word	0x080074d1
 800753c:	0800764b 	.word	0x0800764b
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	602a      	str	r2, [r5, #0]
 8007548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800754c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007550:	2301      	movs	r3, #1
 8007552:	e0a3      	b.n	800769c <_printf_i+0x1f4>
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	6829      	ldr	r1, [r5, #0]
 8007558:	0606      	lsls	r6, r0, #24
 800755a:	f101 0304 	add.w	r3, r1, #4
 800755e:	d50a      	bpl.n	8007576 <_printf_i+0xce>
 8007560:	680e      	ldr	r6, [r1, #0]
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	2e00      	cmp	r6, #0
 8007566:	da03      	bge.n	8007570 <_printf_i+0xc8>
 8007568:	232d      	movs	r3, #45	; 0x2d
 800756a:	4276      	negs	r6, r6
 800756c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007570:	485e      	ldr	r0, [pc, #376]	; (80076ec <_printf_i+0x244>)
 8007572:	230a      	movs	r3, #10
 8007574:	e019      	b.n	80075aa <_printf_i+0x102>
 8007576:	680e      	ldr	r6, [r1, #0]
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800757e:	bf18      	it	ne
 8007580:	b236      	sxthne	r6, r6
 8007582:	e7ef      	b.n	8007564 <_printf_i+0xbc>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	1d19      	adds	r1, r3, #4
 800758a:	6029      	str	r1, [r5, #0]
 800758c:	0601      	lsls	r1, r0, #24
 800758e:	d501      	bpl.n	8007594 <_printf_i+0xec>
 8007590:	681e      	ldr	r6, [r3, #0]
 8007592:	e002      	b.n	800759a <_printf_i+0xf2>
 8007594:	0646      	lsls	r6, r0, #25
 8007596:	d5fb      	bpl.n	8007590 <_printf_i+0xe8>
 8007598:	881e      	ldrh	r6, [r3, #0]
 800759a:	4854      	ldr	r0, [pc, #336]	; (80076ec <_printf_i+0x244>)
 800759c:	2f6f      	cmp	r7, #111	; 0x6f
 800759e:	bf0c      	ite	eq
 80075a0:	2308      	moveq	r3, #8
 80075a2:	230a      	movne	r3, #10
 80075a4:	2100      	movs	r1, #0
 80075a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075aa:	6865      	ldr	r5, [r4, #4]
 80075ac:	60a5      	str	r5, [r4, #8]
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	bfa2      	ittt	ge
 80075b2:	6821      	ldrge	r1, [r4, #0]
 80075b4:	f021 0104 	bicge.w	r1, r1, #4
 80075b8:	6021      	strge	r1, [r4, #0]
 80075ba:	b90e      	cbnz	r6, 80075c0 <_printf_i+0x118>
 80075bc:	2d00      	cmp	r5, #0
 80075be:	d04d      	beq.n	800765c <_printf_i+0x1b4>
 80075c0:	4615      	mov	r5, r2
 80075c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075c6:	fb03 6711 	mls	r7, r3, r1, r6
 80075ca:	5dc7      	ldrb	r7, [r0, r7]
 80075cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075d0:	4637      	mov	r7, r6
 80075d2:	42bb      	cmp	r3, r7
 80075d4:	460e      	mov	r6, r1
 80075d6:	d9f4      	bls.n	80075c2 <_printf_i+0x11a>
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d10b      	bne.n	80075f4 <_printf_i+0x14c>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	07de      	lsls	r6, r3, #31
 80075e0:	d508      	bpl.n	80075f4 <_printf_i+0x14c>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	6861      	ldr	r1, [r4, #4]
 80075e6:	4299      	cmp	r1, r3
 80075e8:	bfde      	ittt	le
 80075ea:	2330      	movle	r3, #48	; 0x30
 80075ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f4:	1b52      	subs	r2, r2, r5
 80075f6:	6122      	str	r2, [r4, #16]
 80075f8:	f8cd a000 	str.w	sl, [sp]
 80075fc:	464b      	mov	r3, r9
 80075fe:	aa03      	add	r2, sp, #12
 8007600:	4621      	mov	r1, r4
 8007602:	4640      	mov	r0, r8
 8007604:	f7ff fee2 	bl	80073cc <_printf_common>
 8007608:	3001      	adds	r0, #1
 800760a:	d14c      	bne.n	80076a6 <_printf_i+0x1fe>
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	b004      	add	sp, #16
 8007612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007616:	4835      	ldr	r0, [pc, #212]	; (80076ec <_printf_i+0x244>)
 8007618:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	f851 6b04 	ldr.w	r6, [r1], #4
 8007624:	6029      	str	r1, [r5, #0]
 8007626:	061d      	lsls	r5, r3, #24
 8007628:	d514      	bpl.n	8007654 <_printf_i+0x1ac>
 800762a:	07df      	lsls	r7, r3, #31
 800762c:	bf44      	itt	mi
 800762e:	f043 0320 	orrmi.w	r3, r3, #32
 8007632:	6023      	strmi	r3, [r4, #0]
 8007634:	b91e      	cbnz	r6, 800763e <_printf_i+0x196>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	f023 0320 	bic.w	r3, r3, #32
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	2310      	movs	r3, #16
 8007640:	e7b0      	b.n	80075a4 <_printf_i+0xfc>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f043 0320 	orr.w	r3, r3, #32
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	2378      	movs	r3, #120	; 0x78
 800764c:	4828      	ldr	r0, [pc, #160]	; (80076f0 <_printf_i+0x248>)
 800764e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007652:	e7e3      	b.n	800761c <_printf_i+0x174>
 8007654:	0659      	lsls	r1, r3, #25
 8007656:	bf48      	it	mi
 8007658:	b2b6      	uxthmi	r6, r6
 800765a:	e7e6      	b.n	800762a <_printf_i+0x182>
 800765c:	4615      	mov	r5, r2
 800765e:	e7bb      	b.n	80075d8 <_printf_i+0x130>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	6826      	ldr	r6, [r4, #0]
 8007664:	6961      	ldr	r1, [r4, #20]
 8007666:	1d18      	adds	r0, r3, #4
 8007668:	6028      	str	r0, [r5, #0]
 800766a:	0635      	lsls	r5, r6, #24
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	d501      	bpl.n	8007674 <_printf_i+0x1cc>
 8007670:	6019      	str	r1, [r3, #0]
 8007672:	e002      	b.n	800767a <_printf_i+0x1d2>
 8007674:	0670      	lsls	r0, r6, #25
 8007676:	d5fb      	bpl.n	8007670 <_printf_i+0x1c8>
 8007678:	8019      	strh	r1, [r3, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	4615      	mov	r5, r2
 8007680:	e7ba      	b.n	80075f8 <_printf_i+0x150>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	1d1a      	adds	r2, r3, #4
 8007686:	602a      	str	r2, [r5, #0]
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	6862      	ldr	r2, [r4, #4]
 800768c:	2100      	movs	r1, #0
 800768e:	4628      	mov	r0, r5
 8007690:	f7f8 fdb6 	bl	8000200 <memchr>
 8007694:	b108      	cbz	r0, 800769a <_printf_i+0x1f2>
 8007696:	1b40      	subs	r0, r0, r5
 8007698:	6060      	str	r0, [r4, #4]
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	2300      	movs	r3, #0
 80076a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a4:	e7a8      	b.n	80075f8 <_printf_i+0x150>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4649      	mov	r1, r9
 80076ac:	4640      	mov	r0, r8
 80076ae:	47d0      	blx	sl
 80076b0:	3001      	adds	r0, #1
 80076b2:	d0ab      	beq.n	800760c <_printf_i+0x164>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	079b      	lsls	r3, r3, #30
 80076b8:	d413      	bmi.n	80076e2 <_printf_i+0x23a>
 80076ba:	68e0      	ldr	r0, [r4, #12]
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	4298      	cmp	r0, r3
 80076c0:	bfb8      	it	lt
 80076c2:	4618      	movlt	r0, r3
 80076c4:	e7a4      	b.n	8007610 <_printf_i+0x168>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4632      	mov	r2, r6
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	47d0      	blx	sl
 80076d0:	3001      	adds	r0, #1
 80076d2:	d09b      	beq.n	800760c <_printf_i+0x164>
 80076d4:	3501      	adds	r5, #1
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	9903      	ldr	r1, [sp, #12]
 80076da:	1a5b      	subs	r3, r3, r1
 80076dc:	42ab      	cmp	r3, r5
 80076de:	dcf2      	bgt.n	80076c6 <_printf_i+0x21e>
 80076e0:	e7eb      	b.n	80076ba <_printf_i+0x212>
 80076e2:	2500      	movs	r5, #0
 80076e4:	f104 0619 	add.w	r6, r4, #25
 80076e8:	e7f5      	b.n	80076d6 <_printf_i+0x22e>
 80076ea:	bf00      	nop
 80076ec:	0800c08c 	.word	0x0800c08c
 80076f0:	0800c09d 	.word	0x0800c09d

080076f4 <_scanf_float>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	b087      	sub	sp, #28
 80076fa:	4617      	mov	r7, r2
 80076fc:	9303      	str	r3, [sp, #12]
 80076fe:	688b      	ldr	r3, [r1, #8]
 8007700:	1e5a      	subs	r2, r3, #1
 8007702:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007706:	bf83      	ittte	hi
 8007708:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800770c:	195b      	addhi	r3, r3, r5
 800770e:	9302      	strhi	r3, [sp, #8]
 8007710:	2300      	movls	r3, #0
 8007712:	bf86      	itte	hi
 8007714:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007718:	608b      	strhi	r3, [r1, #8]
 800771a:	9302      	strls	r3, [sp, #8]
 800771c:	680b      	ldr	r3, [r1, #0]
 800771e:	468b      	mov	fp, r1
 8007720:	2500      	movs	r5, #0
 8007722:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007726:	f84b 3b1c 	str.w	r3, [fp], #28
 800772a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800772e:	4680      	mov	r8, r0
 8007730:	460c      	mov	r4, r1
 8007732:	465e      	mov	r6, fp
 8007734:	46aa      	mov	sl, r5
 8007736:	46a9      	mov	r9, r5
 8007738:	9501      	str	r5, [sp, #4]
 800773a:	68a2      	ldr	r2, [r4, #8]
 800773c:	b152      	cbz	r2, 8007754 <_scanf_float+0x60>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b4e      	cmp	r3, #78	; 0x4e
 8007744:	d864      	bhi.n	8007810 <_scanf_float+0x11c>
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d83c      	bhi.n	80077c4 <_scanf_float+0xd0>
 800774a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800774e:	b2c8      	uxtb	r0, r1
 8007750:	280e      	cmp	r0, #14
 8007752:	d93a      	bls.n	80077ca <_scanf_float+0xd6>
 8007754:	f1b9 0f00 	cmp.w	r9, #0
 8007758:	d003      	beq.n	8007762 <_scanf_float+0x6e>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007766:	f1ba 0f01 	cmp.w	sl, #1
 800776a:	f200 8113 	bhi.w	8007994 <_scanf_float+0x2a0>
 800776e:	455e      	cmp	r6, fp
 8007770:	f200 8105 	bhi.w	800797e <_scanf_float+0x28a>
 8007774:	2501      	movs	r5, #1
 8007776:	4628      	mov	r0, r5
 8007778:	b007      	add	sp, #28
 800777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007782:	2a0d      	cmp	r2, #13
 8007784:	d8e6      	bhi.n	8007754 <_scanf_float+0x60>
 8007786:	a101      	add	r1, pc, #4	; (adr r1, 800778c <_scanf_float+0x98>)
 8007788:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800778c:	080078cb 	.word	0x080078cb
 8007790:	08007755 	.word	0x08007755
 8007794:	08007755 	.word	0x08007755
 8007798:	08007755 	.word	0x08007755
 800779c:	0800792b 	.word	0x0800792b
 80077a0:	08007903 	.word	0x08007903
 80077a4:	08007755 	.word	0x08007755
 80077a8:	08007755 	.word	0x08007755
 80077ac:	080078d9 	.word	0x080078d9
 80077b0:	08007755 	.word	0x08007755
 80077b4:	08007755 	.word	0x08007755
 80077b8:	08007755 	.word	0x08007755
 80077bc:	08007755 	.word	0x08007755
 80077c0:	08007891 	.word	0x08007891
 80077c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80077c8:	e7db      	b.n	8007782 <_scanf_float+0x8e>
 80077ca:	290e      	cmp	r1, #14
 80077cc:	d8c2      	bhi.n	8007754 <_scanf_float+0x60>
 80077ce:	a001      	add	r0, pc, #4	; (adr r0, 80077d4 <_scanf_float+0xe0>)
 80077d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80077d4:	08007883 	.word	0x08007883
 80077d8:	08007755 	.word	0x08007755
 80077dc:	08007883 	.word	0x08007883
 80077e0:	08007917 	.word	0x08007917
 80077e4:	08007755 	.word	0x08007755
 80077e8:	08007831 	.word	0x08007831
 80077ec:	0800786d 	.word	0x0800786d
 80077f0:	0800786d 	.word	0x0800786d
 80077f4:	0800786d 	.word	0x0800786d
 80077f8:	0800786d 	.word	0x0800786d
 80077fc:	0800786d 	.word	0x0800786d
 8007800:	0800786d 	.word	0x0800786d
 8007804:	0800786d 	.word	0x0800786d
 8007808:	0800786d 	.word	0x0800786d
 800780c:	0800786d 	.word	0x0800786d
 8007810:	2b6e      	cmp	r3, #110	; 0x6e
 8007812:	d809      	bhi.n	8007828 <_scanf_float+0x134>
 8007814:	2b60      	cmp	r3, #96	; 0x60
 8007816:	d8b2      	bhi.n	800777e <_scanf_float+0x8a>
 8007818:	2b54      	cmp	r3, #84	; 0x54
 800781a:	d077      	beq.n	800790c <_scanf_float+0x218>
 800781c:	2b59      	cmp	r3, #89	; 0x59
 800781e:	d199      	bne.n	8007754 <_scanf_float+0x60>
 8007820:	2d07      	cmp	r5, #7
 8007822:	d197      	bne.n	8007754 <_scanf_float+0x60>
 8007824:	2508      	movs	r5, #8
 8007826:	e029      	b.n	800787c <_scanf_float+0x188>
 8007828:	2b74      	cmp	r3, #116	; 0x74
 800782a:	d06f      	beq.n	800790c <_scanf_float+0x218>
 800782c:	2b79      	cmp	r3, #121	; 0x79
 800782e:	e7f6      	b.n	800781e <_scanf_float+0x12a>
 8007830:	6821      	ldr	r1, [r4, #0]
 8007832:	05c8      	lsls	r0, r1, #23
 8007834:	d51a      	bpl.n	800786c <_scanf_float+0x178>
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800783c:	6021      	str	r1, [r4, #0]
 800783e:	f109 0901 	add.w	r9, r9, #1
 8007842:	b11b      	cbz	r3, 800784c <_scanf_float+0x158>
 8007844:	3b01      	subs	r3, #1
 8007846:	3201      	adds	r2, #1
 8007848:	9302      	str	r3, [sp, #8]
 800784a:	60a2      	str	r2, [r4, #8]
 800784c:	68a3      	ldr	r3, [r4, #8]
 800784e:	3b01      	subs	r3, #1
 8007850:	60a3      	str	r3, [r4, #8]
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	3301      	adds	r3, #1
 8007856:	6123      	str	r3, [r4, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3b01      	subs	r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	607b      	str	r3, [r7, #4]
 8007860:	f340 8084 	ble.w	800796c <_scanf_float+0x278>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	3301      	adds	r3, #1
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	e766      	b.n	800773a <_scanf_float+0x46>
 800786c:	eb1a 0f05 	cmn.w	sl, r5
 8007870:	f47f af70 	bne.w	8007754 <_scanf_float+0x60>
 8007874:	6822      	ldr	r2, [r4, #0]
 8007876:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800787a:	6022      	str	r2, [r4, #0]
 800787c:	f806 3b01 	strb.w	r3, [r6], #1
 8007880:	e7e4      	b.n	800784c <_scanf_float+0x158>
 8007882:	6822      	ldr	r2, [r4, #0]
 8007884:	0610      	lsls	r0, r2, #24
 8007886:	f57f af65 	bpl.w	8007754 <_scanf_float+0x60>
 800788a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788e:	e7f4      	b.n	800787a <_scanf_float+0x186>
 8007890:	f1ba 0f00 	cmp.w	sl, #0
 8007894:	d10e      	bne.n	80078b4 <_scanf_float+0x1c0>
 8007896:	f1b9 0f00 	cmp.w	r9, #0
 800789a:	d10e      	bne.n	80078ba <_scanf_float+0x1c6>
 800789c:	6822      	ldr	r2, [r4, #0]
 800789e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80078a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80078a6:	d108      	bne.n	80078ba <_scanf_float+0x1c6>
 80078a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	f04f 0a01 	mov.w	sl, #1
 80078b2:	e7e3      	b.n	800787c <_scanf_float+0x188>
 80078b4:	f1ba 0f02 	cmp.w	sl, #2
 80078b8:	d055      	beq.n	8007966 <_scanf_float+0x272>
 80078ba:	2d01      	cmp	r5, #1
 80078bc:	d002      	beq.n	80078c4 <_scanf_float+0x1d0>
 80078be:	2d04      	cmp	r5, #4
 80078c0:	f47f af48 	bne.w	8007754 <_scanf_float+0x60>
 80078c4:	3501      	adds	r5, #1
 80078c6:	b2ed      	uxtb	r5, r5
 80078c8:	e7d8      	b.n	800787c <_scanf_float+0x188>
 80078ca:	f1ba 0f01 	cmp.w	sl, #1
 80078ce:	f47f af41 	bne.w	8007754 <_scanf_float+0x60>
 80078d2:	f04f 0a02 	mov.w	sl, #2
 80078d6:	e7d1      	b.n	800787c <_scanf_float+0x188>
 80078d8:	b97d      	cbnz	r5, 80078fa <_scanf_float+0x206>
 80078da:	f1b9 0f00 	cmp.w	r9, #0
 80078de:	f47f af3c 	bne.w	800775a <_scanf_float+0x66>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80078e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80078ec:	f47f af39 	bne.w	8007762 <_scanf_float+0x6e>
 80078f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078f4:	6022      	str	r2, [r4, #0]
 80078f6:	2501      	movs	r5, #1
 80078f8:	e7c0      	b.n	800787c <_scanf_float+0x188>
 80078fa:	2d03      	cmp	r5, #3
 80078fc:	d0e2      	beq.n	80078c4 <_scanf_float+0x1d0>
 80078fe:	2d05      	cmp	r5, #5
 8007900:	e7de      	b.n	80078c0 <_scanf_float+0x1cc>
 8007902:	2d02      	cmp	r5, #2
 8007904:	f47f af26 	bne.w	8007754 <_scanf_float+0x60>
 8007908:	2503      	movs	r5, #3
 800790a:	e7b7      	b.n	800787c <_scanf_float+0x188>
 800790c:	2d06      	cmp	r5, #6
 800790e:	f47f af21 	bne.w	8007754 <_scanf_float+0x60>
 8007912:	2507      	movs	r5, #7
 8007914:	e7b2      	b.n	800787c <_scanf_float+0x188>
 8007916:	6822      	ldr	r2, [r4, #0]
 8007918:	0591      	lsls	r1, r2, #22
 800791a:	f57f af1b 	bpl.w	8007754 <_scanf_float+0x60>
 800791e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007922:	6022      	str	r2, [r4, #0]
 8007924:	f8cd 9004 	str.w	r9, [sp, #4]
 8007928:	e7a8      	b.n	800787c <_scanf_float+0x188>
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007930:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007934:	d006      	beq.n	8007944 <_scanf_float+0x250>
 8007936:	0550      	lsls	r0, r2, #21
 8007938:	f57f af0c 	bpl.w	8007754 <_scanf_float+0x60>
 800793c:	f1b9 0f00 	cmp.w	r9, #0
 8007940:	f43f af0f 	beq.w	8007762 <_scanf_float+0x6e>
 8007944:	0591      	lsls	r1, r2, #22
 8007946:	bf58      	it	pl
 8007948:	9901      	ldrpl	r1, [sp, #4]
 800794a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800794e:	bf58      	it	pl
 8007950:	eba9 0101 	subpl.w	r1, r9, r1
 8007954:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007958:	bf58      	it	pl
 800795a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800795e:	6022      	str	r2, [r4, #0]
 8007960:	f04f 0900 	mov.w	r9, #0
 8007964:	e78a      	b.n	800787c <_scanf_float+0x188>
 8007966:	f04f 0a03 	mov.w	sl, #3
 800796a:	e787      	b.n	800787c <_scanf_float+0x188>
 800796c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007970:	4639      	mov	r1, r7
 8007972:	4640      	mov	r0, r8
 8007974:	4798      	blx	r3
 8007976:	2800      	cmp	r0, #0
 8007978:	f43f aedf 	beq.w	800773a <_scanf_float+0x46>
 800797c:	e6ea      	b.n	8007754 <_scanf_float+0x60>
 800797e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007986:	463a      	mov	r2, r7
 8007988:	4640      	mov	r0, r8
 800798a:	4798      	blx	r3
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	3b01      	subs	r3, #1
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	e6ec      	b.n	800776e <_scanf_float+0x7a>
 8007994:	1e6b      	subs	r3, r5, #1
 8007996:	2b06      	cmp	r3, #6
 8007998:	d825      	bhi.n	80079e6 <_scanf_float+0x2f2>
 800799a:	2d02      	cmp	r5, #2
 800799c:	d836      	bhi.n	8007a0c <_scanf_float+0x318>
 800799e:	455e      	cmp	r6, fp
 80079a0:	f67f aee8 	bls.w	8007774 <_scanf_float+0x80>
 80079a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079ac:	463a      	mov	r2, r7
 80079ae:	4640      	mov	r0, r8
 80079b0:	4798      	blx	r3
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	6123      	str	r3, [r4, #16]
 80079b8:	e7f1      	b.n	800799e <_scanf_float+0x2aa>
 80079ba:	9802      	ldr	r0, [sp, #8]
 80079bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80079c4:	9002      	str	r0, [sp, #8]
 80079c6:	463a      	mov	r2, r7
 80079c8:	4640      	mov	r0, r8
 80079ca:	4798      	blx	r3
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079d6:	fa5f fa8a 	uxtb.w	sl, sl
 80079da:	f1ba 0f02 	cmp.w	sl, #2
 80079de:	d1ec      	bne.n	80079ba <_scanf_float+0x2c6>
 80079e0:	3d03      	subs	r5, #3
 80079e2:	b2ed      	uxtb	r5, r5
 80079e4:	1b76      	subs	r6, r6, r5
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	05da      	lsls	r2, r3, #23
 80079ea:	d52f      	bpl.n	8007a4c <_scanf_float+0x358>
 80079ec:	055b      	lsls	r3, r3, #21
 80079ee:	d510      	bpl.n	8007a12 <_scanf_float+0x31e>
 80079f0:	455e      	cmp	r6, fp
 80079f2:	f67f aebf 	bls.w	8007774 <_scanf_float+0x80>
 80079f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079fe:	463a      	mov	r2, r7
 8007a00:	4640      	mov	r0, r8
 8007a02:	4798      	blx	r3
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	e7f1      	b.n	80079f0 <_scanf_float+0x2fc>
 8007a0c:	46aa      	mov	sl, r5
 8007a0e:	9602      	str	r6, [sp, #8]
 8007a10:	e7df      	b.n	80079d2 <_scanf_float+0x2de>
 8007a12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a16:	6923      	ldr	r3, [r4, #16]
 8007a18:	2965      	cmp	r1, #101	; 0x65
 8007a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007a22:	6123      	str	r3, [r4, #16]
 8007a24:	d00c      	beq.n	8007a40 <_scanf_float+0x34c>
 8007a26:	2945      	cmp	r1, #69	; 0x45
 8007a28:	d00a      	beq.n	8007a40 <_scanf_float+0x34c>
 8007a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a2e:	463a      	mov	r2, r7
 8007a30:	4640      	mov	r0, r8
 8007a32:	4798      	blx	r3
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	1eb5      	subs	r5, r6, #2
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a44:	463a      	mov	r2, r7
 8007a46:	4640      	mov	r0, r8
 8007a48:	4798      	blx	r3
 8007a4a:	462e      	mov	r6, r5
 8007a4c:	6825      	ldr	r5, [r4, #0]
 8007a4e:	f015 0510 	ands.w	r5, r5, #16
 8007a52:	d159      	bne.n	8007b08 <_scanf_float+0x414>
 8007a54:	7035      	strb	r5, [r6, #0]
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a60:	d11b      	bne.n	8007a9a <_scanf_float+0x3a6>
 8007a62:	9b01      	ldr	r3, [sp, #4]
 8007a64:	454b      	cmp	r3, r9
 8007a66:	eba3 0209 	sub.w	r2, r3, r9
 8007a6a:	d123      	bne.n	8007ab4 <_scanf_float+0x3c0>
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4659      	mov	r1, fp
 8007a70:	4640      	mov	r0, r8
 8007a72:	f000 ff1f 	bl	80088b4 <_strtod_r>
 8007a76:	6822      	ldr	r2, [r4, #0]
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	f012 0f02 	tst.w	r2, #2
 8007a7e:	ec57 6b10 	vmov	r6, r7, d0
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	d021      	beq.n	8007aca <_scanf_float+0x3d6>
 8007a86:	9903      	ldr	r1, [sp, #12]
 8007a88:	1d1a      	adds	r2, r3, #4
 8007a8a:	600a      	str	r2, [r1, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	e9c3 6700 	strd	r6, r7, [r3]
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60e3      	str	r3, [r4, #12]
 8007a98:	e66d      	b.n	8007776 <_scanf_float+0x82>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0e5      	beq.n	8007a6c <_scanf_float+0x378>
 8007aa0:	9905      	ldr	r1, [sp, #20]
 8007aa2:	230a      	movs	r3, #10
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	3101      	adds	r1, #1
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	f000 ff8b 	bl	80089c4 <_strtol_r>
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	9e05      	ldr	r6, [sp, #20]
 8007ab2:	1ac2      	subs	r2, r0, r3
 8007ab4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007ab8:	429e      	cmp	r6, r3
 8007aba:	bf28      	it	cs
 8007abc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ac0:	4912      	ldr	r1, [pc, #72]	; (8007b0c <_scanf_float+0x418>)
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f000 f82c 	bl	8007b20 <siprintf>
 8007ac8:	e7d0      	b.n	8007a6c <_scanf_float+0x378>
 8007aca:	9903      	ldr	r1, [sp, #12]
 8007acc:	f012 0f04 	tst.w	r2, #4
 8007ad0:	f103 0204 	add.w	r2, r3, #4
 8007ad4:	600a      	str	r2, [r1, #0]
 8007ad6:	d1d9      	bne.n	8007a8c <_scanf_float+0x398>
 8007ad8:	f8d3 8000 	ldr.w	r8, [r3]
 8007adc:	ee10 2a10 	vmov	r2, s0
 8007ae0:	ee10 0a10 	vmov	r0, s0
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f7f9 f830 	bl	8000b4c <__aeabi_dcmpun>
 8007aec:	b128      	cbz	r0, 8007afa <_scanf_float+0x406>
 8007aee:	4808      	ldr	r0, [pc, #32]	; (8007b10 <_scanf_float+0x41c>)
 8007af0:	f000 f810 	bl	8007b14 <nanf>
 8007af4:	ed88 0a00 	vstr	s0, [r8]
 8007af8:	e7cb      	b.n	8007a92 <_scanf_float+0x39e>
 8007afa:	4630      	mov	r0, r6
 8007afc:	4639      	mov	r1, r7
 8007afe:	f7f9 f883 	bl	8000c08 <__aeabi_d2f>
 8007b02:	f8c8 0000 	str.w	r0, [r8]
 8007b06:	e7c4      	b.n	8007a92 <_scanf_float+0x39e>
 8007b08:	2500      	movs	r5, #0
 8007b0a:	e634      	b.n	8007776 <_scanf_float+0x82>
 8007b0c:	0800c0ae 	.word	0x0800c0ae
 8007b10:	0800c4d3 	.word	0x0800c4d3

08007b14 <nanf>:
 8007b14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b1c <nanf+0x8>
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	7fc00000 	.word	0x7fc00000

08007b20 <siprintf>:
 8007b20:	b40e      	push	{r1, r2, r3}
 8007b22:	b500      	push	{lr}
 8007b24:	b09c      	sub	sp, #112	; 0x70
 8007b26:	ab1d      	add	r3, sp, #116	; 0x74
 8007b28:	9002      	str	r0, [sp, #8]
 8007b2a:	9006      	str	r0, [sp, #24]
 8007b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b30:	4809      	ldr	r0, [pc, #36]	; (8007b58 <siprintf+0x38>)
 8007b32:	9107      	str	r1, [sp, #28]
 8007b34:	9104      	str	r1, [sp, #16]
 8007b36:	4909      	ldr	r1, [pc, #36]	; (8007b5c <siprintf+0x3c>)
 8007b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b3c:	9105      	str	r1, [sp, #20]
 8007b3e:	6800      	ldr	r0, [r0, #0]
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	a902      	add	r1, sp, #8
 8007b44:	f002 ffc0 	bl	800aac8 <_svfiprintf_r>
 8007b48:	9b02      	ldr	r3, [sp, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	b01c      	add	sp, #112	; 0x70
 8007b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b54:	b003      	add	sp, #12
 8007b56:	4770      	bx	lr
 8007b58:	20000808 	.word	0x20000808
 8007b5c:	ffff0208 	.word	0xffff0208

08007b60 <siscanf>:
 8007b60:	b40e      	push	{r1, r2, r3}
 8007b62:	b510      	push	{r4, lr}
 8007b64:	b09f      	sub	sp, #124	; 0x7c
 8007b66:	ac21      	add	r4, sp, #132	; 0x84
 8007b68:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007b6c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007b70:	9201      	str	r2, [sp, #4]
 8007b72:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007b76:	9004      	str	r0, [sp, #16]
 8007b78:	9008      	str	r0, [sp, #32]
 8007b7a:	f7f8 fb39 	bl	80001f0 <strlen>
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <siscanf+0x50>)
 8007b80:	9005      	str	r0, [sp, #20]
 8007b82:	9009      	str	r0, [sp, #36]	; 0x24
 8007b84:	930d      	str	r3, [sp, #52]	; 0x34
 8007b86:	480b      	ldr	r0, [pc, #44]	; (8007bb4 <siscanf+0x54>)
 8007b88:	9a01      	ldr	r2, [sp, #4]
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	9403      	str	r4, [sp, #12]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9311      	str	r3, [sp, #68]	; 0x44
 8007b92:	9316      	str	r3, [sp, #88]	; 0x58
 8007b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	f003 f8ec 	bl	800ad7c <__ssvfiscanf_r>
 8007ba4:	b01f      	add	sp, #124	; 0x7c
 8007ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007baa:	b003      	add	sp, #12
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	20000808 	.word	0x20000808

08007bb8 <__sread>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	460c      	mov	r4, r1
 8007bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc0:	f003 fba6 	bl	800b310 <_read_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	bfab      	itete	ge
 8007bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bca:	89a3      	ldrhlt	r3, [r4, #12]
 8007bcc:	181b      	addge	r3, r3, r0
 8007bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bd2:	bfac      	ite	ge
 8007bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bd6:	81a3      	strhlt	r3, [r4, #12]
 8007bd8:	bd10      	pop	{r4, pc}

08007bda <__seofread>:
 8007bda:	2000      	movs	r0, #0
 8007bdc:	4770      	bx	lr

08007bde <__swrite>:
 8007bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	461f      	mov	r7, r3
 8007be4:	898b      	ldrh	r3, [r1, #12]
 8007be6:	05db      	lsls	r3, r3, #23
 8007be8:	4605      	mov	r5, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	4616      	mov	r6, r2
 8007bee:	d505      	bpl.n	8007bfc <__swrite+0x1e>
 8007bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f002 f918 	bl	8009e2c <_lseek_r>
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c06:	81a3      	strh	r3, [r4, #12]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c12:	f000 bef9 	b.w	8008a08 <_write_r>

08007c16 <__sseek>:
 8007c16:	b510      	push	{r4, lr}
 8007c18:	460c      	mov	r4, r1
 8007c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1e:	f002 f905 	bl	8009e2c <_lseek_r>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	bf15      	itete	ne
 8007c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c32:	81a3      	strheq	r3, [r4, #12]
 8007c34:	bf18      	it	ne
 8007c36:	81a3      	strhne	r3, [r4, #12]
 8007c38:	bd10      	pop	{r4, pc}

08007c3a <__sclose>:
 8007c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3e:	f000 bef5 	b.w	8008a2c <_close_r>

08007c42 <strncmp>:
 8007c42:	b510      	push	{r4, lr}
 8007c44:	b17a      	cbz	r2, 8007c66 <strncmp+0x24>
 8007c46:	4603      	mov	r3, r0
 8007c48:	3901      	subs	r1, #1
 8007c4a:	1884      	adds	r4, r0, r2
 8007c4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007c54:	4290      	cmp	r0, r2
 8007c56:	d101      	bne.n	8007c5c <strncmp+0x1a>
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d101      	bne.n	8007c60 <strncmp+0x1e>
 8007c5c:	1a80      	subs	r0, r0, r2
 8007c5e:	bd10      	pop	{r4, pc}
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1f3      	bne.n	8007c4c <strncmp+0xa>
 8007c64:	e7fa      	b.n	8007c5c <strncmp+0x1a>
 8007c66:	4610      	mov	r0, r2
 8007c68:	e7f9      	b.n	8007c5e <strncmp+0x1c>

08007c6a <sulp>:
 8007c6a:	b570      	push	{r4, r5, r6, lr}
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	ec45 4b10 	vmov	d0, r4, r5
 8007c74:	4616      	mov	r6, r2
 8007c76:	f002 fc85 	bl	800a584 <__ulp>
 8007c7a:	ec51 0b10 	vmov	r0, r1, d0
 8007c7e:	b17e      	cbz	r6, 8007ca0 <sulp+0x36>
 8007c80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	dd09      	ble.n	8007ca0 <sulp+0x36>
 8007c8c:	051b      	lsls	r3, r3, #20
 8007c8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c92:	2400      	movs	r4, #0
 8007c94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c98:	4622      	mov	r2, r4
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	f7f8 fcbc 	bl	8000618 <__aeabi_dmul>
 8007ca0:	bd70      	pop	{r4, r5, r6, pc}
 8007ca2:	0000      	movs	r0, r0
 8007ca4:	0000      	movs	r0, r0
	...

08007ca8 <_strtod_l>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	ed2d 8b02 	vpush	{d8}
 8007cb0:	b09d      	sub	sp, #116	; 0x74
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9318      	str	r3, [sp, #96]	; 0x60
 8007cb8:	4ba2      	ldr	r3, [pc, #648]	; (8007f44 <_strtod_l+0x29c>)
 8007cba:	9213      	str	r2, [sp, #76]	; 0x4c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	4688      	mov	r8, r1
 8007cc6:	f7f8 fa93 	bl	80001f0 <strlen>
 8007cca:	f04f 0a00 	mov.w	sl, #0
 8007cce:	4605      	mov	r5, r0
 8007cd0:	f04f 0b00 	mov.w	fp, #0
 8007cd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	2a2b      	cmp	r2, #43	; 0x2b
 8007cde:	d04e      	beq.n	8007d7e <_strtod_l+0xd6>
 8007ce0:	d83b      	bhi.n	8007d5a <_strtod_l+0xb2>
 8007ce2:	2a0d      	cmp	r2, #13
 8007ce4:	d834      	bhi.n	8007d50 <_strtod_l+0xa8>
 8007ce6:	2a08      	cmp	r2, #8
 8007ce8:	d834      	bhi.n	8007d54 <_strtod_l+0xac>
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	d03e      	beq.n	8007d6c <_strtod_l+0xc4>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007cf4:	7833      	ldrb	r3, [r6, #0]
 8007cf6:	2b30      	cmp	r3, #48	; 0x30
 8007cf8:	f040 80b0 	bne.w	8007e5c <_strtod_l+0x1b4>
 8007cfc:	7873      	ldrb	r3, [r6, #1]
 8007cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d02:	2b58      	cmp	r3, #88	; 0x58
 8007d04:	d168      	bne.n	8007dd8 <_strtod_l+0x130>
 8007d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	ab18      	add	r3, sp, #96	; 0x60
 8007d0c:	9702      	str	r7, [sp, #8]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	4a8d      	ldr	r2, [pc, #564]	; (8007f48 <_strtod_l+0x2a0>)
 8007d12:	ab19      	add	r3, sp, #100	; 0x64
 8007d14:	a917      	add	r1, sp, #92	; 0x5c
 8007d16:	4620      	mov	r0, r4
 8007d18:	f001 fd7c 	bl	8009814 <__gethex>
 8007d1c:	f010 0707 	ands.w	r7, r0, #7
 8007d20:	4605      	mov	r5, r0
 8007d22:	d005      	beq.n	8007d30 <_strtod_l+0x88>
 8007d24:	2f06      	cmp	r7, #6
 8007d26:	d12c      	bne.n	8007d82 <_strtod_l+0xda>
 8007d28:	3601      	adds	r6, #1
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 8590 	bne.w	8008858 <_strtod_l+0xbb0>
 8007d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3a:	b1eb      	cbz	r3, 8007d78 <_strtod_l+0xd0>
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d42:	ec43 2b10 	vmov	d0, r2, r3
 8007d46:	b01d      	add	sp, #116	; 0x74
 8007d48:	ecbd 8b02 	vpop	{d8}
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	2a20      	cmp	r2, #32
 8007d52:	d1cc      	bne.n	8007cee <_strtod_l+0x46>
 8007d54:	3301      	adds	r3, #1
 8007d56:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d58:	e7be      	b.n	8007cd8 <_strtod_l+0x30>
 8007d5a:	2a2d      	cmp	r2, #45	; 0x2d
 8007d5c:	d1c7      	bne.n	8007cee <_strtod_l+0x46>
 8007d5e:	2201      	movs	r2, #1
 8007d60:	920a      	str	r2, [sp, #40]	; 0x28
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1c2      	bne.n	8007cf2 <_strtod_l+0x4a>
 8007d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 856e 	bne.w	8008854 <_strtod_l+0xbac>
 8007d78:	4652      	mov	r2, sl
 8007d7a:	465b      	mov	r3, fp
 8007d7c:	e7e1      	b.n	8007d42 <_strtod_l+0x9a>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	e7ee      	b.n	8007d60 <_strtod_l+0xb8>
 8007d82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d84:	b13a      	cbz	r2, 8007d96 <_strtod_l+0xee>
 8007d86:	2135      	movs	r1, #53	; 0x35
 8007d88:	a81a      	add	r0, sp, #104	; 0x68
 8007d8a:	f002 fd06 	bl	800a79a <__copybits>
 8007d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d90:	4620      	mov	r0, r4
 8007d92:	f002 f8c5 	bl	8009f20 <_Bfree>
 8007d96:	3f01      	subs	r7, #1
 8007d98:	2f04      	cmp	r7, #4
 8007d9a:	d806      	bhi.n	8007daa <_strtod_l+0x102>
 8007d9c:	e8df f007 	tbb	[pc, r7]
 8007da0:	1714030a 	.word	0x1714030a
 8007da4:	0a          	.byte	0x0a
 8007da5:	00          	.byte	0x00
 8007da6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007daa:	0728      	lsls	r0, r5, #28
 8007dac:	d5c0      	bpl.n	8007d30 <_strtod_l+0x88>
 8007dae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007db2:	e7bd      	b.n	8007d30 <_strtod_l+0x88>
 8007db4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007db8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007dba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007dc6:	e7f0      	b.n	8007daa <_strtod_l+0x102>
 8007dc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007f4c <_strtod_l+0x2a4>
 8007dcc:	e7ed      	b.n	8007daa <_strtod_l+0x102>
 8007dce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007dd2:	f04f 3aff 	mov.w	sl, #4294967295
 8007dd6:	e7e8      	b.n	8007daa <_strtod_l+0x102>
 8007dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2b30      	cmp	r3, #48	; 0x30
 8007de2:	d0f9      	beq.n	8007dd8 <_strtod_l+0x130>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0a3      	beq.n	8007d30 <_strtod_l+0x88>
 8007de8:	2301      	movs	r3, #1
 8007dea:	f04f 0900 	mov.w	r9, #0
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	f8cd 901c 	str.w	r9, [sp, #28]
 8007df8:	464f      	mov	r7, r9
 8007dfa:	220a      	movs	r2, #10
 8007dfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007dfe:	7806      	ldrb	r6, [r0, #0]
 8007e00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e04:	b2d9      	uxtb	r1, r3
 8007e06:	2909      	cmp	r1, #9
 8007e08:	d92a      	bls.n	8007e60 <_strtod_l+0x1b8>
 8007e0a:	9905      	ldr	r1, [sp, #20]
 8007e0c:	462a      	mov	r2, r5
 8007e0e:	f7ff ff18 	bl	8007c42 <strncmp>
 8007e12:	b398      	cbz	r0, 8007e7c <_strtod_l+0x1d4>
 8007e14:	2000      	movs	r0, #0
 8007e16:	4632      	mov	r2, r6
 8007e18:	463d      	mov	r5, r7
 8007e1a:	9005      	str	r0, [sp, #20]
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2a65      	cmp	r2, #101	; 0x65
 8007e20:	d001      	beq.n	8007e26 <_strtod_l+0x17e>
 8007e22:	2a45      	cmp	r2, #69	; 0x45
 8007e24:	d118      	bne.n	8007e58 <_strtod_l+0x1b0>
 8007e26:	b91d      	cbnz	r5, 8007e30 <_strtod_l+0x188>
 8007e28:	9a04      	ldr	r2, [sp, #16]
 8007e2a:	4302      	orrs	r2, r0
 8007e2c:	d09e      	beq.n	8007d6c <_strtod_l+0xc4>
 8007e2e:	2500      	movs	r5, #0
 8007e30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007e34:	f108 0201 	add.w	r2, r8, #1
 8007e38:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007e3e:	2a2b      	cmp	r2, #43	; 0x2b
 8007e40:	d075      	beq.n	8007f2e <_strtod_l+0x286>
 8007e42:	2a2d      	cmp	r2, #45	; 0x2d
 8007e44:	d07b      	beq.n	8007f3e <_strtod_l+0x296>
 8007e46:	f04f 0c00 	mov.w	ip, #0
 8007e4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e4e:	2909      	cmp	r1, #9
 8007e50:	f240 8082 	bls.w	8007f58 <_strtod_l+0x2b0>
 8007e54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e58:	2600      	movs	r6, #0
 8007e5a:	e09d      	b.n	8007f98 <_strtod_l+0x2f0>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e7c4      	b.n	8007dea <_strtod_l+0x142>
 8007e60:	2f08      	cmp	r7, #8
 8007e62:	bfd8      	it	le
 8007e64:	9907      	ldrle	r1, [sp, #28]
 8007e66:	f100 0001 	add.w	r0, r0, #1
 8007e6a:	bfda      	itte	le
 8007e6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e70:	9307      	strle	r3, [sp, #28]
 8007e72:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e76:	3701      	adds	r7, #1
 8007e78:	9017      	str	r0, [sp, #92]	; 0x5c
 8007e7a:	e7bf      	b.n	8007dfc <_strtod_l+0x154>
 8007e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e7e:	195a      	adds	r2, r3, r5
 8007e80:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e82:	5d5a      	ldrb	r2, [r3, r5]
 8007e84:	2f00      	cmp	r7, #0
 8007e86:	d037      	beq.n	8007ef8 <_strtod_l+0x250>
 8007e88:	9005      	str	r0, [sp, #20]
 8007e8a:	463d      	mov	r5, r7
 8007e8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d912      	bls.n	8007eba <_strtod_l+0x212>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e7c2      	b.n	8007e1e <_strtod_l+0x176>
 8007e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e9e:	785a      	ldrb	r2, [r3, #1]
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	2a30      	cmp	r2, #48	; 0x30
 8007ea4:	d0f8      	beq.n	8007e98 <_strtod_l+0x1f0>
 8007ea6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	f200 84d9 	bhi.w	8008862 <_strtod_l+0xbba>
 8007eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eb2:	9005      	str	r0, [sp, #20]
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	9308      	str	r3, [sp, #32]
 8007eb8:	4605      	mov	r5, r0
 8007eba:	3a30      	subs	r2, #48	; 0x30
 8007ebc:	f100 0301 	add.w	r3, r0, #1
 8007ec0:	d014      	beq.n	8007eec <_strtod_l+0x244>
 8007ec2:	9905      	ldr	r1, [sp, #20]
 8007ec4:	4419      	add	r1, r3
 8007ec6:	9105      	str	r1, [sp, #20]
 8007ec8:	462b      	mov	r3, r5
 8007eca:	eb00 0e05 	add.w	lr, r0, r5
 8007ece:	210a      	movs	r1, #10
 8007ed0:	4573      	cmp	r3, lr
 8007ed2:	d113      	bne.n	8007efc <_strtod_l+0x254>
 8007ed4:	182b      	adds	r3, r5, r0
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	f105 0501 	add.w	r5, r5, #1
 8007edc:	4405      	add	r5, r0
 8007ede:	dc1c      	bgt.n	8007f1a <_strtod_l+0x272>
 8007ee0:	9907      	ldr	r1, [sp, #28]
 8007ee2:	230a      	movs	r3, #10
 8007ee4:	fb03 2301 	mla	r3, r3, r1, r2
 8007ee8:	9307      	str	r3, [sp, #28]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007eee:	1c51      	adds	r1, r2, #1
 8007ef0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ef2:	7852      	ldrb	r2, [r2, #1]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	e7c9      	b.n	8007e8c <_strtod_l+0x1e4>
 8007ef8:	4638      	mov	r0, r7
 8007efa:	e7d2      	b.n	8007ea2 <_strtod_l+0x1fa>
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	dc04      	bgt.n	8007f0a <_strtod_l+0x262>
 8007f00:	9e07      	ldr	r6, [sp, #28]
 8007f02:	434e      	muls	r6, r1
 8007f04:	9607      	str	r6, [sp, #28]
 8007f06:	3301      	adds	r3, #1
 8007f08:	e7e2      	b.n	8007ed0 <_strtod_l+0x228>
 8007f0a:	f103 0c01 	add.w	ip, r3, #1
 8007f0e:	f1bc 0f10 	cmp.w	ip, #16
 8007f12:	bfd8      	it	le
 8007f14:	fb01 f909 	mulle.w	r9, r1, r9
 8007f18:	e7f5      	b.n	8007f06 <_strtod_l+0x25e>
 8007f1a:	2d10      	cmp	r5, #16
 8007f1c:	bfdc      	itt	le
 8007f1e:	230a      	movle	r3, #10
 8007f20:	fb03 2909 	mlale	r9, r3, r9, r2
 8007f24:	e7e1      	b.n	8007eea <_strtod_l+0x242>
 8007f26:	2300      	movs	r3, #0
 8007f28:	9305      	str	r3, [sp, #20]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e77c      	b.n	8007e28 <_strtod_l+0x180>
 8007f2e:	f04f 0c00 	mov.w	ip, #0
 8007f32:	f108 0202 	add.w	r2, r8, #2
 8007f36:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f38:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007f3c:	e785      	b.n	8007e4a <_strtod_l+0x1a2>
 8007f3e:	f04f 0c01 	mov.w	ip, #1
 8007f42:	e7f6      	b.n	8007f32 <_strtod_l+0x28a>
 8007f44:	0800c300 	.word	0x0800c300
 8007f48:	0800c0b4 	.word	0x0800c0b4
 8007f4c:	7ff00000 	.word	0x7ff00000
 8007f50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f52:	1c51      	adds	r1, r2, #1
 8007f54:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f56:	7852      	ldrb	r2, [r2, #1]
 8007f58:	2a30      	cmp	r2, #48	; 0x30
 8007f5a:	d0f9      	beq.n	8007f50 <_strtod_l+0x2a8>
 8007f5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f60:	2908      	cmp	r1, #8
 8007f62:	f63f af79 	bhi.w	8007e58 <_strtod_l+0x1b0>
 8007f66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007f6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f6c:	9206      	str	r2, [sp, #24]
 8007f6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f70:	1c51      	adds	r1, r2, #1
 8007f72:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f74:	7852      	ldrb	r2, [r2, #1]
 8007f76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007f7a:	2e09      	cmp	r6, #9
 8007f7c:	d937      	bls.n	8007fee <_strtod_l+0x346>
 8007f7e:	9e06      	ldr	r6, [sp, #24]
 8007f80:	1b89      	subs	r1, r1, r6
 8007f82:	2908      	cmp	r1, #8
 8007f84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f88:	dc02      	bgt.n	8007f90 <_strtod_l+0x2e8>
 8007f8a:	4576      	cmp	r6, lr
 8007f8c:	bfa8      	it	ge
 8007f8e:	4676      	movge	r6, lr
 8007f90:	f1bc 0f00 	cmp.w	ip, #0
 8007f94:	d000      	beq.n	8007f98 <_strtod_l+0x2f0>
 8007f96:	4276      	negs	r6, r6
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	d14d      	bne.n	8008038 <_strtod_l+0x390>
 8007f9c:	9904      	ldr	r1, [sp, #16]
 8007f9e:	4301      	orrs	r1, r0
 8007fa0:	f47f aec6 	bne.w	8007d30 <_strtod_l+0x88>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f47f aee1 	bne.w	8007d6c <_strtod_l+0xc4>
 8007faa:	2a69      	cmp	r2, #105	; 0x69
 8007fac:	d027      	beq.n	8007ffe <_strtod_l+0x356>
 8007fae:	dc24      	bgt.n	8007ffa <_strtod_l+0x352>
 8007fb0:	2a49      	cmp	r2, #73	; 0x49
 8007fb2:	d024      	beq.n	8007ffe <_strtod_l+0x356>
 8007fb4:	2a4e      	cmp	r2, #78	; 0x4e
 8007fb6:	f47f aed9 	bne.w	8007d6c <_strtod_l+0xc4>
 8007fba:	499f      	ldr	r1, [pc, #636]	; (8008238 <_strtod_l+0x590>)
 8007fbc:	a817      	add	r0, sp, #92	; 0x5c
 8007fbe:	f001 fe81 	bl	8009cc4 <__match>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	f43f aed2 	beq.w	8007d6c <_strtod_l+0xc4>
 8007fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b28      	cmp	r3, #40	; 0x28
 8007fce:	d12d      	bne.n	800802c <_strtod_l+0x384>
 8007fd0:	499a      	ldr	r1, [pc, #616]	; (800823c <_strtod_l+0x594>)
 8007fd2:	aa1a      	add	r2, sp, #104	; 0x68
 8007fd4:	a817      	add	r0, sp, #92	; 0x5c
 8007fd6:	f001 fe89 	bl	8009cec <__hexnan>
 8007fda:	2805      	cmp	r0, #5
 8007fdc:	d126      	bne.n	800802c <_strtod_l+0x384>
 8007fde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fe0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007fe4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007fe8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007fec:	e6a0      	b.n	8007d30 <_strtod_l+0x88>
 8007fee:	210a      	movs	r1, #10
 8007ff0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007ff4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ff8:	e7b9      	b.n	8007f6e <_strtod_l+0x2c6>
 8007ffa:	2a6e      	cmp	r2, #110	; 0x6e
 8007ffc:	e7db      	b.n	8007fb6 <_strtod_l+0x30e>
 8007ffe:	4990      	ldr	r1, [pc, #576]	; (8008240 <_strtod_l+0x598>)
 8008000:	a817      	add	r0, sp, #92	; 0x5c
 8008002:	f001 fe5f 	bl	8009cc4 <__match>
 8008006:	2800      	cmp	r0, #0
 8008008:	f43f aeb0 	beq.w	8007d6c <_strtod_l+0xc4>
 800800c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800800e:	498d      	ldr	r1, [pc, #564]	; (8008244 <_strtod_l+0x59c>)
 8008010:	3b01      	subs	r3, #1
 8008012:	a817      	add	r0, sp, #92	; 0x5c
 8008014:	9317      	str	r3, [sp, #92]	; 0x5c
 8008016:	f001 fe55 	bl	8009cc4 <__match>
 800801a:	b910      	cbnz	r0, 8008022 <_strtod_l+0x37a>
 800801c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800801e:	3301      	adds	r3, #1
 8008020:	9317      	str	r3, [sp, #92]	; 0x5c
 8008022:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008254 <_strtod_l+0x5ac>
 8008026:	f04f 0a00 	mov.w	sl, #0
 800802a:	e681      	b.n	8007d30 <_strtod_l+0x88>
 800802c:	4886      	ldr	r0, [pc, #536]	; (8008248 <_strtod_l+0x5a0>)
 800802e:	f003 f983 	bl	800b338 <nan>
 8008032:	ec5b ab10 	vmov	sl, fp, d0
 8008036:	e67b      	b.n	8007d30 <_strtod_l+0x88>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	9807      	ldr	r0, [sp, #28]
 800803c:	1af3      	subs	r3, r6, r3
 800803e:	2f00      	cmp	r7, #0
 8008040:	bf08      	it	eq
 8008042:	462f      	moveq	r7, r5
 8008044:	2d10      	cmp	r5, #16
 8008046:	9306      	str	r3, [sp, #24]
 8008048:	46a8      	mov	r8, r5
 800804a:	bfa8      	it	ge
 800804c:	f04f 0810 	movge.w	r8, #16
 8008050:	f7f8 fa68 	bl	8000524 <__aeabi_ui2d>
 8008054:	2d09      	cmp	r5, #9
 8008056:	4682      	mov	sl, r0
 8008058:	468b      	mov	fp, r1
 800805a:	dd13      	ble.n	8008084 <_strtod_l+0x3dc>
 800805c:	4b7b      	ldr	r3, [pc, #492]	; (800824c <_strtod_l+0x5a4>)
 800805e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008062:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008066:	f7f8 fad7 	bl	8000618 <__aeabi_dmul>
 800806a:	4682      	mov	sl, r0
 800806c:	4648      	mov	r0, r9
 800806e:	468b      	mov	fp, r1
 8008070:	f7f8 fa58 	bl	8000524 <__aeabi_ui2d>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4650      	mov	r0, sl
 800807a:	4659      	mov	r1, fp
 800807c:	f7f8 f916 	bl	80002ac <__adddf3>
 8008080:	4682      	mov	sl, r0
 8008082:	468b      	mov	fp, r1
 8008084:	2d0f      	cmp	r5, #15
 8008086:	dc38      	bgt.n	80080fa <_strtod_l+0x452>
 8008088:	9b06      	ldr	r3, [sp, #24]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f43f ae50 	beq.w	8007d30 <_strtod_l+0x88>
 8008090:	dd24      	ble.n	80080dc <_strtod_l+0x434>
 8008092:	2b16      	cmp	r3, #22
 8008094:	dc0b      	bgt.n	80080ae <_strtod_l+0x406>
 8008096:	496d      	ldr	r1, [pc, #436]	; (800824c <_strtod_l+0x5a4>)
 8008098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800809c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a0:	4652      	mov	r2, sl
 80080a2:	465b      	mov	r3, fp
 80080a4:	f7f8 fab8 	bl	8000618 <__aeabi_dmul>
 80080a8:	4682      	mov	sl, r0
 80080aa:	468b      	mov	fp, r1
 80080ac:	e640      	b.n	8007d30 <_strtod_l+0x88>
 80080ae:	9a06      	ldr	r2, [sp, #24]
 80080b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080b4:	4293      	cmp	r3, r2
 80080b6:	db20      	blt.n	80080fa <_strtod_l+0x452>
 80080b8:	4c64      	ldr	r4, [pc, #400]	; (800824c <_strtod_l+0x5a4>)
 80080ba:	f1c5 050f 	rsb	r5, r5, #15
 80080be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080c2:	4652      	mov	r2, sl
 80080c4:	465b      	mov	r3, fp
 80080c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ca:	f7f8 faa5 	bl	8000618 <__aeabi_dmul>
 80080ce:	9b06      	ldr	r3, [sp, #24]
 80080d0:	1b5d      	subs	r5, r3, r5
 80080d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80080d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80080da:	e7e3      	b.n	80080a4 <_strtod_l+0x3fc>
 80080dc:	9b06      	ldr	r3, [sp, #24]
 80080de:	3316      	adds	r3, #22
 80080e0:	db0b      	blt.n	80080fa <_strtod_l+0x452>
 80080e2:	9b05      	ldr	r3, [sp, #20]
 80080e4:	1b9e      	subs	r6, r3, r6
 80080e6:	4b59      	ldr	r3, [pc, #356]	; (800824c <_strtod_l+0x5a4>)
 80080e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80080ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080f0:	4650      	mov	r0, sl
 80080f2:	4659      	mov	r1, fp
 80080f4:	f7f8 fbba 	bl	800086c <__aeabi_ddiv>
 80080f8:	e7d6      	b.n	80080a8 <_strtod_l+0x400>
 80080fa:	9b06      	ldr	r3, [sp, #24]
 80080fc:	eba5 0808 	sub.w	r8, r5, r8
 8008100:	4498      	add	r8, r3
 8008102:	f1b8 0f00 	cmp.w	r8, #0
 8008106:	dd74      	ble.n	80081f2 <_strtod_l+0x54a>
 8008108:	f018 030f 	ands.w	r3, r8, #15
 800810c:	d00a      	beq.n	8008124 <_strtod_l+0x47c>
 800810e:	494f      	ldr	r1, [pc, #316]	; (800824c <_strtod_l+0x5a4>)
 8008110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008114:	4652      	mov	r2, sl
 8008116:	465b      	mov	r3, fp
 8008118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800811c:	f7f8 fa7c 	bl	8000618 <__aeabi_dmul>
 8008120:	4682      	mov	sl, r0
 8008122:	468b      	mov	fp, r1
 8008124:	f038 080f 	bics.w	r8, r8, #15
 8008128:	d04f      	beq.n	80081ca <_strtod_l+0x522>
 800812a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800812e:	dd22      	ble.n	8008176 <_strtod_l+0x4ce>
 8008130:	2500      	movs	r5, #0
 8008132:	462e      	mov	r6, r5
 8008134:	9507      	str	r5, [sp, #28]
 8008136:	9505      	str	r5, [sp, #20]
 8008138:	2322      	movs	r3, #34	; 0x22
 800813a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008254 <_strtod_l+0x5ac>
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	f04f 0a00 	mov.w	sl, #0
 8008144:	9b07      	ldr	r3, [sp, #28]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f43f adf2 	beq.w	8007d30 <_strtod_l+0x88>
 800814c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800814e:	4620      	mov	r0, r4
 8008150:	f001 fee6 	bl	8009f20 <_Bfree>
 8008154:	9905      	ldr	r1, [sp, #20]
 8008156:	4620      	mov	r0, r4
 8008158:	f001 fee2 	bl	8009f20 <_Bfree>
 800815c:	4631      	mov	r1, r6
 800815e:	4620      	mov	r0, r4
 8008160:	f001 fede 	bl	8009f20 <_Bfree>
 8008164:	9907      	ldr	r1, [sp, #28]
 8008166:	4620      	mov	r0, r4
 8008168:	f001 feda 	bl	8009f20 <_Bfree>
 800816c:	4629      	mov	r1, r5
 800816e:	4620      	mov	r0, r4
 8008170:	f001 fed6 	bl	8009f20 <_Bfree>
 8008174:	e5dc      	b.n	8007d30 <_strtod_l+0x88>
 8008176:	4b36      	ldr	r3, [pc, #216]	; (8008250 <_strtod_l+0x5a8>)
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	2300      	movs	r3, #0
 800817c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008180:	4650      	mov	r0, sl
 8008182:	4659      	mov	r1, fp
 8008184:	4699      	mov	r9, r3
 8008186:	f1b8 0f01 	cmp.w	r8, #1
 800818a:	dc21      	bgt.n	80081d0 <_strtod_l+0x528>
 800818c:	b10b      	cbz	r3, 8008192 <_strtod_l+0x4ea>
 800818e:	4682      	mov	sl, r0
 8008190:	468b      	mov	fp, r1
 8008192:	4b2f      	ldr	r3, [pc, #188]	; (8008250 <_strtod_l+0x5a8>)
 8008194:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008198:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800819c:	4652      	mov	r2, sl
 800819e:	465b      	mov	r3, fp
 80081a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80081a4:	f7f8 fa38 	bl	8000618 <__aeabi_dmul>
 80081a8:	4b2a      	ldr	r3, [pc, #168]	; (8008254 <_strtod_l+0x5ac>)
 80081aa:	460a      	mov	r2, r1
 80081ac:	400b      	ands	r3, r1
 80081ae:	492a      	ldr	r1, [pc, #168]	; (8008258 <_strtod_l+0x5b0>)
 80081b0:	428b      	cmp	r3, r1
 80081b2:	4682      	mov	sl, r0
 80081b4:	d8bc      	bhi.n	8008130 <_strtod_l+0x488>
 80081b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081ba:	428b      	cmp	r3, r1
 80081bc:	bf86      	itte	hi
 80081be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800825c <_strtod_l+0x5b4>
 80081c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80081c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80081ca:	2300      	movs	r3, #0
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	e084      	b.n	80082da <_strtod_l+0x632>
 80081d0:	f018 0f01 	tst.w	r8, #1
 80081d4:	d005      	beq.n	80081e2 <_strtod_l+0x53a>
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f7f8 fa1c 	bl	8000618 <__aeabi_dmul>
 80081e0:	2301      	movs	r3, #1
 80081e2:	9a04      	ldr	r2, [sp, #16]
 80081e4:	3208      	adds	r2, #8
 80081e6:	f109 0901 	add.w	r9, r9, #1
 80081ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081ee:	9204      	str	r2, [sp, #16]
 80081f0:	e7c9      	b.n	8008186 <_strtod_l+0x4de>
 80081f2:	d0ea      	beq.n	80081ca <_strtod_l+0x522>
 80081f4:	f1c8 0800 	rsb	r8, r8, #0
 80081f8:	f018 020f 	ands.w	r2, r8, #15
 80081fc:	d00a      	beq.n	8008214 <_strtod_l+0x56c>
 80081fe:	4b13      	ldr	r3, [pc, #76]	; (800824c <_strtod_l+0x5a4>)
 8008200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008204:	4650      	mov	r0, sl
 8008206:	4659      	mov	r1, fp
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 fb2e 	bl	800086c <__aeabi_ddiv>
 8008210:	4682      	mov	sl, r0
 8008212:	468b      	mov	fp, r1
 8008214:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008218:	d0d7      	beq.n	80081ca <_strtod_l+0x522>
 800821a:	f1b8 0f1f 	cmp.w	r8, #31
 800821e:	dd1f      	ble.n	8008260 <_strtod_l+0x5b8>
 8008220:	2500      	movs	r5, #0
 8008222:	462e      	mov	r6, r5
 8008224:	9507      	str	r5, [sp, #28]
 8008226:	9505      	str	r5, [sp, #20]
 8008228:	2322      	movs	r3, #34	; 0x22
 800822a:	f04f 0a00 	mov.w	sl, #0
 800822e:	f04f 0b00 	mov.w	fp, #0
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	e786      	b.n	8008144 <_strtod_l+0x49c>
 8008236:	bf00      	nop
 8008238:	0800c089 	.word	0x0800c089
 800823c:	0800c0c8 	.word	0x0800c0c8
 8008240:	0800c081 	.word	0x0800c081
 8008244:	0800c20c 	.word	0x0800c20c
 8008248:	0800c4d3 	.word	0x0800c4d3
 800824c:	0800c398 	.word	0x0800c398
 8008250:	0800c370 	.word	0x0800c370
 8008254:	7ff00000 	.word	0x7ff00000
 8008258:	7ca00000 	.word	0x7ca00000
 800825c:	7fefffff 	.word	0x7fefffff
 8008260:	f018 0310 	ands.w	r3, r8, #16
 8008264:	bf18      	it	ne
 8008266:	236a      	movne	r3, #106	; 0x6a
 8008268:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008618 <_strtod_l+0x970>
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	4650      	mov	r0, sl
 8008270:	4659      	mov	r1, fp
 8008272:	2300      	movs	r3, #0
 8008274:	f018 0f01 	tst.w	r8, #1
 8008278:	d004      	beq.n	8008284 <_strtod_l+0x5dc>
 800827a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800827e:	f7f8 f9cb 	bl	8000618 <__aeabi_dmul>
 8008282:	2301      	movs	r3, #1
 8008284:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008288:	f109 0908 	add.w	r9, r9, #8
 800828c:	d1f2      	bne.n	8008274 <_strtod_l+0x5cc>
 800828e:	b10b      	cbz	r3, 8008294 <_strtod_l+0x5ec>
 8008290:	4682      	mov	sl, r0
 8008292:	468b      	mov	fp, r1
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	b1c3      	cbz	r3, 80082ca <_strtod_l+0x622>
 8008298:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800829c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	4659      	mov	r1, fp
 80082a4:	dd11      	ble.n	80082ca <_strtod_l+0x622>
 80082a6:	2b1f      	cmp	r3, #31
 80082a8:	f340 8124 	ble.w	80084f4 <_strtod_l+0x84c>
 80082ac:	2b34      	cmp	r3, #52	; 0x34
 80082ae:	bfde      	ittt	le
 80082b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082b4:	f04f 33ff 	movle.w	r3, #4294967295
 80082b8:	fa03 f202 	lslle.w	r2, r3, r2
 80082bc:	f04f 0a00 	mov.w	sl, #0
 80082c0:	bfcc      	ite	gt
 80082c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082c6:	ea02 0b01 	andle.w	fp, r2, r1
 80082ca:	2200      	movs	r2, #0
 80082cc:	2300      	movs	r3, #0
 80082ce:	4650      	mov	r0, sl
 80082d0:	4659      	mov	r1, fp
 80082d2:	f7f8 fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d1a2      	bne.n	8008220 <_strtod_l+0x578>
 80082da:	9b07      	ldr	r3, [sp, #28]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	9908      	ldr	r1, [sp, #32]
 80082e0:	462b      	mov	r3, r5
 80082e2:	463a      	mov	r2, r7
 80082e4:	4620      	mov	r0, r4
 80082e6:	f001 fe83 	bl	8009ff0 <__s2b>
 80082ea:	9007      	str	r0, [sp, #28]
 80082ec:	2800      	cmp	r0, #0
 80082ee:	f43f af1f 	beq.w	8008130 <_strtod_l+0x488>
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	1b9e      	subs	r6, r3, r6
 80082f6:	9b06      	ldr	r3, [sp, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bfb4      	ite	lt
 80082fc:	4633      	movlt	r3, r6
 80082fe:	2300      	movge	r3, #0
 8008300:	930c      	str	r3, [sp, #48]	; 0x30
 8008302:	9b06      	ldr	r3, [sp, #24]
 8008304:	2500      	movs	r5, #0
 8008306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800830a:	9312      	str	r3, [sp, #72]	; 0x48
 800830c:	462e      	mov	r6, r5
 800830e:	9b07      	ldr	r3, [sp, #28]
 8008310:	4620      	mov	r0, r4
 8008312:	6859      	ldr	r1, [r3, #4]
 8008314:	f001 fdc4 	bl	8009ea0 <_Balloc>
 8008318:	9005      	str	r0, [sp, #20]
 800831a:	2800      	cmp	r0, #0
 800831c:	f43f af0c 	beq.w	8008138 <_strtod_l+0x490>
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	3202      	adds	r2, #2
 8008326:	f103 010c 	add.w	r1, r3, #12
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	300c      	adds	r0, #12
 800832e:	f001 fda9 	bl	8009e84 <memcpy>
 8008332:	ec4b ab10 	vmov	d0, sl, fp
 8008336:	aa1a      	add	r2, sp, #104	; 0x68
 8008338:	a919      	add	r1, sp, #100	; 0x64
 800833a:	4620      	mov	r0, r4
 800833c:	f002 f99e 	bl	800a67c <__d2b>
 8008340:	ec4b ab18 	vmov	d8, sl, fp
 8008344:	9018      	str	r0, [sp, #96]	; 0x60
 8008346:	2800      	cmp	r0, #0
 8008348:	f43f aef6 	beq.w	8008138 <_strtod_l+0x490>
 800834c:	2101      	movs	r1, #1
 800834e:	4620      	mov	r0, r4
 8008350:	f001 fee8 	bl	800a124 <__i2b>
 8008354:	4606      	mov	r6, r0
 8008356:	2800      	cmp	r0, #0
 8008358:	f43f aeee 	beq.w	8008138 <_strtod_l+0x490>
 800835c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800835e:	9904      	ldr	r1, [sp, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfab      	itete	ge
 8008364:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008366:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008368:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800836a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800836e:	bfac      	ite	ge
 8008370:	eb03 0902 	addge.w	r9, r3, r2
 8008374:	1ad7      	sublt	r7, r2, r3
 8008376:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008378:	eba3 0801 	sub.w	r8, r3, r1
 800837c:	4490      	add	r8, r2
 800837e:	4ba1      	ldr	r3, [pc, #644]	; (8008604 <_strtod_l+0x95c>)
 8008380:	f108 38ff 	add.w	r8, r8, #4294967295
 8008384:	4598      	cmp	r8, r3
 8008386:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800838a:	f280 80c7 	bge.w	800851c <_strtod_l+0x874>
 800838e:	eba3 0308 	sub.w	r3, r3, r8
 8008392:	2b1f      	cmp	r3, #31
 8008394:	eba2 0203 	sub.w	r2, r2, r3
 8008398:	f04f 0101 	mov.w	r1, #1
 800839c:	f300 80b1 	bgt.w	8008502 <_strtod_l+0x85a>
 80083a0:	fa01 f303 	lsl.w	r3, r1, r3
 80083a4:	930d      	str	r3, [sp, #52]	; 0x34
 80083a6:	2300      	movs	r3, #0
 80083a8:	9308      	str	r3, [sp, #32]
 80083aa:	eb09 0802 	add.w	r8, r9, r2
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	45c1      	cmp	r9, r8
 80083b2:	4417      	add	r7, r2
 80083b4:	441f      	add	r7, r3
 80083b6:	464b      	mov	r3, r9
 80083b8:	bfa8      	it	ge
 80083ba:	4643      	movge	r3, r8
 80083bc:	42bb      	cmp	r3, r7
 80083be:	bfa8      	it	ge
 80083c0:	463b      	movge	r3, r7
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bfc2      	ittt	gt
 80083c6:	eba8 0803 	subgt.w	r8, r8, r3
 80083ca:	1aff      	subgt	r7, r7, r3
 80083cc:	eba9 0903 	subgt.w	r9, r9, r3
 80083d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dd17      	ble.n	8008406 <_strtod_l+0x75e>
 80083d6:	4631      	mov	r1, r6
 80083d8:	461a      	mov	r2, r3
 80083da:	4620      	mov	r0, r4
 80083dc:	f001 ff62 	bl	800a2a4 <__pow5mult>
 80083e0:	4606      	mov	r6, r0
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f43f aea8 	beq.w	8008138 <_strtod_l+0x490>
 80083e8:	4601      	mov	r1, r0
 80083ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083ec:	4620      	mov	r0, r4
 80083ee:	f001 feaf 	bl	800a150 <__multiply>
 80083f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f43f ae9f 	beq.w	8008138 <_strtod_l+0x490>
 80083fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083fc:	4620      	mov	r0, r4
 80083fe:	f001 fd8f 	bl	8009f20 <_Bfree>
 8008402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008404:	9318      	str	r3, [sp, #96]	; 0x60
 8008406:	f1b8 0f00 	cmp.w	r8, #0
 800840a:	f300 808c 	bgt.w	8008526 <_strtod_l+0x87e>
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dd08      	ble.n	8008426 <_strtod_l+0x77e>
 8008414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008416:	9905      	ldr	r1, [sp, #20]
 8008418:	4620      	mov	r0, r4
 800841a:	f001 ff43 	bl	800a2a4 <__pow5mult>
 800841e:	9005      	str	r0, [sp, #20]
 8008420:	2800      	cmp	r0, #0
 8008422:	f43f ae89 	beq.w	8008138 <_strtod_l+0x490>
 8008426:	2f00      	cmp	r7, #0
 8008428:	dd08      	ble.n	800843c <_strtod_l+0x794>
 800842a:	9905      	ldr	r1, [sp, #20]
 800842c:	463a      	mov	r2, r7
 800842e:	4620      	mov	r0, r4
 8008430:	f001 ff92 	bl	800a358 <__lshift>
 8008434:	9005      	str	r0, [sp, #20]
 8008436:	2800      	cmp	r0, #0
 8008438:	f43f ae7e 	beq.w	8008138 <_strtod_l+0x490>
 800843c:	f1b9 0f00 	cmp.w	r9, #0
 8008440:	dd08      	ble.n	8008454 <_strtod_l+0x7ac>
 8008442:	4631      	mov	r1, r6
 8008444:	464a      	mov	r2, r9
 8008446:	4620      	mov	r0, r4
 8008448:	f001 ff86 	bl	800a358 <__lshift>
 800844c:	4606      	mov	r6, r0
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f ae72 	beq.w	8008138 <_strtod_l+0x490>
 8008454:	9a05      	ldr	r2, [sp, #20]
 8008456:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008458:	4620      	mov	r0, r4
 800845a:	f002 f809 	bl	800a470 <__mdiff>
 800845e:	4605      	mov	r5, r0
 8008460:	2800      	cmp	r0, #0
 8008462:	f43f ae69 	beq.w	8008138 <_strtod_l+0x490>
 8008466:	68c3      	ldr	r3, [r0, #12]
 8008468:	930b      	str	r3, [sp, #44]	; 0x2c
 800846a:	2300      	movs	r3, #0
 800846c:	60c3      	str	r3, [r0, #12]
 800846e:	4631      	mov	r1, r6
 8008470:	f001 ffe2 	bl	800a438 <__mcmp>
 8008474:	2800      	cmp	r0, #0
 8008476:	da60      	bge.n	800853a <_strtod_l+0x892>
 8008478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800847a:	ea53 030a 	orrs.w	r3, r3, sl
 800847e:	f040 8082 	bne.w	8008586 <_strtod_l+0x8de>
 8008482:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008486:	2b00      	cmp	r3, #0
 8008488:	d17d      	bne.n	8008586 <_strtod_l+0x8de>
 800848a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800848e:	0d1b      	lsrs	r3, r3, #20
 8008490:	051b      	lsls	r3, r3, #20
 8008492:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008496:	d976      	bls.n	8008586 <_strtod_l+0x8de>
 8008498:	696b      	ldr	r3, [r5, #20]
 800849a:	b913      	cbnz	r3, 80084a2 <_strtod_l+0x7fa>
 800849c:	692b      	ldr	r3, [r5, #16]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	dd71      	ble.n	8008586 <_strtod_l+0x8de>
 80084a2:	4629      	mov	r1, r5
 80084a4:	2201      	movs	r2, #1
 80084a6:	4620      	mov	r0, r4
 80084a8:	f001 ff56 	bl	800a358 <__lshift>
 80084ac:	4631      	mov	r1, r6
 80084ae:	4605      	mov	r5, r0
 80084b0:	f001 ffc2 	bl	800a438 <__mcmp>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dd66      	ble.n	8008586 <_strtod_l+0x8de>
 80084b8:	9904      	ldr	r1, [sp, #16]
 80084ba:	4a53      	ldr	r2, [pc, #332]	; (8008608 <_strtod_l+0x960>)
 80084bc:	465b      	mov	r3, fp
 80084be:	2900      	cmp	r1, #0
 80084c0:	f000 8081 	beq.w	80085c6 <_strtod_l+0x91e>
 80084c4:	ea02 010b 	and.w	r1, r2, fp
 80084c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084cc:	dc7b      	bgt.n	80085c6 <_strtod_l+0x91e>
 80084ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084d2:	f77f aea9 	ble.w	8008228 <_strtod_l+0x580>
 80084d6:	4b4d      	ldr	r3, [pc, #308]	; (800860c <_strtod_l+0x964>)
 80084d8:	4650      	mov	r0, sl
 80084da:	4659      	mov	r1, fp
 80084dc:	2200      	movs	r2, #0
 80084de:	f7f8 f89b 	bl	8000618 <__aeabi_dmul>
 80084e2:	460b      	mov	r3, r1
 80084e4:	4303      	orrs	r3, r0
 80084e6:	bf08      	it	eq
 80084e8:	2322      	moveq	r3, #34	; 0x22
 80084ea:	4682      	mov	sl, r0
 80084ec:	468b      	mov	fp, r1
 80084ee:	bf08      	it	eq
 80084f0:	6023      	streq	r3, [r4, #0]
 80084f2:	e62b      	b.n	800814c <_strtod_l+0x4a4>
 80084f4:	f04f 32ff 	mov.w	r2, #4294967295
 80084f8:	fa02 f303 	lsl.w	r3, r2, r3
 80084fc:	ea03 0a0a 	and.w	sl, r3, sl
 8008500:	e6e3      	b.n	80082ca <_strtod_l+0x622>
 8008502:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008506:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800850a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800850e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008512:	fa01 f308 	lsl.w	r3, r1, r8
 8008516:	9308      	str	r3, [sp, #32]
 8008518:	910d      	str	r1, [sp, #52]	; 0x34
 800851a:	e746      	b.n	80083aa <_strtod_l+0x702>
 800851c:	2300      	movs	r3, #0
 800851e:	9308      	str	r3, [sp, #32]
 8008520:	2301      	movs	r3, #1
 8008522:	930d      	str	r3, [sp, #52]	; 0x34
 8008524:	e741      	b.n	80083aa <_strtod_l+0x702>
 8008526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008528:	4642      	mov	r2, r8
 800852a:	4620      	mov	r0, r4
 800852c:	f001 ff14 	bl	800a358 <__lshift>
 8008530:	9018      	str	r0, [sp, #96]	; 0x60
 8008532:	2800      	cmp	r0, #0
 8008534:	f47f af6b 	bne.w	800840e <_strtod_l+0x766>
 8008538:	e5fe      	b.n	8008138 <_strtod_l+0x490>
 800853a:	465f      	mov	r7, fp
 800853c:	d16e      	bne.n	800861c <_strtod_l+0x974>
 800853e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008544:	b342      	cbz	r2, 8008598 <_strtod_l+0x8f0>
 8008546:	4a32      	ldr	r2, [pc, #200]	; (8008610 <_strtod_l+0x968>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d128      	bne.n	800859e <_strtod_l+0x8f6>
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	4651      	mov	r1, sl
 8008550:	b1eb      	cbz	r3, 800858e <_strtod_l+0x8e6>
 8008552:	4b2d      	ldr	r3, [pc, #180]	; (8008608 <_strtod_l+0x960>)
 8008554:	403b      	ands	r3, r7
 8008556:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	d819      	bhi.n	8008594 <_strtod_l+0x8ec>
 8008560:	0d1b      	lsrs	r3, r3, #20
 8008562:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	4299      	cmp	r1, r3
 800856c:	d117      	bne.n	800859e <_strtod_l+0x8f6>
 800856e:	4b29      	ldr	r3, [pc, #164]	; (8008614 <_strtod_l+0x96c>)
 8008570:	429f      	cmp	r7, r3
 8008572:	d102      	bne.n	800857a <_strtod_l+0x8d2>
 8008574:	3101      	adds	r1, #1
 8008576:	f43f addf 	beq.w	8008138 <_strtod_l+0x490>
 800857a:	4b23      	ldr	r3, [pc, #140]	; (8008608 <_strtod_l+0x960>)
 800857c:	403b      	ands	r3, r7
 800857e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008582:	f04f 0a00 	mov.w	sl, #0
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1a4      	bne.n	80084d6 <_strtod_l+0x82e>
 800858c:	e5de      	b.n	800814c <_strtod_l+0x4a4>
 800858e:	f04f 33ff 	mov.w	r3, #4294967295
 8008592:	e7ea      	b.n	800856a <_strtod_l+0x8c2>
 8008594:	4613      	mov	r3, r2
 8008596:	e7e8      	b.n	800856a <_strtod_l+0x8c2>
 8008598:	ea53 030a 	orrs.w	r3, r3, sl
 800859c:	d08c      	beq.n	80084b8 <_strtod_l+0x810>
 800859e:	9b08      	ldr	r3, [sp, #32]
 80085a0:	b1db      	cbz	r3, 80085da <_strtod_l+0x932>
 80085a2:	423b      	tst	r3, r7
 80085a4:	d0ef      	beq.n	8008586 <_strtod_l+0x8de>
 80085a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a8:	9a04      	ldr	r2, [sp, #16]
 80085aa:	4650      	mov	r0, sl
 80085ac:	4659      	mov	r1, fp
 80085ae:	b1c3      	cbz	r3, 80085e2 <_strtod_l+0x93a>
 80085b0:	f7ff fb5b 	bl	8007c6a <sulp>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	ec51 0b18 	vmov	r0, r1, d8
 80085bc:	f7f7 fe76 	bl	80002ac <__adddf3>
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	e7df      	b.n	8008586 <_strtod_l+0x8de>
 80085c6:	4013      	ands	r3, r2
 80085c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085d4:	f04f 3aff 	mov.w	sl, #4294967295
 80085d8:	e7d5      	b.n	8008586 <_strtod_l+0x8de>
 80085da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085dc:	ea13 0f0a 	tst.w	r3, sl
 80085e0:	e7e0      	b.n	80085a4 <_strtod_l+0x8fc>
 80085e2:	f7ff fb42 	bl	8007c6a <sulp>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	ec51 0b18 	vmov	r0, r1, d8
 80085ee:	f7f7 fe5b 	bl	80002a8 <__aeabi_dsub>
 80085f2:	2200      	movs	r2, #0
 80085f4:	2300      	movs	r3, #0
 80085f6:	4682      	mov	sl, r0
 80085f8:	468b      	mov	fp, r1
 80085fa:	f7f8 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0c1      	beq.n	8008586 <_strtod_l+0x8de>
 8008602:	e611      	b.n	8008228 <_strtod_l+0x580>
 8008604:	fffffc02 	.word	0xfffffc02
 8008608:	7ff00000 	.word	0x7ff00000
 800860c:	39500000 	.word	0x39500000
 8008610:	000fffff 	.word	0x000fffff
 8008614:	7fefffff 	.word	0x7fefffff
 8008618:	0800c0e0 	.word	0x0800c0e0
 800861c:	4631      	mov	r1, r6
 800861e:	4628      	mov	r0, r5
 8008620:	f002 f888 	bl	800a734 <__ratio>
 8008624:	ec59 8b10 	vmov	r8, r9, d0
 8008628:	ee10 0a10 	vmov	r0, s0
 800862c:	2200      	movs	r2, #0
 800862e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008632:	4649      	mov	r1, r9
 8008634:	f7f8 fa6c 	bl	8000b10 <__aeabi_dcmple>
 8008638:	2800      	cmp	r0, #0
 800863a:	d07a      	beq.n	8008732 <_strtod_l+0xa8a>
 800863c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d04a      	beq.n	80086d8 <_strtod_l+0xa30>
 8008642:	4b95      	ldr	r3, [pc, #596]	; (8008898 <_strtod_l+0xbf0>)
 8008644:	2200      	movs	r2, #0
 8008646:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800864a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008898 <_strtod_l+0xbf0>
 800864e:	f04f 0800 	mov.w	r8, #0
 8008652:	4b92      	ldr	r3, [pc, #584]	; (800889c <_strtod_l+0xbf4>)
 8008654:	403b      	ands	r3, r7
 8008656:	930d      	str	r3, [sp, #52]	; 0x34
 8008658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800865a:	4b91      	ldr	r3, [pc, #580]	; (80088a0 <_strtod_l+0xbf8>)
 800865c:	429a      	cmp	r2, r3
 800865e:	f040 80b0 	bne.w	80087c2 <_strtod_l+0xb1a>
 8008662:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008666:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800866a:	ec4b ab10 	vmov	d0, sl, fp
 800866e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008672:	f001 ff87 	bl	800a584 <__ulp>
 8008676:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800867a:	ec53 2b10 	vmov	r2, r3, d0
 800867e:	f7f7 ffcb 	bl	8000618 <__aeabi_dmul>
 8008682:	4652      	mov	r2, sl
 8008684:	465b      	mov	r3, fp
 8008686:	f7f7 fe11 	bl	80002ac <__adddf3>
 800868a:	460b      	mov	r3, r1
 800868c:	4983      	ldr	r1, [pc, #524]	; (800889c <_strtod_l+0xbf4>)
 800868e:	4a85      	ldr	r2, [pc, #532]	; (80088a4 <_strtod_l+0xbfc>)
 8008690:	4019      	ands	r1, r3
 8008692:	4291      	cmp	r1, r2
 8008694:	4682      	mov	sl, r0
 8008696:	d960      	bls.n	800875a <_strtod_l+0xab2>
 8008698:	ee18 3a90 	vmov	r3, s17
 800869c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d104      	bne.n	80086ae <_strtod_l+0xa06>
 80086a4:	ee18 3a10 	vmov	r3, s16
 80086a8:	3301      	adds	r3, #1
 80086aa:	f43f ad45 	beq.w	8008138 <_strtod_l+0x490>
 80086ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80088b0 <_strtod_l+0xc08>
 80086b2:	f04f 3aff 	mov.w	sl, #4294967295
 80086b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086b8:	4620      	mov	r0, r4
 80086ba:	f001 fc31 	bl	8009f20 <_Bfree>
 80086be:	9905      	ldr	r1, [sp, #20]
 80086c0:	4620      	mov	r0, r4
 80086c2:	f001 fc2d 	bl	8009f20 <_Bfree>
 80086c6:	4631      	mov	r1, r6
 80086c8:	4620      	mov	r0, r4
 80086ca:	f001 fc29 	bl	8009f20 <_Bfree>
 80086ce:	4629      	mov	r1, r5
 80086d0:	4620      	mov	r0, r4
 80086d2:	f001 fc25 	bl	8009f20 <_Bfree>
 80086d6:	e61a      	b.n	800830e <_strtod_l+0x666>
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	d11b      	bne.n	8008716 <_strtod_l+0xa6e>
 80086de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086e2:	b9f3      	cbnz	r3, 8008722 <_strtod_l+0xa7a>
 80086e4:	4b6c      	ldr	r3, [pc, #432]	; (8008898 <_strtod_l+0xbf0>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f8 fa06 	bl	8000afc <__aeabi_dcmplt>
 80086f0:	b9d0      	cbnz	r0, 8008728 <_strtod_l+0xa80>
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	4b6c      	ldr	r3, [pc, #432]	; (80088a8 <_strtod_l+0xc00>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	f7f7 ff8d 	bl	8000618 <__aeabi_dmul>
 80086fe:	4680      	mov	r8, r0
 8008700:	4689      	mov	r9, r1
 8008702:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008706:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800870a:	9315      	str	r3, [sp, #84]	; 0x54
 800870c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008710:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008714:	e79d      	b.n	8008652 <_strtod_l+0x9aa>
 8008716:	f1ba 0f01 	cmp.w	sl, #1
 800871a:	d102      	bne.n	8008722 <_strtod_l+0xa7a>
 800871c:	2f00      	cmp	r7, #0
 800871e:	f43f ad83 	beq.w	8008228 <_strtod_l+0x580>
 8008722:	4b62      	ldr	r3, [pc, #392]	; (80088ac <_strtod_l+0xc04>)
 8008724:	2200      	movs	r2, #0
 8008726:	e78e      	b.n	8008646 <_strtod_l+0x99e>
 8008728:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80088a8 <_strtod_l+0xc00>
 800872c:	f04f 0800 	mov.w	r8, #0
 8008730:	e7e7      	b.n	8008702 <_strtod_l+0xa5a>
 8008732:	4b5d      	ldr	r3, [pc, #372]	; (80088a8 <_strtod_l+0xc00>)
 8008734:	4640      	mov	r0, r8
 8008736:	4649      	mov	r1, r9
 8008738:	2200      	movs	r2, #0
 800873a:	f7f7 ff6d 	bl	8000618 <__aeabi_dmul>
 800873e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008740:	4680      	mov	r8, r0
 8008742:	4689      	mov	r9, r1
 8008744:	b933      	cbnz	r3, 8008754 <_strtod_l+0xaac>
 8008746:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800874a:	900e      	str	r0, [sp, #56]	; 0x38
 800874c:	930f      	str	r3, [sp, #60]	; 0x3c
 800874e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008752:	e7dd      	b.n	8008710 <_strtod_l+0xa68>
 8008754:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008758:	e7f9      	b.n	800874e <_strtod_l+0xaa6>
 800875a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1a8      	bne.n	80086b6 <_strtod_l+0xa0e>
 8008764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800876a:	0d1b      	lsrs	r3, r3, #20
 800876c:	051b      	lsls	r3, r3, #20
 800876e:	429a      	cmp	r2, r3
 8008770:	d1a1      	bne.n	80086b6 <_strtod_l+0xa0e>
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	f7f8 faaf 	bl	8000cd8 <__aeabi_d2lz>
 800877a:	f7f7 ff1f 	bl	80005bc <__aeabi_l2d>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4640      	mov	r0, r8
 8008784:	4649      	mov	r1, r9
 8008786:	f7f7 fd8f 	bl	80002a8 <__aeabi_dsub>
 800878a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800878c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008790:	ea43 030a 	orr.w	r3, r3, sl
 8008794:	4313      	orrs	r3, r2
 8008796:	4680      	mov	r8, r0
 8008798:	4689      	mov	r9, r1
 800879a:	d055      	beq.n	8008848 <_strtod_l+0xba0>
 800879c:	a336      	add	r3, pc, #216	; (adr r3, 8008878 <_strtod_l+0xbd0>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f8 f9ab 	bl	8000afc <__aeabi_dcmplt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f47f acd0 	bne.w	800814c <_strtod_l+0x4a4>
 80087ac:	a334      	add	r3, pc, #208	; (adr r3, 8008880 <_strtod_l+0xbd8>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f8 f9bf 	bl	8000b38 <__aeabi_dcmpgt>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f43f af7b 	beq.w	80086b6 <_strtod_l+0xa0e>
 80087c0:	e4c4      	b.n	800814c <_strtod_l+0x4a4>
 80087c2:	9b04      	ldr	r3, [sp, #16]
 80087c4:	b333      	cbz	r3, 8008814 <_strtod_l+0xb6c>
 80087c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087cc:	d822      	bhi.n	8008814 <_strtod_l+0xb6c>
 80087ce:	a32e      	add	r3, pc, #184	; (adr r3, 8008888 <_strtod_l+0xbe0>)
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	4640      	mov	r0, r8
 80087d6:	4649      	mov	r1, r9
 80087d8:	f7f8 f99a 	bl	8000b10 <__aeabi_dcmple>
 80087dc:	b1a0      	cbz	r0, 8008808 <_strtod_l+0xb60>
 80087de:	4649      	mov	r1, r9
 80087e0:	4640      	mov	r0, r8
 80087e2:	f7f8 f9f1 	bl	8000bc8 <__aeabi_d2uiz>
 80087e6:	2801      	cmp	r0, #1
 80087e8:	bf38      	it	cc
 80087ea:	2001      	movcc	r0, #1
 80087ec:	f7f7 fe9a 	bl	8000524 <__aeabi_ui2d>
 80087f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f2:	4680      	mov	r8, r0
 80087f4:	4689      	mov	r9, r1
 80087f6:	bb23      	cbnz	r3, 8008842 <_strtod_l+0xb9a>
 80087f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087fc:	9010      	str	r0, [sp, #64]	; 0x40
 80087fe:	9311      	str	r3, [sp, #68]	; 0x44
 8008800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008804:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800880c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	9309      	str	r3, [sp, #36]	; 0x24
 8008814:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008818:	eeb0 0a48 	vmov.f32	s0, s16
 800881c:	eef0 0a68 	vmov.f32	s1, s17
 8008820:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008824:	f001 feae 	bl	800a584 <__ulp>
 8008828:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800882c:	ec53 2b10 	vmov	r2, r3, d0
 8008830:	f7f7 fef2 	bl	8000618 <__aeabi_dmul>
 8008834:	ec53 2b18 	vmov	r2, r3, d8
 8008838:	f7f7 fd38 	bl	80002ac <__adddf3>
 800883c:	4682      	mov	sl, r0
 800883e:	468b      	mov	fp, r1
 8008840:	e78d      	b.n	800875e <_strtod_l+0xab6>
 8008842:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008846:	e7db      	b.n	8008800 <_strtod_l+0xb58>
 8008848:	a311      	add	r3, pc, #68	; (adr r3, 8008890 <_strtod_l+0xbe8>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f8 f955 	bl	8000afc <__aeabi_dcmplt>
 8008852:	e7b2      	b.n	80087ba <_strtod_l+0xb12>
 8008854:	2300      	movs	r3, #0
 8008856:	930a      	str	r3, [sp, #40]	; 0x28
 8008858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800885a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	f7ff ba6b 	b.w	8007d38 <_strtod_l+0x90>
 8008862:	2a65      	cmp	r2, #101	; 0x65
 8008864:	f43f ab5f 	beq.w	8007f26 <_strtod_l+0x27e>
 8008868:	2a45      	cmp	r2, #69	; 0x45
 800886a:	f43f ab5c 	beq.w	8007f26 <_strtod_l+0x27e>
 800886e:	2301      	movs	r3, #1
 8008870:	f7ff bb94 	b.w	8007f9c <_strtod_l+0x2f4>
 8008874:	f3af 8000 	nop.w
 8008878:	94a03595 	.word	0x94a03595
 800887c:	3fdfffff 	.word	0x3fdfffff
 8008880:	35afe535 	.word	0x35afe535
 8008884:	3fe00000 	.word	0x3fe00000
 8008888:	ffc00000 	.word	0xffc00000
 800888c:	41dfffff 	.word	0x41dfffff
 8008890:	94a03595 	.word	0x94a03595
 8008894:	3fcfffff 	.word	0x3fcfffff
 8008898:	3ff00000 	.word	0x3ff00000
 800889c:	7ff00000 	.word	0x7ff00000
 80088a0:	7fe00000 	.word	0x7fe00000
 80088a4:	7c9fffff 	.word	0x7c9fffff
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	bff00000 	.word	0xbff00000
 80088b0:	7fefffff 	.word	0x7fefffff

080088b4 <_strtod_r>:
 80088b4:	4b01      	ldr	r3, [pc, #4]	; (80088bc <_strtod_r+0x8>)
 80088b6:	f7ff b9f7 	b.w	8007ca8 <_strtod_l>
 80088ba:	bf00      	nop
 80088bc:	20000870 	.word	0x20000870

080088c0 <_strtol_l.constprop.0>:
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c6:	d001      	beq.n	80088cc <_strtol_l.constprop.0+0xc>
 80088c8:	2b24      	cmp	r3, #36	; 0x24
 80088ca:	d906      	bls.n	80088da <_strtol_l.constprop.0+0x1a>
 80088cc:	f7fe fa76 	bl	8006dbc <__errno>
 80088d0:	2316      	movs	r3, #22
 80088d2:	6003      	str	r3, [r0, #0]
 80088d4:	2000      	movs	r0, #0
 80088d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80089c0 <_strtol_l.constprop.0+0x100>
 80088de:	460d      	mov	r5, r1
 80088e0:	462e      	mov	r6, r5
 80088e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80088ea:	f017 0708 	ands.w	r7, r7, #8
 80088ee:	d1f7      	bne.n	80088e0 <_strtol_l.constprop.0+0x20>
 80088f0:	2c2d      	cmp	r4, #45	; 0x2d
 80088f2:	d132      	bne.n	800895a <_strtol_l.constprop.0+0x9a>
 80088f4:	782c      	ldrb	r4, [r5, #0]
 80088f6:	2701      	movs	r7, #1
 80088f8:	1cb5      	adds	r5, r6, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d05b      	beq.n	80089b6 <_strtol_l.constprop.0+0xf6>
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d109      	bne.n	8008916 <_strtol_l.constprop.0+0x56>
 8008902:	2c30      	cmp	r4, #48	; 0x30
 8008904:	d107      	bne.n	8008916 <_strtol_l.constprop.0+0x56>
 8008906:	782c      	ldrb	r4, [r5, #0]
 8008908:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800890c:	2c58      	cmp	r4, #88	; 0x58
 800890e:	d14d      	bne.n	80089ac <_strtol_l.constprop.0+0xec>
 8008910:	786c      	ldrb	r4, [r5, #1]
 8008912:	2310      	movs	r3, #16
 8008914:	3502      	adds	r5, #2
 8008916:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800891a:	f108 38ff 	add.w	r8, r8, #4294967295
 800891e:	f04f 0c00 	mov.w	ip, #0
 8008922:	fbb8 f9f3 	udiv	r9, r8, r3
 8008926:	4666      	mov	r6, ip
 8008928:	fb03 8a19 	mls	sl, r3, r9, r8
 800892c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008930:	f1be 0f09 	cmp.w	lr, #9
 8008934:	d816      	bhi.n	8008964 <_strtol_l.constprop.0+0xa4>
 8008936:	4674      	mov	r4, lr
 8008938:	42a3      	cmp	r3, r4
 800893a:	dd24      	ble.n	8008986 <_strtol_l.constprop.0+0xc6>
 800893c:	f1bc 0f00 	cmp.w	ip, #0
 8008940:	db1e      	blt.n	8008980 <_strtol_l.constprop.0+0xc0>
 8008942:	45b1      	cmp	r9, r6
 8008944:	d31c      	bcc.n	8008980 <_strtol_l.constprop.0+0xc0>
 8008946:	d101      	bne.n	800894c <_strtol_l.constprop.0+0x8c>
 8008948:	45a2      	cmp	sl, r4
 800894a:	db19      	blt.n	8008980 <_strtol_l.constprop.0+0xc0>
 800894c:	fb06 4603 	mla	r6, r6, r3, r4
 8008950:	f04f 0c01 	mov.w	ip, #1
 8008954:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008958:	e7e8      	b.n	800892c <_strtol_l.constprop.0+0x6c>
 800895a:	2c2b      	cmp	r4, #43	; 0x2b
 800895c:	bf04      	itt	eq
 800895e:	782c      	ldrbeq	r4, [r5, #0]
 8008960:	1cb5      	addeq	r5, r6, #2
 8008962:	e7ca      	b.n	80088fa <_strtol_l.constprop.0+0x3a>
 8008964:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008968:	f1be 0f19 	cmp.w	lr, #25
 800896c:	d801      	bhi.n	8008972 <_strtol_l.constprop.0+0xb2>
 800896e:	3c37      	subs	r4, #55	; 0x37
 8008970:	e7e2      	b.n	8008938 <_strtol_l.constprop.0+0x78>
 8008972:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008976:	f1be 0f19 	cmp.w	lr, #25
 800897a:	d804      	bhi.n	8008986 <_strtol_l.constprop.0+0xc6>
 800897c:	3c57      	subs	r4, #87	; 0x57
 800897e:	e7db      	b.n	8008938 <_strtol_l.constprop.0+0x78>
 8008980:	f04f 3cff 	mov.w	ip, #4294967295
 8008984:	e7e6      	b.n	8008954 <_strtol_l.constprop.0+0x94>
 8008986:	f1bc 0f00 	cmp.w	ip, #0
 800898a:	da05      	bge.n	8008998 <_strtol_l.constprop.0+0xd8>
 800898c:	2322      	movs	r3, #34	; 0x22
 800898e:	6003      	str	r3, [r0, #0]
 8008990:	4646      	mov	r6, r8
 8008992:	b942      	cbnz	r2, 80089a6 <_strtol_l.constprop.0+0xe6>
 8008994:	4630      	mov	r0, r6
 8008996:	e79e      	b.n	80088d6 <_strtol_l.constprop.0+0x16>
 8008998:	b107      	cbz	r7, 800899c <_strtol_l.constprop.0+0xdc>
 800899a:	4276      	negs	r6, r6
 800899c:	2a00      	cmp	r2, #0
 800899e:	d0f9      	beq.n	8008994 <_strtol_l.constprop.0+0xd4>
 80089a0:	f1bc 0f00 	cmp.w	ip, #0
 80089a4:	d000      	beq.n	80089a8 <_strtol_l.constprop.0+0xe8>
 80089a6:	1e69      	subs	r1, r5, #1
 80089a8:	6011      	str	r1, [r2, #0]
 80089aa:	e7f3      	b.n	8008994 <_strtol_l.constprop.0+0xd4>
 80089ac:	2430      	movs	r4, #48	; 0x30
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1b1      	bne.n	8008916 <_strtol_l.constprop.0+0x56>
 80089b2:	2308      	movs	r3, #8
 80089b4:	e7af      	b.n	8008916 <_strtol_l.constprop.0+0x56>
 80089b6:	2c30      	cmp	r4, #48	; 0x30
 80089b8:	d0a5      	beq.n	8008906 <_strtol_l.constprop.0+0x46>
 80089ba:	230a      	movs	r3, #10
 80089bc:	e7ab      	b.n	8008916 <_strtol_l.constprop.0+0x56>
 80089be:	bf00      	nop
 80089c0:	0800c109 	.word	0x0800c109

080089c4 <_strtol_r>:
 80089c4:	f7ff bf7c 	b.w	80088c0 <_strtol_l.constprop.0>

080089c8 <_vsiprintf_r>:
 80089c8:	b500      	push	{lr}
 80089ca:	b09b      	sub	sp, #108	; 0x6c
 80089cc:	9100      	str	r1, [sp, #0]
 80089ce:	9104      	str	r1, [sp, #16]
 80089d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089d4:	9105      	str	r1, [sp, #20]
 80089d6:	9102      	str	r1, [sp, #8]
 80089d8:	4905      	ldr	r1, [pc, #20]	; (80089f0 <_vsiprintf_r+0x28>)
 80089da:	9103      	str	r1, [sp, #12]
 80089dc:	4669      	mov	r1, sp
 80089de:	f002 f873 	bl	800aac8 <_svfiprintf_r>
 80089e2:	9b00      	ldr	r3, [sp, #0]
 80089e4:	2200      	movs	r2, #0
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	b01b      	add	sp, #108	; 0x6c
 80089ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ee:	bf00      	nop
 80089f0:	ffff0208 	.word	0xffff0208

080089f4 <vsiprintf>:
 80089f4:	4613      	mov	r3, r2
 80089f6:	460a      	mov	r2, r1
 80089f8:	4601      	mov	r1, r0
 80089fa:	4802      	ldr	r0, [pc, #8]	; (8008a04 <vsiprintf+0x10>)
 80089fc:	6800      	ldr	r0, [r0, #0]
 80089fe:	f7ff bfe3 	b.w	80089c8 <_vsiprintf_r>
 8008a02:	bf00      	nop
 8008a04:	20000808 	.word	0x20000808

08008a08 <_write_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d07      	ldr	r5, [pc, #28]	; (8008a28 <_write_r+0x20>)
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	4608      	mov	r0, r1
 8008a10:	4611      	mov	r1, r2
 8008a12:	2200      	movs	r2, #0
 8008a14:	602a      	str	r2, [r5, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f7fa f943 	bl	8002ca2 <_write>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_write_r+0x1e>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_write_r+0x1e>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	200010b4 	.word	0x200010b4

08008a2c <_close_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d06      	ldr	r5, [pc, #24]	; (8008a48 <_close_r+0x1c>)
 8008a30:	2300      	movs	r3, #0
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	f7fa f94f 	bl	8002cda <_close>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_close_r+0x1a>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_close_r+0x1a>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	200010b4 	.word	0x200010b4

08008a4c <quorem>:
 8008a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	6903      	ldr	r3, [r0, #16]
 8008a52:	690c      	ldr	r4, [r1, #16]
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	4607      	mov	r7, r0
 8008a58:	f2c0 8081 	blt.w	8008b5e <quorem+0x112>
 8008a5c:	3c01      	subs	r4, #1
 8008a5e:	f101 0814 	add.w	r8, r1, #20
 8008a62:	f100 0514 	add.w	r5, r0, #20
 8008a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a74:	3301      	adds	r3, #1
 8008a76:	429a      	cmp	r2, r3
 8008a78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a84:	d331      	bcc.n	8008aea <quorem+0x9e>
 8008a86:	f04f 0e00 	mov.w	lr, #0
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	46ac      	mov	ip, r5
 8008a8e:	46f2      	mov	sl, lr
 8008a90:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a94:	b293      	uxth	r3, r2
 8008a96:	fb06 e303 	mla	r3, r6, r3, lr
 8008a9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8008aa4:	f8dc a000 	ldr.w	sl, [ip]
 8008aa8:	0c12      	lsrs	r2, r2, #16
 8008aaa:	fa13 f38a 	uxtah	r3, r3, sl
 8008aae:	fb06 e202 	mla	r2, r6, r2, lr
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aba:	b292      	uxth	r2, r2
 8008abc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ac4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ac8:	4581      	cmp	r9, r0
 8008aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ace:	f84c 3b04 	str.w	r3, [ip], #4
 8008ad2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ad6:	d2db      	bcs.n	8008a90 <quorem+0x44>
 8008ad8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008adc:	b92b      	cbnz	r3, 8008aea <quorem+0x9e>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	3b04      	subs	r3, #4
 8008ae2:	429d      	cmp	r5, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	d32e      	bcc.n	8008b46 <quorem+0xfa>
 8008ae8:	613c      	str	r4, [r7, #16]
 8008aea:	4638      	mov	r0, r7
 8008aec:	f001 fca4 	bl	800a438 <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	db24      	blt.n	8008b3e <quorem+0xf2>
 8008af4:	3601      	adds	r6, #1
 8008af6:	4628      	mov	r0, r5
 8008af8:	f04f 0c00 	mov.w	ip, #0
 8008afc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b00:	f8d0 e000 	ldr.w	lr, [r0]
 8008b04:	b293      	uxth	r3, r2
 8008b06:	ebac 0303 	sub.w	r3, ip, r3
 8008b0a:	0c12      	lsrs	r2, r2, #16
 8008b0c:	fa13 f38e 	uxtah	r3, r3, lr
 8008b10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b1e:	45c1      	cmp	r9, r8
 8008b20:	f840 3b04 	str.w	r3, [r0], #4
 8008b24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b28:	d2e8      	bcs.n	8008afc <quorem+0xb0>
 8008b2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b32:	b922      	cbnz	r2, 8008b3e <quorem+0xf2>
 8008b34:	3b04      	subs	r3, #4
 8008b36:	429d      	cmp	r5, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	d30a      	bcc.n	8008b52 <quorem+0x106>
 8008b3c:	613c      	str	r4, [r7, #16]
 8008b3e:	4630      	mov	r0, r6
 8008b40:	b003      	add	sp, #12
 8008b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	3b04      	subs	r3, #4
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	d1cc      	bne.n	8008ae8 <quorem+0x9c>
 8008b4e:	3c01      	subs	r4, #1
 8008b50:	e7c7      	b.n	8008ae2 <quorem+0x96>
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	3b04      	subs	r3, #4
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	d1f0      	bne.n	8008b3c <quorem+0xf0>
 8008b5a:	3c01      	subs	r4, #1
 8008b5c:	e7eb      	b.n	8008b36 <quorem+0xea>
 8008b5e:	2000      	movs	r0, #0
 8008b60:	e7ee      	b.n	8008b40 <quorem+0xf4>
 8008b62:	0000      	movs	r0, r0
 8008b64:	0000      	movs	r0, r0
	...

08008b68 <_dtoa_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	ed2d 8b04 	vpush	{d8-d9}
 8008b70:	ec57 6b10 	vmov	r6, r7, d0
 8008b74:	b093      	sub	sp, #76	; 0x4c
 8008b76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b7c:	9106      	str	r1, [sp, #24]
 8008b7e:	ee10 aa10 	vmov	sl, s0
 8008b82:	4604      	mov	r4, r0
 8008b84:	9209      	str	r2, [sp, #36]	; 0x24
 8008b86:	930c      	str	r3, [sp, #48]	; 0x30
 8008b88:	46bb      	mov	fp, r7
 8008b8a:	b975      	cbnz	r5, 8008baa <_dtoa_r+0x42>
 8008b8c:	2010      	movs	r0, #16
 8008b8e:	f001 f95f 	bl	8009e50 <malloc>
 8008b92:	4602      	mov	r2, r0
 8008b94:	6260      	str	r0, [r4, #36]	; 0x24
 8008b96:	b920      	cbnz	r0, 8008ba2 <_dtoa_r+0x3a>
 8008b98:	4ba7      	ldr	r3, [pc, #668]	; (8008e38 <_dtoa_r+0x2d0>)
 8008b9a:	21ea      	movs	r1, #234	; 0xea
 8008b9c:	48a7      	ldr	r0, [pc, #668]	; (8008e3c <_dtoa_r+0x2d4>)
 8008b9e:	f002 fcd7 	bl	800b550 <__assert_func>
 8008ba2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ba6:	6005      	str	r5, [r0, #0]
 8008ba8:	60c5      	str	r5, [r0, #12]
 8008baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bac:	6819      	ldr	r1, [r3, #0]
 8008bae:	b151      	cbz	r1, 8008bc6 <_dtoa_r+0x5e>
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	604a      	str	r2, [r1, #4]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	4093      	lsls	r3, r2
 8008bb8:	608b      	str	r3, [r1, #8]
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f001 f9b0 	bl	8009f20 <_Bfree>
 8008bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	1e3b      	subs	r3, r7, #0
 8008bc8:	bfaa      	itet	ge
 8008bca:	2300      	movge	r3, #0
 8008bcc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008bd0:	f8c8 3000 	strge.w	r3, [r8]
 8008bd4:	4b9a      	ldr	r3, [pc, #616]	; (8008e40 <_dtoa_r+0x2d8>)
 8008bd6:	bfbc      	itt	lt
 8008bd8:	2201      	movlt	r2, #1
 8008bda:	f8c8 2000 	strlt.w	r2, [r8]
 8008bde:	ea33 030b 	bics.w	r3, r3, fp
 8008be2:	d11b      	bne.n	8008c1c <_dtoa_r+0xb4>
 8008be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008be6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bf0:	4333      	orrs	r3, r6
 8008bf2:	f000 8592 	beq.w	800971a <_dtoa_r+0xbb2>
 8008bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf8:	b963      	cbnz	r3, 8008c14 <_dtoa_r+0xac>
 8008bfa:	4b92      	ldr	r3, [pc, #584]	; (8008e44 <_dtoa_r+0x2dc>)
 8008bfc:	e022      	b.n	8008c44 <_dtoa_r+0xdc>
 8008bfe:	4b92      	ldr	r3, [pc, #584]	; (8008e48 <_dtoa_r+0x2e0>)
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	3308      	adds	r3, #8
 8008c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	9801      	ldr	r0, [sp, #4]
 8008c0a:	b013      	add	sp, #76	; 0x4c
 8008c0c:	ecbd 8b04 	vpop	{d8-d9}
 8008c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c14:	4b8b      	ldr	r3, [pc, #556]	; (8008e44 <_dtoa_r+0x2dc>)
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	3303      	adds	r3, #3
 8008c1a:	e7f3      	b.n	8008c04 <_dtoa_r+0x9c>
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4650      	mov	r0, sl
 8008c22:	4659      	mov	r1, fp
 8008c24:	f7f7 ff60 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c28:	ec4b ab19 	vmov	d9, sl, fp
 8008c2c:	4680      	mov	r8, r0
 8008c2e:	b158      	cbz	r0, 8008c48 <_dtoa_r+0xe0>
 8008c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c32:	2301      	movs	r3, #1
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 856b 	beq.w	8009714 <_dtoa_r+0xbac>
 8008c3e:	4883      	ldr	r0, [pc, #524]	; (8008e4c <_dtoa_r+0x2e4>)
 8008c40:	6018      	str	r0, [r3, #0]
 8008c42:	1e43      	subs	r3, r0, #1
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	e7df      	b.n	8008c08 <_dtoa_r+0xa0>
 8008c48:	ec4b ab10 	vmov	d0, sl, fp
 8008c4c:	aa10      	add	r2, sp, #64	; 0x40
 8008c4e:	a911      	add	r1, sp, #68	; 0x44
 8008c50:	4620      	mov	r0, r4
 8008c52:	f001 fd13 	bl	800a67c <__d2b>
 8008c56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c5a:	ee08 0a10 	vmov	s16, r0
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	f000 8084 	beq.w	8008d6c <_dtoa_r+0x204>
 8008c64:	ee19 3a90 	vmov	r3, s19
 8008c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c70:	4656      	mov	r6, sl
 8008c72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c7e:	4b74      	ldr	r3, [pc, #464]	; (8008e50 <_dtoa_r+0x2e8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	4630      	mov	r0, r6
 8008c84:	4639      	mov	r1, r7
 8008c86:	f7f7 fb0f 	bl	80002a8 <__aeabi_dsub>
 8008c8a:	a365      	add	r3, pc, #404	; (adr r3, 8008e20 <_dtoa_r+0x2b8>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fcc2 	bl	8000618 <__aeabi_dmul>
 8008c94:	a364      	add	r3, pc, #400	; (adr r3, 8008e28 <_dtoa_r+0x2c0>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 fb07 	bl	80002ac <__adddf3>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	460f      	mov	r7, r1
 8008ca4:	f7f7 fc4e 	bl	8000544 <__aeabi_i2d>
 8008ca8:	a361      	add	r3, pc, #388	; (adr r3, 8008e30 <_dtoa_r+0x2c8>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fcb3 	bl	8000618 <__aeabi_dmul>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	4639      	mov	r1, r7
 8008cba:	f7f7 faf7 	bl	80002ac <__adddf3>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	f7f7 ff59 	bl	8000b78 <__aeabi_d2iz>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	9000      	str	r0, [sp, #0]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7f7 ff14 	bl	8000afc <__aeabi_dcmplt>
 8008cd4:	b150      	cbz	r0, 8008cec <_dtoa_r+0x184>
 8008cd6:	9800      	ldr	r0, [sp, #0]
 8008cd8:	f7f7 fc34 	bl	8000544 <__aeabi_i2d>
 8008cdc:	4632      	mov	r2, r6
 8008cde:	463b      	mov	r3, r7
 8008ce0:	f7f7 ff02 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ce4:	b910      	cbnz	r0, 8008cec <_dtoa_r+0x184>
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	9b00      	ldr	r3, [sp, #0]
 8008cee:	2b16      	cmp	r3, #22
 8008cf0:	d85a      	bhi.n	8008da8 <_dtoa_r+0x240>
 8008cf2:	9a00      	ldr	r2, [sp, #0]
 8008cf4:	4b57      	ldr	r3, [pc, #348]	; (8008e54 <_dtoa_r+0x2ec>)
 8008cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	ec51 0b19 	vmov	r0, r1, d9
 8008d02:	f7f7 fefb 	bl	8000afc <__aeabi_dcmplt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d050      	beq.n	8008dac <_dtoa_r+0x244>
 8008d0a:	9b00      	ldr	r3, [sp, #0]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2300      	movs	r3, #0
 8008d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d16:	1b5d      	subs	r5, r3, r5
 8008d18:	1e6b      	subs	r3, r5, #1
 8008d1a:	9305      	str	r3, [sp, #20]
 8008d1c:	bf45      	ittet	mi
 8008d1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d22:	9304      	strmi	r3, [sp, #16]
 8008d24:	2300      	movpl	r3, #0
 8008d26:	2300      	movmi	r3, #0
 8008d28:	bf4c      	ite	mi
 8008d2a:	9305      	strmi	r3, [sp, #20]
 8008d2c:	9304      	strpl	r3, [sp, #16]
 8008d2e:	9b00      	ldr	r3, [sp, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	db3d      	blt.n	8008db0 <_dtoa_r+0x248>
 8008d34:	9b05      	ldr	r3, [sp, #20]
 8008d36:	9a00      	ldr	r2, [sp, #0]
 8008d38:	920a      	str	r2, [sp, #40]	; 0x28
 8008d3a:	4413      	add	r3, r2
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9307      	str	r3, [sp, #28]
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	2b09      	cmp	r3, #9
 8008d46:	f200 8089 	bhi.w	8008e5c <_dtoa_r+0x2f4>
 8008d4a:	2b05      	cmp	r3, #5
 8008d4c:	bfc4      	itt	gt
 8008d4e:	3b04      	subgt	r3, #4
 8008d50:	9306      	strgt	r3, [sp, #24]
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	f1a3 0302 	sub.w	r3, r3, #2
 8008d58:	bfcc      	ite	gt
 8008d5a:	2500      	movgt	r5, #0
 8008d5c:	2501      	movle	r5, #1
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	f200 8087 	bhi.w	8008e72 <_dtoa_r+0x30a>
 8008d64:	e8df f003 	tbb	[pc, r3]
 8008d68:	59383a2d 	.word	0x59383a2d
 8008d6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d70:	441d      	add	r5, r3
 8008d72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	bfc1      	itttt	gt
 8008d7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d82:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d8a:	bfda      	itte	le
 8008d8c:	f1c3 0320 	rsble	r3, r3, #32
 8008d90:	fa06 f003 	lslle.w	r0, r6, r3
 8008d94:	4318      	orrgt	r0, r3
 8008d96:	f7f7 fbc5 	bl	8000524 <__aeabi_ui2d>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008da2:	3d01      	subs	r5, #1
 8008da4:	930e      	str	r3, [sp, #56]	; 0x38
 8008da6:	e76a      	b.n	8008c7e <_dtoa_r+0x116>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7b2      	b.n	8008d12 <_dtoa_r+0x1aa>
 8008dac:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dae:	e7b1      	b.n	8008d14 <_dtoa_r+0x1ac>
 8008db0:	9b04      	ldr	r3, [sp, #16]
 8008db2:	9a00      	ldr	r2, [sp, #0]
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	9304      	str	r3, [sp, #16]
 8008db8:	4253      	negs	r3, r2
 8008dba:	9307      	str	r3, [sp, #28]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008dc0:	e7bf      	b.n	8008d42 <_dtoa_r+0x1da>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9308      	str	r3, [sp, #32]
 8008dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc55      	bgt.n	8008e78 <_dtoa_r+0x310>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd6:	e00c      	b.n	8008df2 <_dtoa_r+0x28a>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e7f3      	b.n	8008dc4 <_dtoa_r+0x25c>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008de0:	9308      	str	r3, [sp, #32]
 8008de2:	9b00      	ldr	r3, [sp, #0]
 8008de4:	4413      	add	r3, r2
 8008de6:	9302      	str	r3, [sp, #8]
 8008de8:	3301      	adds	r3, #1
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	9303      	str	r3, [sp, #12]
 8008dee:	bfb8      	it	lt
 8008df0:	2301      	movlt	r3, #1
 8008df2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008df4:	2200      	movs	r2, #0
 8008df6:	6042      	str	r2, [r0, #4]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	f102 0614 	add.w	r6, r2, #20
 8008dfe:	429e      	cmp	r6, r3
 8008e00:	6841      	ldr	r1, [r0, #4]
 8008e02:	d93d      	bls.n	8008e80 <_dtoa_r+0x318>
 8008e04:	4620      	mov	r0, r4
 8008e06:	f001 f84b 	bl	8009ea0 <_Balloc>
 8008e0a:	9001      	str	r0, [sp, #4]
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d13b      	bne.n	8008e88 <_dtoa_r+0x320>
 8008e10:	4b11      	ldr	r3, [pc, #68]	; (8008e58 <_dtoa_r+0x2f0>)
 8008e12:	4602      	mov	r2, r0
 8008e14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e18:	e6c0      	b.n	8008b9c <_dtoa_r+0x34>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e7df      	b.n	8008dde <_dtoa_r+0x276>
 8008e1e:	bf00      	nop
 8008e20:	636f4361 	.word	0x636f4361
 8008e24:	3fd287a7 	.word	0x3fd287a7
 8008e28:	8b60c8b3 	.word	0x8b60c8b3
 8008e2c:	3fc68a28 	.word	0x3fc68a28
 8008e30:	509f79fb 	.word	0x509f79fb
 8008e34:	3fd34413 	.word	0x3fd34413
 8008e38:	0800c216 	.word	0x0800c216
 8008e3c:	0800c22d 	.word	0x0800c22d
 8008e40:	7ff00000 	.word	0x7ff00000
 8008e44:	0800c212 	.word	0x0800c212
 8008e48:	0800c209 	.word	0x0800c209
 8008e4c:	0800c482 	.word	0x0800c482
 8008e50:	3ff80000 	.word	0x3ff80000
 8008e54:	0800c398 	.word	0x0800c398
 8008e58:	0800c288 	.word	0x0800c288
 8008e5c:	2501      	movs	r5, #1
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9306      	str	r3, [sp, #24]
 8008e62:	9508      	str	r5, [sp, #32]
 8008e64:	f04f 33ff 	mov.w	r3, #4294967295
 8008e68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2312      	movs	r3, #18
 8008e70:	e7b0      	b.n	8008dd4 <_dtoa_r+0x26c>
 8008e72:	2301      	movs	r3, #1
 8008e74:	9308      	str	r3, [sp, #32]
 8008e76:	e7f5      	b.n	8008e64 <_dtoa_r+0x2fc>
 8008e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e7e:	e7b8      	b.n	8008df2 <_dtoa_r+0x28a>
 8008e80:	3101      	adds	r1, #1
 8008e82:	6041      	str	r1, [r0, #4]
 8008e84:	0052      	lsls	r2, r2, #1
 8008e86:	e7b8      	b.n	8008dfa <_dtoa_r+0x292>
 8008e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e8a:	9a01      	ldr	r2, [sp, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	2b0e      	cmp	r3, #14
 8008e92:	f200 809d 	bhi.w	8008fd0 <_dtoa_r+0x468>
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	f000 809a 	beq.w	8008fd0 <_dtoa_r+0x468>
 8008e9c:	9b00      	ldr	r3, [sp, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	dd32      	ble.n	8008f08 <_dtoa_r+0x3a0>
 8008ea2:	4ab7      	ldr	r2, [pc, #732]	; (8009180 <_dtoa_r+0x618>)
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008eb0:	9b00      	ldr	r3, [sp, #0]
 8008eb2:	05d8      	lsls	r0, r3, #23
 8008eb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008eb8:	d516      	bpl.n	8008ee8 <_dtoa_r+0x380>
 8008eba:	4bb2      	ldr	r3, [pc, #712]	; (8009184 <_dtoa_r+0x61c>)
 8008ebc:	ec51 0b19 	vmov	r0, r1, d9
 8008ec0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ec4:	f7f7 fcd2 	bl	800086c <__aeabi_ddiv>
 8008ec8:	f007 070f 	and.w	r7, r7, #15
 8008ecc:	4682      	mov	sl, r0
 8008ece:	468b      	mov	fp, r1
 8008ed0:	2503      	movs	r5, #3
 8008ed2:	4eac      	ldr	r6, [pc, #688]	; (8009184 <_dtoa_r+0x61c>)
 8008ed4:	b957      	cbnz	r7, 8008eec <_dtoa_r+0x384>
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	4650      	mov	r0, sl
 8008edc:	4659      	mov	r1, fp
 8008ede:	f7f7 fcc5 	bl	800086c <__aeabi_ddiv>
 8008ee2:	4682      	mov	sl, r0
 8008ee4:	468b      	mov	fp, r1
 8008ee6:	e028      	b.n	8008f3a <_dtoa_r+0x3d2>
 8008ee8:	2502      	movs	r5, #2
 8008eea:	e7f2      	b.n	8008ed2 <_dtoa_r+0x36a>
 8008eec:	07f9      	lsls	r1, r7, #31
 8008eee:	d508      	bpl.n	8008f02 <_dtoa_r+0x39a>
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ef8:	f7f7 fb8e 	bl	8000618 <__aeabi_dmul>
 8008efc:	3501      	adds	r5, #1
 8008efe:	4680      	mov	r8, r0
 8008f00:	4689      	mov	r9, r1
 8008f02:	107f      	asrs	r7, r7, #1
 8008f04:	3608      	adds	r6, #8
 8008f06:	e7e5      	b.n	8008ed4 <_dtoa_r+0x36c>
 8008f08:	f000 809b 	beq.w	8009042 <_dtoa_r+0x4da>
 8008f0c:	9b00      	ldr	r3, [sp, #0]
 8008f0e:	4f9d      	ldr	r7, [pc, #628]	; (8009184 <_dtoa_r+0x61c>)
 8008f10:	425e      	negs	r6, r3
 8008f12:	4b9b      	ldr	r3, [pc, #620]	; (8009180 <_dtoa_r+0x618>)
 8008f14:	f006 020f 	and.w	r2, r6, #15
 8008f18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	ec51 0b19 	vmov	r0, r1, d9
 8008f24:	f7f7 fb78 	bl	8000618 <__aeabi_dmul>
 8008f28:	1136      	asrs	r6, r6, #4
 8008f2a:	4682      	mov	sl, r0
 8008f2c:	468b      	mov	fp, r1
 8008f2e:	2300      	movs	r3, #0
 8008f30:	2502      	movs	r5, #2
 8008f32:	2e00      	cmp	r6, #0
 8008f34:	d17a      	bne.n	800902c <_dtoa_r+0x4c4>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1d3      	bne.n	8008ee2 <_dtoa_r+0x37a>
 8008f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 8082 	beq.w	8009046 <_dtoa_r+0x4de>
 8008f42:	4b91      	ldr	r3, [pc, #580]	; (8009188 <_dtoa_r+0x620>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	4650      	mov	r0, sl
 8008f48:	4659      	mov	r1, fp
 8008f4a:	f7f7 fdd7 	bl	8000afc <__aeabi_dcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d079      	beq.n	8009046 <_dtoa_r+0x4de>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d076      	beq.n	8009046 <_dtoa_r+0x4de>
 8008f58:	9b02      	ldr	r3, [sp, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dd36      	ble.n	8008fcc <_dtoa_r+0x464>
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	4650      	mov	r0, sl
 8008f62:	4659      	mov	r1, fp
 8008f64:	1e5f      	subs	r7, r3, #1
 8008f66:	2200      	movs	r2, #0
 8008f68:	4b88      	ldr	r3, [pc, #544]	; (800918c <_dtoa_r+0x624>)
 8008f6a:	f7f7 fb55 	bl	8000618 <__aeabi_dmul>
 8008f6e:	9e02      	ldr	r6, [sp, #8]
 8008f70:	4682      	mov	sl, r0
 8008f72:	468b      	mov	fp, r1
 8008f74:	3501      	adds	r5, #1
 8008f76:	4628      	mov	r0, r5
 8008f78:	f7f7 fae4 	bl	8000544 <__aeabi_i2d>
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	465b      	mov	r3, fp
 8008f80:	f7f7 fb4a 	bl	8000618 <__aeabi_dmul>
 8008f84:	4b82      	ldr	r3, [pc, #520]	; (8009190 <_dtoa_r+0x628>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	f7f7 f990 	bl	80002ac <__adddf3>
 8008f8c:	46d0      	mov	r8, sl
 8008f8e:	46d9      	mov	r9, fp
 8008f90:	4682      	mov	sl, r0
 8008f92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	d158      	bne.n	800904c <_dtoa_r+0x4e4>
 8008f9a:	4b7e      	ldr	r3, [pc, #504]	; (8009194 <_dtoa_r+0x62c>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	f7f7 f981 	bl	80002a8 <__aeabi_dsub>
 8008fa6:	4652      	mov	r2, sl
 8008fa8:	465b      	mov	r3, fp
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	f7f7 fdc3 	bl	8000b38 <__aeabi_dcmpgt>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	f040 8295 	bne.w	80094e2 <_dtoa_r+0x97a>
 8008fb8:	4652      	mov	r2, sl
 8008fba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	f7f7 fd9b 	bl	8000afc <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f040 8289 	bne.w	80094de <_dtoa_r+0x976>
 8008fcc:	ec5b ab19 	vmov	sl, fp, d9
 8008fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f2c0 8148 	blt.w	8009268 <_dtoa_r+0x700>
 8008fd8:	9a00      	ldr	r2, [sp, #0]
 8008fda:	2a0e      	cmp	r2, #14
 8008fdc:	f300 8144 	bgt.w	8009268 <_dtoa_r+0x700>
 8008fe0:	4b67      	ldr	r3, [pc, #412]	; (8009180 <_dtoa_r+0x618>)
 8008fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f280 80d5 	bge.w	800919c <_dtoa_r+0x634>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f300 80d1 	bgt.w	800919c <_dtoa_r+0x634>
 8008ffa:	f040 826f 	bne.w	80094dc <_dtoa_r+0x974>
 8008ffe:	4b65      	ldr	r3, [pc, #404]	; (8009194 <_dtoa_r+0x62c>)
 8009000:	2200      	movs	r2, #0
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 fb07 	bl	8000618 <__aeabi_dmul>
 800900a:	4652      	mov	r2, sl
 800900c:	465b      	mov	r3, fp
 800900e:	f7f7 fd89 	bl	8000b24 <__aeabi_dcmpge>
 8009012:	9e03      	ldr	r6, [sp, #12]
 8009014:	4637      	mov	r7, r6
 8009016:	2800      	cmp	r0, #0
 8009018:	f040 8245 	bne.w	80094a6 <_dtoa_r+0x93e>
 800901c:	9d01      	ldr	r5, [sp, #4]
 800901e:	2331      	movs	r3, #49	; 0x31
 8009020:	f805 3b01 	strb.w	r3, [r5], #1
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	3301      	adds	r3, #1
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	e240      	b.n	80094ae <_dtoa_r+0x946>
 800902c:	07f2      	lsls	r2, r6, #31
 800902e:	d505      	bpl.n	800903c <_dtoa_r+0x4d4>
 8009030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009034:	f7f7 faf0 	bl	8000618 <__aeabi_dmul>
 8009038:	3501      	adds	r5, #1
 800903a:	2301      	movs	r3, #1
 800903c:	1076      	asrs	r6, r6, #1
 800903e:	3708      	adds	r7, #8
 8009040:	e777      	b.n	8008f32 <_dtoa_r+0x3ca>
 8009042:	2502      	movs	r5, #2
 8009044:	e779      	b.n	8008f3a <_dtoa_r+0x3d2>
 8009046:	9f00      	ldr	r7, [sp, #0]
 8009048:	9e03      	ldr	r6, [sp, #12]
 800904a:	e794      	b.n	8008f76 <_dtoa_r+0x40e>
 800904c:	9901      	ldr	r1, [sp, #4]
 800904e:	4b4c      	ldr	r3, [pc, #304]	; (8009180 <_dtoa_r+0x618>)
 8009050:	4431      	add	r1, r6
 8009052:	910d      	str	r1, [sp, #52]	; 0x34
 8009054:	9908      	ldr	r1, [sp, #32]
 8009056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800905a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800905e:	2900      	cmp	r1, #0
 8009060:	d043      	beq.n	80090ea <_dtoa_r+0x582>
 8009062:	494d      	ldr	r1, [pc, #308]	; (8009198 <_dtoa_r+0x630>)
 8009064:	2000      	movs	r0, #0
 8009066:	f7f7 fc01 	bl	800086c <__aeabi_ddiv>
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	f7f7 f91b 	bl	80002a8 <__aeabi_dsub>
 8009072:	9d01      	ldr	r5, [sp, #4]
 8009074:	4682      	mov	sl, r0
 8009076:	468b      	mov	fp, r1
 8009078:	4649      	mov	r1, r9
 800907a:	4640      	mov	r0, r8
 800907c:	f7f7 fd7c 	bl	8000b78 <__aeabi_d2iz>
 8009080:	4606      	mov	r6, r0
 8009082:	f7f7 fa5f 	bl	8000544 <__aeabi_i2d>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4640      	mov	r0, r8
 800908c:	4649      	mov	r1, r9
 800908e:	f7f7 f90b 	bl	80002a8 <__aeabi_dsub>
 8009092:	3630      	adds	r6, #48	; 0x30
 8009094:	f805 6b01 	strb.w	r6, [r5], #1
 8009098:	4652      	mov	r2, sl
 800909a:	465b      	mov	r3, fp
 800909c:	4680      	mov	r8, r0
 800909e:	4689      	mov	r9, r1
 80090a0:	f7f7 fd2c 	bl	8000afc <__aeabi_dcmplt>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d163      	bne.n	8009170 <_dtoa_r+0x608>
 80090a8:	4642      	mov	r2, r8
 80090aa:	464b      	mov	r3, r9
 80090ac:	4936      	ldr	r1, [pc, #216]	; (8009188 <_dtoa_r+0x620>)
 80090ae:	2000      	movs	r0, #0
 80090b0:	f7f7 f8fa 	bl	80002a8 <__aeabi_dsub>
 80090b4:	4652      	mov	r2, sl
 80090b6:	465b      	mov	r3, fp
 80090b8:	f7f7 fd20 	bl	8000afc <__aeabi_dcmplt>
 80090bc:	2800      	cmp	r0, #0
 80090be:	f040 80b5 	bne.w	800922c <_dtoa_r+0x6c4>
 80090c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c4:	429d      	cmp	r5, r3
 80090c6:	d081      	beq.n	8008fcc <_dtoa_r+0x464>
 80090c8:	4b30      	ldr	r3, [pc, #192]	; (800918c <_dtoa_r+0x624>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	4650      	mov	r0, sl
 80090ce:	4659      	mov	r1, fp
 80090d0:	f7f7 faa2 	bl	8000618 <__aeabi_dmul>
 80090d4:	4b2d      	ldr	r3, [pc, #180]	; (800918c <_dtoa_r+0x624>)
 80090d6:	4682      	mov	sl, r0
 80090d8:	468b      	mov	fp, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	2200      	movs	r2, #0
 80090e0:	f7f7 fa9a 	bl	8000618 <__aeabi_dmul>
 80090e4:	4680      	mov	r8, r0
 80090e6:	4689      	mov	r9, r1
 80090e8:	e7c6      	b.n	8009078 <_dtoa_r+0x510>
 80090ea:	4650      	mov	r0, sl
 80090ec:	4659      	mov	r1, fp
 80090ee:	f7f7 fa93 	bl	8000618 <__aeabi_dmul>
 80090f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090f4:	9d01      	ldr	r5, [sp, #4]
 80090f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090f8:	4682      	mov	sl, r0
 80090fa:	468b      	mov	fp, r1
 80090fc:	4649      	mov	r1, r9
 80090fe:	4640      	mov	r0, r8
 8009100:	f7f7 fd3a 	bl	8000b78 <__aeabi_d2iz>
 8009104:	4606      	mov	r6, r0
 8009106:	f7f7 fa1d 	bl	8000544 <__aeabi_i2d>
 800910a:	3630      	adds	r6, #48	; 0x30
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4640      	mov	r0, r8
 8009112:	4649      	mov	r1, r9
 8009114:	f7f7 f8c8 	bl	80002a8 <__aeabi_dsub>
 8009118:	f805 6b01 	strb.w	r6, [r5], #1
 800911c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800911e:	429d      	cmp	r5, r3
 8009120:	4680      	mov	r8, r0
 8009122:	4689      	mov	r9, r1
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	d124      	bne.n	8009174 <_dtoa_r+0x60c>
 800912a:	4b1b      	ldr	r3, [pc, #108]	; (8009198 <_dtoa_r+0x630>)
 800912c:	4650      	mov	r0, sl
 800912e:	4659      	mov	r1, fp
 8009130:	f7f7 f8bc 	bl	80002ac <__adddf3>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4640      	mov	r0, r8
 800913a:	4649      	mov	r1, r9
 800913c:	f7f7 fcfc 	bl	8000b38 <__aeabi_dcmpgt>
 8009140:	2800      	cmp	r0, #0
 8009142:	d173      	bne.n	800922c <_dtoa_r+0x6c4>
 8009144:	4652      	mov	r2, sl
 8009146:	465b      	mov	r3, fp
 8009148:	4913      	ldr	r1, [pc, #76]	; (8009198 <_dtoa_r+0x630>)
 800914a:	2000      	movs	r0, #0
 800914c:	f7f7 f8ac 	bl	80002a8 <__aeabi_dsub>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4640      	mov	r0, r8
 8009156:	4649      	mov	r1, r9
 8009158:	f7f7 fcd0 	bl	8000afc <__aeabi_dcmplt>
 800915c:	2800      	cmp	r0, #0
 800915e:	f43f af35 	beq.w	8008fcc <_dtoa_r+0x464>
 8009162:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009164:	1e6b      	subs	r3, r5, #1
 8009166:	930f      	str	r3, [sp, #60]	; 0x3c
 8009168:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800916c:	2b30      	cmp	r3, #48	; 0x30
 800916e:	d0f8      	beq.n	8009162 <_dtoa_r+0x5fa>
 8009170:	9700      	str	r7, [sp, #0]
 8009172:	e049      	b.n	8009208 <_dtoa_r+0x6a0>
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <_dtoa_r+0x624>)
 8009176:	f7f7 fa4f 	bl	8000618 <__aeabi_dmul>
 800917a:	4680      	mov	r8, r0
 800917c:	4689      	mov	r9, r1
 800917e:	e7bd      	b.n	80090fc <_dtoa_r+0x594>
 8009180:	0800c398 	.word	0x0800c398
 8009184:	0800c370 	.word	0x0800c370
 8009188:	3ff00000 	.word	0x3ff00000
 800918c:	40240000 	.word	0x40240000
 8009190:	401c0000 	.word	0x401c0000
 8009194:	40140000 	.word	0x40140000
 8009198:	3fe00000 	.word	0x3fe00000
 800919c:	9d01      	ldr	r5, [sp, #4]
 800919e:	4656      	mov	r6, sl
 80091a0:	465f      	mov	r7, fp
 80091a2:	4642      	mov	r2, r8
 80091a4:	464b      	mov	r3, r9
 80091a6:	4630      	mov	r0, r6
 80091a8:	4639      	mov	r1, r7
 80091aa:	f7f7 fb5f 	bl	800086c <__aeabi_ddiv>
 80091ae:	f7f7 fce3 	bl	8000b78 <__aeabi_d2iz>
 80091b2:	4682      	mov	sl, r0
 80091b4:	f7f7 f9c6 	bl	8000544 <__aeabi_i2d>
 80091b8:	4642      	mov	r2, r8
 80091ba:	464b      	mov	r3, r9
 80091bc:	f7f7 fa2c 	bl	8000618 <__aeabi_dmul>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80091cc:	f7f7 f86c 	bl	80002a8 <__aeabi_dsub>
 80091d0:	f805 6b01 	strb.w	r6, [r5], #1
 80091d4:	9e01      	ldr	r6, [sp, #4]
 80091d6:	9f03      	ldr	r7, [sp, #12]
 80091d8:	1bae      	subs	r6, r5, r6
 80091da:	42b7      	cmp	r7, r6
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	d135      	bne.n	800924e <_dtoa_r+0x6e6>
 80091e2:	f7f7 f863 	bl	80002ac <__adddf3>
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	f7f7 fca3 	bl	8000b38 <__aeabi_dcmpgt>
 80091f2:	b9d0      	cbnz	r0, 800922a <_dtoa_r+0x6c2>
 80091f4:	4642      	mov	r2, r8
 80091f6:	464b      	mov	r3, r9
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 fc74 	bl	8000ae8 <__aeabi_dcmpeq>
 8009200:	b110      	cbz	r0, 8009208 <_dtoa_r+0x6a0>
 8009202:	f01a 0f01 	tst.w	sl, #1
 8009206:	d110      	bne.n	800922a <_dtoa_r+0x6c2>
 8009208:	4620      	mov	r0, r4
 800920a:	ee18 1a10 	vmov	r1, s16
 800920e:	f000 fe87 	bl	8009f20 <_Bfree>
 8009212:	2300      	movs	r3, #0
 8009214:	9800      	ldr	r0, [sp, #0]
 8009216:	702b      	strb	r3, [r5, #0]
 8009218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800921a:	3001      	adds	r0, #1
 800921c:	6018      	str	r0, [r3, #0]
 800921e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009220:	2b00      	cmp	r3, #0
 8009222:	f43f acf1 	beq.w	8008c08 <_dtoa_r+0xa0>
 8009226:	601d      	str	r5, [r3, #0]
 8009228:	e4ee      	b.n	8008c08 <_dtoa_r+0xa0>
 800922a:	9f00      	ldr	r7, [sp, #0]
 800922c:	462b      	mov	r3, r5
 800922e:	461d      	mov	r5, r3
 8009230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009234:	2a39      	cmp	r2, #57	; 0x39
 8009236:	d106      	bne.n	8009246 <_dtoa_r+0x6de>
 8009238:	9a01      	ldr	r2, [sp, #4]
 800923a:	429a      	cmp	r2, r3
 800923c:	d1f7      	bne.n	800922e <_dtoa_r+0x6c6>
 800923e:	9901      	ldr	r1, [sp, #4]
 8009240:	2230      	movs	r2, #48	; 0x30
 8009242:	3701      	adds	r7, #1
 8009244:	700a      	strb	r2, [r1, #0]
 8009246:	781a      	ldrb	r2, [r3, #0]
 8009248:	3201      	adds	r2, #1
 800924a:	701a      	strb	r2, [r3, #0]
 800924c:	e790      	b.n	8009170 <_dtoa_r+0x608>
 800924e:	4ba6      	ldr	r3, [pc, #664]	; (80094e8 <_dtoa_r+0x980>)
 8009250:	2200      	movs	r2, #0
 8009252:	f7f7 f9e1 	bl	8000618 <__aeabi_dmul>
 8009256:	2200      	movs	r2, #0
 8009258:	2300      	movs	r3, #0
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	f7f7 fc43 	bl	8000ae8 <__aeabi_dcmpeq>
 8009262:	2800      	cmp	r0, #0
 8009264:	d09d      	beq.n	80091a2 <_dtoa_r+0x63a>
 8009266:	e7cf      	b.n	8009208 <_dtoa_r+0x6a0>
 8009268:	9a08      	ldr	r2, [sp, #32]
 800926a:	2a00      	cmp	r2, #0
 800926c:	f000 80d7 	beq.w	800941e <_dtoa_r+0x8b6>
 8009270:	9a06      	ldr	r2, [sp, #24]
 8009272:	2a01      	cmp	r2, #1
 8009274:	f300 80ba 	bgt.w	80093ec <_dtoa_r+0x884>
 8009278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800927a:	2a00      	cmp	r2, #0
 800927c:	f000 80b2 	beq.w	80093e4 <_dtoa_r+0x87c>
 8009280:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009284:	9e07      	ldr	r6, [sp, #28]
 8009286:	9d04      	ldr	r5, [sp, #16]
 8009288:	9a04      	ldr	r2, [sp, #16]
 800928a:	441a      	add	r2, r3
 800928c:	9204      	str	r2, [sp, #16]
 800928e:	9a05      	ldr	r2, [sp, #20]
 8009290:	2101      	movs	r1, #1
 8009292:	441a      	add	r2, r3
 8009294:	4620      	mov	r0, r4
 8009296:	9205      	str	r2, [sp, #20]
 8009298:	f000 ff44 	bl	800a124 <__i2b>
 800929c:	4607      	mov	r7, r0
 800929e:	2d00      	cmp	r5, #0
 80092a0:	dd0c      	ble.n	80092bc <_dtoa_r+0x754>
 80092a2:	9b05      	ldr	r3, [sp, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd09      	ble.n	80092bc <_dtoa_r+0x754>
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	9a04      	ldr	r2, [sp, #16]
 80092ac:	bfa8      	it	ge
 80092ae:	462b      	movge	r3, r5
 80092b0:	1ad2      	subs	r2, r2, r3
 80092b2:	9204      	str	r2, [sp, #16]
 80092b4:	9a05      	ldr	r2, [sp, #20]
 80092b6:	1aed      	subs	r5, r5, r3
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	b31b      	cbz	r3, 8009308 <_dtoa_r+0x7a0>
 80092c0:	9b08      	ldr	r3, [sp, #32]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 80af 	beq.w	8009426 <_dtoa_r+0x8be>
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	dd13      	ble.n	80092f4 <_dtoa_r+0x78c>
 80092cc:	4639      	mov	r1, r7
 80092ce:	4632      	mov	r2, r6
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 ffe7 	bl	800a2a4 <__pow5mult>
 80092d6:	ee18 2a10 	vmov	r2, s16
 80092da:	4601      	mov	r1, r0
 80092dc:	4607      	mov	r7, r0
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 ff36 	bl	800a150 <__multiply>
 80092e4:	ee18 1a10 	vmov	r1, s16
 80092e8:	4680      	mov	r8, r0
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fe18 	bl	8009f20 <_Bfree>
 80092f0:	ee08 8a10 	vmov	s16, r8
 80092f4:	9b07      	ldr	r3, [sp, #28]
 80092f6:	1b9a      	subs	r2, r3, r6
 80092f8:	d006      	beq.n	8009308 <_dtoa_r+0x7a0>
 80092fa:	ee18 1a10 	vmov	r1, s16
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 ffd0 	bl	800a2a4 <__pow5mult>
 8009304:	ee08 0a10 	vmov	s16, r0
 8009308:	2101      	movs	r1, #1
 800930a:	4620      	mov	r0, r4
 800930c:	f000 ff0a 	bl	800a124 <__i2b>
 8009310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009312:	2b00      	cmp	r3, #0
 8009314:	4606      	mov	r6, r0
 8009316:	f340 8088 	ble.w	800942a <_dtoa_r+0x8c2>
 800931a:	461a      	mov	r2, r3
 800931c:	4601      	mov	r1, r0
 800931e:	4620      	mov	r0, r4
 8009320:	f000 ffc0 	bl	800a2a4 <__pow5mult>
 8009324:	9b06      	ldr	r3, [sp, #24]
 8009326:	2b01      	cmp	r3, #1
 8009328:	4606      	mov	r6, r0
 800932a:	f340 8081 	ble.w	8009430 <_dtoa_r+0x8c8>
 800932e:	f04f 0800 	mov.w	r8, #0
 8009332:	6933      	ldr	r3, [r6, #16]
 8009334:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009338:	6918      	ldr	r0, [r3, #16]
 800933a:	f000 fea3 	bl	800a084 <__hi0bits>
 800933e:	f1c0 0020 	rsb	r0, r0, #32
 8009342:	9b05      	ldr	r3, [sp, #20]
 8009344:	4418      	add	r0, r3
 8009346:	f010 001f 	ands.w	r0, r0, #31
 800934a:	f000 8092 	beq.w	8009472 <_dtoa_r+0x90a>
 800934e:	f1c0 0320 	rsb	r3, r0, #32
 8009352:	2b04      	cmp	r3, #4
 8009354:	f340 808a 	ble.w	800946c <_dtoa_r+0x904>
 8009358:	f1c0 001c 	rsb	r0, r0, #28
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	4403      	add	r3, r0
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	4403      	add	r3, r0
 8009366:	4405      	add	r5, r0
 8009368:	9305      	str	r3, [sp, #20]
 800936a:	9b04      	ldr	r3, [sp, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	dd07      	ble.n	8009380 <_dtoa_r+0x818>
 8009370:	ee18 1a10 	vmov	r1, s16
 8009374:	461a      	mov	r2, r3
 8009376:	4620      	mov	r0, r4
 8009378:	f000 ffee 	bl	800a358 <__lshift>
 800937c:	ee08 0a10 	vmov	s16, r0
 8009380:	9b05      	ldr	r3, [sp, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	dd05      	ble.n	8009392 <_dtoa_r+0x82a>
 8009386:	4631      	mov	r1, r6
 8009388:	461a      	mov	r2, r3
 800938a:	4620      	mov	r0, r4
 800938c:	f000 ffe4 	bl	800a358 <__lshift>
 8009390:	4606      	mov	r6, r0
 8009392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d06e      	beq.n	8009476 <_dtoa_r+0x90e>
 8009398:	ee18 0a10 	vmov	r0, s16
 800939c:	4631      	mov	r1, r6
 800939e:	f001 f84b 	bl	800a438 <__mcmp>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	da67      	bge.n	8009476 <_dtoa_r+0x90e>
 80093a6:	9b00      	ldr	r3, [sp, #0]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	ee18 1a10 	vmov	r1, s16
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	220a      	movs	r2, #10
 80093b2:	2300      	movs	r3, #0
 80093b4:	4620      	mov	r0, r4
 80093b6:	f000 fdd5 	bl	8009f64 <__multadd>
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	ee08 0a10 	vmov	s16, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 81b1 	beq.w	8009728 <_dtoa_r+0xbc0>
 80093c6:	2300      	movs	r3, #0
 80093c8:	4639      	mov	r1, r7
 80093ca:	220a      	movs	r2, #10
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 fdc9 	bl	8009f64 <__multadd>
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	4607      	mov	r7, r0
 80093d8:	f300 808e 	bgt.w	80094f8 <_dtoa_r+0x990>
 80093dc:	9b06      	ldr	r3, [sp, #24]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	dc51      	bgt.n	8009486 <_dtoa_r+0x91e>
 80093e2:	e089      	b.n	80094f8 <_dtoa_r+0x990>
 80093e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093ea:	e74b      	b.n	8009284 <_dtoa_r+0x71c>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	1e5e      	subs	r6, r3, #1
 80093f0:	9b07      	ldr	r3, [sp, #28]
 80093f2:	42b3      	cmp	r3, r6
 80093f4:	bfbf      	itttt	lt
 80093f6:	9b07      	ldrlt	r3, [sp, #28]
 80093f8:	9607      	strlt	r6, [sp, #28]
 80093fa:	1af2      	sublt	r2, r6, r3
 80093fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093fe:	bfb6      	itet	lt
 8009400:	189b      	addlt	r3, r3, r2
 8009402:	1b9e      	subge	r6, r3, r6
 8009404:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	bfb8      	it	lt
 800940a:	2600      	movlt	r6, #0
 800940c:	2b00      	cmp	r3, #0
 800940e:	bfb7      	itett	lt
 8009410:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009414:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009418:	1a9d      	sublt	r5, r3, r2
 800941a:	2300      	movlt	r3, #0
 800941c:	e734      	b.n	8009288 <_dtoa_r+0x720>
 800941e:	9e07      	ldr	r6, [sp, #28]
 8009420:	9d04      	ldr	r5, [sp, #16]
 8009422:	9f08      	ldr	r7, [sp, #32]
 8009424:	e73b      	b.n	800929e <_dtoa_r+0x736>
 8009426:	9a07      	ldr	r2, [sp, #28]
 8009428:	e767      	b.n	80092fa <_dtoa_r+0x792>
 800942a:	9b06      	ldr	r3, [sp, #24]
 800942c:	2b01      	cmp	r3, #1
 800942e:	dc18      	bgt.n	8009462 <_dtoa_r+0x8fa>
 8009430:	f1ba 0f00 	cmp.w	sl, #0
 8009434:	d115      	bne.n	8009462 <_dtoa_r+0x8fa>
 8009436:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800943a:	b993      	cbnz	r3, 8009462 <_dtoa_r+0x8fa>
 800943c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009440:	0d1b      	lsrs	r3, r3, #20
 8009442:	051b      	lsls	r3, r3, #20
 8009444:	b183      	cbz	r3, 8009468 <_dtoa_r+0x900>
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	3301      	adds	r3, #1
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	9b05      	ldr	r3, [sp, #20]
 800944e:	3301      	adds	r3, #1
 8009450:	9305      	str	r3, [sp, #20]
 8009452:	f04f 0801 	mov.w	r8, #1
 8009456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009458:	2b00      	cmp	r3, #0
 800945a:	f47f af6a 	bne.w	8009332 <_dtoa_r+0x7ca>
 800945e:	2001      	movs	r0, #1
 8009460:	e76f      	b.n	8009342 <_dtoa_r+0x7da>
 8009462:	f04f 0800 	mov.w	r8, #0
 8009466:	e7f6      	b.n	8009456 <_dtoa_r+0x8ee>
 8009468:	4698      	mov	r8, r3
 800946a:	e7f4      	b.n	8009456 <_dtoa_r+0x8ee>
 800946c:	f43f af7d 	beq.w	800936a <_dtoa_r+0x802>
 8009470:	4618      	mov	r0, r3
 8009472:	301c      	adds	r0, #28
 8009474:	e772      	b.n	800935c <_dtoa_r+0x7f4>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	dc37      	bgt.n	80094ec <_dtoa_r+0x984>
 800947c:	9b06      	ldr	r3, [sp, #24]
 800947e:	2b02      	cmp	r3, #2
 8009480:	dd34      	ble.n	80094ec <_dtoa_r+0x984>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	9302      	str	r3, [sp, #8]
 8009486:	9b02      	ldr	r3, [sp, #8]
 8009488:	b96b      	cbnz	r3, 80094a6 <_dtoa_r+0x93e>
 800948a:	4631      	mov	r1, r6
 800948c:	2205      	movs	r2, #5
 800948e:	4620      	mov	r0, r4
 8009490:	f000 fd68 	bl	8009f64 <__multadd>
 8009494:	4601      	mov	r1, r0
 8009496:	4606      	mov	r6, r0
 8009498:	ee18 0a10 	vmov	r0, s16
 800949c:	f000 ffcc 	bl	800a438 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f73f adbb 	bgt.w	800901c <_dtoa_r+0x4b4>
 80094a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a8:	9d01      	ldr	r5, [sp, #4]
 80094aa:	43db      	mvns	r3, r3
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	4631      	mov	r1, r6
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 fd33 	bl	8009f20 <_Bfree>
 80094ba:	2f00      	cmp	r7, #0
 80094bc:	f43f aea4 	beq.w	8009208 <_dtoa_r+0x6a0>
 80094c0:	f1b8 0f00 	cmp.w	r8, #0
 80094c4:	d005      	beq.n	80094d2 <_dtoa_r+0x96a>
 80094c6:	45b8      	cmp	r8, r7
 80094c8:	d003      	beq.n	80094d2 <_dtoa_r+0x96a>
 80094ca:	4641      	mov	r1, r8
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 fd27 	bl	8009f20 <_Bfree>
 80094d2:	4639      	mov	r1, r7
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fd23 	bl	8009f20 <_Bfree>
 80094da:	e695      	b.n	8009208 <_dtoa_r+0x6a0>
 80094dc:	2600      	movs	r6, #0
 80094de:	4637      	mov	r7, r6
 80094e0:	e7e1      	b.n	80094a6 <_dtoa_r+0x93e>
 80094e2:	9700      	str	r7, [sp, #0]
 80094e4:	4637      	mov	r7, r6
 80094e6:	e599      	b.n	800901c <_dtoa_r+0x4b4>
 80094e8:	40240000 	.word	0x40240000
 80094ec:	9b08      	ldr	r3, [sp, #32]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 80ca 	beq.w	8009688 <_dtoa_r+0xb20>
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	9302      	str	r3, [sp, #8]
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	dd05      	ble.n	8009508 <_dtoa_r+0x9a0>
 80094fc:	4639      	mov	r1, r7
 80094fe:	462a      	mov	r2, r5
 8009500:	4620      	mov	r0, r4
 8009502:	f000 ff29 	bl	800a358 <__lshift>
 8009506:	4607      	mov	r7, r0
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	d05b      	beq.n	80095c6 <_dtoa_r+0xa5e>
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4620      	mov	r0, r4
 8009512:	f000 fcc5 	bl	8009ea0 <_Balloc>
 8009516:	4605      	mov	r5, r0
 8009518:	b928      	cbnz	r0, 8009526 <_dtoa_r+0x9be>
 800951a:	4b87      	ldr	r3, [pc, #540]	; (8009738 <_dtoa_r+0xbd0>)
 800951c:	4602      	mov	r2, r0
 800951e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009522:	f7ff bb3b 	b.w	8008b9c <_dtoa_r+0x34>
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	3202      	adds	r2, #2
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	f107 010c 	add.w	r1, r7, #12
 8009530:	300c      	adds	r0, #12
 8009532:	f000 fca7 	bl	8009e84 <memcpy>
 8009536:	2201      	movs	r2, #1
 8009538:	4629      	mov	r1, r5
 800953a:	4620      	mov	r0, r4
 800953c:	f000 ff0c 	bl	800a358 <__lshift>
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	f103 0901 	add.w	r9, r3, #1
 8009546:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800954a:	4413      	add	r3, r2
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	f00a 0301 	and.w	r3, sl, #1
 8009552:	46b8      	mov	r8, r7
 8009554:	9304      	str	r3, [sp, #16]
 8009556:	4607      	mov	r7, r0
 8009558:	4631      	mov	r1, r6
 800955a:	ee18 0a10 	vmov	r0, s16
 800955e:	f7ff fa75 	bl	8008a4c <quorem>
 8009562:	4641      	mov	r1, r8
 8009564:	9002      	str	r0, [sp, #8]
 8009566:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800956a:	ee18 0a10 	vmov	r0, s16
 800956e:	f000 ff63 	bl	800a438 <__mcmp>
 8009572:	463a      	mov	r2, r7
 8009574:	9003      	str	r0, [sp, #12]
 8009576:	4631      	mov	r1, r6
 8009578:	4620      	mov	r0, r4
 800957a:	f000 ff79 	bl	800a470 <__mdiff>
 800957e:	68c2      	ldr	r2, [r0, #12]
 8009580:	f109 3bff 	add.w	fp, r9, #4294967295
 8009584:	4605      	mov	r5, r0
 8009586:	bb02      	cbnz	r2, 80095ca <_dtoa_r+0xa62>
 8009588:	4601      	mov	r1, r0
 800958a:	ee18 0a10 	vmov	r0, s16
 800958e:	f000 ff53 	bl	800a438 <__mcmp>
 8009592:	4602      	mov	r2, r0
 8009594:	4629      	mov	r1, r5
 8009596:	4620      	mov	r0, r4
 8009598:	9207      	str	r2, [sp, #28]
 800959a:	f000 fcc1 	bl	8009f20 <_Bfree>
 800959e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80095a2:	ea43 0102 	orr.w	r1, r3, r2
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	430b      	orrs	r3, r1
 80095aa:	464d      	mov	r5, r9
 80095ac:	d10f      	bne.n	80095ce <_dtoa_r+0xa66>
 80095ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095b2:	d02a      	beq.n	800960a <_dtoa_r+0xaa2>
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	dd02      	ble.n	80095c0 <_dtoa_r+0xa58>
 80095ba:	9b02      	ldr	r3, [sp, #8]
 80095bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80095c0:	f88b a000 	strb.w	sl, [fp]
 80095c4:	e775      	b.n	80094b2 <_dtoa_r+0x94a>
 80095c6:	4638      	mov	r0, r7
 80095c8:	e7ba      	b.n	8009540 <_dtoa_r+0x9d8>
 80095ca:	2201      	movs	r2, #1
 80095cc:	e7e2      	b.n	8009594 <_dtoa_r+0xa2c>
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	db04      	blt.n	80095de <_dtoa_r+0xa76>
 80095d4:	9906      	ldr	r1, [sp, #24]
 80095d6:	430b      	orrs	r3, r1
 80095d8:	9904      	ldr	r1, [sp, #16]
 80095da:	430b      	orrs	r3, r1
 80095dc:	d122      	bne.n	8009624 <_dtoa_r+0xabc>
 80095de:	2a00      	cmp	r2, #0
 80095e0:	ddee      	ble.n	80095c0 <_dtoa_r+0xa58>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	2201      	movs	r2, #1
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 feb5 	bl	800a358 <__lshift>
 80095ee:	4631      	mov	r1, r6
 80095f0:	ee08 0a10 	vmov	s16, r0
 80095f4:	f000 ff20 	bl	800a438 <__mcmp>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	dc03      	bgt.n	8009604 <_dtoa_r+0xa9c>
 80095fc:	d1e0      	bne.n	80095c0 <_dtoa_r+0xa58>
 80095fe:	f01a 0f01 	tst.w	sl, #1
 8009602:	d0dd      	beq.n	80095c0 <_dtoa_r+0xa58>
 8009604:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009608:	d1d7      	bne.n	80095ba <_dtoa_r+0xa52>
 800960a:	2339      	movs	r3, #57	; 0x39
 800960c:	f88b 3000 	strb.w	r3, [fp]
 8009610:	462b      	mov	r3, r5
 8009612:	461d      	mov	r5, r3
 8009614:	3b01      	subs	r3, #1
 8009616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800961a:	2a39      	cmp	r2, #57	; 0x39
 800961c:	d071      	beq.n	8009702 <_dtoa_r+0xb9a>
 800961e:	3201      	adds	r2, #1
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	e746      	b.n	80094b2 <_dtoa_r+0x94a>
 8009624:	2a00      	cmp	r2, #0
 8009626:	dd07      	ble.n	8009638 <_dtoa_r+0xad0>
 8009628:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800962c:	d0ed      	beq.n	800960a <_dtoa_r+0xaa2>
 800962e:	f10a 0301 	add.w	r3, sl, #1
 8009632:	f88b 3000 	strb.w	r3, [fp]
 8009636:	e73c      	b.n	80094b2 <_dtoa_r+0x94a>
 8009638:	9b05      	ldr	r3, [sp, #20]
 800963a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800963e:	4599      	cmp	r9, r3
 8009640:	d047      	beq.n	80096d2 <_dtoa_r+0xb6a>
 8009642:	ee18 1a10 	vmov	r1, s16
 8009646:	2300      	movs	r3, #0
 8009648:	220a      	movs	r2, #10
 800964a:	4620      	mov	r0, r4
 800964c:	f000 fc8a 	bl	8009f64 <__multadd>
 8009650:	45b8      	cmp	r8, r7
 8009652:	ee08 0a10 	vmov	s16, r0
 8009656:	f04f 0300 	mov.w	r3, #0
 800965a:	f04f 020a 	mov.w	r2, #10
 800965e:	4641      	mov	r1, r8
 8009660:	4620      	mov	r0, r4
 8009662:	d106      	bne.n	8009672 <_dtoa_r+0xb0a>
 8009664:	f000 fc7e 	bl	8009f64 <__multadd>
 8009668:	4680      	mov	r8, r0
 800966a:	4607      	mov	r7, r0
 800966c:	f109 0901 	add.w	r9, r9, #1
 8009670:	e772      	b.n	8009558 <_dtoa_r+0x9f0>
 8009672:	f000 fc77 	bl	8009f64 <__multadd>
 8009676:	4639      	mov	r1, r7
 8009678:	4680      	mov	r8, r0
 800967a:	2300      	movs	r3, #0
 800967c:	220a      	movs	r2, #10
 800967e:	4620      	mov	r0, r4
 8009680:	f000 fc70 	bl	8009f64 <__multadd>
 8009684:	4607      	mov	r7, r0
 8009686:	e7f1      	b.n	800966c <_dtoa_r+0xb04>
 8009688:	9b03      	ldr	r3, [sp, #12]
 800968a:	9302      	str	r3, [sp, #8]
 800968c:	9d01      	ldr	r5, [sp, #4]
 800968e:	ee18 0a10 	vmov	r0, s16
 8009692:	4631      	mov	r1, r6
 8009694:	f7ff f9da 	bl	8008a4c <quorem>
 8009698:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800969c:	9b01      	ldr	r3, [sp, #4]
 800969e:	f805 ab01 	strb.w	sl, [r5], #1
 80096a2:	1aea      	subs	r2, r5, r3
 80096a4:	9b02      	ldr	r3, [sp, #8]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	dd09      	ble.n	80096be <_dtoa_r+0xb56>
 80096aa:	ee18 1a10 	vmov	r1, s16
 80096ae:	2300      	movs	r3, #0
 80096b0:	220a      	movs	r2, #10
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fc56 	bl	8009f64 <__multadd>
 80096b8:	ee08 0a10 	vmov	s16, r0
 80096bc:	e7e7      	b.n	800968e <_dtoa_r+0xb26>
 80096be:	9b02      	ldr	r3, [sp, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bfc8      	it	gt
 80096c4:	461d      	movgt	r5, r3
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	bfd8      	it	le
 80096ca:	2501      	movle	r5, #1
 80096cc:	441d      	add	r5, r3
 80096ce:	f04f 0800 	mov.w	r8, #0
 80096d2:	ee18 1a10 	vmov	r1, s16
 80096d6:	2201      	movs	r2, #1
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 fe3d 	bl	800a358 <__lshift>
 80096de:	4631      	mov	r1, r6
 80096e0:	ee08 0a10 	vmov	s16, r0
 80096e4:	f000 fea8 	bl	800a438 <__mcmp>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	dc91      	bgt.n	8009610 <_dtoa_r+0xaa8>
 80096ec:	d102      	bne.n	80096f4 <_dtoa_r+0xb8c>
 80096ee:	f01a 0f01 	tst.w	sl, #1
 80096f2:	d18d      	bne.n	8009610 <_dtoa_r+0xaa8>
 80096f4:	462b      	mov	r3, r5
 80096f6:	461d      	mov	r5, r3
 80096f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096fc:	2a30      	cmp	r2, #48	; 0x30
 80096fe:	d0fa      	beq.n	80096f6 <_dtoa_r+0xb8e>
 8009700:	e6d7      	b.n	80094b2 <_dtoa_r+0x94a>
 8009702:	9a01      	ldr	r2, [sp, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d184      	bne.n	8009612 <_dtoa_r+0xaaa>
 8009708:	9b00      	ldr	r3, [sp, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	2331      	movs	r3, #49	; 0x31
 8009710:	7013      	strb	r3, [r2, #0]
 8009712:	e6ce      	b.n	80094b2 <_dtoa_r+0x94a>
 8009714:	4b09      	ldr	r3, [pc, #36]	; (800973c <_dtoa_r+0xbd4>)
 8009716:	f7ff ba95 	b.w	8008c44 <_dtoa_r+0xdc>
 800971a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800971c:	2b00      	cmp	r3, #0
 800971e:	f47f aa6e 	bne.w	8008bfe <_dtoa_r+0x96>
 8009722:	4b07      	ldr	r3, [pc, #28]	; (8009740 <_dtoa_r+0xbd8>)
 8009724:	f7ff ba8e 	b.w	8008c44 <_dtoa_r+0xdc>
 8009728:	9b02      	ldr	r3, [sp, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	dcae      	bgt.n	800968c <_dtoa_r+0xb24>
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	2b02      	cmp	r3, #2
 8009732:	f73f aea8 	bgt.w	8009486 <_dtoa_r+0x91e>
 8009736:	e7a9      	b.n	800968c <_dtoa_r+0xb24>
 8009738:	0800c288 	.word	0x0800c288
 800973c:	0800c481 	.word	0x0800c481
 8009740:	0800c209 	.word	0x0800c209

08009744 <rshift>:
 8009744:	6903      	ldr	r3, [r0, #16]
 8009746:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800974a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800974e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009752:	f100 0414 	add.w	r4, r0, #20
 8009756:	dd45      	ble.n	80097e4 <rshift+0xa0>
 8009758:	f011 011f 	ands.w	r1, r1, #31
 800975c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009760:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009764:	d10c      	bne.n	8009780 <rshift+0x3c>
 8009766:	f100 0710 	add.w	r7, r0, #16
 800976a:	4629      	mov	r1, r5
 800976c:	42b1      	cmp	r1, r6
 800976e:	d334      	bcc.n	80097da <rshift+0x96>
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	1eea      	subs	r2, r5, #3
 8009776:	4296      	cmp	r6, r2
 8009778:	bf38      	it	cc
 800977a:	2300      	movcc	r3, #0
 800977c:	4423      	add	r3, r4
 800977e:	e015      	b.n	80097ac <rshift+0x68>
 8009780:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009784:	f1c1 0820 	rsb	r8, r1, #32
 8009788:	40cf      	lsrs	r7, r1
 800978a:	f105 0e04 	add.w	lr, r5, #4
 800978e:	46a1      	mov	r9, r4
 8009790:	4576      	cmp	r6, lr
 8009792:	46f4      	mov	ip, lr
 8009794:	d815      	bhi.n	80097c2 <rshift+0x7e>
 8009796:	1a9a      	subs	r2, r3, r2
 8009798:	0092      	lsls	r2, r2, #2
 800979a:	3a04      	subs	r2, #4
 800979c:	3501      	adds	r5, #1
 800979e:	42ae      	cmp	r6, r5
 80097a0:	bf38      	it	cc
 80097a2:	2200      	movcc	r2, #0
 80097a4:	18a3      	adds	r3, r4, r2
 80097a6:	50a7      	str	r7, [r4, r2]
 80097a8:	b107      	cbz	r7, 80097ac <rshift+0x68>
 80097aa:	3304      	adds	r3, #4
 80097ac:	1b1a      	subs	r2, r3, r4
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097b4:	bf08      	it	eq
 80097b6:	2300      	moveq	r3, #0
 80097b8:	6102      	str	r2, [r0, #16]
 80097ba:	bf08      	it	eq
 80097bc:	6143      	streq	r3, [r0, #20]
 80097be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097c2:	f8dc c000 	ldr.w	ip, [ip]
 80097c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80097ca:	ea4c 0707 	orr.w	r7, ip, r7
 80097ce:	f849 7b04 	str.w	r7, [r9], #4
 80097d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097d6:	40cf      	lsrs	r7, r1
 80097d8:	e7da      	b.n	8009790 <rshift+0x4c>
 80097da:	f851 cb04 	ldr.w	ip, [r1], #4
 80097de:	f847 cf04 	str.w	ip, [r7, #4]!
 80097e2:	e7c3      	b.n	800976c <rshift+0x28>
 80097e4:	4623      	mov	r3, r4
 80097e6:	e7e1      	b.n	80097ac <rshift+0x68>

080097e8 <__hexdig_fun>:
 80097e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80097ec:	2b09      	cmp	r3, #9
 80097ee:	d802      	bhi.n	80097f6 <__hexdig_fun+0xe>
 80097f0:	3820      	subs	r0, #32
 80097f2:	b2c0      	uxtb	r0, r0
 80097f4:	4770      	bx	lr
 80097f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80097fa:	2b05      	cmp	r3, #5
 80097fc:	d801      	bhi.n	8009802 <__hexdig_fun+0x1a>
 80097fe:	3847      	subs	r0, #71	; 0x47
 8009800:	e7f7      	b.n	80097f2 <__hexdig_fun+0xa>
 8009802:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009806:	2b05      	cmp	r3, #5
 8009808:	d801      	bhi.n	800980e <__hexdig_fun+0x26>
 800980a:	3827      	subs	r0, #39	; 0x27
 800980c:	e7f1      	b.n	80097f2 <__hexdig_fun+0xa>
 800980e:	2000      	movs	r0, #0
 8009810:	4770      	bx	lr
	...

08009814 <__gethex>:
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	ed2d 8b02 	vpush	{d8}
 800981c:	b089      	sub	sp, #36	; 0x24
 800981e:	ee08 0a10 	vmov	s16, r0
 8009822:	9304      	str	r3, [sp, #16]
 8009824:	4bb4      	ldr	r3, [pc, #720]	; (8009af8 <__gethex+0x2e4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	4618      	mov	r0, r3
 800982c:	468b      	mov	fp, r1
 800982e:	4690      	mov	r8, r2
 8009830:	f7f6 fcde 	bl	80001f0 <strlen>
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	f8db 2000 	ldr.w	r2, [fp]
 800983a:	4403      	add	r3, r0
 800983c:	4682      	mov	sl, r0
 800983e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	1c93      	adds	r3, r2, #2
 8009846:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800984a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800984e:	32fe      	adds	r2, #254	; 0xfe
 8009850:	18d1      	adds	r1, r2, r3
 8009852:	461f      	mov	r7, r3
 8009854:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009858:	9100      	str	r1, [sp, #0]
 800985a:	2830      	cmp	r0, #48	; 0x30
 800985c:	d0f8      	beq.n	8009850 <__gethex+0x3c>
 800985e:	f7ff ffc3 	bl	80097e8 <__hexdig_fun>
 8009862:	4604      	mov	r4, r0
 8009864:	2800      	cmp	r0, #0
 8009866:	d13a      	bne.n	80098de <__gethex+0xca>
 8009868:	9901      	ldr	r1, [sp, #4]
 800986a:	4652      	mov	r2, sl
 800986c:	4638      	mov	r0, r7
 800986e:	f7fe f9e8 	bl	8007c42 <strncmp>
 8009872:	4605      	mov	r5, r0
 8009874:	2800      	cmp	r0, #0
 8009876:	d168      	bne.n	800994a <__gethex+0x136>
 8009878:	f817 000a 	ldrb.w	r0, [r7, sl]
 800987c:	eb07 060a 	add.w	r6, r7, sl
 8009880:	f7ff ffb2 	bl	80097e8 <__hexdig_fun>
 8009884:	2800      	cmp	r0, #0
 8009886:	d062      	beq.n	800994e <__gethex+0x13a>
 8009888:	4633      	mov	r3, r6
 800988a:	7818      	ldrb	r0, [r3, #0]
 800988c:	2830      	cmp	r0, #48	; 0x30
 800988e:	461f      	mov	r7, r3
 8009890:	f103 0301 	add.w	r3, r3, #1
 8009894:	d0f9      	beq.n	800988a <__gethex+0x76>
 8009896:	f7ff ffa7 	bl	80097e8 <__hexdig_fun>
 800989a:	2301      	movs	r3, #1
 800989c:	fab0 f480 	clz	r4, r0
 80098a0:	0964      	lsrs	r4, r4, #5
 80098a2:	4635      	mov	r5, r6
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	463a      	mov	r2, r7
 80098a8:	4616      	mov	r6, r2
 80098aa:	3201      	adds	r2, #1
 80098ac:	7830      	ldrb	r0, [r6, #0]
 80098ae:	f7ff ff9b 	bl	80097e8 <__hexdig_fun>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d1f8      	bne.n	80098a8 <__gethex+0x94>
 80098b6:	9901      	ldr	r1, [sp, #4]
 80098b8:	4652      	mov	r2, sl
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7fe f9c1 	bl	8007c42 <strncmp>
 80098c0:	b980      	cbnz	r0, 80098e4 <__gethex+0xd0>
 80098c2:	b94d      	cbnz	r5, 80098d8 <__gethex+0xc4>
 80098c4:	eb06 050a 	add.w	r5, r6, sl
 80098c8:	462a      	mov	r2, r5
 80098ca:	4616      	mov	r6, r2
 80098cc:	3201      	adds	r2, #1
 80098ce:	7830      	ldrb	r0, [r6, #0]
 80098d0:	f7ff ff8a 	bl	80097e8 <__hexdig_fun>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d1f8      	bne.n	80098ca <__gethex+0xb6>
 80098d8:	1bad      	subs	r5, r5, r6
 80098da:	00ad      	lsls	r5, r5, #2
 80098dc:	e004      	b.n	80098e8 <__gethex+0xd4>
 80098de:	2400      	movs	r4, #0
 80098e0:	4625      	mov	r5, r4
 80098e2:	e7e0      	b.n	80098a6 <__gethex+0x92>
 80098e4:	2d00      	cmp	r5, #0
 80098e6:	d1f7      	bne.n	80098d8 <__gethex+0xc4>
 80098e8:	7833      	ldrb	r3, [r6, #0]
 80098ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098ee:	2b50      	cmp	r3, #80	; 0x50
 80098f0:	d13b      	bne.n	800996a <__gethex+0x156>
 80098f2:	7873      	ldrb	r3, [r6, #1]
 80098f4:	2b2b      	cmp	r3, #43	; 0x2b
 80098f6:	d02c      	beq.n	8009952 <__gethex+0x13e>
 80098f8:	2b2d      	cmp	r3, #45	; 0x2d
 80098fa:	d02e      	beq.n	800995a <__gethex+0x146>
 80098fc:	1c71      	adds	r1, r6, #1
 80098fe:	f04f 0900 	mov.w	r9, #0
 8009902:	7808      	ldrb	r0, [r1, #0]
 8009904:	f7ff ff70 	bl	80097e8 <__hexdig_fun>
 8009908:	1e43      	subs	r3, r0, #1
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b18      	cmp	r3, #24
 800990e:	d82c      	bhi.n	800996a <__gethex+0x156>
 8009910:	f1a0 0210 	sub.w	r2, r0, #16
 8009914:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009918:	f7ff ff66 	bl	80097e8 <__hexdig_fun>
 800991c:	1e43      	subs	r3, r0, #1
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b18      	cmp	r3, #24
 8009922:	d91d      	bls.n	8009960 <__gethex+0x14c>
 8009924:	f1b9 0f00 	cmp.w	r9, #0
 8009928:	d000      	beq.n	800992c <__gethex+0x118>
 800992a:	4252      	negs	r2, r2
 800992c:	4415      	add	r5, r2
 800992e:	f8cb 1000 	str.w	r1, [fp]
 8009932:	b1e4      	cbz	r4, 800996e <__gethex+0x15a>
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	bf14      	ite	ne
 800993a:	2700      	movne	r7, #0
 800993c:	2706      	moveq	r7, #6
 800993e:	4638      	mov	r0, r7
 8009940:	b009      	add	sp, #36	; 0x24
 8009942:	ecbd 8b02 	vpop	{d8}
 8009946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994a:	463e      	mov	r6, r7
 800994c:	4625      	mov	r5, r4
 800994e:	2401      	movs	r4, #1
 8009950:	e7ca      	b.n	80098e8 <__gethex+0xd4>
 8009952:	f04f 0900 	mov.w	r9, #0
 8009956:	1cb1      	adds	r1, r6, #2
 8009958:	e7d3      	b.n	8009902 <__gethex+0xee>
 800995a:	f04f 0901 	mov.w	r9, #1
 800995e:	e7fa      	b.n	8009956 <__gethex+0x142>
 8009960:	230a      	movs	r3, #10
 8009962:	fb03 0202 	mla	r2, r3, r2, r0
 8009966:	3a10      	subs	r2, #16
 8009968:	e7d4      	b.n	8009914 <__gethex+0x100>
 800996a:	4631      	mov	r1, r6
 800996c:	e7df      	b.n	800992e <__gethex+0x11a>
 800996e:	1bf3      	subs	r3, r6, r7
 8009970:	3b01      	subs	r3, #1
 8009972:	4621      	mov	r1, r4
 8009974:	2b07      	cmp	r3, #7
 8009976:	dc0b      	bgt.n	8009990 <__gethex+0x17c>
 8009978:	ee18 0a10 	vmov	r0, s16
 800997c:	f000 fa90 	bl	8009ea0 <_Balloc>
 8009980:	4604      	mov	r4, r0
 8009982:	b940      	cbnz	r0, 8009996 <__gethex+0x182>
 8009984:	4b5d      	ldr	r3, [pc, #372]	; (8009afc <__gethex+0x2e8>)
 8009986:	4602      	mov	r2, r0
 8009988:	21de      	movs	r1, #222	; 0xde
 800998a:	485d      	ldr	r0, [pc, #372]	; (8009b00 <__gethex+0x2ec>)
 800998c:	f001 fde0 	bl	800b550 <__assert_func>
 8009990:	3101      	adds	r1, #1
 8009992:	105b      	asrs	r3, r3, #1
 8009994:	e7ee      	b.n	8009974 <__gethex+0x160>
 8009996:	f100 0914 	add.w	r9, r0, #20
 800999a:	f04f 0b00 	mov.w	fp, #0
 800999e:	f1ca 0301 	rsb	r3, sl, #1
 80099a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80099a6:	f8cd b000 	str.w	fp, [sp]
 80099aa:	9306      	str	r3, [sp, #24]
 80099ac:	42b7      	cmp	r7, r6
 80099ae:	d340      	bcc.n	8009a32 <__gethex+0x21e>
 80099b0:	9802      	ldr	r0, [sp, #8]
 80099b2:	9b00      	ldr	r3, [sp, #0]
 80099b4:	f840 3b04 	str.w	r3, [r0], #4
 80099b8:	eba0 0009 	sub.w	r0, r0, r9
 80099bc:	1080      	asrs	r0, r0, #2
 80099be:	0146      	lsls	r6, r0, #5
 80099c0:	6120      	str	r0, [r4, #16]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fb5e 	bl	800a084 <__hi0bits>
 80099c8:	1a30      	subs	r0, r6, r0
 80099ca:	f8d8 6000 	ldr.w	r6, [r8]
 80099ce:	42b0      	cmp	r0, r6
 80099d0:	dd63      	ble.n	8009a9a <__gethex+0x286>
 80099d2:	1b87      	subs	r7, r0, r6
 80099d4:	4639      	mov	r1, r7
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 ff02 	bl	800a7e0 <__any_on>
 80099dc:	4682      	mov	sl, r0
 80099de:	b1a8      	cbz	r0, 8009a0c <__gethex+0x1f8>
 80099e0:	1e7b      	subs	r3, r7, #1
 80099e2:	1159      	asrs	r1, r3, #5
 80099e4:	f003 021f 	and.w	r2, r3, #31
 80099e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80099ec:	f04f 0a01 	mov.w	sl, #1
 80099f0:	fa0a f202 	lsl.w	r2, sl, r2
 80099f4:	420a      	tst	r2, r1
 80099f6:	d009      	beq.n	8009a0c <__gethex+0x1f8>
 80099f8:	4553      	cmp	r3, sl
 80099fa:	dd05      	ble.n	8009a08 <__gethex+0x1f4>
 80099fc:	1eb9      	subs	r1, r7, #2
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 feee 	bl	800a7e0 <__any_on>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d145      	bne.n	8009a94 <__gethex+0x280>
 8009a08:	f04f 0a02 	mov.w	sl, #2
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff fe98 	bl	8009744 <rshift>
 8009a14:	443d      	add	r5, r7
 8009a16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a1a:	42ab      	cmp	r3, r5
 8009a1c:	da4c      	bge.n	8009ab8 <__gethex+0x2a4>
 8009a1e:	ee18 0a10 	vmov	r0, s16
 8009a22:	4621      	mov	r1, r4
 8009a24:	f000 fa7c 	bl	8009f20 <_Bfree>
 8009a28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	27a3      	movs	r7, #163	; 0xa3
 8009a30:	e785      	b.n	800993e <__gethex+0x12a>
 8009a32:	1e73      	subs	r3, r6, #1
 8009a34:	9a05      	ldr	r2, [sp, #20]
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d019      	beq.n	8009a74 <__gethex+0x260>
 8009a40:	f1bb 0f20 	cmp.w	fp, #32
 8009a44:	d107      	bne.n	8009a56 <__gethex+0x242>
 8009a46:	9b02      	ldr	r3, [sp, #8]
 8009a48:	9a00      	ldr	r2, [sp, #0]
 8009a4a:	f843 2b04 	str.w	r2, [r3], #4
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	2300      	movs	r3, #0
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	469b      	mov	fp, r3
 8009a56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009a5a:	f7ff fec5 	bl	80097e8 <__hexdig_fun>
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	f000 000f 	and.w	r0, r0, #15
 8009a64:	fa00 f00b 	lsl.w	r0, r0, fp
 8009a68:	4303      	orrs	r3, r0
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	f10b 0b04 	add.w	fp, fp, #4
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	e00d      	b.n	8009a90 <__gethex+0x27c>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	9a06      	ldr	r2, [sp, #24]
 8009a78:	4413      	add	r3, r2
 8009a7a:	42bb      	cmp	r3, r7
 8009a7c:	d3e0      	bcc.n	8009a40 <__gethex+0x22c>
 8009a7e:	4618      	mov	r0, r3
 8009a80:	9901      	ldr	r1, [sp, #4]
 8009a82:	9307      	str	r3, [sp, #28]
 8009a84:	4652      	mov	r2, sl
 8009a86:	f7fe f8dc 	bl	8007c42 <strncmp>
 8009a8a:	9b07      	ldr	r3, [sp, #28]
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d1d7      	bne.n	8009a40 <__gethex+0x22c>
 8009a90:	461e      	mov	r6, r3
 8009a92:	e78b      	b.n	80099ac <__gethex+0x198>
 8009a94:	f04f 0a03 	mov.w	sl, #3
 8009a98:	e7b8      	b.n	8009a0c <__gethex+0x1f8>
 8009a9a:	da0a      	bge.n	8009ab2 <__gethex+0x29e>
 8009a9c:	1a37      	subs	r7, r6, r0
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	ee18 0a10 	vmov	r0, s16
 8009aa4:	463a      	mov	r2, r7
 8009aa6:	f000 fc57 	bl	800a358 <__lshift>
 8009aaa:	1bed      	subs	r5, r5, r7
 8009aac:	4604      	mov	r4, r0
 8009aae:	f100 0914 	add.w	r9, r0, #20
 8009ab2:	f04f 0a00 	mov.w	sl, #0
 8009ab6:	e7ae      	b.n	8009a16 <__gethex+0x202>
 8009ab8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009abc:	42a8      	cmp	r0, r5
 8009abe:	dd72      	ble.n	8009ba6 <__gethex+0x392>
 8009ac0:	1b45      	subs	r5, r0, r5
 8009ac2:	42ae      	cmp	r6, r5
 8009ac4:	dc36      	bgt.n	8009b34 <__gethex+0x320>
 8009ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d02a      	beq.n	8009b24 <__gethex+0x310>
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d02c      	beq.n	8009b2c <__gethex+0x318>
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d11c      	bne.n	8009b10 <__gethex+0x2fc>
 8009ad6:	42ae      	cmp	r6, r5
 8009ad8:	d11a      	bne.n	8009b10 <__gethex+0x2fc>
 8009ada:	2e01      	cmp	r6, #1
 8009adc:	d112      	bne.n	8009b04 <__gethex+0x2f0>
 8009ade:	9a04      	ldr	r2, [sp, #16]
 8009ae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	f8c9 3000 	str.w	r3, [r9]
 8009aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009af0:	2762      	movs	r7, #98	; 0x62
 8009af2:	601c      	str	r4, [r3, #0]
 8009af4:	e723      	b.n	800993e <__gethex+0x12a>
 8009af6:	bf00      	nop
 8009af8:	0800c300 	.word	0x0800c300
 8009afc:	0800c288 	.word	0x0800c288
 8009b00:	0800c299 	.word	0x0800c299
 8009b04:	1e71      	subs	r1, r6, #1
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 fe6a 	bl	800a7e0 <__any_on>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d1e6      	bne.n	8009ade <__gethex+0x2ca>
 8009b10:	ee18 0a10 	vmov	r0, s16
 8009b14:	4621      	mov	r1, r4
 8009b16:	f000 fa03 	bl	8009f20 <_Bfree>
 8009b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	2750      	movs	r7, #80	; 0x50
 8009b22:	e70c      	b.n	800993e <__gethex+0x12a>
 8009b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1f2      	bne.n	8009b10 <__gethex+0x2fc>
 8009b2a:	e7d8      	b.n	8009ade <__gethex+0x2ca>
 8009b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1d5      	bne.n	8009ade <__gethex+0x2ca>
 8009b32:	e7ed      	b.n	8009b10 <__gethex+0x2fc>
 8009b34:	1e6f      	subs	r7, r5, #1
 8009b36:	f1ba 0f00 	cmp.w	sl, #0
 8009b3a:	d131      	bne.n	8009ba0 <__gethex+0x38c>
 8009b3c:	b127      	cbz	r7, 8009b48 <__gethex+0x334>
 8009b3e:	4639      	mov	r1, r7
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fe4d 	bl	800a7e0 <__any_on>
 8009b46:	4682      	mov	sl, r0
 8009b48:	117b      	asrs	r3, r7, #5
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009b50:	f007 071f 	and.w	r7, r7, #31
 8009b54:	fa01 f707 	lsl.w	r7, r1, r7
 8009b58:	421f      	tst	r7, r3
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	bf18      	it	ne
 8009b60:	f04a 0a02 	orrne.w	sl, sl, #2
 8009b64:	1b76      	subs	r6, r6, r5
 8009b66:	f7ff fded 	bl	8009744 <rshift>
 8009b6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b6e:	2702      	movs	r7, #2
 8009b70:	f1ba 0f00 	cmp.w	sl, #0
 8009b74:	d048      	beq.n	8009c08 <__gethex+0x3f4>
 8009b76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d015      	beq.n	8009baa <__gethex+0x396>
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d017      	beq.n	8009bb2 <__gethex+0x39e>
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d109      	bne.n	8009b9a <__gethex+0x386>
 8009b86:	f01a 0f02 	tst.w	sl, #2
 8009b8a:	d006      	beq.n	8009b9a <__gethex+0x386>
 8009b8c:	f8d9 0000 	ldr.w	r0, [r9]
 8009b90:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b94:	f01a 0f01 	tst.w	sl, #1
 8009b98:	d10e      	bne.n	8009bb8 <__gethex+0x3a4>
 8009b9a:	f047 0710 	orr.w	r7, r7, #16
 8009b9e:	e033      	b.n	8009c08 <__gethex+0x3f4>
 8009ba0:	f04f 0a01 	mov.w	sl, #1
 8009ba4:	e7d0      	b.n	8009b48 <__gethex+0x334>
 8009ba6:	2701      	movs	r7, #1
 8009ba8:	e7e2      	b.n	8009b70 <__gethex+0x35c>
 8009baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bac:	f1c3 0301 	rsb	r3, r3, #1
 8009bb0:	9315      	str	r3, [sp, #84]	; 0x54
 8009bb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0f0      	beq.n	8009b9a <__gethex+0x386>
 8009bb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bbc:	f104 0314 	add.w	r3, r4, #20
 8009bc0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009bc4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009bc8:	f04f 0c00 	mov.w	ip, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bd2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009bd6:	d01c      	beq.n	8009c12 <__gethex+0x3fe>
 8009bd8:	3201      	adds	r2, #1
 8009bda:	6002      	str	r2, [r0, #0]
 8009bdc:	2f02      	cmp	r7, #2
 8009bde:	f104 0314 	add.w	r3, r4, #20
 8009be2:	d13f      	bne.n	8009c64 <__gethex+0x450>
 8009be4:	f8d8 2000 	ldr.w	r2, [r8]
 8009be8:	3a01      	subs	r2, #1
 8009bea:	42b2      	cmp	r2, r6
 8009bec:	d10a      	bne.n	8009c04 <__gethex+0x3f0>
 8009bee:	1171      	asrs	r1, r6, #5
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bf6:	f006 061f 	and.w	r6, r6, #31
 8009bfa:	fa02 f606 	lsl.w	r6, r2, r6
 8009bfe:	421e      	tst	r6, r3
 8009c00:	bf18      	it	ne
 8009c02:	4617      	movne	r7, r2
 8009c04:	f047 0720 	orr.w	r7, r7, #32
 8009c08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c0a:	601c      	str	r4, [r3, #0]
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	601d      	str	r5, [r3, #0]
 8009c10:	e695      	b.n	800993e <__gethex+0x12a>
 8009c12:	4299      	cmp	r1, r3
 8009c14:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c18:	d8d8      	bhi.n	8009bcc <__gethex+0x3b8>
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	459b      	cmp	fp, r3
 8009c1e:	db19      	blt.n	8009c54 <__gethex+0x440>
 8009c20:	6861      	ldr	r1, [r4, #4]
 8009c22:	ee18 0a10 	vmov	r0, s16
 8009c26:	3101      	adds	r1, #1
 8009c28:	f000 f93a 	bl	8009ea0 <_Balloc>
 8009c2c:	4681      	mov	r9, r0
 8009c2e:	b918      	cbnz	r0, 8009c38 <__gethex+0x424>
 8009c30:	4b1a      	ldr	r3, [pc, #104]	; (8009c9c <__gethex+0x488>)
 8009c32:	4602      	mov	r2, r0
 8009c34:	2184      	movs	r1, #132	; 0x84
 8009c36:	e6a8      	b.n	800998a <__gethex+0x176>
 8009c38:	6922      	ldr	r2, [r4, #16]
 8009c3a:	3202      	adds	r2, #2
 8009c3c:	f104 010c 	add.w	r1, r4, #12
 8009c40:	0092      	lsls	r2, r2, #2
 8009c42:	300c      	adds	r0, #12
 8009c44:	f000 f91e 	bl	8009e84 <memcpy>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	ee18 0a10 	vmov	r0, s16
 8009c4e:	f000 f967 	bl	8009f20 <_Bfree>
 8009c52:	464c      	mov	r4, r9
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c5c:	6122      	str	r2, [r4, #16]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	615a      	str	r2, [r3, #20]
 8009c62:	e7bb      	b.n	8009bdc <__gethex+0x3c8>
 8009c64:	6922      	ldr	r2, [r4, #16]
 8009c66:	455a      	cmp	r2, fp
 8009c68:	dd0b      	ble.n	8009c82 <__gethex+0x46e>
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7ff fd69 	bl	8009744 <rshift>
 8009c72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c76:	3501      	adds	r5, #1
 8009c78:	42ab      	cmp	r3, r5
 8009c7a:	f6ff aed0 	blt.w	8009a1e <__gethex+0x20a>
 8009c7e:	2701      	movs	r7, #1
 8009c80:	e7c0      	b.n	8009c04 <__gethex+0x3f0>
 8009c82:	f016 061f 	ands.w	r6, r6, #31
 8009c86:	d0fa      	beq.n	8009c7e <__gethex+0x46a>
 8009c88:	4453      	add	r3, sl
 8009c8a:	f1c6 0620 	rsb	r6, r6, #32
 8009c8e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c92:	f000 f9f7 	bl	800a084 <__hi0bits>
 8009c96:	42b0      	cmp	r0, r6
 8009c98:	dbe7      	blt.n	8009c6a <__gethex+0x456>
 8009c9a:	e7f0      	b.n	8009c7e <__gethex+0x46a>
 8009c9c:	0800c288 	.word	0x0800c288

08009ca0 <L_shift>:
 8009ca0:	f1c2 0208 	rsb	r2, r2, #8
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	f1c2 0620 	rsb	r6, r2, #32
 8009cac:	6843      	ldr	r3, [r0, #4]
 8009cae:	6804      	ldr	r4, [r0, #0]
 8009cb0:	fa03 f506 	lsl.w	r5, r3, r6
 8009cb4:	432c      	orrs	r4, r5
 8009cb6:	40d3      	lsrs	r3, r2
 8009cb8:	6004      	str	r4, [r0, #0]
 8009cba:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cbe:	4288      	cmp	r0, r1
 8009cc0:	d3f4      	bcc.n	8009cac <L_shift+0xc>
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}

08009cc4 <__match>:
 8009cc4:	b530      	push	{r4, r5, lr}
 8009cc6:	6803      	ldr	r3, [r0, #0]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cce:	b914      	cbnz	r4, 8009cd6 <__match+0x12>
 8009cd0:	6003      	str	r3, [r0, #0]
 8009cd2:	2001      	movs	r0, #1
 8009cd4:	bd30      	pop	{r4, r5, pc}
 8009cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009cde:	2d19      	cmp	r5, #25
 8009ce0:	bf98      	it	ls
 8009ce2:	3220      	addls	r2, #32
 8009ce4:	42a2      	cmp	r2, r4
 8009ce6:	d0f0      	beq.n	8009cca <__match+0x6>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e7f3      	b.n	8009cd4 <__match+0x10>

08009cec <__hexnan>:
 8009cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	680b      	ldr	r3, [r1, #0]
 8009cf2:	115e      	asrs	r6, r3, #5
 8009cf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cf8:	f013 031f 	ands.w	r3, r3, #31
 8009cfc:	b087      	sub	sp, #28
 8009cfe:	bf18      	it	ne
 8009d00:	3604      	addne	r6, #4
 8009d02:	2500      	movs	r5, #0
 8009d04:	1f37      	subs	r7, r6, #4
 8009d06:	4690      	mov	r8, r2
 8009d08:	6802      	ldr	r2, [r0, #0]
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d12:	46b9      	mov	r9, r7
 8009d14:	463c      	mov	r4, r7
 8009d16:	9502      	str	r5, [sp, #8]
 8009d18:	46ab      	mov	fp, r5
 8009d1a:	7851      	ldrb	r1, [r2, #1]
 8009d1c:	1c53      	adds	r3, r2, #1
 8009d1e:	9303      	str	r3, [sp, #12]
 8009d20:	b341      	cbz	r1, 8009d74 <__hexnan+0x88>
 8009d22:	4608      	mov	r0, r1
 8009d24:	9205      	str	r2, [sp, #20]
 8009d26:	9104      	str	r1, [sp, #16]
 8009d28:	f7ff fd5e 	bl	80097e8 <__hexdig_fun>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d14f      	bne.n	8009dd0 <__hexnan+0xe4>
 8009d30:	9904      	ldr	r1, [sp, #16]
 8009d32:	9a05      	ldr	r2, [sp, #20]
 8009d34:	2920      	cmp	r1, #32
 8009d36:	d818      	bhi.n	8009d6a <__hexnan+0x7e>
 8009d38:	9b02      	ldr	r3, [sp, #8]
 8009d3a:	459b      	cmp	fp, r3
 8009d3c:	dd13      	ble.n	8009d66 <__hexnan+0x7a>
 8009d3e:	454c      	cmp	r4, r9
 8009d40:	d206      	bcs.n	8009d50 <__hexnan+0x64>
 8009d42:	2d07      	cmp	r5, #7
 8009d44:	dc04      	bgt.n	8009d50 <__hexnan+0x64>
 8009d46:	462a      	mov	r2, r5
 8009d48:	4649      	mov	r1, r9
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff ffa8 	bl	8009ca0 <L_shift>
 8009d50:	4544      	cmp	r4, r8
 8009d52:	d950      	bls.n	8009df6 <__hexnan+0x10a>
 8009d54:	2300      	movs	r3, #0
 8009d56:	f1a4 0904 	sub.w	r9, r4, #4
 8009d5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d5e:	f8cd b008 	str.w	fp, [sp, #8]
 8009d62:	464c      	mov	r4, r9
 8009d64:	461d      	mov	r5, r3
 8009d66:	9a03      	ldr	r2, [sp, #12]
 8009d68:	e7d7      	b.n	8009d1a <__hexnan+0x2e>
 8009d6a:	2929      	cmp	r1, #41	; 0x29
 8009d6c:	d156      	bne.n	8009e1c <__hexnan+0x130>
 8009d6e:	3202      	adds	r2, #2
 8009d70:	f8ca 2000 	str.w	r2, [sl]
 8009d74:	f1bb 0f00 	cmp.w	fp, #0
 8009d78:	d050      	beq.n	8009e1c <__hexnan+0x130>
 8009d7a:	454c      	cmp	r4, r9
 8009d7c:	d206      	bcs.n	8009d8c <__hexnan+0xa0>
 8009d7e:	2d07      	cmp	r5, #7
 8009d80:	dc04      	bgt.n	8009d8c <__hexnan+0xa0>
 8009d82:	462a      	mov	r2, r5
 8009d84:	4649      	mov	r1, r9
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7ff ff8a 	bl	8009ca0 <L_shift>
 8009d8c:	4544      	cmp	r4, r8
 8009d8e:	d934      	bls.n	8009dfa <__hexnan+0x10e>
 8009d90:	f1a8 0204 	sub.w	r2, r8, #4
 8009d94:	4623      	mov	r3, r4
 8009d96:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d9e:	429f      	cmp	r7, r3
 8009da0:	d2f9      	bcs.n	8009d96 <__hexnan+0xaa>
 8009da2:	1b3b      	subs	r3, r7, r4
 8009da4:	f023 0303 	bic.w	r3, r3, #3
 8009da8:	3304      	adds	r3, #4
 8009daa:	3401      	adds	r4, #1
 8009dac:	3e03      	subs	r6, #3
 8009dae:	42b4      	cmp	r4, r6
 8009db0:	bf88      	it	hi
 8009db2:	2304      	movhi	r3, #4
 8009db4:	4443      	add	r3, r8
 8009db6:	2200      	movs	r2, #0
 8009db8:	f843 2b04 	str.w	r2, [r3], #4
 8009dbc:	429f      	cmp	r7, r3
 8009dbe:	d2fb      	bcs.n	8009db8 <__hexnan+0xcc>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	b91b      	cbnz	r3, 8009dcc <__hexnan+0xe0>
 8009dc4:	4547      	cmp	r7, r8
 8009dc6:	d127      	bne.n	8009e18 <__hexnan+0x12c>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	2005      	movs	r0, #5
 8009dce:	e026      	b.n	8009e1e <__hexnan+0x132>
 8009dd0:	3501      	adds	r5, #1
 8009dd2:	2d08      	cmp	r5, #8
 8009dd4:	f10b 0b01 	add.w	fp, fp, #1
 8009dd8:	dd06      	ble.n	8009de8 <__hexnan+0xfc>
 8009dda:	4544      	cmp	r4, r8
 8009ddc:	d9c3      	bls.n	8009d66 <__hexnan+0x7a>
 8009dde:	2300      	movs	r3, #0
 8009de0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009de4:	2501      	movs	r5, #1
 8009de6:	3c04      	subs	r4, #4
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	f000 000f 	and.w	r0, r0, #15
 8009dee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009df2:	6022      	str	r2, [r4, #0]
 8009df4:	e7b7      	b.n	8009d66 <__hexnan+0x7a>
 8009df6:	2508      	movs	r5, #8
 8009df8:	e7b5      	b.n	8009d66 <__hexnan+0x7a>
 8009dfa:	9b01      	ldr	r3, [sp, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0df      	beq.n	8009dc0 <__hexnan+0xd4>
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	f1c3 0320 	rsb	r3, r3, #32
 8009e08:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e10:	401a      	ands	r2, r3
 8009e12:	f846 2c04 	str.w	r2, [r6, #-4]
 8009e16:	e7d3      	b.n	8009dc0 <__hexnan+0xd4>
 8009e18:	3f04      	subs	r7, #4
 8009e1a:	e7d1      	b.n	8009dc0 <__hexnan+0xd4>
 8009e1c:	2004      	movs	r0, #4
 8009e1e:	b007      	add	sp, #28
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e24 <_localeconv_r>:
 8009e24:	4800      	ldr	r0, [pc, #0]	; (8009e28 <_localeconv_r+0x4>)
 8009e26:	4770      	bx	lr
 8009e28:	20000960 	.word	0x20000960

08009e2c <_lseek_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_lseek_r+0x20>)
 8009e30:	4604      	mov	r4, r0
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f7f8 ff74 	bl	8002d28 <_lseek>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_lseek_r+0x1e>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_lseek_r+0x1e>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200010b4 	.word	0x200010b4

08009e50 <malloc>:
 8009e50:	4b02      	ldr	r3, [pc, #8]	; (8009e5c <malloc+0xc>)
 8009e52:	4601      	mov	r1, r0
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f000 bd67 	b.w	800a928 <_malloc_r>
 8009e5a:	bf00      	nop
 8009e5c:	20000808 	.word	0x20000808

08009e60 <__ascii_mbtowc>:
 8009e60:	b082      	sub	sp, #8
 8009e62:	b901      	cbnz	r1, 8009e66 <__ascii_mbtowc+0x6>
 8009e64:	a901      	add	r1, sp, #4
 8009e66:	b142      	cbz	r2, 8009e7a <__ascii_mbtowc+0x1a>
 8009e68:	b14b      	cbz	r3, 8009e7e <__ascii_mbtowc+0x1e>
 8009e6a:	7813      	ldrb	r3, [r2, #0]
 8009e6c:	600b      	str	r3, [r1, #0]
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	1e10      	subs	r0, r2, #0
 8009e72:	bf18      	it	ne
 8009e74:	2001      	movne	r0, #1
 8009e76:	b002      	add	sp, #8
 8009e78:	4770      	bx	lr
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	e7fb      	b.n	8009e76 <__ascii_mbtowc+0x16>
 8009e7e:	f06f 0001 	mvn.w	r0, #1
 8009e82:	e7f8      	b.n	8009e76 <__ascii_mbtowc+0x16>

08009e84 <memcpy>:
 8009e84:	440a      	add	r2, r1
 8009e86:	4291      	cmp	r1, r2
 8009e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e8c:	d100      	bne.n	8009e90 <memcpy+0xc>
 8009e8e:	4770      	bx	lr
 8009e90:	b510      	push	{r4, lr}
 8009e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e9a:	4291      	cmp	r1, r2
 8009e9c:	d1f9      	bne.n	8009e92 <memcpy+0xe>
 8009e9e:	bd10      	pop	{r4, pc}

08009ea0 <_Balloc>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	b976      	cbnz	r6, 8009ec8 <_Balloc+0x28>
 8009eaa:	2010      	movs	r0, #16
 8009eac:	f7ff ffd0 	bl	8009e50 <malloc>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	6260      	str	r0, [r4, #36]	; 0x24
 8009eb4:	b920      	cbnz	r0, 8009ec0 <_Balloc+0x20>
 8009eb6:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <_Balloc+0x78>)
 8009eb8:	4818      	ldr	r0, [pc, #96]	; (8009f1c <_Balloc+0x7c>)
 8009eba:	2166      	movs	r1, #102	; 0x66
 8009ebc:	f001 fb48 	bl	800b550 <__assert_func>
 8009ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ec4:	6006      	str	r6, [r0, #0]
 8009ec6:	60c6      	str	r6, [r0, #12]
 8009ec8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009eca:	68f3      	ldr	r3, [r6, #12]
 8009ecc:	b183      	cbz	r3, 8009ef0 <_Balloc+0x50>
 8009ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ed6:	b9b8      	cbnz	r0, 8009f08 <_Balloc+0x68>
 8009ed8:	2101      	movs	r1, #1
 8009eda:	fa01 f605 	lsl.w	r6, r1, r5
 8009ede:	1d72      	adds	r2, r6, #5
 8009ee0:	0092      	lsls	r2, r2, #2
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 fc9d 	bl	800a822 <_calloc_r>
 8009ee8:	b160      	cbz	r0, 8009f04 <_Balloc+0x64>
 8009eea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eee:	e00e      	b.n	8009f0e <_Balloc+0x6e>
 8009ef0:	2221      	movs	r2, #33	; 0x21
 8009ef2:	2104      	movs	r1, #4
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 fc94 	bl	800a822 <_calloc_r>
 8009efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009efc:	60f0      	str	r0, [r6, #12]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1e4      	bne.n	8009ece <_Balloc+0x2e>
 8009f04:	2000      	movs	r0, #0
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	6802      	ldr	r2, [r0, #0]
 8009f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f14:	e7f7      	b.n	8009f06 <_Balloc+0x66>
 8009f16:	bf00      	nop
 8009f18:	0800c216 	.word	0x0800c216
 8009f1c:	0800c314 	.word	0x0800c314

08009f20 <_Bfree>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f24:	4605      	mov	r5, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	b976      	cbnz	r6, 8009f48 <_Bfree+0x28>
 8009f2a:	2010      	movs	r0, #16
 8009f2c:	f7ff ff90 	bl	8009e50 <malloc>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6268      	str	r0, [r5, #36]	; 0x24
 8009f34:	b920      	cbnz	r0, 8009f40 <_Bfree+0x20>
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <_Bfree+0x3c>)
 8009f38:	4809      	ldr	r0, [pc, #36]	; (8009f60 <_Bfree+0x40>)
 8009f3a:	218a      	movs	r1, #138	; 0x8a
 8009f3c:	f001 fb08 	bl	800b550 <__assert_func>
 8009f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f44:	6006      	str	r6, [r0, #0]
 8009f46:	60c6      	str	r6, [r0, #12]
 8009f48:	b13c      	cbz	r4, 8009f5a <_Bfree+0x3a>
 8009f4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f4c:	6862      	ldr	r2, [r4, #4]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f54:	6021      	str	r1, [r4, #0]
 8009f56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	0800c216 	.word	0x0800c216
 8009f60:	0800c314 	.word	0x0800c314

08009f64 <__multadd>:
 8009f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f68:	690d      	ldr	r5, [r1, #16]
 8009f6a:	4607      	mov	r7, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	461e      	mov	r6, r3
 8009f70:	f101 0c14 	add.w	ip, r1, #20
 8009f74:	2000      	movs	r0, #0
 8009f76:	f8dc 3000 	ldr.w	r3, [ip]
 8009f7a:	b299      	uxth	r1, r3
 8009f7c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f80:	0c1e      	lsrs	r6, r3, #16
 8009f82:	0c0b      	lsrs	r3, r1, #16
 8009f84:	fb02 3306 	mla	r3, r2, r6, r3
 8009f88:	b289      	uxth	r1, r1
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f90:	4285      	cmp	r5, r0
 8009f92:	f84c 1b04 	str.w	r1, [ip], #4
 8009f96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f9a:	dcec      	bgt.n	8009f76 <__multadd+0x12>
 8009f9c:	b30e      	cbz	r6, 8009fe2 <__multadd+0x7e>
 8009f9e:	68a3      	ldr	r3, [r4, #8]
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	dc19      	bgt.n	8009fd8 <__multadd+0x74>
 8009fa4:	6861      	ldr	r1, [r4, #4]
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	3101      	adds	r1, #1
 8009faa:	f7ff ff79 	bl	8009ea0 <_Balloc>
 8009fae:	4680      	mov	r8, r0
 8009fb0:	b928      	cbnz	r0, 8009fbe <__multadd+0x5a>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <__multadd+0x84>)
 8009fb6:	480d      	ldr	r0, [pc, #52]	; (8009fec <__multadd+0x88>)
 8009fb8:	21b5      	movs	r1, #181	; 0xb5
 8009fba:	f001 fac9 	bl	800b550 <__assert_func>
 8009fbe:	6922      	ldr	r2, [r4, #16]
 8009fc0:	3202      	adds	r2, #2
 8009fc2:	f104 010c 	add.w	r1, r4, #12
 8009fc6:	0092      	lsls	r2, r2, #2
 8009fc8:	300c      	adds	r0, #12
 8009fca:	f7ff ff5b 	bl	8009e84 <memcpy>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff ffa5 	bl	8009f20 <_Bfree>
 8009fd6:	4644      	mov	r4, r8
 8009fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fdc:	3501      	adds	r5, #1
 8009fde:	615e      	str	r6, [r3, #20]
 8009fe0:	6125      	str	r5, [r4, #16]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe8:	0800c288 	.word	0x0800c288
 8009fec:	0800c314 	.word	0x0800c314

08009ff0 <__s2b>:
 8009ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	4615      	mov	r5, r2
 8009ff8:	461f      	mov	r7, r3
 8009ffa:	2209      	movs	r2, #9
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	4606      	mov	r6, r0
 800a000:	fb93 f3f2 	sdiv	r3, r3, r2
 800a004:	2100      	movs	r1, #0
 800a006:	2201      	movs	r2, #1
 800a008:	429a      	cmp	r2, r3
 800a00a:	db09      	blt.n	800a020 <__s2b+0x30>
 800a00c:	4630      	mov	r0, r6
 800a00e:	f7ff ff47 	bl	8009ea0 <_Balloc>
 800a012:	b940      	cbnz	r0, 800a026 <__s2b+0x36>
 800a014:	4602      	mov	r2, r0
 800a016:	4b19      	ldr	r3, [pc, #100]	; (800a07c <__s2b+0x8c>)
 800a018:	4819      	ldr	r0, [pc, #100]	; (800a080 <__s2b+0x90>)
 800a01a:	21ce      	movs	r1, #206	; 0xce
 800a01c:	f001 fa98 	bl	800b550 <__assert_func>
 800a020:	0052      	lsls	r2, r2, #1
 800a022:	3101      	adds	r1, #1
 800a024:	e7f0      	b.n	800a008 <__s2b+0x18>
 800a026:	9b08      	ldr	r3, [sp, #32]
 800a028:	6143      	str	r3, [r0, #20]
 800a02a:	2d09      	cmp	r5, #9
 800a02c:	f04f 0301 	mov.w	r3, #1
 800a030:	6103      	str	r3, [r0, #16]
 800a032:	dd16      	ble.n	800a062 <__s2b+0x72>
 800a034:	f104 0909 	add.w	r9, r4, #9
 800a038:	46c8      	mov	r8, r9
 800a03a:	442c      	add	r4, r5
 800a03c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a040:	4601      	mov	r1, r0
 800a042:	3b30      	subs	r3, #48	; 0x30
 800a044:	220a      	movs	r2, #10
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ff8c 	bl	8009f64 <__multadd>
 800a04c:	45a0      	cmp	r8, r4
 800a04e:	d1f5      	bne.n	800a03c <__s2b+0x4c>
 800a050:	f1a5 0408 	sub.w	r4, r5, #8
 800a054:	444c      	add	r4, r9
 800a056:	1b2d      	subs	r5, r5, r4
 800a058:	1963      	adds	r3, r4, r5
 800a05a:	42bb      	cmp	r3, r7
 800a05c:	db04      	blt.n	800a068 <__s2b+0x78>
 800a05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a062:	340a      	adds	r4, #10
 800a064:	2509      	movs	r5, #9
 800a066:	e7f6      	b.n	800a056 <__s2b+0x66>
 800a068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a06c:	4601      	mov	r1, r0
 800a06e:	3b30      	subs	r3, #48	; 0x30
 800a070:	220a      	movs	r2, #10
 800a072:	4630      	mov	r0, r6
 800a074:	f7ff ff76 	bl	8009f64 <__multadd>
 800a078:	e7ee      	b.n	800a058 <__s2b+0x68>
 800a07a:	bf00      	nop
 800a07c:	0800c288 	.word	0x0800c288
 800a080:	0800c314 	.word	0x0800c314

0800a084 <__hi0bits>:
 800a084:	0c03      	lsrs	r3, r0, #16
 800a086:	041b      	lsls	r3, r3, #16
 800a088:	b9d3      	cbnz	r3, 800a0c0 <__hi0bits+0x3c>
 800a08a:	0400      	lsls	r0, r0, #16
 800a08c:	2310      	movs	r3, #16
 800a08e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a092:	bf04      	itt	eq
 800a094:	0200      	lsleq	r0, r0, #8
 800a096:	3308      	addeq	r3, #8
 800a098:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a09c:	bf04      	itt	eq
 800a09e:	0100      	lsleq	r0, r0, #4
 800a0a0:	3304      	addeq	r3, #4
 800a0a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a0a6:	bf04      	itt	eq
 800a0a8:	0080      	lsleq	r0, r0, #2
 800a0aa:	3302      	addeq	r3, #2
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	db05      	blt.n	800a0bc <__hi0bits+0x38>
 800a0b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a0b4:	f103 0301 	add.w	r3, r3, #1
 800a0b8:	bf08      	it	eq
 800a0ba:	2320      	moveq	r3, #32
 800a0bc:	4618      	mov	r0, r3
 800a0be:	4770      	bx	lr
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e7e4      	b.n	800a08e <__hi0bits+0xa>

0800a0c4 <__lo0bits>:
 800a0c4:	6803      	ldr	r3, [r0, #0]
 800a0c6:	f013 0207 	ands.w	r2, r3, #7
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	d00b      	beq.n	800a0e6 <__lo0bits+0x22>
 800a0ce:	07da      	lsls	r2, r3, #31
 800a0d0:	d423      	bmi.n	800a11a <__lo0bits+0x56>
 800a0d2:	0798      	lsls	r0, r3, #30
 800a0d4:	bf49      	itett	mi
 800a0d6:	085b      	lsrmi	r3, r3, #1
 800a0d8:	089b      	lsrpl	r3, r3, #2
 800a0da:	2001      	movmi	r0, #1
 800a0dc:	600b      	strmi	r3, [r1, #0]
 800a0de:	bf5c      	itt	pl
 800a0e0:	600b      	strpl	r3, [r1, #0]
 800a0e2:	2002      	movpl	r0, #2
 800a0e4:	4770      	bx	lr
 800a0e6:	b298      	uxth	r0, r3
 800a0e8:	b9a8      	cbnz	r0, 800a116 <__lo0bits+0x52>
 800a0ea:	0c1b      	lsrs	r3, r3, #16
 800a0ec:	2010      	movs	r0, #16
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	b90a      	cbnz	r2, 800a0f6 <__lo0bits+0x32>
 800a0f2:	3008      	adds	r0, #8
 800a0f4:	0a1b      	lsrs	r3, r3, #8
 800a0f6:	071a      	lsls	r2, r3, #28
 800a0f8:	bf04      	itt	eq
 800a0fa:	091b      	lsreq	r3, r3, #4
 800a0fc:	3004      	addeq	r0, #4
 800a0fe:	079a      	lsls	r2, r3, #30
 800a100:	bf04      	itt	eq
 800a102:	089b      	lsreq	r3, r3, #2
 800a104:	3002      	addeq	r0, #2
 800a106:	07da      	lsls	r2, r3, #31
 800a108:	d403      	bmi.n	800a112 <__lo0bits+0x4e>
 800a10a:	085b      	lsrs	r3, r3, #1
 800a10c:	f100 0001 	add.w	r0, r0, #1
 800a110:	d005      	beq.n	800a11e <__lo0bits+0x5a>
 800a112:	600b      	str	r3, [r1, #0]
 800a114:	4770      	bx	lr
 800a116:	4610      	mov	r0, r2
 800a118:	e7e9      	b.n	800a0ee <__lo0bits+0x2a>
 800a11a:	2000      	movs	r0, #0
 800a11c:	4770      	bx	lr
 800a11e:	2020      	movs	r0, #32
 800a120:	4770      	bx	lr
	...

0800a124 <__i2b>:
 800a124:	b510      	push	{r4, lr}
 800a126:	460c      	mov	r4, r1
 800a128:	2101      	movs	r1, #1
 800a12a:	f7ff feb9 	bl	8009ea0 <_Balloc>
 800a12e:	4602      	mov	r2, r0
 800a130:	b928      	cbnz	r0, 800a13e <__i2b+0x1a>
 800a132:	4b05      	ldr	r3, [pc, #20]	; (800a148 <__i2b+0x24>)
 800a134:	4805      	ldr	r0, [pc, #20]	; (800a14c <__i2b+0x28>)
 800a136:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a13a:	f001 fa09 	bl	800b550 <__assert_func>
 800a13e:	2301      	movs	r3, #1
 800a140:	6144      	str	r4, [r0, #20]
 800a142:	6103      	str	r3, [r0, #16]
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	0800c288 	.word	0x0800c288
 800a14c:	0800c314 	.word	0x0800c314

0800a150 <__multiply>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4691      	mov	r9, r2
 800a156:	690a      	ldr	r2, [r1, #16]
 800a158:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	bfb8      	it	lt
 800a160:	460b      	movlt	r3, r1
 800a162:	460c      	mov	r4, r1
 800a164:	bfbc      	itt	lt
 800a166:	464c      	movlt	r4, r9
 800a168:	4699      	movlt	r9, r3
 800a16a:	6927      	ldr	r7, [r4, #16]
 800a16c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a170:	68a3      	ldr	r3, [r4, #8]
 800a172:	6861      	ldr	r1, [r4, #4]
 800a174:	eb07 060a 	add.w	r6, r7, sl
 800a178:	42b3      	cmp	r3, r6
 800a17a:	b085      	sub	sp, #20
 800a17c:	bfb8      	it	lt
 800a17e:	3101      	addlt	r1, #1
 800a180:	f7ff fe8e 	bl	8009ea0 <_Balloc>
 800a184:	b930      	cbnz	r0, 800a194 <__multiply+0x44>
 800a186:	4602      	mov	r2, r0
 800a188:	4b44      	ldr	r3, [pc, #272]	; (800a29c <__multiply+0x14c>)
 800a18a:	4845      	ldr	r0, [pc, #276]	; (800a2a0 <__multiply+0x150>)
 800a18c:	f240 115d 	movw	r1, #349	; 0x15d
 800a190:	f001 f9de 	bl	800b550 <__assert_func>
 800a194:	f100 0514 	add.w	r5, r0, #20
 800a198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a19c:	462b      	mov	r3, r5
 800a19e:	2200      	movs	r2, #0
 800a1a0:	4543      	cmp	r3, r8
 800a1a2:	d321      	bcc.n	800a1e8 <__multiply+0x98>
 800a1a4:	f104 0314 	add.w	r3, r4, #20
 800a1a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a1ac:	f109 0314 	add.w	r3, r9, #20
 800a1b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a1b4:	9202      	str	r2, [sp, #8]
 800a1b6:	1b3a      	subs	r2, r7, r4
 800a1b8:	3a15      	subs	r2, #21
 800a1ba:	f022 0203 	bic.w	r2, r2, #3
 800a1be:	3204      	adds	r2, #4
 800a1c0:	f104 0115 	add.w	r1, r4, #21
 800a1c4:	428f      	cmp	r7, r1
 800a1c6:	bf38      	it	cc
 800a1c8:	2204      	movcc	r2, #4
 800a1ca:	9201      	str	r2, [sp, #4]
 800a1cc:	9a02      	ldr	r2, [sp, #8]
 800a1ce:	9303      	str	r3, [sp, #12]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d80c      	bhi.n	800a1ee <__multiply+0x9e>
 800a1d4:	2e00      	cmp	r6, #0
 800a1d6:	dd03      	ble.n	800a1e0 <__multiply+0x90>
 800a1d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d05a      	beq.n	800a296 <__multiply+0x146>
 800a1e0:	6106      	str	r6, [r0, #16]
 800a1e2:	b005      	add	sp, #20
 800a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e8:	f843 2b04 	str.w	r2, [r3], #4
 800a1ec:	e7d8      	b.n	800a1a0 <__multiply+0x50>
 800a1ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1f2:	f1ba 0f00 	cmp.w	sl, #0
 800a1f6:	d024      	beq.n	800a242 <__multiply+0xf2>
 800a1f8:	f104 0e14 	add.w	lr, r4, #20
 800a1fc:	46a9      	mov	r9, r5
 800a1fe:	f04f 0c00 	mov.w	ip, #0
 800a202:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a206:	f8d9 1000 	ldr.w	r1, [r9]
 800a20a:	fa1f fb82 	uxth.w	fp, r2
 800a20e:	b289      	uxth	r1, r1
 800a210:	fb0a 110b 	mla	r1, sl, fp, r1
 800a214:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a218:	f8d9 2000 	ldr.w	r2, [r9]
 800a21c:	4461      	add	r1, ip
 800a21e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a222:	fb0a c20b 	mla	r2, sl, fp, ip
 800a226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a22a:	b289      	uxth	r1, r1
 800a22c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a230:	4577      	cmp	r7, lr
 800a232:	f849 1b04 	str.w	r1, [r9], #4
 800a236:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a23a:	d8e2      	bhi.n	800a202 <__multiply+0xb2>
 800a23c:	9a01      	ldr	r2, [sp, #4]
 800a23e:	f845 c002 	str.w	ip, [r5, r2]
 800a242:	9a03      	ldr	r2, [sp, #12]
 800a244:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a248:	3304      	adds	r3, #4
 800a24a:	f1b9 0f00 	cmp.w	r9, #0
 800a24e:	d020      	beq.n	800a292 <__multiply+0x142>
 800a250:	6829      	ldr	r1, [r5, #0]
 800a252:	f104 0c14 	add.w	ip, r4, #20
 800a256:	46ae      	mov	lr, r5
 800a258:	f04f 0a00 	mov.w	sl, #0
 800a25c:	f8bc b000 	ldrh.w	fp, [ip]
 800a260:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a264:	fb09 220b 	mla	r2, r9, fp, r2
 800a268:	4492      	add	sl, r2
 800a26a:	b289      	uxth	r1, r1
 800a26c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a270:	f84e 1b04 	str.w	r1, [lr], #4
 800a274:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a278:	f8be 1000 	ldrh.w	r1, [lr]
 800a27c:	0c12      	lsrs	r2, r2, #16
 800a27e:	fb09 1102 	mla	r1, r9, r2, r1
 800a282:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a286:	4567      	cmp	r7, ip
 800a288:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a28c:	d8e6      	bhi.n	800a25c <__multiply+0x10c>
 800a28e:	9a01      	ldr	r2, [sp, #4]
 800a290:	50a9      	str	r1, [r5, r2]
 800a292:	3504      	adds	r5, #4
 800a294:	e79a      	b.n	800a1cc <__multiply+0x7c>
 800a296:	3e01      	subs	r6, #1
 800a298:	e79c      	b.n	800a1d4 <__multiply+0x84>
 800a29a:	bf00      	nop
 800a29c:	0800c288 	.word	0x0800c288
 800a2a0:	0800c314 	.word	0x0800c314

0800a2a4 <__pow5mult>:
 800a2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	4615      	mov	r5, r2
 800a2aa:	f012 0203 	ands.w	r2, r2, #3
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	d007      	beq.n	800a2c4 <__pow5mult+0x20>
 800a2b4:	4c25      	ldr	r4, [pc, #148]	; (800a34c <__pow5mult+0xa8>)
 800a2b6:	3a01      	subs	r2, #1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2be:	f7ff fe51 	bl	8009f64 <__multadd>
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	10ad      	asrs	r5, r5, #2
 800a2c6:	d03d      	beq.n	800a344 <__pow5mult+0xa0>
 800a2c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2ca:	b97c      	cbnz	r4, 800a2ec <__pow5mult+0x48>
 800a2cc:	2010      	movs	r0, #16
 800a2ce:	f7ff fdbf 	bl	8009e50 <malloc>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	6270      	str	r0, [r6, #36]	; 0x24
 800a2d6:	b928      	cbnz	r0, 800a2e4 <__pow5mult+0x40>
 800a2d8:	4b1d      	ldr	r3, [pc, #116]	; (800a350 <__pow5mult+0xac>)
 800a2da:	481e      	ldr	r0, [pc, #120]	; (800a354 <__pow5mult+0xb0>)
 800a2dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a2e0:	f001 f936 	bl	800b550 <__assert_func>
 800a2e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2e8:	6004      	str	r4, [r0, #0]
 800a2ea:	60c4      	str	r4, [r0, #12]
 800a2ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2f4:	b94c      	cbnz	r4, 800a30a <__pow5mult+0x66>
 800a2f6:	f240 2171 	movw	r1, #625	; 0x271
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7ff ff12 	bl	800a124 <__i2b>
 800a300:	2300      	movs	r3, #0
 800a302:	f8c8 0008 	str.w	r0, [r8, #8]
 800a306:	4604      	mov	r4, r0
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	f04f 0900 	mov.w	r9, #0
 800a30e:	07eb      	lsls	r3, r5, #31
 800a310:	d50a      	bpl.n	800a328 <__pow5mult+0x84>
 800a312:	4639      	mov	r1, r7
 800a314:	4622      	mov	r2, r4
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff ff1a 	bl	800a150 <__multiply>
 800a31c:	4639      	mov	r1, r7
 800a31e:	4680      	mov	r8, r0
 800a320:	4630      	mov	r0, r6
 800a322:	f7ff fdfd 	bl	8009f20 <_Bfree>
 800a326:	4647      	mov	r7, r8
 800a328:	106d      	asrs	r5, r5, #1
 800a32a:	d00b      	beq.n	800a344 <__pow5mult+0xa0>
 800a32c:	6820      	ldr	r0, [r4, #0]
 800a32e:	b938      	cbnz	r0, 800a340 <__pow5mult+0x9c>
 800a330:	4622      	mov	r2, r4
 800a332:	4621      	mov	r1, r4
 800a334:	4630      	mov	r0, r6
 800a336:	f7ff ff0b 	bl	800a150 <__multiply>
 800a33a:	6020      	str	r0, [r4, #0]
 800a33c:	f8c0 9000 	str.w	r9, [r0]
 800a340:	4604      	mov	r4, r0
 800a342:	e7e4      	b.n	800a30e <__pow5mult+0x6a>
 800a344:	4638      	mov	r0, r7
 800a346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34a:	bf00      	nop
 800a34c:	0800c460 	.word	0x0800c460
 800a350:	0800c216 	.word	0x0800c216
 800a354:	0800c314 	.word	0x0800c314

0800a358 <__lshift>:
 800a358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	460c      	mov	r4, r1
 800a35e:	6849      	ldr	r1, [r1, #4]
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a366:	68a3      	ldr	r3, [r4, #8]
 800a368:	4607      	mov	r7, r0
 800a36a:	4691      	mov	r9, r2
 800a36c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a370:	f108 0601 	add.w	r6, r8, #1
 800a374:	42b3      	cmp	r3, r6
 800a376:	db0b      	blt.n	800a390 <__lshift+0x38>
 800a378:	4638      	mov	r0, r7
 800a37a:	f7ff fd91 	bl	8009ea0 <_Balloc>
 800a37e:	4605      	mov	r5, r0
 800a380:	b948      	cbnz	r0, 800a396 <__lshift+0x3e>
 800a382:	4602      	mov	r2, r0
 800a384:	4b2a      	ldr	r3, [pc, #168]	; (800a430 <__lshift+0xd8>)
 800a386:	482b      	ldr	r0, [pc, #172]	; (800a434 <__lshift+0xdc>)
 800a388:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a38c:	f001 f8e0 	bl	800b550 <__assert_func>
 800a390:	3101      	adds	r1, #1
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	e7ee      	b.n	800a374 <__lshift+0x1c>
 800a396:	2300      	movs	r3, #0
 800a398:	f100 0114 	add.w	r1, r0, #20
 800a39c:	f100 0210 	add.w	r2, r0, #16
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	4553      	cmp	r3, sl
 800a3a4:	db37      	blt.n	800a416 <__lshift+0xbe>
 800a3a6:	6920      	ldr	r0, [r4, #16]
 800a3a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3ac:	f104 0314 	add.w	r3, r4, #20
 800a3b0:	f019 091f 	ands.w	r9, r9, #31
 800a3b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3bc:	d02f      	beq.n	800a41e <__lshift+0xc6>
 800a3be:	f1c9 0e20 	rsb	lr, r9, #32
 800a3c2:	468a      	mov	sl, r1
 800a3c4:	f04f 0c00 	mov.w	ip, #0
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	fa02 f209 	lsl.w	r2, r2, r9
 800a3ce:	ea42 020c 	orr.w	r2, r2, ip
 800a3d2:	f84a 2b04 	str.w	r2, [sl], #4
 800a3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3da:	4298      	cmp	r0, r3
 800a3dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a3e0:	d8f2      	bhi.n	800a3c8 <__lshift+0x70>
 800a3e2:	1b03      	subs	r3, r0, r4
 800a3e4:	3b15      	subs	r3, #21
 800a3e6:	f023 0303 	bic.w	r3, r3, #3
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	f104 0215 	add.w	r2, r4, #21
 800a3f0:	4290      	cmp	r0, r2
 800a3f2:	bf38      	it	cc
 800a3f4:	2304      	movcc	r3, #4
 800a3f6:	f841 c003 	str.w	ip, [r1, r3]
 800a3fa:	f1bc 0f00 	cmp.w	ip, #0
 800a3fe:	d001      	beq.n	800a404 <__lshift+0xac>
 800a400:	f108 0602 	add.w	r6, r8, #2
 800a404:	3e01      	subs	r6, #1
 800a406:	4638      	mov	r0, r7
 800a408:	612e      	str	r6, [r5, #16]
 800a40a:	4621      	mov	r1, r4
 800a40c:	f7ff fd88 	bl	8009f20 <_Bfree>
 800a410:	4628      	mov	r0, r5
 800a412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a416:	f842 0f04 	str.w	r0, [r2, #4]!
 800a41a:	3301      	adds	r3, #1
 800a41c:	e7c1      	b.n	800a3a2 <__lshift+0x4a>
 800a41e:	3904      	subs	r1, #4
 800a420:	f853 2b04 	ldr.w	r2, [r3], #4
 800a424:	f841 2f04 	str.w	r2, [r1, #4]!
 800a428:	4298      	cmp	r0, r3
 800a42a:	d8f9      	bhi.n	800a420 <__lshift+0xc8>
 800a42c:	e7ea      	b.n	800a404 <__lshift+0xac>
 800a42e:	bf00      	nop
 800a430:	0800c288 	.word	0x0800c288
 800a434:	0800c314 	.word	0x0800c314

0800a438 <__mcmp>:
 800a438:	b530      	push	{r4, r5, lr}
 800a43a:	6902      	ldr	r2, [r0, #16]
 800a43c:	690c      	ldr	r4, [r1, #16]
 800a43e:	1b12      	subs	r2, r2, r4
 800a440:	d10e      	bne.n	800a460 <__mcmp+0x28>
 800a442:	f100 0314 	add.w	r3, r0, #20
 800a446:	3114      	adds	r1, #20
 800a448:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a44c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a450:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a454:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a458:	42a5      	cmp	r5, r4
 800a45a:	d003      	beq.n	800a464 <__mcmp+0x2c>
 800a45c:	d305      	bcc.n	800a46a <__mcmp+0x32>
 800a45e:	2201      	movs	r2, #1
 800a460:	4610      	mov	r0, r2
 800a462:	bd30      	pop	{r4, r5, pc}
 800a464:	4283      	cmp	r3, r0
 800a466:	d3f3      	bcc.n	800a450 <__mcmp+0x18>
 800a468:	e7fa      	b.n	800a460 <__mcmp+0x28>
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295
 800a46e:	e7f7      	b.n	800a460 <__mcmp+0x28>

0800a470 <__mdiff>:
 800a470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	460c      	mov	r4, r1
 800a476:	4606      	mov	r6, r0
 800a478:	4611      	mov	r1, r2
 800a47a:	4620      	mov	r0, r4
 800a47c:	4690      	mov	r8, r2
 800a47e:	f7ff ffdb 	bl	800a438 <__mcmp>
 800a482:	1e05      	subs	r5, r0, #0
 800a484:	d110      	bne.n	800a4a8 <__mdiff+0x38>
 800a486:	4629      	mov	r1, r5
 800a488:	4630      	mov	r0, r6
 800a48a:	f7ff fd09 	bl	8009ea0 <_Balloc>
 800a48e:	b930      	cbnz	r0, 800a49e <__mdiff+0x2e>
 800a490:	4b3a      	ldr	r3, [pc, #232]	; (800a57c <__mdiff+0x10c>)
 800a492:	4602      	mov	r2, r0
 800a494:	f240 2132 	movw	r1, #562	; 0x232
 800a498:	4839      	ldr	r0, [pc, #228]	; (800a580 <__mdiff+0x110>)
 800a49a:	f001 f859 	bl	800b550 <__assert_func>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	bfa4      	itt	ge
 800a4aa:	4643      	movge	r3, r8
 800a4ac:	46a0      	movge	r8, r4
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4b4:	bfa6      	itte	ge
 800a4b6:	461c      	movge	r4, r3
 800a4b8:	2500      	movge	r5, #0
 800a4ba:	2501      	movlt	r5, #1
 800a4bc:	f7ff fcf0 	bl	8009ea0 <_Balloc>
 800a4c0:	b920      	cbnz	r0, 800a4cc <__mdiff+0x5c>
 800a4c2:	4b2e      	ldr	r3, [pc, #184]	; (800a57c <__mdiff+0x10c>)
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a4ca:	e7e5      	b.n	800a498 <__mdiff+0x28>
 800a4cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4d0:	6926      	ldr	r6, [r4, #16]
 800a4d2:	60c5      	str	r5, [r0, #12]
 800a4d4:	f104 0914 	add.w	r9, r4, #20
 800a4d8:	f108 0514 	add.w	r5, r8, #20
 800a4dc:	f100 0e14 	add.w	lr, r0, #20
 800a4e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4e8:	f108 0210 	add.w	r2, r8, #16
 800a4ec:	46f2      	mov	sl, lr
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4f8:	fa1f f883 	uxth.w	r8, r3
 800a4fc:	fa11 f18b 	uxtah	r1, r1, fp
 800a500:	0c1b      	lsrs	r3, r3, #16
 800a502:	eba1 0808 	sub.w	r8, r1, r8
 800a506:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a50a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a50e:	fa1f f888 	uxth.w	r8, r8
 800a512:	1419      	asrs	r1, r3, #16
 800a514:	454e      	cmp	r6, r9
 800a516:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a51a:	f84a 3b04 	str.w	r3, [sl], #4
 800a51e:	d8e7      	bhi.n	800a4f0 <__mdiff+0x80>
 800a520:	1b33      	subs	r3, r6, r4
 800a522:	3b15      	subs	r3, #21
 800a524:	f023 0303 	bic.w	r3, r3, #3
 800a528:	3304      	adds	r3, #4
 800a52a:	3415      	adds	r4, #21
 800a52c:	42a6      	cmp	r6, r4
 800a52e:	bf38      	it	cc
 800a530:	2304      	movcc	r3, #4
 800a532:	441d      	add	r5, r3
 800a534:	4473      	add	r3, lr
 800a536:	469e      	mov	lr, r3
 800a538:	462e      	mov	r6, r5
 800a53a:	4566      	cmp	r6, ip
 800a53c:	d30e      	bcc.n	800a55c <__mdiff+0xec>
 800a53e:	f10c 0203 	add.w	r2, ip, #3
 800a542:	1b52      	subs	r2, r2, r5
 800a544:	f022 0203 	bic.w	r2, r2, #3
 800a548:	3d03      	subs	r5, #3
 800a54a:	45ac      	cmp	ip, r5
 800a54c:	bf38      	it	cc
 800a54e:	2200      	movcc	r2, #0
 800a550:	441a      	add	r2, r3
 800a552:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a556:	b17b      	cbz	r3, 800a578 <__mdiff+0x108>
 800a558:	6107      	str	r7, [r0, #16]
 800a55a:	e7a3      	b.n	800a4a4 <__mdiff+0x34>
 800a55c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a560:	fa11 f288 	uxtah	r2, r1, r8
 800a564:	1414      	asrs	r4, r2, #16
 800a566:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a56a:	b292      	uxth	r2, r2
 800a56c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a570:	f84e 2b04 	str.w	r2, [lr], #4
 800a574:	1421      	asrs	r1, r4, #16
 800a576:	e7e0      	b.n	800a53a <__mdiff+0xca>
 800a578:	3f01      	subs	r7, #1
 800a57a:	e7ea      	b.n	800a552 <__mdiff+0xe2>
 800a57c:	0800c288 	.word	0x0800c288
 800a580:	0800c314 	.word	0x0800c314

0800a584 <__ulp>:
 800a584:	b082      	sub	sp, #8
 800a586:	ed8d 0b00 	vstr	d0, [sp]
 800a58a:	9b01      	ldr	r3, [sp, #4]
 800a58c:	4912      	ldr	r1, [pc, #72]	; (800a5d8 <__ulp+0x54>)
 800a58e:	4019      	ands	r1, r3
 800a590:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a594:	2900      	cmp	r1, #0
 800a596:	dd05      	ble.n	800a5a4 <__ulp+0x20>
 800a598:	2200      	movs	r2, #0
 800a59a:	460b      	mov	r3, r1
 800a59c:	ec43 2b10 	vmov	d0, r2, r3
 800a5a0:	b002      	add	sp, #8
 800a5a2:	4770      	bx	lr
 800a5a4:	4249      	negs	r1, r1
 800a5a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a5aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	f04f 0300 	mov.w	r3, #0
 800a5b6:	da04      	bge.n	800a5c2 <__ulp+0x3e>
 800a5b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a5bc:	fa41 f300 	asr.w	r3, r1, r0
 800a5c0:	e7ec      	b.n	800a59c <__ulp+0x18>
 800a5c2:	f1a0 0114 	sub.w	r1, r0, #20
 800a5c6:	291e      	cmp	r1, #30
 800a5c8:	bfda      	itte	le
 800a5ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a5ce:	fa20 f101 	lsrle.w	r1, r0, r1
 800a5d2:	2101      	movgt	r1, #1
 800a5d4:	460a      	mov	r2, r1
 800a5d6:	e7e1      	b.n	800a59c <__ulp+0x18>
 800a5d8:	7ff00000 	.word	0x7ff00000

0800a5dc <__b2d>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	6905      	ldr	r5, [r0, #16]
 800a5e0:	f100 0714 	add.w	r7, r0, #20
 800a5e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a5e8:	1f2e      	subs	r6, r5, #4
 800a5ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f7ff fd48 	bl	800a084 <__hi0bits>
 800a5f4:	f1c0 0320 	rsb	r3, r0, #32
 800a5f8:	280a      	cmp	r0, #10
 800a5fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a678 <__b2d+0x9c>
 800a5fe:	600b      	str	r3, [r1, #0]
 800a600:	dc14      	bgt.n	800a62c <__b2d+0x50>
 800a602:	f1c0 0e0b 	rsb	lr, r0, #11
 800a606:	fa24 f10e 	lsr.w	r1, r4, lr
 800a60a:	42b7      	cmp	r7, r6
 800a60c:	ea41 030c 	orr.w	r3, r1, ip
 800a610:	bf34      	ite	cc
 800a612:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a616:	2100      	movcs	r1, #0
 800a618:	3015      	adds	r0, #21
 800a61a:	fa04 f000 	lsl.w	r0, r4, r0
 800a61e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a622:	ea40 0201 	orr.w	r2, r0, r1
 800a626:	ec43 2b10 	vmov	d0, r2, r3
 800a62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a62c:	42b7      	cmp	r7, r6
 800a62e:	bf3a      	itte	cc
 800a630:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a634:	f1a5 0608 	subcc.w	r6, r5, #8
 800a638:	2100      	movcs	r1, #0
 800a63a:	380b      	subs	r0, #11
 800a63c:	d017      	beq.n	800a66e <__b2d+0x92>
 800a63e:	f1c0 0c20 	rsb	ip, r0, #32
 800a642:	fa04 f500 	lsl.w	r5, r4, r0
 800a646:	42be      	cmp	r6, r7
 800a648:	fa21 f40c 	lsr.w	r4, r1, ip
 800a64c:	ea45 0504 	orr.w	r5, r5, r4
 800a650:	bf8c      	ite	hi
 800a652:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a656:	2400      	movls	r4, #0
 800a658:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a65c:	fa01 f000 	lsl.w	r0, r1, r0
 800a660:	fa24 f40c 	lsr.w	r4, r4, ip
 800a664:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a668:	ea40 0204 	orr.w	r2, r0, r4
 800a66c:	e7db      	b.n	800a626 <__b2d+0x4a>
 800a66e:	ea44 030c 	orr.w	r3, r4, ip
 800a672:	460a      	mov	r2, r1
 800a674:	e7d7      	b.n	800a626 <__b2d+0x4a>
 800a676:	bf00      	nop
 800a678:	3ff00000 	.word	0x3ff00000

0800a67c <__d2b>:
 800a67c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4689      	mov	r9, r1
 800a682:	2101      	movs	r1, #1
 800a684:	ec57 6b10 	vmov	r6, r7, d0
 800a688:	4690      	mov	r8, r2
 800a68a:	f7ff fc09 	bl	8009ea0 <_Balloc>
 800a68e:	4604      	mov	r4, r0
 800a690:	b930      	cbnz	r0, 800a6a0 <__d2b+0x24>
 800a692:	4602      	mov	r2, r0
 800a694:	4b25      	ldr	r3, [pc, #148]	; (800a72c <__d2b+0xb0>)
 800a696:	4826      	ldr	r0, [pc, #152]	; (800a730 <__d2b+0xb4>)
 800a698:	f240 310a 	movw	r1, #778	; 0x30a
 800a69c:	f000 ff58 	bl	800b550 <__assert_func>
 800a6a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a6a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6a8:	bb35      	cbnz	r5, 800a6f8 <__d2b+0x7c>
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	d028      	beq.n	800a702 <__d2b+0x86>
 800a6b0:	4668      	mov	r0, sp
 800a6b2:	9600      	str	r6, [sp, #0]
 800a6b4:	f7ff fd06 	bl	800a0c4 <__lo0bits>
 800a6b8:	9900      	ldr	r1, [sp, #0]
 800a6ba:	b300      	cbz	r0, 800a6fe <__d2b+0x82>
 800a6bc:	9a01      	ldr	r2, [sp, #4]
 800a6be:	f1c0 0320 	rsb	r3, r0, #32
 800a6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	40c2      	lsrs	r2, r0
 800a6ca:	6163      	str	r3, [r4, #20]
 800a6cc:	9201      	str	r2, [sp, #4]
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	61a3      	str	r3, [r4, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	bf14      	ite	ne
 800a6d6:	2202      	movne	r2, #2
 800a6d8:	2201      	moveq	r2, #1
 800a6da:	6122      	str	r2, [r4, #16]
 800a6dc:	b1d5      	cbz	r5, 800a714 <__d2b+0x98>
 800a6de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6e2:	4405      	add	r5, r0
 800a6e4:	f8c9 5000 	str.w	r5, [r9]
 800a6e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6ec:	f8c8 0000 	str.w	r0, [r8]
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	b003      	add	sp, #12
 800a6f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6fc:	e7d5      	b.n	800a6aa <__d2b+0x2e>
 800a6fe:	6161      	str	r1, [r4, #20]
 800a700:	e7e5      	b.n	800a6ce <__d2b+0x52>
 800a702:	a801      	add	r0, sp, #4
 800a704:	f7ff fcde 	bl	800a0c4 <__lo0bits>
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	6163      	str	r3, [r4, #20]
 800a70c:	2201      	movs	r2, #1
 800a70e:	6122      	str	r2, [r4, #16]
 800a710:	3020      	adds	r0, #32
 800a712:	e7e3      	b.n	800a6dc <__d2b+0x60>
 800a714:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a71c:	f8c9 0000 	str.w	r0, [r9]
 800a720:	6918      	ldr	r0, [r3, #16]
 800a722:	f7ff fcaf 	bl	800a084 <__hi0bits>
 800a726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a72a:	e7df      	b.n	800a6ec <__d2b+0x70>
 800a72c:	0800c288 	.word	0x0800c288
 800a730:	0800c314 	.word	0x0800c314

0800a734 <__ratio>:
 800a734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	4688      	mov	r8, r1
 800a73a:	4669      	mov	r1, sp
 800a73c:	4681      	mov	r9, r0
 800a73e:	f7ff ff4d 	bl	800a5dc <__b2d>
 800a742:	a901      	add	r1, sp, #4
 800a744:	4640      	mov	r0, r8
 800a746:	ec55 4b10 	vmov	r4, r5, d0
 800a74a:	f7ff ff47 	bl	800a5dc <__b2d>
 800a74e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a752:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a756:	eba3 0c02 	sub.w	ip, r3, r2
 800a75a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a75e:	1a9b      	subs	r3, r3, r2
 800a760:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a764:	ec51 0b10 	vmov	r0, r1, d0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bfd6      	itet	le
 800a76c:	460a      	movle	r2, r1
 800a76e:	462a      	movgt	r2, r5
 800a770:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a774:	468b      	mov	fp, r1
 800a776:	462f      	mov	r7, r5
 800a778:	bfd4      	ite	le
 800a77a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a77e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a782:	4620      	mov	r0, r4
 800a784:	ee10 2a10 	vmov	r2, s0
 800a788:	465b      	mov	r3, fp
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f6 f86e 	bl	800086c <__aeabi_ddiv>
 800a790:	ec41 0b10 	vmov	d0, r0, r1
 800a794:	b003      	add	sp, #12
 800a796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a79a <__copybits>:
 800a79a:	3901      	subs	r1, #1
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	1149      	asrs	r1, r1, #5
 800a7a0:	6914      	ldr	r4, [r2, #16]
 800a7a2:	3101      	adds	r1, #1
 800a7a4:	f102 0314 	add.w	r3, r2, #20
 800a7a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a7ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7b0:	1f05      	subs	r5, r0, #4
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	d30c      	bcc.n	800a7d0 <__copybits+0x36>
 800a7b6:	1aa3      	subs	r3, r4, r2
 800a7b8:	3b11      	subs	r3, #17
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	3211      	adds	r2, #17
 800a7c0:	42a2      	cmp	r2, r4
 800a7c2:	bf88      	it	hi
 800a7c4:	2300      	movhi	r3, #0
 800a7c6:	4418      	add	r0, r3
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4288      	cmp	r0, r1
 800a7cc:	d305      	bcc.n	800a7da <__copybits+0x40>
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7d8:	e7eb      	b.n	800a7b2 <__copybits+0x18>
 800a7da:	f840 3b04 	str.w	r3, [r0], #4
 800a7de:	e7f4      	b.n	800a7ca <__copybits+0x30>

0800a7e0 <__any_on>:
 800a7e0:	f100 0214 	add.w	r2, r0, #20
 800a7e4:	6900      	ldr	r0, [r0, #16]
 800a7e6:	114b      	asrs	r3, r1, #5
 800a7e8:	4298      	cmp	r0, r3
 800a7ea:	b510      	push	{r4, lr}
 800a7ec:	db11      	blt.n	800a812 <__any_on+0x32>
 800a7ee:	dd0a      	ble.n	800a806 <__any_on+0x26>
 800a7f0:	f011 011f 	ands.w	r1, r1, #31
 800a7f4:	d007      	beq.n	800a806 <__any_on+0x26>
 800a7f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7fa:	fa24 f001 	lsr.w	r0, r4, r1
 800a7fe:	fa00 f101 	lsl.w	r1, r0, r1
 800a802:	428c      	cmp	r4, r1
 800a804:	d10b      	bne.n	800a81e <__any_on+0x3e>
 800a806:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d803      	bhi.n	800a816 <__any_on+0x36>
 800a80e:	2000      	movs	r0, #0
 800a810:	bd10      	pop	{r4, pc}
 800a812:	4603      	mov	r3, r0
 800a814:	e7f7      	b.n	800a806 <__any_on+0x26>
 800a816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a81a:	2900      	cmp	r1, #0
 800a81c:	d0f5      	beq.n	800a80a <__any_on+0x2a>
 800a81e:	2001      	movs	r0, #1
 800a820:	e7f6      	b.n	800a810 <__any_on+0x30>

0800a822 <_calloc_r>:
 800a822:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a824:	fba1 2402 	umull	r2, r4, r1, r2
 800a828:	b94c      	cbnz	r4, 800a83e <_calloc_r+0x1c>
 800a82a:	4611      	mov	r1, r2
 800a82c:	9201      	str	r2, [sp, #4]
 800a82e:	f000 f87b 	bl	800a928 <_malloc_r>
 800a832:	9a01      	ldr	r2, [sp, #4]
 800a834:	4605      	mov	r5, r0
 800a836:	b930      	cbnz	r0, 800a846 <_calloc_r+0x24>
 800a838:	4628      	mov	r0, r5
 800a83a:	b003      	add	sp, #12
 800a83c:	bd30      	pop	{r4, r5, pc}
 800a83e:	220c      	movs	r2, #12
 800a840:	6002      	str	r2, [r0, #0]
 800a842:	2500      	movs	r5, #0
 800a844:	e7f8      	b.n	800a838 <_calloc_r+0x16>
 800a846:	4621      	mov	r1, r4
 800a848:	f7fc fae2 	bl	8006e10 <memset>
 800a84c:	e7f4      	b.n	800a838 <_calloc_r+0x16>
	...

0800a850 <_free_r>:
 800a850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a852:	2900      	cmp	r1, #0
 800a854:	d044      	beq.n	800a8e0 <_free_r+0x90>
 800a856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a85a:	9001      	str	r0, [sp, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f1a1 0404 	sub.w	r4, r1, #4
 800a862:	bfb8      	it	lt
 800a864:	18e4      	addlt	r4, r4, r3
 800a866:	f001 f877 	bl	800b958 <__malloc_lock>
 800a86a:	4a1e      	ldr	r2, [pc, #120]	; (800a8e4 <_free_r+0x94>)
 800a86c:	9801      	ldr	r0, [sp, #4]
 800a86e:	6813      	ldr	r3, [r2, #0]
 800a870:	b933      	cbnz	r3, 800a880 <_free_r+0x30>
 800a872:	6063      	str	r3, [r4, #4]
 800a874:	6014      	str	r4, [r2, #0]
 800a876:	b003      	add	sp, #12
 800a878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a87c:	f001 b872 	b.w	800b964 <__malloc_unlock>
 800a880:	42a3      	cmp	r3, r4
 800a882:	d908      	bls.n	800a896 <_free_r+0x46>
 800a884:	6825      	ldr	r5, [r4, #0]
 800a886:	1961      	adds	r1, r4, r5
 800a888:	428b      	cmp	r3, r1
 800a88a:	bf01      	itttt	eq
 800a88c:	6819      	ldreq	r1, [r3, #0]
 800a88e:	685b      	ldreq	r3, [r3, #4]
 800a890:	1949      	addeq	r1, r1, r5
 800a892:	6021      	streq	r1, [r4, #0]
 800a894:	e7ed      	b.n	800a872 <_free_r+0x22>
 800a896:	461a      	mov	r2, r3
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	b10b      	cbz	r3, 800a8a0 <_free_r+0x50>
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	d9fa      	bls.n	800a896 <_free_r+0x46>
 800a8a0:	6811      	ldr	r1, [r2, #0]
 800a8a2:	1855      	adds	r5, r2, r1
 800a8a4:	42a5      	cmp	r5, r4
 800a8a6:	d10b      	bne.n	800a8c0 <_free_r+0x70>
 800a8a8:	6824      	ldr	r4, [r4, #0]
 800a8aa:	4421      	add	r1, r4
 800a8ac:	1854      	adds	r4, r2, r1
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	6011      	str	r1, [r2, #0]
 800a8b2:	d1e0      	bne.n	800a876 <_free_r+0x26>
 800a8b4:	681c      	ldr	r4, [r3, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	6053      	str	r3, [r2, #4]
 800a8ba:	4421      	add	r1, r4
 800a8bc:	6011      	str	r1, [r2, #0]
 800a8be:	e7da      	b.n	800a876 <_free_r+0x26>
 800a8c0:	d902      	bls.n	800a8c8 <_free_r+0x78>
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	6003      	str	r3, [r0, #0]
 800a8c6:	e7d6      	b.n	800a876 <_free_r+0x26>
 800a8c8:	6825      	ldr	r5, [r4, #0]
 800a8ca:	1961      	adds	r1, r4, r5
 800a8cc:	428b      	cmp	r3, r1
 800a8ce:	bf04      	itt	eq
 800a8d0:	6819      	ldreq	r1, [r3, #0]
 800a8d2:	685b      	ldreq	r3, [r3, #4]
 800a8d4:	6063      	str	r3, [r4, #4]
 800a8d6:	bf04      	itt	eq
 800a8d8:	1949      	addeq	r1, r1, r5
 800a8da:	6021      	streq	r1, [r4, #0]
 800a8dc:	6054      	str	r4, [r2, #4]
 800a8de:	e7ca      	b.n	800a876 <_free_r+0x26>
 800a8e0:	b003      	add	sp, #12
 800a8e2:	bd30      	pop	{r4, r5, pc}
 800a8e4:	200010ac 	.word	0x200010ac

0800a8e8 <sbrk_aligned>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4e0e      	ldr	r6, [pc, #56]	; (800a924 <sbrk_aligned+0x3c>)
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	6831      	ldr	r1, [r6, #0]
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	b911      	cbnz	r1, 800a8fa <sbrk_aligned+0x12>
 800a8f4:	f000 fd28 	bl	800b348 <_sbrk_r>
 800a8f8:	6030      	str	r0, [r6, #0]
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f000 fd23 	bl	800b348 <_sbrk_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d00a      	beq.n	800a91c <sbrk_aligned+0x34>
 800a906:	1cc4      	adds	r4, r0, #3
 800a908:	f024 0403 	bic.w	r4, r4, #3
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d007      	beq.n	800a920 <sbrk_aligned+0x38>
 800a910:	1a21      	subs	r1, r4, r0
 800a912:	4628      	mov	r0, r5
 800a914:	f000 fd18 	bl	800b348 <_sbrk_r>
 800a918:	3001      	adds	r0, #1
 800a91a:	d101      	bne.n	800a920 <sbrk_aligned+0x38>
 800a91c:	f04f 34ff 	mov.w	r4, #4294967295
 800a920:	4620      	mov	r0, r4
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	200010b0 	.word	0x200010b0

0800a928 <_malloc_r>:
 800a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92c:	1ccd      	adds	r5, r1, #3
 800a92e:	f025 0503 	bic.w	r5, r5, #3
 800a932:	3508      	adds	r5, #8
 800a934:	2d0c      	cmp	r5, #12
 800a936:	bf38      	it	cc
 800a938:	250c      	movcc	r5, #12
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	4607      	mov	r7, r0
 800a93e:	db01      	blt.n	800a944 <_malloc_r+0x1c>
 800a940:	42a9      	cmp	r1, r5
 800a942:	d905      	bls.n	800a950 <_malloc_r+0x28>
 800a944:	230c      	movs	r3, #12
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	2600      	movs	r6, #0
 800a94a:	4630      	mov	r0, r6
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	4e2e      	ldr	r6, [pc, #184]	; (800aa0c <_malloc_r+0xe4>)
 800a952:	f001 f801 	bl	800b958 <__malloc_lock>
 800a956:	6833      	ldr	r3, [r6, #0]
 800a958:	461c      	mov	r4, r3
 800a95a:	bb34      	cbnz	r4, 800a9aa <_malloc_r+0x82>
 800a95c:	4629      	mov	r1, r5
 800a95e:	4638      	mov	r0, r7
 800a960:	f7ff ffc2 	bl	800a8e8 <sbrk_aligned>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	4604      	mov	r4, r0
 800a968:	d14d      	bne.n	800aa06 <_malloc_r+0xde>
 800a96a:	6834      	ldr	r4, [r6, #0]
 800a96c:	4626      	mov	r6, r4
 800a96e:	2e00      	cmp	r6, #0
 800a970:	d140      	bne.n	800a9f4 <_malloc_r+0xcc>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	4631      	mov	r1, r6
 800a976:	4638      	mov	r0, r7
 800a978:	eb04 0803 	add.w	r8, r4, r3
 800a97c:	f000 fce4 	bl	800b348 <_sbrk_r>
 800a980:	4580      	cmp	r8, r0
 800a982:	d13a      	bne.n	800a9fa <_malloc_r+0xd2>
 800a984:	6821      	ldr	r1, [r4, #0]
 800a986:	3503      	adds	r5, #3
 800a988:	1a6d      	subs	r5, r5, r1
 800a98a:	f025 0503 	bic.w	r5, r5, #3
 800a98e:	3508      	adds	r5, #8
 800a990:	2d0c      	cmp	r5, #12
 800a992:	bf38      	it	cc
 800a994:	250c      	movcc	r5, #12
 800a996:	4629      	mov	r1, r5
 800a998:	4638      	mov	r0, r7
 800a99a:	f7ff ffa5 	bl	800a8e8 <sbrk_aligned>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d02b      	beq.n	800a9fa <_malloc_r+0xd2>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	442b      	add	r3, r5
 800a9a6:	6023      	str	r3, [r4, #0]
 800a9a8:	e00e      	b.n	800a9c8 <_malloc_r+0xa0>
 800a9aa:	6822      	ldr	r2, [r4, #0]
 800a9ac:	1b52      	subs	r2, r2, r5
 800a9ae:	d41e      	bmi.n	800a9ee <_malloc_r+0xc6>
 800a9b0:	2a0b      	cmp	r2, #11
 800a9b2:	d916      	bls.n	800a9e2 <_malloc_r+0xba>
 800a9b4:	1961      	adds	r1, r4, r5
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	6025      	str	r5, [r4, #0]
 800a9ba:	bf18      	it	ne
 800a9bc:	6059      	strne	r1, [r3, #4]
 800a9be:	6863      	ldr	r3, [r4, #4]
 800a9c0:	bf08      	it	eq
 800a9c2:	6031      	streq	r1, [r6, #0]
 800a9c4:	5162      	str	r2, [r4, r5]
 800a9c6:	604b      	str	r3, [r1, #4]
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f104 060b 	add.w	r6, r4, #11
 800a9ce:	f000 ffc9 	bl	800b964 <__malloc_unlock>
 800a9d2:	f026 0607 	bic.w	r6, r6, #7
 800a9d6:	1d23      	adds	r3, r4, #4
 800a9d8:	1af2      	subs	r2, r6, r3
 800a9da:	d0b6      	beq.n	800a94a <_malloc_r+0x22>
 800a9dc:	1b9b      	subs	r3, r3, r6
 800a9de:	50a3      	str	r3, [r4, r2]
 800a9e0:	e7b3      	b.n	800a94a <_malloc_r+0x22>
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	bf0c      	ite	eq
 800a9e8:	6032      	streq	r2, [r6, #0]
 800a9ea:	605a      	strne	r2, [r3, #4]
 800a9ec:	e7ec      	b.n	800a9c8 <_malloc_r+0xa0>
 800a9ee:	4623      	mov	r3, r4
 800a9f0:	6864      	ldr	r4, [r4, #4]
 800a9f2:	e7b2      	b.n	800a95a <_malloc_r+0x32>
 800a9f4:	4634      	mov	r4, r6
 800a9f6:	6876      	ldr	r6, [r6, #4]
 800a9f8:	e7b9      	b.n	800a96e <_malloc_r+0x46>
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	603b      	str	r3, [r7, #0]
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f000 ffb0 	bl	800b964 <__malloc_unlock>
 800aa04:	e7a1      	b.n	800a94a <_malloc_r+0x22>
 800aa06:	6025      	str	r5, [r4, #0]
 800aa08:	e7de      	b.n	800a9c8 <_malloc_r+0xa0>
 800aa0a:	bf00      	nop
 800aa0c:	200010ac 	.word	0x200010ac

0800aa10 <__ssputs_r>:
 800aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa14:	688e      	ldr	r6, [r1, #8]
 800aa16:	429e      	cmp	r6, r3
 800aa18:	4682      	mov	sl, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	4690      	mov	r8, r2
 800aa1e:	461f      	mov	r7, r3
 800aa20:	d838      	bhi.n	800aa94 <__ssputs_r+0x84>
 800aa22:	898a      	ldrh	r2, [r1, #12]
 800aa24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa28:	d032      	beq.n	800aa90 <__ssputs_r+0x80>
 800aa2a:	6825      	ldr	r5, [r4, #0]
 800aa2c:	6909      	ldr	r1, [r1, #16]
 800aa2e:	eba5 0901 	sub.w	r9, r5, r1
 800aa32:	6965      	ldr	r5, [r4, #20]
 800aa34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	444b      	add	r3, r9
 800aa40:	106d      	asrs	r5, r5, #1
 800aa42:	429d      	cmp	r5, r3
 800aa44:	bf38      	it	cc
 800aa46:	461d      	movcc	r5, r3
 800aa48:	0553      	lsls	r3, r2, #21
 800aa4a:	d531      	bpl.n	800aab0 <__ssputs_r+0xa0>
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	f7ff ff6b 	bl	800a928 <_malloc_r>
 800aa52:	4606      	mov	r6, r0
 800aa54:	b950      	cbnz	r0, 800aa6c <__ssputs_r+0x5c>
 800aa56:	230c      	movs	r3, #12
 800aa58:	f8ca 3000 	str.w	r3, [sl]
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6c:	6921      	ldr	r1, [r4, #16]
 800aa6e:	464a      	mov	r2, r9
 800aa70:	f7ff fa08 	bl	8009e84 <memcpy>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	6126      	str	r6, [r4, #16]
 800aa82:	6165      	str	r5, [r4, #20]
 800aa84:	444e      	add	r6, r9
 800aa86:	eba5 0509 	sub.w	r5, r5, r9
 800aa8a:	6026      	str	r6, [r4, #0]
 800aa8c:	60a5      	str	r5, [r4, #8]
 800aa8e:	463e      	mov	r6, r7
 800aa90:	42be      	cmp	r6, r7
 800aa92:	d900      	bls.n	800aa96 <__ssputs_r+0x86>
 800aa94:	463e      	mov	r6, r7
 800aa96:	6820      	ldr	r0, [r4, #0]
 800aa98:	4632      	mov	r2, r6
 800aa9a:	4641      	mov	r1, r8
 800aa9c:	f000 ff42 	bl	800b924 <memmove>
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	1b9b      	subs	r3, r3, r6
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	4433      	add	r3, r6
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	2000      	movs	r0, #0
 800aaae:	e7db      	b.n	800aa68 <__ssputs_r+0x58>
 800aab0:	462a      	mov	r2, r5
 800aab2:	f000 ff5d 	bl	800b970 <_realloc_r>
 800aab6:	4606      	mov	r6, r0
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1e1      	bne.n	800aa80 <__ssputs_r+0x70>
 800aabc:	6921      	ldr	r1, [r4, #16]
 800aabe:	4650      	mov	r0, sl
 800aac0:	f7ff fec6 	bl	800a850 <_free_r>
 800aac4:	e7c7      	b.n	800aa56 <__ssputs_r+0x46>
	...

0800aac8 <_svfiprintf_r>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	4698      	mov	r8, r3
 800aace:	898b      	ldrh	r3, [r1, #12]
 800aad0:	061b      	lsls	r3, r3, #24
 800aad2:	b09d      	sub	sp, #116	; 0x74
 800aad4:	4607      	mov	r7, r0
 800aad6:	460d      	mov	r5, r1
 800aad8:	4614      	mov	r4, r2
 800aada:	d50e      	bpl.n	800aafa <_svfiprintf_r+0x32>
 800aadc:	690b      	ldr	r3, [r1, #16]
 800aade:	b963      	cbnz	r3, 800aafa <_svfiprintf_r+0x32>
 800aae0:	2140      	movs	r1, #64	; 0x40
 800aae2:	f7ff ff21 	bl	800a928 <_malloc_r>
 800aae6:	6028      	str	r0, [r5, #0]
 800aae8:	6128      	str	r0, [r5, #16]
 800aaea:	b920      	cbnz	r0, 800aaf6 <_svfiprintf_r+0x2e>
 800aaec:	230c      	movs	r3, #12
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	e0d1      	b.n	800ac9a <_svfiprintf_r+0x1d2>
 800aaf6:	2340      	movs	r3, #64	; 0x40
 800aaf8:	616b      	str	r3, [r5, #20]
 800aafa:	2300      	movs	r3, #0
 800aafc:	9309      	str	r3, [sp, #36]	; 0x24
 800aafe:	2320      	movs	r3, #32
 800ab00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab08:	2330      	movs	r3, #48	; 0x30
 800ab0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acb4 <_svfiprintf_r+0x1ec>
 800ab0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab12:	f04f 0901 	mov.w	r9, #1
 800ab16:	4623      	mov	r3, r4
 800ab18:	469a      	mov	sl, r3
 800ab1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab1e:	b10a      	cbz	r2, 800ab24 <_svfiprintf_r+0x5c>
 800ab20:	2a25      	cmp	r2, #37	; 0x25
 800ab22:	d1f9      	bne.n	800ab18 <_svfiprintf_r+0x50>
 800ab24:	ebba 0b04 	subs.w	fp, sl, r4
 800ab28:	d00b      	beq.n	800ab42 <_svfiprintf_r+0x7a>
 800ab2a:	465b      	mov	r3, fp
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4638      	mov	r0, r7
 800ab32:	f7ff ff6d 	bl	800aa10 <__ssputs_r>
 800ab36:	3001      	adds	r0, #1
 800ab38:	f000 80aa 	beq.w	800ac90 <_svfiprintf_r+0x1c8>
 800ab3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab3e:	445a      	add	r2, fp
 800ab40:	9209      	str	r2, [sp, #36]	; 0x24
 800ab42:	f89a 3000 	ldrb.w	r3, [sl]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 80a2 	beq.w	800ac90 <_svfiprintf_r+0x1c8>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab56:	f10a 0a01 	add.w	sl, sl, #1
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	9307      	str	r3, [sp, #28]
 800ab5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab62:	931a      	str	r3, [sp, #104]	; 0x68
 800ab64:	4654      	mov	r4, sl
 800ab66:	2205      	movs	r2, #5
 800ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6c:	4851      	ldr	r0, [pc, #324]	; (800acb4 <_svfiprintf_r+0x1ec>)
 800ab6e:	f7f5 fb47 	bl	8000200 <memchr>
 800ab72:	9a04      	ldr	r2, [sp, #16]
 800ab74:	b9d8      	cbnz	r0, 800abae <_svfiprintf_r+0xe6>
 800ab76:	06d0      	lsls	r0, r2, #27
 800ab78:	bf44      	itt	mi
 800ab7a:	2320      	movmi	r3, #32
 800ab7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab80:	0711      	lsls	r1, r2, #28
 800ab82:	bf44      	itt	mi
 800ab84:	232b      	movmi	r3, #43	; 0x2b
 800ab86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab90:	d015      	beq.n	800abbe <_svfiprintf_r+0xf6>
 800ab92:	9a07      	ldr	r2, [sp, #28]
 800ab94:	4654      	mov	r4, sl
 800ab96:	2000      	movs	r0, #0
 800ab98:	f04f 0c0a 	mov.w	ip, #10
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aba2:	3b30      	subs	r3, #48	; 0x30
 800aba4:	2b09      	cmp	r3, #9
 800aba6:	d94e      	bls.n	800ac46 <_svfiprintf_r+0x17e>
 800aba8:	b1b0      	cbz	r0, 800abd8 <_svfiprintf_r+0x110>
 800abaa:	9207      	str	r2, [sp, #28]
 800abac:	e014      	b.n	800abd8 <_svfiprintf_r+0x110>
 800abae:	eba0 0308 	sub.w	r3, r0, r8
 800abb2:	fa09 f303 	lsl.w	r3, r9, r3
 800abb6:	4313      	orrs	r3, r2
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	46a2      	mov	sl, r4
 800abbc:	e7d2      	b.n	800ab64 <_svfiprintf_r+0x9c>
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	1d19      	adds	r1, r3, #4
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	9103      	str	r1, [sp, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bfbb      	ittet	lt
 800abca:	425b      	neglt	r3, r3
 800abcc:	f042 0202 	orrlt.w	r2, r2, #2
 800abd0:	9307      	strge	r3, [sp, #28]
 800abd2:	9307      	strlt	r3, [sp, #28]
 800abd4:	bfb8      	it	lt
 800abd6:	9204      	strlt	r2, [sp, #16]
 800abd8:	7823      	ldrb	r3, [r4, #0]
 800abda:	2b2e      	cmp	r3, #46	; 0x2e
 800abdc:	d10c      	bne.n	800abf8 <_svfiprintf_r+0x130>
 800abde:	7863      	ldrb	r3, [r4, #1]
 800abe0:	2b2a      	cmp	r3, #42	; 0x2a
 800abe2:	d135      	bne.n	800ac50 <_svfiprintf_r+0x188>
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	1d1a      	adds	r2, r3, #4
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	9203      	str	r2, [sp, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bfb8      	it	lt
 800abf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800abf4:	3402      	adds	r4, #2
 800abf6:	9305      	str	r3, [sp, #20]
 800abf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800acc4 <_svfiprintf_r+0x1fc>
 800abfc:	7821      	ldrb	r1, [r4, #0]
 800abfe:	2203      	movs	r2, #3
 800ac00:	4650      	mov	r0, sl
 800ac02:	f7f5 fafd 	bl	8000200 <memchr>
 800ac06:	b140      	cbz	r0, 800ac1a <_svfiprintf_r+0x152>
 800ac08:	2340      	movs	r3, #64	; 0x40
 800ac0a:	eba0 000a 	sub.w	r0, r0, sl
 800ac0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac12:	9b04      	ldr	r3, [sp, #16]
 800ac14:	4303      	orrs	r3, r0
 800ac16:	3401      	adds	r4, #1
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1e:	4826      	ldr	r0, [pc, #152]	; (800acb8 <_svfiprintf_r+0x1f0>)
 800ac20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac24:	2206      	movs	r2, #6
 800ac26:	f7f5 faeb 	bl	8000200 <memchr>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d038      	beq.n	800aca0 <_svfiprintf_r+0x1d8>
 800ac2e:	4b23      	ldr	r3, [pc, #140]	; (800acbc <_svfiprintf_r+0x1f4>)
 800ac30:	bb1b      	cbnz	r3, 800ac7a <_svfiprintf_r+0x1b2>
 800ac32:	9b03      	ldr	r3, [sp, #12]
 800ac34:	3307      	adds	r3, #7
 800ac36:	f023 0307 	bic.w	r3, r3, #7
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	9303      	str	r3, [sp, #12]
 800ac3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac40:	4433      	add	r3, r6
 800ac42:	9309      	str	r3, [sp, #36]	; 0x24
 800ac44:	e767      	b.n	800ab16 <_svfiprintf_r+0x4e>
 800ac46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	e7a5      	b.n	800ab9c <_svfiprintf_r+0xd4>
 800ac50:	2300      	movs	r3, #0
 800ac52:	3401      	adds	r4, #1
 800ac54:	9305      	str	r3, [sp, #20]
 800ac56:	4619      	mov	r1, r3
 800ac58:	f04f 0c0a 	mov.w	ip, #10
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac62:	3a30      	subs	r2, #48	; 0x30
 800ac64:	2a09      	cmp	r2, #9
 800ac66:	d903      	bls.n	800ac70 <_svfiprintf_r+0x1a8>
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d0c5      	beq.n	800abf8 <_svfiprintf_r+0x130>
 800ac6c:	9105      	str	r1, [sp, #20]
 800ac6e:	e7c3      	b.n	800abf8 <_svfiprintf_r+0x130>
 800ac70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac74:	4604      	mov	r4, r0
 800ac76:	2301      	movs	r3, #1
 800ac78:	e7f0      	b.n	800ac5c <_svfiprintf_r+0x194>
 800ac7a:	ab03      	add	r3, sp, #12
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4b0f      	ldr	r3, [pc, #60]	; (800acc0 <_svfiprintf_r+0x1f8>)
 800ac82:	a904      	add	r1, sp, #16
 800ac84:	4638      	mov	r0, r7
 800ac86:	f7fc f96b 	bl	8006f60 <_printf_float>
 800ac8a:	1c42      	adds	r2, r0, #1
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	d1d6      	bne.n	800ac3e <_svfiprintf_r+0x176>
 800ac90:	89ab      	ldrh	r3, [r5, #12]
 800ac92:	065b      	lsls	r3, r3, #25
 800ac94:	f53f af2c 	bmi.w	800aaf0 <_svfiprintf_r+0x28>
 800ac98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac9a:	b01d      	add	sp, #116	; 0x74
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	ab03      	add	r3, sp, #12
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	462a      	mov	r2, r5
 800aca6:	4b06      	ldr	r3, [pc, #24]	; (800acc0 <_svfiprintf_r+0x1f8>)
 800aca8:	a904      	add	r1, sp, #16
 800acaa:	4638      	mov	r0, r7
 800acac:	f7fc fbfc 	bl	80074a8 <_printf_i>
 800acb0:	e7eb      	b.n	800ac8a <_svfiprintf_r+0x1c2>
 800acb2:	bf00      	nop
 800acb4:	0800c46c 	.word	0x0800c46c
 800acb8:	0800c476 	.word	0x0800c476
 800acbc:	08006f61 	.word	0x08006f61
 800acc0:	0800aa11 	.word	0x0800aa11
 800acc4:	0800c472 	.word	0x0800c472

0800acc8 <_sungetc_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	1c4b      	adds	r3, r1, #1
 800accc:	4614      	mov	r4, r2
 800acce:	d103      	bne.n	800acd8 <_sungetc_r+0x10>
 800acd0:	f04f 35ff 	mov.w	r5, #4294967295
 800acd4:	4628      	mov	r0, r5
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	8993      	ldrh	r3, [r2, #12]
 800acda:	f023 0320 	bic.w	r3, r3, #32
 800acde:	8193      	strh	r3, [r2, #12]
 800ace0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ace2:	6852      	ldr	r2, [r2, #4]
 800ace4:	b2cd      	uxtb	r5, r1
 800ace6:	b18b      	cbz	r3, 800ad0c <_sungetc_r+0x44>
 800ace8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800acea:	4293      	cmp	r3, r2
 800acec:	dd08      	ble.n	800ad00 <_sungetc_r+0x38>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	1e5a      	subs	r2, r3, #1
 800acf2:	6022      	str	r2, [r4, #0]
 800acf4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800acf8:	6863      	ldr	r3, [r4, #4]
 800acfa:	3301      	adds	r3, #1
 800acfc:	6063      	str	r3, [r4, #4]
 800acfe:	e7e9      	b.n	800acd4 <_sungetc_r+0xc>
 800ad00:	4621      	mov	r1, r4
 800ad02:	f000 fbdd 	bl	800b4c0 <__submore>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d0f1      	beq.n	800acee <_sungetc_r+0x26>
 800ad0a:	e7e1      	b.n	800acd0 <_sungetc_r+0x8>
 800ad0c:	6921      	ldr	r1, [r4, #16]
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	b151      	cbz	r1, 800ad28 <_sungetc_r+0x60>
 800ad12:	4299      	cmp	r1, r3
 800ad14:	d208      	bcs.n	800ad28 <_sungetc_r+0x60>
 800ad16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ad1a:	42a9      	cmp	r1, r5
 800ad1c:	d104      	bne.n	800ad28 <_sungetc_r+0x60>
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	3201      	adds	r2, #1
 800ad22:	6023      	str	r3, [r4, #0]
 800ad24:	6062      	str	r2, [r4, #4]
 800ad26:	e7d5      	b.n	800acd4 <_sungetc_r+0xc>
 800ad28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ad2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad30:	6363      	str	r3, [r4, #52]	; 0x34
 800ad32:	2303      	movs	r3, #3
 800ad34:	63a3      	str	r3, [r4, #56]	; 0x38
 800ad36:	4623      	mov	r3, r4
 800ad38:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7dc      	b.n	800acfc <_sungetc_r+0x34>

0800ad42 <__ssrefill_r>:
 800ad42:	b510      	push	{r4, lr}
 800ad44:	460c      	mov	r4, r1
 800ad46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad48:	b169      	cbz	r1, 800ad66 <__ssrefill_r+0x24>
 800ad4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	d001      	beq.n	800ad56 <__ssrefill_r+0x14>
 800ad52:	f7ff fd7d 	bl	800a850 <_free_r>
 800ad56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad5e:	b113      	cbz	r3, 800ad66 <__ssrefill_r+0x24>
 800ad60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	6923      	ldr	r3, [r4, #16]
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	6063      	str	r3, [r4, #4]
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f043 0320 	orr.w	r3, r3, #32
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7a:	e7f3      	b.n	800ad64 <__ssrefill_r+0x22>

0800ad7c <__ssvfiscanf_r>:
 800ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad80:	460c      	mov	r4, r1
 800ad82:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ad86:	2100      	movs	r1, #0
 800ad88:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ad8c:	49a6      	ldr	r1, [pc, #664]	; (800b028 <__ssvfiscanf_r+0x2ac>)
 800ad8e:	91a0      	str	r1, [sp, #640]	; 0x280
 800ad90:	f10d 0804 	add.w	r8, sp, #4
 800ad94:	49a5      	ldr	r1, [pc, #660]	; (800b02c <__ssvfiscanf_r+0x2b0>)
 800ad96:	4fa6      	ldr	r7, [pc, #664]	; (800b030 <__ssvfiscanf_r+0x2b4>)
 800ad98:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b034 <__ssvfiscanf_r+0x2b8>
 800ad9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ada0:	4606      	mov	r6, r0
 800ada2:	91a1      	str	r1, [sp, #644]	; 0x284
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	7813      	ldrb	r3, [r2, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 815a 	beq.w	800b062 <__ssvfiscanf_r+0x2e6>
 800adae:	5dd9      	ldrb	r1, [r3, r7]
 800adb0:	f011 0108 	ands.w	r1, r1, #8
 800adb4:	f102 0501 	add.w	r5, r2, #1
 800adb8:	d019      	beq.n	800adee <__ssvfiscanf_r+0x72>
 800adba:	6863      	ldr	r3, [r4, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd0f      	ble.n	800ade0 <__ssvfiscanf_r+0x64>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	5cba      	ldrb	r2, [r7, r2]
 800adc6:	0712      	lsls	r2, r2, #28
 800adc8:	d401      	bmi.n	800adce <__ssvfiscanf_r+0x52>
 800adca:	462a      	mov	r2, r5
 800adcc:	e7eb      	b.n	800ada6 <__ssvfiscanf_r+0x2a>
 800adce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800add0:	3201      	adds	r2, #1
 800add2:	9245      	str	r2, [sp, #276]	; 0x114
 800add4:	6862      	ldr	r2, [r4, #4]
 800add6:	3301      	adds	r3, #1
 800add8:	3a01      	subs	r2, #1
 800adda:	6062      	str	r2, [r4, #4]
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	e7ec      	b.n	800adba <__ssvfiscanf_r+0x3e>
 800ade0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ade2:	4621      	mov	r1, r4
 800ade4:	4630      	mov	r0, r6
 800ade6:	4798      	blx	r3
 800ade8:	2800      	cmp	r0, #0
 800adea:	d0e9      	beq.n	800adc0 <__ssvfiscanf_r+0x44>
 800adec:	e7ed      	b.n	800adca <__ssvfiscanf_r+0x4e>
 800adee:	2b25      	cmp	r3, #37	; 0x25
 800adf0:	d012      	beq.n	800ae18 <__ssvfiscanf_r+0x9c>
 800adf2:	469a      	mov	sl, r3
 800adf4:	6863      	ldr	r3, [r4, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f340 8091 	ble.w	800af1e <__ssvfiscanf_r+0x1a2>
 800adfc:	6822      	ldr	r2, [r4, #0]
 800adfe:	7813      	ldrb	r3, [r2, #0]
 800ae00:	4553      	cmp	r3, sl
 800ae02:	f040 812e 	bne.w	800b062 <__ssvfiscanf_r+0x2e6>
 800ae06:	6863      	ldr	r3, [r4, #4]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	6063      	str	r3, [r4, #4]
 800ae0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ae0e:	3201      	adds	r2, #1
 800ae10:	3301      	adds	r3, #1
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	9345      	str	r3, [sp, #276]	; 0x114
 800ae16:	e7d8      	b.n	800adca <__ssvfiscanf_r+0x4e>
 800ae18:	9141      	str	r1, [sp, #260]	; 0x104
 800ae1a:	9143      	str	r1, [sp, #268]	; 0x10c
 800ae1c:	7853      	ldrb	r3, [r2, #1]
 800ae1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae20:	bf02      	ittt	eq
 800ae22:	2310      	moveq	r3, #16
 800ae24:	1c95      	addeq	r5, r2, #2
 800ae26:	9341      	streq	r3, [sp, #260]	; 0x104
 800ae28:	220a      	movs	r2, #10
 800ae2a:	46aa      	mov	sl, r5
 800ae2c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ae30:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ae34:	2b09      	cmp	r3, #9
 800ae36:	d91d      	bls.n	800ae74 <__ssvfiscanf_r+0xf8>
 800ae38:	487e      	ldr	r0, [pc, #504]	; (800b034 <__ssvfiscanf_r+0x2b8>)
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	f7f5 f9e0 	bl	8000200 <memchr>
 800ae40:	b140      	cbz	r0, 800ae54 <__ssvfiscanf_r+0xd8>
 800ae42:	2301      	movs	r3, #1
 800ae44:	eba0 0009 	sub.w	r0, r0, r9
 800ae48:	fa03 f000 	lsl.w	r0, r3, r0
 800ae4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae4e:	4318      	orrs	r0, r3
 800ae50:	9041      	str	r0, [sp, #260]	; 0x104
 800ae52:	4655      	mov	r5, sl
 800ae54:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae58:	2b78      	cmp	r3, #120	; 0x78
 800ae5a:	d806      	bhi.n	800ae6a <__ssvfiscanf_r+0xee>
 800ae5c:	2b57      	cmp	r3, #87	; 0x57
 800ae5e:	d810      	bhi.n	800ae82 <__ssvfiscanf_r+0x106>
 800ae60:	2b25      	cmp	r3, #37	; 0x25
 800ae62:	d0c6      	beq.n	800adf2 <__ssvfiscanf_r+0x76>
 800ae64:	d856      	bhi.n	800af14 <__ssvfiscanf_r+0x198>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d064      	beq.n	800af34 <__ssvfiscanf_r+0x1b8>
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	9347      	str	r3, [sp, #284]	; 0x11c
 800ae6e:	230a      	movs	r3, #10
 800ae70:	9342      	str	r3, [sp, #264]	; 0x108
 800ae72:	e071      	b.n	800af58 <__ssvfiscanf_r+0x1dc>
 800ae74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ae76:	fb02 1103 	mla	r1, r2, r3, r1
 800ae7a:	3930      	subs	r1, #48	; 0x30
 800ae7c:	9143      	str	r1, [sp, #268]	; 0x10c
 800ae7e:	4655      	mov	r5, sl
 800ae80:	e7d3      	b.n	800ae2a <__ssvfiscanf_r+0xae>
 800ae82:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ae86:	2a20      	cmp	r2, #32
 800ae88:	d8ef      	bhi.n	800ae6a <__ssvfiscanf_r+0xee>
 800ae8a:	a101      	add	r1, pc, #4	; (adr r1, 800ae90 <__ssvfiscanf_r+0x114>)
 800ae8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae90:	0800af43 	.word	0x0800af43
 800ae94:	0800ae6b 	.word	0x0800ae6b
 800ae98:	0800ae6b 	.word	0x0800ae6b
 800ae9c:	0800afa1 	.word	0x0800afa1
 800aea0:	0800ae6b 	.word	0x0800ae6b
 800aea4:	0800ae6b 	.word	0x0800ae6b
 800aea8:	0800ae6b 	.word	0x0800ae6b
 800aeac:	0800ae6b 	.word	0x0800ae6b
 800aeb0:	0800ae6b 	.word	0x0800ae6b
 800aeb4:	0800ae6b 	.word	0x0800ae6b
 800aeb8:	0800ae6b 	.word	0x0800ae6b
 800aebc:	0800afb7 	.word	0x0800afb7
 800aec0:	0800af8d 	.word	0x0800af8d
 800aec4:	0800af1b 	.word	0x0800af1b
 800aec8:	0800af1b 	.word	0x0800af1b
 800aecc:	0800af1b 	.word	0x0800af1b
 800aed0:	0800ae6b 	.word	0x0800ae6b
 800aed4:	0800af91 	.word	0x0800af91
 800aed8:	0800ae6b 	.word	0x0800ae6b
 800aedc:	0800ae6b 	.word	0x0800ae6b
 800aee0:	0800ae6b 	.word	0x0800ae6b
 800aee4:	0800ae6b 	.word	0x0800ae6b
 800aee8:	0800afc7 	.word	0x0800afc7
 800aeec:	0800af99 	.word	0x0800af99
 800aef0:	0800af3b 	.word	0x0800af3b
 800aef4:	0800ae6b 	.word	0x0800ae6b
 800aef8:	0800ae6b 	.word	0x0800ae6b
 800aefc:	0800afc3 	.word	0x0800afc3
 800af00:	0800ae6b 	.word	0x0800ae6b
 800af04:	0800af8d 	.word	0x0800af8d
 800af08:	0800ae6b 	.word	0x0800ae6b
 800af0c:	0800ae6b 	.word	0x0800ae6b
 800af10:	0800af43 	.word	0x0800af43
 800af14:	3b45      	subs	r3, #69	; 0x45
 800af16:	2b02      	cmp	r3, #2
 800af18:	d8a7      	bhi.n	800ae6a <__ssvfiscanf_r+0xee>
 800af1a:	2305      	movs	r3, #5
 800af1c:	e01b      	b.n	800af56 <__ssvfiscanf_r+0x1da>
 800af1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af20:	4621      	mov	r1, r4
 800af22:	4630      	mov	r0, r6
 800af24:	4798      	blx	r3
 800af26:	2800      	cmp	r0, #0
 800af28:	f43f af68 	beq.w	800adfc <__ssvfiscanf_r+0x80>
 800af2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800af2e:	2800      	cmp	r0, #0
 800af30:	f040 808d 	bne.w	800b04e <__ssvfiscanf_r+0x2d2>
 800af34:	f04f 30ff 	mov.w	r0, #4294967295
 800af38:	e08f      	b.n	800b05a <__ssvfiscanf_r+0x2de>
 800af3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800af3c:	f042 0220 	orr.w	r2, r2, #32
 800af40:	9241      	str	r2, [sp, #260]	; 0x104
 800af42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800af44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af48:	9241      	str	r2, [sp, #260]	; 0x104
 800af4a:	2210      	movs	r2, #16
 800af4c:	2b6f      	cmp	r3, #111	; 0x6f
 800af4e:	9242      	str	r2, [sp, #264]	; 0x108
 800af50:	bf34      	ite	cc
 800af52:	2303      	movcc	r3, #3
 800af54:	2304      	movcs	r3, #4
 800af56:	9347      	str	r3, [sp, #284]	; 0x11c
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dd42      	ble.n	800afe4 <__ssvfiscanf_r+0x268>
 800af5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af60:	0659      	lsls	r1, r3, #25
 800af62:	d404      	bmi.n	800af6e <__ssvfiscanf_r+0x1f2>
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	5cba      	ldrb	r2, [r7, r2]
 800af6a:	0712      	lsls	r2, r2, #28
 800af6c:	d441      	bmi.n	800aff2 <__ssvfiscanf_r+0x276>
 800af6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800af70:	2b02      	cmp	r3, #2
 800af72:	dc50      	bgt.n	800b016 <__ssvfiscanf_r+0x29a>
 800af74:	466b      	mov	r3, sp
 800af76:	4622      	mov	r2, r4
 800af78:	a941      	add	r1, sp, #260	; 0x104
 800af7a:	4630      	mov	r0, r6
 800af7c:	f000 f876 	bl	800b06c <_scanf_chars>
 800af80:	2801      	cmp	r0, #1
 800af82:	d06e      	beq.n	800b062 <__ssvfiscanf_r+0x2e6>
 800af84:	2802      	cmp	r0, #2
 800af86:	f47f af20 	bne.w	800adca <__ssvfiscanf_r+0x4e>
 800af8a:	e7cf      	b.n	800af2c <__ssvfiscanf_r+0x1b0>
 800af8c:	220a      	movs	r2, #10
 800af8e:	e7dd      	b.n	800af4c <__ssvfiscanf_r+0x1d0>
 800af90:	2300      	movs	r3, #0
 800af92:	9342      	str	r3, [sp, #264]	; 0x108
 800af94:	2303      	movs	r3, #3
 800af96:	e7de      	b.n	800af56 <__ssvfiscanf_r+0x1da>
 800af98:	2308      	movs	r3, #8
 800af9a:	9342      	str	r3, [sp, #264]	; 0x108
 800af9c:	2304      	movs	r3, #4
 800af9e:	e7da      	b.n	800af56 <__ssvfiscanf_r+0x1da>
 800afa0:	4629      	mov	r1, r5
 800afa2:	4640      	mov	r0, r8
 800afa4:	f000 f9e0 	bl	800b368 <__sccl>
 800afa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800afaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afae:	9341      	str	r3, [sp, #260]	; 0x104
 800afb0:	4605      	mov	r5, r0
 800afb2:	2301      	movs	r3, #1
 800afb4:	e7cf      	b.n	800af56 <__ssvfiscanf_r+0x1da>
 800afb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800afb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afbc:	9341      	str	r3, [sp, #260]	; 0x104
 800afbe:	2300      	movs	r3, #0
 800afc0:	e7c9      	b.n	800af56 <__ssvfiscanf_r+0x1da>
 800afc2:	2302      	movs	r3, #2
 800afc4:	e7c7      	b.n	800af56 <__ssvfiscanf_r+0x1da>
 800afc6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800afc8:	06c3      	lsls	r3, r0, #27
 800afca:	f53f aefe 	bmi.w	800adca <__ssvfiscanf_r+0x4e>
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800afd2:	1d19      	adds	r1, r3, #4
 800afd4:	9100      	str	r1, [sp, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f010 0f01 	tst.w	r0, #1
 800afdc:	bf14      	ite	ne
 800afde:	801a      	strhne	r2, [r3, #0]
 800afe0:	601a      	streq	r2, [r3, #0]
 800afe2:	e6f2      	b.n	800adca <__ssvfiscanf_r+0x4e>
 800afe4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800afe6:	4621      	mov	r1, r4
 800afe8:	4630      	mov	r0, r6
 800afea:	4798      	blx	r3
 800afec:	2800      	cmp	r0, #0
 800afee:	d0b6      	beq.n	800af5e <__ssvfiscanf_r+0x1e2>
 800aff0:	e79c      	b.n	800af2c <__ssvfiscanf_r+0x1b0>
 800aff2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aff4:	3201      	adds	r2, #1
 800aff6:	9245      	str	r2, [sp, #276]	; 0x114
 800aff8:	6862      	ldr	r2, [r4, #4]
 800affa:	3a01      	subs	r2, #1
 800affc:	2a00      	cmp	r2, #0
 800affe:	6062      	str	r2, [r4, #4]
 800b000:	dd02      	ble.n	800b008 <__ssvfiscanf_r+0x28c>
 800b002:	3301      	adds	r3, #1
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	e7ad      	b.n	800af64 <__ssvfiscanf_r+0x1e8>
 800b008:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b00a:	4621      	mov	r1, r4
 800b00c:	4630      	mov	r0, r6
 800b00e:	4798      	blx	r3
 800b010:	2800      	cmp	r0, #0
 800b012:	d0a7      	beq.n	800af64 <__ssvfiscanf_r+0x1e8>
 800b014:	e78a      	b.n	800af2c <__ssvfiscanf_r+0x1b0>
 800b016:	2b04      	cmp	r3, #4
 800b018:	dc0e      	bgt.n	800b038 <__ssvfiscanf_r+0x2bc>
 800b01a:	466b      	mov	r3, sp
 800b01c:	4622      	mov	r2, r4
 800b01e:	a941      	add	r1, sp, #260	; 0x104
 800b020:	4630      	mov	r0, r6
 800b022:	f000 f87d 	bl	800b120 <_scanf_i>
 800b026:	e7ab      	b.n	800af80 <__ssvfiscanf_r+0x204>
 800b028:	0800acc9 	.word	0x0800acc9
 800b02c:	0800ad43 	.word	0x0800ad43
 800b030:	0800c109 	.word	0x0800c109
 800b034:	0800c472 	.word	0x0800c472
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <__ssvfiscanf_r+0x2ec>)
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f43f aec5 	beq.w	800adca <__ssvfiscanf_r+0x4e>
 800b040:	466b      	mov	r3, sp
 800b042:	4622      	mov	r2, r4
 800b044:	a941      	add	r1, sp, #260	; 0x104
 800b046:	4630      	mov	r0, r6
 800b048:	f7fc fb54 	bl	80076f4 <_scanf_float>
 800b04c:	e798      	b.n	800af80 <__ssvfiscanf_r+0x204>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b054:	bf18      	it	ne
 800b056:	f04f 30ff 	movne.w	r0, #4294967295
 800b05a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b064:	e7f9      	b.n	800b05a <__ssvfiscanf_r+0x2de>
 800b066:	bf00      	nop
 800b068:	080076f5 	.word	0x080076f5

0800b06c <_scanf_chars>:
 800b06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b070:	4615      	mov	r5, r2
 800b072:	688a      	ldr	r2, [r1, #8]
 800b074:	4680      	mov	r8, r0
 800b076:	460c      	mov	r4, r1
 800b078:	b932      	cbnz	r2, 800b088 <_scanf_chars+0x1c>
 800b07a:	698a      	ldr	r2, [r1, #24]
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	bf0c      	ite	eq
 800b080:	2201      	moveq	r2, #1
 800b082:	f04f 32ff 	movne.w	r2, #4294967295
 800b086:	608a      	str	r2, [r1, #8]
 800b088:	6822      	ldr	r2, [r4, #0]
 800b08a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b11c <_scanf_chars+0xb0>
 800b08e:	06d1      	lsls	r1, r2, #27
 800b090:	bf5f      	itttt	pl
 800b092:	681a      	ldrpl	r2, [r3, #0]
 800b094:	1d11      	addpl	r1, r2, #4
 800b096:	6019      	strpl	r1, [r3, #0]
 800b098:	6816      	ldrpl	r6, [r2, #0]
 800b09a:	2700      	movs	r7, #0
 800b09c:	69a0      	ldr	r0, [r4, #24]
 800b09e:	b188      	cbz	r0, 800b0c4 <_scanf_chars+0x58>
 800b0a0:	2801      	cmp	r0, #1
 800b0a2:	d107      	bne.n	800b0b4 <_scanf_chars+0x48>
 800b0a4:	682a      	ldr	r2, [r5, #0]
 800b0a6:	7811      	ldrb	r1, [r2, #0]
 800b0a8:	6962      	ldr	r2, [r4, #20]
 800b0aa:	5c52      	ldrb	r2, [r2, r1]
 800b0ac:	b952      	cbnz	r2, 800b0c4 <_scanf_chars+0x58>
 800b0ae:	2f00      	cmp	r7, #0
 800b0b0:	d031      	beq.n	800b116 <_scanf_chars+0xaa>
 800b0b2:	e022      	b.n	800b0fa <_scanf_chars+0x8e>
 800b0b4:	2802      	cmp	r0, #2
 800b0b6:	d120      	bne.n	800b0fa <_scanf_chars+0x8e>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b0c0:	071b      	lsls	r3, r3, #28
 800b0c2:	d41a      	bmi.n	800b0fa <_scanf_chars+0x8e>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	06da      	lsls	r2, r3, #27
 800b0c8:	bf5e      	ittt	pl
 800b0ca:	682b      	ldrpl	r3, [r5, #0]
 800b0cc:	781b      	ldrbpl	r3, [r3, #0]
 800b0ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b0d2:	682a      	ldr	r2, [r5, #0]
 800b0d4:	686b      	ldr	r3, [r5, #4]
 800b0d6:	3201      	adds	r2, #1
 800b0d8:	602a      	str	r2, [r5, #0]
 800b0da:	68a2      	ldr	r2, [r4, #8]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	3a01      	subs	r2, #1
 800b0e0:	606b      	str	r3, [r5, #4]
 800b0e2:	3701      	adds	r7, #1
 800b0e4:	60a2      	str	r2, [r4, #8]
 800b0e6:	b142      	cbz	r2, 800b0fa <_scanf_chars+0x8e>
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dcd7      	bgt.n	800b09c <_scanf_chars+0x30>
 800b0ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	4798      	blx	r3
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d0d0      	beq.n	800b09c <_scanf_chars+0x30>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	f013 0310 	ands.w	r3, r3, #16
 800b100:	d105      	bne.n	800b10e <_scanf_chars+0xa2>
 800b102:	68e2      	ldr	r2, [r4, #12]
 800b104:	3201      	adds	r2, #1
 800b106:	60e2      	str	r2, [r4, #12]
 800b108:	69a2      	ldr	r2, [r4, #24]
 800b10a:	b102      	cbz	r2, 800b10e <_scanf_chars+0xa2>
 800b10c:	7033      	strb	r3, [r6, #0]
 800b10e:	6923      	ldr	r3, [r4, #16]
 800b110:	443b      	add	r3, r7
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	2000      	movs	r0, #0
 800b116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11a:	bf00      	nop
 800b11c:	0800c109 	.word	0x0800c109

0800b120 <_scanf_i>:
 800b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	4698      	mov	r8, r3
 800b126:	4b76      	ldr	r3, [pc, #472]	; (800b300 <_scanf_i+0x1e0>)
 800b128:	460c      	mov	r4, r1
 800b12a:	4682      	mov	sl, r0
 800b12c:	4616      	mov	r6, r2
 800b12e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b132:	b087      	sub	sp, #28
 800b134:	ab03      	add	r3, sp, #12
 800b136:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b13a:	4b72      	ldr	r3, [pc, #456]	; (800b304 <_scanf_i+0x1e4>)
 800b13c:	69a1      	ldr	r1, [r4, #24]
 800b13e:	4a72      	ldr	r2, [pc, #456]	; (800b308 <_scanf_i+0x1e8>)
 800b140:	2903      	cmp	r1, #3
 800b142:	bf18      	it	ne
 800b144:	461a      	movne	r2, r3
 800b146:	68a3      	ldr	r3, [r4, #8]
 800b148:	9201      	str	r2, [sp, #4]
 800b14a:	1e5a      	subs	r2, r3, #1
 800b14c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b150:	bf88      	it	hi
 800b152:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b156:	4627      	mov	r7, r4
 800b158:	bf82      	ittt	hi
 800b15a:	eb03 0905 	addhi.w	r9, r3, r5
 800b15e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b162:	60a3      	strhi	r3, [r4, #8]
 800b164:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b168:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b16c:	bf98      	it	ls
 800b16e:	f04f 0900 	movls.w	r9, #0
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	463d      	mov	r5, r7
 800b176:	f04f 0b00 	mov.w	fp, #0
 800b17a:	6831      	ldr	r1, [r6, #0]
 800b17c:	ab03      	add	r3, sp, #12
 800b17e:	7809      	ldrb	r1, [r1, #0]
 800b180:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b184:	2202      	movs	r2, #2
 800b186:	f7f5 f83b 	bl	8000200 <memchr>
 800b18a:	b328      	cbz	r0, 800b1d8 <_scanf_i+0xb8>
 800b18c:	f1bb 0f01 	cmp.w	fp, #1
 800b190:	d159      	bne.n	800b246 <_scanf_i+0x126>
 800b192:	6862      	ldr	r2, [r4, #4]
 800b194:	b92a      	cbnz	r2, 800b1a2 <_scanf_i+0x82>
 800b196:	6822      	ldr	r2, [r4, #0]
 800b198:	2308      	movs	r3, #8
 800b19a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b19e:	6063      	str	r3, [r4, #4]
 800b1a0:	6022      	str	r2, [r4, #0]
 800b1a2:	6822      	ldr	r2, [r4, #0]
 800b1a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b1a8:	6022      	str	r2, [r4, #0]
 800b1aa:	68a2      	ldr	r2, [r4, #8]
 800b1ac:	1e51      	subs	r1, r2, #1
 800b1ae:	60a1      	str	r1, [r4, #8]
 800b1b0:	b192      	cbz	r2, 800b1d8 <_scanf_i+0xb8>
 800b1b2:	6832      	ldr	r2, [r6, #0]
 800b1b4:	1c51      	adds	r1, r2, #1
 800b1b6:	6031      	str	r1, [r6, #0]
 800b1b8:	7812      	ldrb	r2, [r2, #0]
 800b1ba:	f805 2b01 	strb.w	r2, [r5], #1
 800b1be:	6872      	ldr	r2, [r6, #4]
 800b1c0:	3a01      	subs	r2, #1
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	6072      	str	r2, [r6, #4]
 800b1c6:	dc07      	bgt.n	800b1d8 <_scanf_i+0xb8>
 800b1c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	4790      	blx	r2
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	f040 8085 	bne.w	800b2e2 <_scanf_i+0x1c2>
 800b1d8:	f10b 0b01 	add.w	fp, fp, #1
 800b1dc:	f1bb 0f03 	cmp.w	fp, #3
 800b1e0:	d1cb      	bne.n	800b17a <_scanf_i+0x5a>
 800b1e2:	6863      	ldr	r3, [r4, #4]
 800b1e4:	b90b      	cbnz	r3, 800b1ea <_scanf_i+0xca>
 800b1e6:	230a      	movs	r3, #10
 800b1e8:	6063      	str	r3, [r4, #4]
 800b1ea:	6863      	ldr	r3, [r4, #4]
 800b1ec:	4947      	ldr	r1, [pc, #284]	; (800b30c <_scanf_i+0x1ec>)
 800b1ee:	6960      	ldr	r0, [r4, #20]
 800b1f0:	1ac9      	subs	r1, r1, r3
 800b1f2:	f000 f8b9 	bl	800b368 <__sccl>
 800b1f6:	f04f 0b00 	mov.w	fp, #0
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	6822      	ldr	r2, [r4, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d03d      	beq.n	800b27e <_scanf_i+0x15e>
 800b202:	6831      	ldr	r1, [r6, #0]
 800b204:	6960      	ldr	r0, [r4, #20]
 800b206:	f891 c000 	ldrb.w	ip, [r1]
 800b20a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b20e:	2800      	cmp	r0, #0
 800b210:	d035      	beq.n	800b27e <_scanf_i+0x15e>
 800b212:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b216:	d124      	bne.n	800b262 <_scanf_i+0x142>
 800b218:	0510      	lsls	r0, r2, #20
 800b21a:	d522      	bpl.n	800b262 <_scanf_i+0x142>
 800b21c:	f10b 0b01 	add.w	fp, fp, #1
 800b220:	f1b9 0f00 	cmp.w	r9, #0
 800b224:	d003      	beq.n	800b22e <_scanf_i+0x10e>
 800b226:	3301      	adds	r3, #1
 800b228:	f109 39ff 	add.w	r9, r9, #4294967295
 800b22c:	60a3      	str	r3, [r4, #8]
 800b22e:	6873      	ldr	r3, [r6, #4]
 800b230:	3b01      	subs	r3, #1
 800b232:	2b00      	cmp	r3, #0
 800b234:	6073      	str	r3, [r6, #4]
 800b236:	dd1b      	ble.n	800b270 <_scanf_i+0x150>
 800b238:	6833      	ldr	r3, [r6, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	6033      	str	r3, [r6, #0]
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	3b01      	subs	r3, #1
 800b242:	60a3      	str	r3, [r4, #8]
 800b244:	e7d9      	b.n	800b1fa <_scanf_i+0xda>
 800b246:	f1bb 0f02 	cmp.w	fp, #2
 800b24a:	d1ae      	bne.n	800b1aa <_scanf_i+0x8a>
 800b24c:	6822      	ldr	r2, [r4, #0]
 800b24e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b252:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b256:	d1bf      	bne.n	800b1d8 <_scanf_i+0xb8>
 800b258:	2310      	movs	r3, #16
 800b25a:	6063      	str	r3, [r4, #4]
 800b25c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b260:	e7a2      	b.n	800b1a8 <_scanf_i+0x88>
 800b262:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b266:	6022      	str	r2, [r4, #0]
 800b268:	780b      	ldrb	r3, [r1, #0]
 800b26a:	f805 3b01 	strb.w	r3, [r5], #1
 800b26e:	e7de      	b.n	800b22e <_scanf_i+0x10e>
 800b270:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b274:	4631      	mov	r1, r6
 800b276:	4650      	mov	r0, sl
 800b278:	4798      	blx	r3
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d0df      	beq.n	800b23e <_scanf_i+0x11e>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	05db      	lsls	r3, r3, #23
 800b282:	d50d      	bpl.n	800b2a0 <_scanf_i+0x180>
 800b284:	42bd      	cmp	r5, r7
 800b286:	d909      	bls.n	800b29c <_scanf_i+0x17c>
 800b288:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b28c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b290:	4632      	mov	r2, r6
 800b292:	4650      	mov	r0, sl
 800b294:	4798      	blx	r3
 800b296:	f105 39ff 	add.w	r9, r5, #4294967295
 800b29a:	464d      	mov	r5, r9
 800b29c:	42bd      	cmp	r5, r7
 800b29e:	d02d      	beq.n	800b2fc <_scanf_i+0x1dc>
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	f012 0210 	ands.w	r2, r2, #16
 800b2a6:	d113      	bne.n	800b2d0 <_scanf_i+0x1b0>
 800b2a8:	702a      	strb	r2, [r5, #0]
 800b2aa:	6863      	ldr	r3, [r4, #4]
 800b2ac:	9e01      	ldr	r6, [sp, #4]
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	47b0      	blx	r6
 800b2b4:	6821      	ldr	r1, [r4, #0]
 800b2b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ba:	f011 0f20 	tst.w	r1, #32
 800b2be:	d013      	beq.n	800b2e8 <_scanf_i+0x1c8>
 800b2c0:	1d1a      	adds	r2, r3, #4
 800b2c2:	f8c8 2000 	str.w	r2, [r8]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6018      	str	r0, [r3, #0]
 800b2ca:	68e3      	ldr	r3, [r4, #12]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	60e3      	str	r3, [r4, #12]
 800b2d0:	1bed      	subs	r5, r5, r7
 800b2d2:	44ab      	add	fp, r5
 800b2d4:	6925      	ldr	r5, [r4, #16]
 800b2d6:	445d      	add	r5, fp
 800b2d8:	6125      	str	r5, [r4, #16]
 800b2da:	2000      	movs	r0, #0
 800b2dc:	b007      	add	sp, #28
 800b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e2:	f04f 0b00 	mov.w	fp, #0
 800b2e6:	e7ca      	b.n	800b27e <_scanf_i+0x15e>
 800b2e8:	1d1a      	adds	r2, r3, #4
 800b2ea:	f8c8 2000 	str.w	r2, [r8]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f011 0f01 	tst.w	r1, #1
 800b2f4:	bf14      	ite	ne
 800b2f6:	8018      	strhne	r0, [r3, #0]
 800b2f8:	6018      	streq	r0, [r3, #0]
 800b2fa:	e7e6      	b.n	800b2ca <_scanf_i+0x1aa>
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7ed      	b.n	800b2dc <_scanf_i+0x1bc>
 800b300:	0800c04c 	.word	0x0800c04c
 800b304:	0800b4bd 	.word	0x0800b4bd
 800b308:	080089c5 	.word	0x080089c5
 800b30c:	0800c496 	.word	0x0800c496

0800b310 <_read_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d07      	ldr	r5, [pc, #28]	; (800b330 <_read_r+0x20>)
 800b314:	4604      	mov	r4, r0
 800b316:	4608      	mov	r0, r1
 800b318:	4611      	mov	r1, r2
 800b31a:	2200      	movs	r2, #0
 800b31c:	602a      	str	r2, [r5, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	f7f7 fca2 	bl	8002c68 <_read>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_read_r+0x1e>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_read_r+0x1e>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	200010b4 	.word	0x200010b4
 800b334:	00000000 	.word	0x00000000

0800b338 <nan>:
 800b338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b340 <nan+0x8>
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	00000000 	.word	0x00000000
 800b344:	7ff80000 	.word	0x7ff80000

0800b348 <_sbrk_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d06      	ldr	r5, [pc, #24]	; (800b364 <_sbrk_r+0x1c>)
 800b34c:	2300      	movs	r3, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	4608      	mov	r0, r1
 800b352:	602b      	str	r3, [r5, #0]
 800b354:	f7f7 fcf6 	bl	8002d44 <_sbrk>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d102      	bne.n	800b362 <_sbrk_r+0x1a>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	b103      	cbz	r3, 800b362 <_sbrk_r+0x1a>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	200010b4 	.word	0x200010b4

0800b368 <__sccl>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	780b      	ldrb	r3, [r1, #0]
 800b36c:	4604      	mov	r4, r0
 800b36e:	2b5e      	cmp	r3, #94	; 0x5e
 800b370:	bf0b      	itete	eq
 800b372:	784b      	ldrbeq	r3, [r1, #1]
 800b374:	1c48      	addne	r0, r1, #1
 800b376:	1c88      	addeq	r0, r1, #2
 800b378:	2200      	movne	r2, #0
 800b37a:	bf08      	it	eq
 800b37c:	2201      	moveq	r2, #1
 800b37e:	1e61      	subs	r1, r4, #1
 800b380:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b384:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b388:	42a9      	cmp	r1, r5
 800b38a:	d1fb      	bne.n	800b384 <__sccl+0x1c>
 800b38c:	b90b      	cbnz	r3, 800b392 <__sccl+0x2a>
 800b38e:	3801      	subs	r0, #1
 800b390:	bd70      	pop	{r4, r5, r6, pc}
 800b392:	f082 0201 	eor.w	r2, r2, #1
 800b396:	54e2      	strb	r2, [r4, r3]
 800b398:	4605      	mov	r5, r0
 800b39a:	4628      	mov	r0, r5
 800b39c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b3a0:	292d      	cmp	r1, #45	; 0x2d
 800b3a2:	d006      	beq.n	800b3b2 <__sccl+0x4a>
 800b3a4:	295d      	cmp	r1, #93	; 0x5d
 800b3a6:	d0f3      	beq.n	800b390 <__sccl+0x28>
 800b3a8:	b909      	cbnz	r1, 800b3ae <__sccl+0x46>
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	e7f0      	b.n	800b390 <__sccl+0x28>
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	e7f1      	b.n	800b396 <__sccl+0x2e>
 800b3b2:	786e      	ldrb	r6, [r5, #1]
 800b3b4:	2e5d      	cmp	r6, #93	; 0x5d
 800b3b6:	d0fa      	beq.n	800b3ae <__sccl+0x46>
 800b3b8:	42b3      	cmp	r3, r6
 800b3ba:	dcf8      	bgt.n	800b3ae <__sccl+0x46>
 800b3bc:	3502      	adds	r5, #2
 800b3be:	4619      	mov	r1, r3
 800b3c0:	3101      	adds	r1, #1
 800b3c2:	428e      	cmp	r6, r1
 800b3c4:	5462      	strb	r2, [r4, r1]
 800b3c6:	dcfb      	bgt.n	800b3c0 <__sccl+0x58>
 800b3c8:	1af1      	subs	r1, r6, r3
 800b3ca:	3901      	subs	r1, #1
 800b3cc:	1c58      	adds	r0, r3, #1
 800b3ce:	42b3      	cmp	r3, r6
 800b3d0:	bfa8      	it	ge
 800b3d2:	2100      	movge	r1, #0
 800b3d4:	1843      	adds	r3, r0, r1
 800b3d6:	e7e0      	b.n	800b39a <__sccl+0x32>

0800b3d8 <_strtoul_l.constprop.0>:
 800b3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4f36      	ldr	r7, [pc, #216]	; (800b4b8 <_strtoul_l.constprop.0+0xe0>)
 800b3de:	4686      	mov	lr, r0
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3e8:	5de6      	ldrb	r6, [r4, r7]
 800b3ea:	f016 0608 	ands.w	r6, r6, #8
 800b3ee:	d1f8      	bne.n	800b3e2 <_strtoul_l.constprop.0+0xa>
 800b3f0:	2c2d      	cmp	r4, #45	; 0x2d
 800b3f2:	d12f      	bne.n	800b454 <_strtoul_l.constprop.0+0x7c>
 800b3f4:	782c      	ldrb	r4, [r5, #0]
 800b3f6:	2601      	movs	r6, #1
 800b3f8:	1c85      	adds	r5, r0, #2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d057      	beq.n	800b4ae <_strtoul_l.constprop.0+0xd6>
 800b3fe:	2b10      	cmp	r3, #16
 800b400:	d109      	bne.n	800b416 <_strtoul_l.constprop.0+0x3e>
 800b402:	2c30      	cmp	r4, #48	; 0x30
 800b404:	d107      	bne.n	800b416 <_strtoul_l.constprop.0+0x3e>
 800b406:	7828      	ldrb	r0, [r5, #0]
 800b408:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b40c:	2858      	cmp	r0, #88	; 0x58
 800b40e:	d149      	bne.n	800b4a4 <_strtoul_l.constprop.0+0xcc>
 800b410:	786c      	ldrb	r4, [r5, #1]
 800b412:	2310      	movs	r3, #16
 800b414:	3502      	adds	r5, #2
 800b416:	f04f 38ff 	mov.w	r8, #4294967295
 800b41a:	2700      	movs	r7, #0
 800b41c:	fbb8 f8f3 	udiv	r8, r8, r3
 800b420:	fb03 f908 	mul.w	r9, r3, r8
 800b424:	ea6f 0909 	mvn.w	r9, r9
 800b428:	4638      	mov	r0, r7
 800b42a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b42e:	f1bc 0f09 	cmp.w	ip, #9
 800b432:	d814      	bhi.n	800b45e <_strtoul_l.constprop.0+0x86>
 800b434:	4664      	mov	r4, ip
 800b436:	42a3      	cmp	r3, r4
 800b438:	dd22      	ble.n	800b480 <_strtoul_l.constprop.0+0xa8>
 800b43a:	2f00      	cmp	r7, #0
 800b43c:	db1d      	blt.n	800b47a <_strtoul_l.constprop.0+0xa2>
 800b43e:	4580      	cmp	r8, r0
 800b440:	d31b      	bcc.n	800b47a <_strtoul_l.constprop.0+0xa2>
 800b442:	d101      	bne.n	800b448 <_strtoul_l.constprop.0+0x70>
 800b444:	45a1      	cmp	r9, r4
 800b446:	db18      	blt.n	800b47a <_strtoul_l.constprop.0+0xa2>
 800b448:	fb00 4003 	mla	r0, r0, r3, r4
 800b44c:	2701      	movs	r7, #1
 800b44e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b452:	e7ea      	b.n	800b42a <_strtoul_l.constprop.0+0x52>
 800b454:	2c2b      	cmp	r4, #43	; 0x2b
 800b456:	bf04      	itt	eq
 800b458:	782c      	ldrbeq	r4, [r5, #0]
 800b45a:	1c85      	addeq	r5, r0, #2
 800b45c:	e7cd      	b.n	800b3fa <_strtoul_l.constprop.0+0x22>
 800b45e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b462:	f1bc 0f19 	cmp.w	ip, #25
 800b466:	d801      	bhi.n	800b46c <_strtoul_l.constprop.0+0x94>
 800b468:	3c37      	subs	r4, #55	; 0x37
 800b46a:	e7e4      	b.n	800b436 <_strtoul_l.constprop.0+0x5e>
 800b46c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b470:	f1bc 0f19 	cmp.w	ip, #25
 800b474:	d804      	bhi.n	800b480 <_strtoul_l.constprop.0+0xa8>
 800b476:	3c57      	subs	r4, #87	; 0x57
 800b478:	e7dd      	b.n	800b436 <_strtoul_l.constprop.0+0x5e>
 800b47a:	f04f 37ff 	mov.w	r7, #4294967295
 800b47e:	e7e6      	b.n	800b44e <_strtoul_l.constprop.0+0x76>
 800b480:	2f00      	cmp	r7, #0
 800b482:	da07      	bge.n	800b494 <_strtoul_l.constprop.0+0xbc>
 800b484:	2322      	movs	r3, #34	; 0x22
 800b486:	f8ce 3000 	str.w	r3, [lr]
 800b48a:	f04f 30ff 	mov.w	r0, #4294967295
 800b48e:	b932      	cbnz	r2, 800b49e <_strtoul_l.constprop.0+0xc6>
 800b490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b494:	b106      	cbz	r6, 800b498 <_strtoul_l.constprop.0+0xc0>
 800b496:	4240      	negs	r0, r0
 800b498:	2a00      	cmp	r2, #0
 800b49a:	d0f9      	beq.n	800b490 <_strtoul_l.constprop.0+0xb8>
 800b49c:	b107      	cbz	r7, 800b4a0 <_strtoul_l.constprop.0+0xc8>
 800b49e:	1e69      	subs	r1, r5, #1
 800b4a0:	6011      	str	r1, [r2, #0]
 800b4a2:	e7f5      	b.n	800b490 <_strtoul_l.constprop.0+0xb8>
 800b4a4:	2430      	movs	r4, #48	; 0x30
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1b5      	bne.n	800b416 <_strtoul_l.constprop.0+0x3e>
 800b4aa:	2308      	movs	r3, #8
 800b4ac:	e7b3      	b.n	800b416 <_strtoul_l.constprop.0+0x3e>
 800b4ae:	2c30      	cmp	r4, #48	; 0x30
 800b4b0:	d0a9      	beq.n	800b406 <_strtoul_l.constprop.0+0x2e>
 800b4b2:	230a      	movs	r3, #10
 800b4b4:	e7af      	b.n	800b416 <_strtoul_l.constprop.0+0x3e>
 800b4b6:	bf00      	nop
 800b4b8:	0800c109 	.word	0x0800c109

0800b4bc <_strtoul_r>:
 800b4bc:	f7ff bf8c 	b.w	800b3d8 <_strtoul_l.constprop.0>

0800b4c0 <__submore>:
 800b4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4cc:	4299      	cmp	r1, r3
 800b4ce:	d11d      	bne.n	800b50c <__submore+0x4c>
 800b4d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4d4:	f7ff fa28 	bl	800a928 <_malloc_r>
 800b4d8:	b918      	cbnz	r0, 800b4e2 <__submore+0x22>
 800b4da:	f04f 30ff 	mov.w	r0, #4294967295
 800b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e6:	63a3      	str	r3, [r4, #56]	; 0x38
 800b4e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b4ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b4f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b4f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b4fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b4fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b502:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b506:	6020      	str	r0, [r4, #0]
 800b508:	2000      	movs	r0, #0
 800b50a:	e7e8      	b.n	800b4de <__submore+0x1e>
 800b50c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b50e:	0077      	lsls	r7, r6, #1
 800b510:	463a      	mov	r2, r7
 800b512:	f000 fa2d 	bl	800b970 <_realloc_r>
 800b516:	4605      	mov	r5, r0
 800b518:	2800      	cmp	r0, #0
 800b51a:	d0de      	beq.n	800b4da <__submore+0x1a>
 800b51c:	eb00 0806 	add.w	r8, r0, r6
 800b520:	4601      	mov	r1, r0
 800b522:	4632      	mov	r2, r6
 800b524:	4640      	mov	r0, r8
 800b526:	f7fe fcad 	bl	8009e84 <memcpy>
 800b52a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b52e:	f8c4 8000 	str.w	r8, [r4]
 800b532:	e7e9      	b.n	800b508 <__submore+0x48>

0800b534 <__ascii_wctomb>:
 800b534:	b149      	cbz	r1, 800b54a <__ascii_wctomb+0x16>
 800b536:	2aff      	cmp	r2, #255	; 0xff
 800b538:	bf85      	ittet	hi
 800b53a:	238a      	movhi	r3, #138	; 0x8a
 800b53c:	6003      	strhi	r3, [r0, #0]
 800b53e:	700a      	strbls	r2, [r1, #0]
 800b540:	f04f 30ff 	movhi.w	r0, #4294967295
 800b544:	bf98      	it	ls
 800b546:	2001      	movls	r0, #1
 800b548:	4770      	bx	lr
 800b54a:	4608      	mov	r0, r1
 800b54c:	4770      	bx	lr
	...

0800b550 <__assert_func>:
 800b550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b552:	4614      	mov	r4, r2
 800b554:	461a      	mov	r2, r3
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <__assert_func+0x2c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4605      	mov	r5, r0
 800b55c:	68d8      	ldr	r0, [r3, #12]
 800b55e:	b14c      	cbz	r4, 800b574 <__assert_func+0x24>
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <__assert_func+0x30>)
 800b562:	9100      	str	r1, [sp, #0]
 800b564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b568:	4906      	ldr	r1, [pc, #24]	; (800b584 <__assert_func+0x34>)
 800b56a:	462b      	mov	r3, r5
 800b56c:	f000 f9a6 	bl	800b8bc <fiprintf>
 800b570:	f000 fc46 	bl	800be00 <abort>
 800b574:	4b04      	ldr	r3, [pc, #16]	; (800b588 <__assert_func+0x38>)
 800b576:	461c      	mov	r4, r3
 800b578:	e7f3      	b.n	800b562 <__assert_func+0x12>
 800b57a:	bf00      	nop
 800b57c:	20000808 	.word	0x20000808
 800b580:	0800c498 	.word	0x0800c498
 800b584:	0800c4a5 	.word	0x0800c4a5
 800b588:	0800c4d3 	.word	0x0800c4d3

0800b58c <__sflush_r>:
 800b58c:	898a      	ldrh	r2, [r1, #12]
 800b58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b592:	4605      	mov	r5, r0
 800b594:	0710      	lsls	r0, r2, #28
 800b596:	460c      	mov	r4, r1
 800b598:	d458      	bmi.n	800b64c <__sflush_r+0xc0>
 800b59a:	684b      	ldr	r3, [r1, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dc05      	bgt.n	800b5ac <__sflush_r+0x20>
 800b5a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	dc02      	bgt.n	800b5ac <__sflush_r+0x20>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	d0f9      	beq.n	800b5a6 <__sflush_r+0x1a>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5b8:	682f      	ldr	r7, [r5, #0]
 800b5ba:	602b      	str	r3, [r5, #0]
 800b5bc:	d032      	beq.n	800b624 <__sflush_r+0x98>
 800b5be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	075a      	lsls	r2, r3, #29
 800b5c4:	d505      	bpl.n	800b5d2 <__sflush_r+0x46>
 800b5c6:	6863      	ldr	r3, [r4, #4]
 800b5c8:	1ac0      	subs	r0, r0, r3
 800b5ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5cc:	b10b      	cbz	r3, 800b5d2 <__sflush_r+0x46>
 800b5ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5d0:	1ac0      	subs	r0, r0, r3
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5d8:	6a21      	ldr	r1, [r4, #32]
 800b5da:	4628      	mov	r0, r5
 800b5dc:	47b0      	blx	r6
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	d106      	bne.n	800b5f2 <__sflush_r+0x66>
 800b5e4:	6829      	ldr	r1, [r5, #0]
 800b5e6:	291d      	cmp	r1, #29
 800b5e8:	d82c      	bhi.n	800b644 <__sflush_r+0xb8>
 800b5ea:	4a2a      	ldr	r2, [pc, #168]	; (800b694 <__sflush_r+0x108>)
 800b5ec:	40ca      	lsrs	r2, r1
 800b5ee:	07d6      	lsls	r6, r2, #31
 800b5f0:	d528      	bpl.n	800b644 <__sflush_r+0xb8>
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	6062      	str	r2, [r4, #4]
 800b5f6:	04d9      	lsls	r1, r3, #19
 800b5f8:	6922      	ldr	r2, [r4, #16]
 800b5fa:	6022      	str	r2, [r4, #0]
 800b5fc:	d504      	bpl.n	800b608 <__sflush_r+0x7c>
 800b5fe:	1c42      	adds	r2, r0, #1
 800b600:	d101      	bne.n	800b606 <__sflush_r+0x7a>
 800b602:	682b      	ldr	r3, [r5, #0]
 800b604:	b903      	cbnz	r3, 800b608 <__sflush_r+0x7c>
 800b606:	6560      	str	r0, [r4, #84]	; 0x54
 800b608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60a:	602f      	str	r7, [r5, #0]
 800b60c:	2900      	cmp	r1, #0
 800b60e:	d0ca      	beq.n	800b5a6 <__sflush_r+0x1a>
 800b610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b614:	4299      	cmp	r1, r3
 800b616:	d002      	beq.n	800b61e <__sflush_r+0x92>
 800b618:	4628      	mov	r0, r5
 800b61a:	f7ff f919 	bl	800a850 <_free_r>
 800b61e:	2000      	movs	r0, #0
 800b620:	6360      	str	r0, [r4, #52]	; 0x34
 800b622:	e7c1      	b.n	800b5a8 <__sflush_r+0x1c>
 800b624:	6a21      	ldr	r1, [r4, #32]
 800b626:	2301      	movs	r3, #1
 800b628:	4628      	mov	r0, r5
 800b62a:	47b0      	blx	r6
 800b62c:	1c41      	adds	r1, r0, #1
 800b62e:	d1c7      	bne.n	800b5c0 <__sflush_r+0x34>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0c4      	beq.n	800b5c0 <__sflush_r+0x34>
 800b636:	2b1d      	cmp	r3, #29
 800b638:	d001      	beq.n	800b63e <__sflush_r+0xb2>
 800b63a:	2b16      	cmp	r3, #22
 800b63c:	d101      	bne.n	800b642 <__sflush_r+0xb6>
 800b63e:	602f      	str	r7, [r5, #0]
 800b640:	e7b1      	b.n	800b5a6 <__sflush_r+0x1a>
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b648:	81a3      	strh	r3, [r4, #12]
 800b64a:	e7ad      	b.n	800b5a8 <__sflush_r+0x1c>
 800b64c:	690f      	ldr	r7, [r1, #16]
 800b64e:	2f00      	cmp	r7, #0
 800b650:	d0a9      	beq.n	800b5a6 <__sflush_r+0x1a>
 800b652:	0793      	lsls	r3, r2, #30
 800b654:	680e      	ldr	r6, [r1, #0]
 800b656:	bf08      	it	eq
 800b658:	694b      	ldreq	r3, [r1, #20]
 800b65a:	600f      	str	r7, [r1, #0]
 800b65c:	bf18      	it	ne
 800b65e:	2300      	movne	r3, #0
 800b660:	eba6 0807 	sub.w	r8, r6, r7
 800b664:	608b      	str	r3, [r1, #8]
 800b666:	f1b8 0f00 	cmp.w	r8, #0
 800b66a:	dd9c      	ble.n	800b5a6 <__sflush_r+0x1a>
 800b66c:	6a21      	ldr	r1, [r4, #32]
 800b66e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b670:	4643      	mov	r3, r8
 800b672:	463a      	mov	r2, r7
 800b674:	4628      	mov	r0, r5
 800b676:	47b0      	blx	r6
 800b678:	2800      	cmp	r0, #0
 800b67a:	dc06      	bgt.n	800b68a <__sflush_r+0xfe>
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	e78e      	b.n	800b5a8 <__sflush_r+0x1c>
 800b68a:	4407      	add	r7, r0
 800b68c:	eba8 0800 	sub.w	r8, r8, r0
 800b690:	e7e9      	b.n	800b666 <__sflush_r+0xda>
 800b692:	bf00      	nop
 800b694:	20400001 	.word	0x20400001

0800b698 <_fflush_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	690b      	ldr	r3, [r1, #16]
 800b69c:	4605      	mov	r5, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	b913      	cbnz	r3, 800b6a8 <_fflush_r+0x10>
 800b6a2:	2500      	movs	r5, #0
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	b118      	cbz	r0, 800b6b2 <_fflush_r+0x1a>
 800b6aa:	6983      	ldr	r3, [r0, #24]
 800b6ac:	b90b      	cbnz	r3, 800b6b2 <_fflush_r+0x1a>
 800b6ae:	f000 f887 	bl	800b7c0 <__sinit>
 800b6b2:	4b14      	ldr	r3, [pc, #80]	; (800b704 <_fflush_r+0x6c>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	d11b      	bne.n	800b6f0 <_fflush_r+0x58>
 800b6b8:	686c      	ldr	r4, [r5, #4]
 800b6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0ef      	beq.n	800b6a2 <_fflush_r+0xa>
 800b6c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6c4:	07d0      	lsls	r0, r2, #31
 800b6c6:	d404      	bmi.n	800b6d2 <_fflush_r+0x3a>
 800b6c8:	0599      	lsls	r1, r3, #22
 800b6ca:	d402      	bmi.n	800b6d2 <_fflush_r+0x3a>
 800b6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ce:	f000 f927 	bl	800b920 <__retarget_lock_acquire_recursive>
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	f7ff ff59 	bl	800b58c <__sflush_r>
 800b6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6dc:	07da      	lsls	r2, r3, #31
 800b6de:	4605      	mov	r5, r0
 800b6e0:	d4e0      	bmi.n	800b6a4 <_fflush_r+0xc>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	059b      	lsls	r3, r3, #22
 800b6e6:	d4dd      	bmi.n	800b6a4 <_fflush_r+0xc>
 800b6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ea:	f000 f91a 	bl	800b922 <__retarget_lock_release_recursive>
 800b6ee:	e7d9      	b.n	800b6a4 <_fflush_r+0xc>
 800b6f0:	4b05      	ldr	r3, [pc, #20]	; (800b708 <_fflush_r+0x70>)
 800b6f2:	429c      	cmp	r4, r3
 800b6f4:	d101      	bne.n	800b6fa <_fflush_r+0x62>
 800b6f6:	68ac      	ldr	r4, [r5, #8]
 800b6f8:	e7df      	b.n	800b6ba <_fflush_r+0x22>
 800b6fa:	4b04      	ldr	r3, [pc, #16]	; (800b70c <_fflush_r+0x74>)
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	bf08      	it	eq
 800b700:	68ec      	ldreq	r4, [r5, #12]
 800b702:	e7da      	b.n	800b6ba <_fflush_r+0x22>
 800b704:	0800c4f4 	.word	0x0800c4f4
 800b708:	0800c514 	.word	0x0800c514
 800b70c:	0800c4d4 	.word	0x0800c4d4

0800b710 <std>:
 800b710:	2300      	movs	r3, #0
 800b712:	b510      	push	{r4, lr}
 800b714:	4604      	mov	r4, r0
 800b716:	e9c0 3300 	strd	r3, r3, [r0]
 800b71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b71e:	6083      	str	r3, [r0, #8]
 800b720:	8181      	strh	r1, [r0, #12]
 800b722:	6643      	str	r3, [r0, #100]	; 0x64
 800b724:	81c2      	strh	r2, [r0, #14]
 800b726:	6183      	str	r3, [r0, #24]
 800b728:	4619      	mov	r1, r3
 800b72a:	2208      	movs	r2, #8
 800b72c:	305c      	adds	r0, #92	; 0x5c
 800b72e:	f7fb fb6f 	bl	8006e10 <memset>
 800b732:	4b05      	ldr	r3, [pc, #20]	; (800b748 <std+0x38>)
 800b734:	6263      	str	r3, [r4, #36]	; 0x24
 800b736:	4b05      	ldr	r3, [pc, #20]	; (800b74c <std+0x3c>)
 800b738:	62a3      	str	r3, [r4, #40]	; 0x28
 800b73a:	4b05      	ldr	r3, [pc, #20]	; (800b750 <std+0x40>)
 800b73c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b73e:	4b05      	ldr	r3, [pc, #20]	; (800b754 <std+0x44>)
 800b740:	6224      	str	r4, [r4, #32]
 800b742:	6323      	str	r3, [r4, #48]	; 0x30
 800b744:	bd10      	pop	{r4, pc}
 800b746:	bf00      	nop
 800b748:	08007bb9 	.word	0x08007bb9
 800b74c:	08007bdf 	.word	0x08007bdf
 800b750:	08007c17 	.word	0x08007c17
 800b754:	08007c3b 	.word	0x08007c3b

0800b758 <_cleanup_r>:
 800b758:	4901      	ldr	r1, [pc, #4]	; (800b760 <_cleanup_r+0x8>)
 800b75a:	f000 b8c1 	b.w	800b8e0 <_fwalk_reent>
 800b75e:	bf00      	nop
 800b760:	0800b699 	.word	0x0800b699

0800b764 <__sfmoreglue>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	2268      	movs	r2, #104	; 0x68
 800b768:	1e4d      	subs	r5, r1, #1
 800b76a:	4355      	muls	r5, r2
 800b76c:	460e      	mov	r6, r1
 800b76e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b772:	f7ff f8d9 	bl	800a928 <_malloc_r>
 800b776:	4604      	mov	r4, r0
 800b778:	b140      	cbz	r0, 800b78c <__sfmoreglue+0x28>
 800b77a:	2100      	movs	r1, #0
 800b77c:	e9c0 1600 	strd	r1, r6, [r0]
 800b780:	300c      	adds	r0, #12
 800b782:	60a0      	str	r0, [r4, #8]
 800b784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b788:	f7fb fb42 	bl	8006e10 <memset>
 800b78c:	4620      	mov	r0, r4
 800b78e:	bd70      	pop	{r4, r5, r6, pc}

0800b790 <__sfp_lock_acquire>:
 800b790:	4801      	ldr	r0, [pc, #4]	; (800b798 <__sfp_lock_acquire+0x8>)
 800b792:	f000 b8c5 	b.w	800b920 <__retarget_lock_acquire_recursive>
 800b796:	bf00      	nop
 800b798:	200010b9 	.word	0x200010b9

0800b79c <__sfp_lock_release>:
 800b79c:	4801      	ldr	r0, [pc, #4]	; (800b7a4 <__sfp_lock_release+0x8>)
 800b79e:	f000 b8c0 	b.w	800b922 <__retarget_lock_release_recursive>
 800b7a2:	bf00      	nop
 800b7a4:	200010b9 	.word	0x200010b9

0800b7a8 <__sinit_lock_acquire>:
 800b7a8:	4801      	ldr	r0, [pc, #4]	; (800b7b0 <__sinit_lock_acquire+0x8>)
 800b7aa:	f000 b8b9 	b.w	800b920 <__retarget_lock_acquire_recursive>
 800b7ae:	bf00      	nop
 800b7b0:	200010ba 	.word	0x200010ba

0800b7b4 <__sinit_lock_release>:
 800b7b4:	4801      	ldr	r0, [pc, #4]	; (800b7bc <__sinit_lock_release+0x8>)
 800b7b6:	f000 b8b4 	b.w	800b922 <__retarget_lock_release_recursive>
 800b7ba:	bf00      	nop
 800b7bc:	200010ba 	.word	0x200010ba

0800b7c0 <__sinit>:
 800b7c0:	b510      	push	{r4, lr}
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	f7ff fff0 	bl	800b7a8 <__sinit_lock_acquire>
 800b7c8:	69a3      	ldr	r3, [r4, #24]
 800b7ca:	b11b      	cbz	r3, 800b7d4 <__sinit+0x14>
 800b7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d0:	f7ff bff0 	b.w	800b7b4 <__sinit_lock_release>
 800b7d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7d8:	6523      	str	r3, [r4, #80]	; 0x50
 800b7da:	4b13      	ldr	r3, [pc, #76]	; (800b828 <__sinit+0x68>)
 800b7dc:	4a13      	ldr	r2, [pc, #76]	; (800b82c <__sinit+0x6c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7e2:	42a3      	cmp	r3, r4
 800b7e4:	bf04      	itt	eq
 800b7e6:	2301      	moveq	r3, #1
 800b7e8:	61a3      	streq	r3, [r4, #24]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 f820 	bl	800b830 <__sfp>
 800b7f0:	6060      	str	r0, [r4, #4]
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 f81c 	bl	800b830 <__sfp>
 800b7f8:	60a0      	str	r0, [r4, #8]
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f000 f818 	bl	800b830 <__sfp>
 800b800:	2200      	movs	r2, #0
 800b802:	60e0      	str	r0, [r4, #12]
 800b804:	2104      	movs	r1, #4
 800b806:	6860      	ldr	r0, [r4, #4]
 800b808:	f7ff ff82 	bl	800b710 <std>
 800b80c:	68a0      	ldr	r0, [r4, #8]
 800b80e:	2201      	movs	r2, #1
 800b810:	2109      	movs	r1, #9
 800b812:	f7ff ff7d 	bl	800b710 <std>
 800b816:	68e0      	ldr	r0, [r4, #12]
 800b818:	2202      	movs	r2, #2
 800b81a:	2112      	movs	r1, #18
 800b81c:	f7ff ff78 	bl	800b710 <std>
 800b820:	2301      	movs	r3, #1
 800b822:	61a3      	str	r3, [r4, #24]
 800b824:	e7d2      	b.n	800b7cc <__sinit+0xc>
 800b826:	bf00      	nop
 800b828:	0800c078 	.word	0x0800c078
 800b82c:	0800b759 	.word	0x0800b759

0800b830 <__sfp>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	4607      	mov	r7, r0
 800b834:	f7ff ffac 	bl	800b790 <__sfp_lock_acquire>
 800b838:	4b1e      	ldr	r3, [pc, #120]	; (800b8b4 <__sfp+0x84>)
 800b83a:	681e      	ldr	r6, [r3, #0]
 800b83c:	69b3      	ldr	r3, [r6, #24]
 800b83e:	b913      	cbnz	r3, 800b846 <__sfp+0x16>
 800b840:	4630      	mov	r0, r6
 800b842:	f7ff ffbd 	bl	800b7c0 <__sinit>
 800b846:	3648      	adds	r6, #72	; 0x48
 800b848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b84c:	3b01      	subs	r3, #1
 800b84e:	d503      	bpl.n	800b858 <__sfp+0x28>
 800b850:	6833      	ldr	r3, [r6, #0]
 800b852:	b30b      	cbz	r3, 800b898 <__sfp+0x68>
 800b854:	6836      	ldr	r6, [r6, #0]
 800b856:	e7f7      	b.n	800b848 <__sfp+0x18>
 800b858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b85c:	b9d5      	cbnz	r5, 800b894 <__sfp+0x64>
 800b85e:	4b16      	ldr	r3, [pc, #88]	; (800b8b8 <__sfp+0x88>)
 800b860:	60e3      	str	r3, [r4, #12]
 800b862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b866:	6665      	str	r5, [r4, #100]	; 0x64
 800b868:	f000 f859 	bl	800b91e <__retarget_lock_init_recursive>
 800b86c:	f7ff ff96 	bl	800b79c <__sfp_lock_release>
 800b870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b878:	6025      	str	r5, [r4, #0]
 800b87a:	61a5      	str	r5, [r4, #24]
 800b87c:	2208      	movs	r2, #8
 800b87e:	4629      	mov	r1, r5
 800b880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b884:	f7fb fac4 	bl	8006e10 <memset>
 800b888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b88c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b890:	4620      	mov	r0, r4
 800b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b894:	3468      	adds	r4, #104	; 0x68
 800b896:	e7d9      	b.n	800b84c <__sfp+0x1c>
 800b898:	2104      	movs	r1, #4
 800b89a:	4638      	mov	r0, r7
 800b89c:	f7ff ff62 	bl	800b764 <__sfmoreglue>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	6030      	str	r0, [r6, #0]
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d1d5      	bne.n	800b854 <__sfp+0x24>
 800b8a8:	f7ff ff78 	bl	800b79c <__sfp_lock_release>
 800b8ac:	230c      	movs	r3, #12
 800b8ae:	603b      	str	r3, [r7, #0]
 800b8b0:	e7ee      	b.n	800b890 <__sfp+0x60>
 800b8b2:	bf00      	nop
 800b8b4:	0800c078 	.word	0x0800c078
 800b8b8:	ffff0001 	.word	0xffff0001

0800b8bc <fiprintf>:
 800b8bc:	b40e      	push	{r1, r2, r3}
 800b8be:	b503      	push	{r0, r1, lr}
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	ab03      	add	r3, sp, #12
 800b8c4:	4805      	ldr	r0, [pc, #20]	; (800b8dc <fiprintf+0x20>)
 800b8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ca:	6800      	ldr	r0, [r0, #0]
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	f000 f8a7 	bl	800ba20 <_vfiprintf_r>
 800b8d2:	b002      	add	sp, #8
 800b8d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8d8:	b003      	add	sp, #12
 800b8da:	4770      	bx	lr
 800b8dc:	20000808 	.word	0x20000808

0800b8e0 <_fwalk_reent>:
 800b8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	4688      	mov	r8, r1
 800b8e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8ec:	2700      	movs	r7, #0
 800b8ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b8f6:	d505      	bpl.n	800b904 <_fwalk_reent+0x24>
 800b8f8:	6824      	ldr	r4, [r4, #0]
 800b8fa:	2c00      	cmp	r4, #0
 800b8fc:	d1f7      	bne.n	800b8ee <_fwalk_reent+0xe>
 800b8fe:	4638      	mov	r0, r7
 800b900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b904:	89ab      	ldrh	r3, [r5, #12]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d907      	bls.n	800b91a <_fwalk_reent+0x3a>
 800b90a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b90e:	3301      	adds	r3, #1
 800b910:	d003      	beq.n	800b91a <_fwalk_reent+0x3a>
 800b912:	4629      	mov	r1, r5
 800b914:	4630      	mov	r0, r6
 800b916:	47c0      	blx	r8
 800b918:	4307      	orrs	r7, r0
 800b91a:	3568      	adds	r5, #104	; 0x68
 800b91c:	e7e9      	b.n	800b8f2 <_fwalk_reent+0x12>

0800b91e <__retarget_lock_init_recursive>:
 800b91e:	4770      	bx	lr

0800b920 <__retarget_lock_acquire_recursive>:
 800b920:	4770      	bx	lr

0800b922 <__retarget_lock_release_recursive>:
 800b922:	4770      	bx	lr

0800b924 <memmove>:
 800b924:	4288      	cmp	r0, r1
 800b926:	b510      	push	{r4, lr}
 800b928:	eb01 0402 	add.w	r4, r1, r2
 800b92c:	d902      	bls.n	800b934 <memmove+0x10>
 800b92e:	4284      	cmp	r4, r0
 800b930:	4623      	mov	r3, r4
 800b932:	d807      	bhi.n	800b944 <memmove+0x20>
 800b934:	1e43      	subs	r3, r0, #1
 800b936:	42a1      	cmp	r1, r4
 800b938:	d008      	beq.n	800b94c <memmove+0x28>
 800b93a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b93e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b942:	e7f8      	b.n	800b936 <memmove+0x12>
 800b944:	4402      	add	r2, r0
 800b946:	4601      	mov	r1, r0
 800b948:	428a      	cmp	r2, r1
 800b94a:	d100      	bne.n	800b94e <memmove+0x2a>
 800b94c:	bd10      	pop	{r4, pc}
 800b94e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b956:	e7f7      	b.n	800b948 <memmove+0x24>

0800b958 <__malloc_lock>:
 800b958:	4801      	ldr	r0, [pc, #4]	; (800b960 <__malloc_lock+0x8>)
 800b95a:	f7ff bfe1 	b.w	800b920 <__retarget_lock_acquire_recursive>
 800b95e:	bf00      	nop
 800b960:	200010b8 	.word	0x200010b8

0800b964 <__malloc_unlock>:
 800b964:	4801      	ldr	r0, [pc, #4]	; (800b96c <__malloc_unlock+0x8>)
 800b966:	f7ff bfdc 	b.w	800b922 <__retarget_lock_release_recursive>
 800b96a:	bf00      	nop
 800b96c:	200010b8 	.word	0x200010b8

0800b970 <_realloc_r>:
 800b970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b974:	4680      	mov	r8, r0
 800b976:	4614      	mov	r4, r2
 800b978:	460e      	mov	r6, r1
 800b97a:	b921      	cbnz	r1, 800b986 <_realloc_r+0x16>
 800b97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b980:	4611      	mov	r1, r2
 800b982:	f7fe bfd1 	b.w	800a928 <_malloc_r>
 800b986:	b92a      	cbnz	r2, 800b994 <_realloc_r+0x24>
 800b988:	f7fe ff62 	bl	800a850 <_free_r>
 800b98c:	4625      	mov	r5, r4
 800b98e:	4628      	mov	r0, r5
 800b990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b994:	f000 faa0 	bl	800bed8 <_malloc_usable_size_r>
 800b998:	4284      	cmp	r4, r0
 800b99a:	4607      	mov	r7, r0
 800b99c:	d802      	bhi.n	800b9a4 <_realloc_r+0x34>
 800b99e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9a2:	d812      	bhi.n	800b9ca <_realloc_r+0x5a>
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	f7fe ffbe 	bl	800a928 <_malloc_r>
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0ed      	beq.n	800b98e <_realloc_r+0x1e>
 800b9b2:	42bc      	cmp	r4, r7
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	bf28      	it	cs
 800b9ba:	463a      	movcs	r2, r7
 800b9bc:	f7fe fa62 	bl	8009e84 <memcpy>
 800b9c0:	4631      	mov	r1, r6
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	f7fe ff44 	bl	800a850 <_free_r>
 800b9c8:	e7e1      	b.n	800b98e <_realloc_r+0x1e>
 800b9ca:	4635      	mov	r5, r6
 800b9cc:	e7df      	b.n	800b98e <_realloc_r+0x1e>

0800b9ce <__sfputc_r>:
 800b9ce:	6893      	ldr	r3, [r2, #8]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	b410      	push	{r4}
 800b9d6:	6093      	str	r3, [r2, #8]
 800b9d8:	da08      	bge.n	800b9ec <__sfputc_r+0x1e>
 800b9da:	6994      	ldr	r4, [r2, #24]
 800b9dc:	42a3      	cmp	r3, r4
 800b9de:	db01      	blt.n	800b9e4 <__sfputc_r+0x16>
 800b9e0:	290a      	cmp	r1, #10
 800b9e2:	d103      	bne.n	800b9ec <__sfputc_r+0x1e>
 800b9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e8:	f000 b94a 	b.w	800bc80 <__swbuf_r>
 800b9ec:	6813      	ldr	r3, [r2, #0]
 800b9ee:	1c58      	adds	r0, r3, #1
 800b9f0:	6010      	str	r0, [r2, #0]
 800b9f2:	7019      	strb	r1, [r3, #0]
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <__sfputs_r>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	4606      	mov	r6, r0
 800ba00:	460f      	mov	r7, r1
 800ba02:	4614      	mov	r4, r2
 800ba04:	18d5      	adds	r5, r2, r3
 800ba06:	42ac      	cmp	r4, r5
 800ba08:	d101      	bne.n	800ba0e <__sfputs_r+0x12>
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	e007      	b.n	800ba1e <__sfputs_r+0x22>
 800ba0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba12:	463a      	mov	r2, r7
 800ba14:	4630      	mov	r0, r6
 800ba16:	f7ff ffda 	bl	800b9ce <__sfputc_r>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d1f3      	bne.n	800ba06 <__sfputs_r+0xa>
 800ba1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba20 <_vfiprintf_r>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	460d      	mov	r5, r1
 800ba26:	b09d      	sub	sp, #116	; 0x74
 800ba28:	4614      	mov	r4, r2
 800ba2a:	4698      	mov	r8, r3
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	b118      	cbz	r0, 800ba38 <_vfiprintf_r+0x18>
 800ba30:	6983      	ldr	r3, [r0, #24]
 800ba32:	b90b      	cbnz	r3, 800ba38 <_vfiprintf_r+0x18>
 800ba34:	f7ff fec4 	bl	800b7c0 <__sinit>
 800ba38:	4b89      	ldr	r3, [pc, #548]	; (800bc60 <_vfiprintf_r+0x240>)
 800ba3a:	429d      	cmp	r5, r3
 800ba3c:	d11b      	bne.n	800ba76 <_vfiprintf_r+0x56>
 800ba3e:	6875      	ldr	r5, [r6, #4]
 800ba40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba42:	07d9      	lsls	r1, r3, #31
 800ba44:	d405      	bmi.n	800ba52 <_vfiprintf_r+0x32>
 800ba46:	89ab      	ldrh	r3, [r5, #12]
 800ba48:	059a      	lsls	r2, r3, #22
 800ba4a:	d402      	bmi.n	800ba52 <_vfiprintf_r+0x32>
 800ba4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba4e:	f7ff ff67 	bl	800b920 <__retarget_lock_acquire_recursive>
 800ba52:	89ab      	ldrh	r3, [r5, #12]
 800ba54:	071b      	lsls	r3, r3, #28
 800ba56:	d501      	bpl.n	800ba5c <_vfiprintf_r+0x3c>
 800ba58:	692b      	ldr	r3, [r5, #16]
 800ba5a:	b9eb      	cbnz	r3, 800ba98 <_vfiprintf_r+0x78>
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f000 f960 	bl	800bd24 <__swsetup_r>
 800ba64:	b1c0      	cbz	r0, 800ba98 <_vfiprintf_r+0x78>
 800ba66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba68:	07dc      	lsls	r4, r3, #31
 800ba6a:	d50e      	bpl.n	800ba8a <_vfiprintf_r+0x6a>
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	b01d      	add	sp, #116	; 0x74
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	4b7b      	ldr	r3, [pc, #492]	; (800bc64 <_vfiprintf_r+0x244>)
 800ba78:	429d      	cmp	r5, r3
 800ba7a:	d101      	bne.n	800ba80 <_vfiprintf_r+0x60>
 800ba7c:	68b5      	ldr	r5, [r6, #8]
 800ba7e:	e7df      	b.n	800ba40 <_vfiprintf_r+0x20>
 800ba80:	4b79      	ldr	r3, [pc, #484]	; (800bc68 <_vfiprintf_r+0x248>)
 800ba82:	429d      	cmp	r5, r3
 800ba84:	bf08      	it	eq
 800ba86:	68f5      	ldreq	r5, [r6, #12]
 800ba88:	e7da      	b.n	800ba40 <_vfiprintf_r+0x20>
 800ba8a:	89ab      	ldrh	r3, [r5, #12]
 800ba8c:	0598      	lsls	r0, r3, #22
 800ba8e:	d4ed      	bmi.n	800ba6c <_vfiprintf_r+0x4c>
 800ba90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba92:	f7ff ff46 	bl	800b922 <__retarget_lock_release_recursive>
 800ba96:	e7e9      	b.n	800ba6c <_vfiprintf_r+0x4c>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba9c:	2320      	movs	r3, #32
 800ba9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800baa6:	2330      	movs	r3, #48	; 0x30
 800baa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc6c <_vfiprintf_r+0x24c>
 800baac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bab0:	f04f 0901 	mov.w	r9, #1
 800bab4:	4623      	mov	r3, r4
 800bab6:	469a      	mov	sl, r3
 800bab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800babc:	b10a      	cbz	r2, 800bac2 <_vfiprintf_r+0xa2>
 800babe:	2a25      	cmp	r2, #37	; 0x25
 800bac0:	d1f9      	bne.n	800bab6 <_vfiprintf_r+0x96>
 800bac2:	ebba 0b04 	subs.w	fp, sl, r4
 800bac6:	d00b      	beq.n	800bae0 <_vfiprintf_r+0xc0>
 800bac8:	465b      	mov	r3, fp
 800baca:	4622      	mov	r2, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	4630      	mov	r0, r6
 800bad0:	f7ff ff94 	bl	800b9fc <__sfputs_r>
 800bad4:	3001      	adds	r0, #1
 800bad6:	f000 80aa 	beq.w	800bc2e <_vfiprintf_r+0x20e>
 800bada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800badc:	445a      	add	r2, fp
 800bade:	9209      	str	r2, [sp, #36]	; 0x24
 800bae0:	f89a 3000 	ldrb.w	r3, [sl]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 80a2 	beq.w	800bc2e <_vfiprintf_r+0x20e>
 800baea:	2300      	movs	r3, #0
 800baec:	f04f 32ff 	mov.w	r2, #4294967295
 800baf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baf4:	f10a 0a01 	add.w	sl, sl, #1
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	9307      	str	r3, [sp, #28]
 800bafc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb00:	931a      	str	r3, [sp, #104]	; 0x68
 800bb02:	4654      	mov	r4, sl
 800bb04:	2205      	movs	r2, #5
 800bb06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb0a:	4858      	ldr	r0, [pc, #352]	; (800bc6c <_vfiprintf_r+0x24c>)
 800bb0c:	f7f4 fb78 	bl	8000200 <memchr>
 800bb10:	9a04      	ldr	r2, [sp, #16]
 800bb12:	b9d8      	cbnz	r0, 800bb4c <_vfiprintf_r+0x12c>
 800bb14:	06d1      	lsls	r1, r2, #27
 800bb16:	bf44      	itt	mi
 800bb18:	2320      	movmi	r3, #32
 800bb1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb1e:	0713      	lsls	r3, r2, #28
 800bb20:	bf44      	itt	mi
 800bb22:	232b      	movmi	r3, #43	; 0x2b
 800bb24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb28:	f89a 3000 	ldrb.w	r3, [sl]
 800bb2c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb2e:	d015      	beq.n	800bb5c <_vfiprintf_r+0x13c>
 800bb30:	9a07      	ldr	r2, [sp, #28]
 800bb32:	4654      	mov	r4, sl
 800bb34:	2000      	movs	r0, #0
 800bb36:	f04f 0c0a 	mov.w	ip, #10
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb40:	3b30      	subs	r3, #48	; 0x30
 800bb42:	2b09      	cmp	r3, #9
 800bb44:	d94e      	bls.n	800bbe4 <_vfiprintf_r+0x1c4>
 800bb46:	b1b0      	cbz	r0, 800bb76 <_vfiprintf_r+0x156>
 800bb48:	9207      	str	r2, [sp, #28]
 800bb4a:	e014      	b.n	800bb76 <_vfiprintf_r+0x156>
 800bb4c:	eba0 0308 	sub.w	r3, r0, r8
 800bb50:	fa09 f303 	lsl.w	r3, r9, r3
 800bb54:	4313      	orrs	r3, r2
 800bb56:	9304      	str	r3, [sp, #16]
 800bb58:	46a2      	mov	sl, r4
 800bb5a:	e7d2      	b.n	800bb02 <_vfiprintf_r+0xe2>
 800bb5c:	9b03      	ldr	r3, [sp, #12]
 800bb5e:	1d19      	adds	r1, r3, #4
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	9103      	str	r1, [sp, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bfbb      	ittet	lt
 800bb68:	425b      	neglt	r3, r3
 800bb6a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb6e:	9307      	strge	r3, [sp, #28]
 800bb70:	9307      	strlt	r3, [sp, #28]
 800bb72:	bfb8      	it	lt
 800bb74:	9204      	strlt	r2, [sp, #16]
 800bb76:	7823      	ldrb	r3, [r4, #0]
 800bb78:	2b2e      	cmp	r3, #46	; 0x2e
 800bb7a:	d10c      	bne.n	800bb96 <_vfiprintf_r+0x176>
 800bb7c:	7863      	ldrb	r3, [r4, #1]
 800bb7e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb80:	d135      	bne.n	800bbee <_vfiprintf_r+0x1ce>
 800bb82:	9b03      	ldr	r3, [sp, #12]
 800bb84:	1d1a      	adds	r2, r3, #4
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	9203      	str	r2, [sp, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	bfb8      	it	lt
 800bb8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb92:	3402      	adds	r4, #2
 800bb94:	9305      	str	r3, [sp, #20]
 800bb96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc7c <_vfiprintf_r+0x25c>
 800bb9a:	7821      	ldrb	r1, [r4, #0]
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	4650      	mov	r0, sl
 800bba0:	f7f4 fb2e 	bl	8000200 <memchr>
 800bba4:	b140      	cbz	r0, 800bbb8 <_vfiprintf_r+0x198>
 800bba6:	2340      	movs	r3, #64	; 0x40
 800bba8:	eba0 000a 	sub.w	r0, r0, sl
 800bbac:	fa03 f000 	lsl.w	r0, r3, r0
 800bbb0:	9b04      	ldr	r3, [sp, #16]
 800bbb2:	4303      	orrs	r3, r0
 800bbb4:	3401      	adds	r4, #1
 800bbb6:	9304      	str	r3, [sp, #16]
 800bbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbbc:	482c      	ldr	r0, [pc, #176]	; (800bc70 <_vfiprintf_r+0x250>)
 800bbbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbc2:	2206      	movs	r2, #6
 800bbc4:	f7f4 fb1c 	bl	8000200 <memchr>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d03f      	beq.n	800bc4c <_vfiprintf_r+0x22c>
 800bbcc:	4b29      	ldr	r3, [pc, #164]	; (800bc74 <_vfiprintf_r+0x254>)
 800bbce:	bb1b      	cbnz	r3, 800bc18 <_vfiprintf_r+0x1f8>
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	3307      	adds	r3, #7
 800bbd4:	f023 0307 	bic.w	r3, r3, #7
 800bbd8:	3308      	adds	r3, #8
 800bbda:	9303      	str	r3, [sp, #12]
 800bbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbde:	443b      	add	r3, r7
 800bbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe2:	e767      	b.n	800bab4 <_vfiprintf_r+0x94>
 800bbe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbe8:	460c      	mov	r4, r1
 800bbea:	2001      	movs	r0, #1
 800bbec:	e7a5      	b.n	800bb3a <_vfiprintf_r+0x11a>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	3401      	adds	r4, #1
 800bbf2:	9305      	str	r3, [sp, #20]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	f04f 0c0a 	mov.w	ip, #10
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc00:	3a30      	subs	r2, #48	; 0x30
 800bc02:	2a09      	cmp	r2, #9
 800bc04:	d903      	bls.n	800bc0e <_vfiprintf_r+0x1ee>
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d0c5      	beq.n	800bb96 <_vfiprintf_r+0x176>
 800bc0a:	9105      	str	r1, [sp, #20]
 800bc0c:	e7c3      	b.n	800bb96 <_vfiprintf_r+0x176>
 800bc0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc12:	4604      	mov	r4, r0
 800bc14:	2301      	movs	r3, #1
 800bc16:	e7f0      	b.n	800bbfa <_vfiprintf_r+0x1da>
 800bc18:	ab03      	add	r3, sp, #12
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	462a      	mov	r2, r5
 800bc1e:	4b16      	ldr	r3, [pc, #88]	; (800bc78 <_vfiprintf_r+0x258>)
 800bc20:	a904      	add	r1, sp, #16
 800bc22:	4630      	mov	r0, r6
 800bc24:	f7fb f99c 	bl	8006f60 <_printf_float>
 800bc28:	4607      	mov	r7, r0
 800bc2a:	1c78      	adds	r0, r7, #1
 800bc2c:	d1d6      	bne.n	800bbdc <_vfiprintf_r+0x1bc>
 800bc2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc30:	07d9      	lsls	r1, r3, #31
 800bc32:	d405      	bmi.n	800bc40 <_vfiprintf_r+0x220>
 800bc34:	89ab      	ldrh	r3, [r5, #12]
 800bc36:	059a      	lsls	r2, r3, #22
 800bc38:	d402      	bmi.n	800bc40 <_vfiprintf_r+0x220>
 800bc3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc3c:	f7ff fe71 	bl	800b922 <__retarget_lock_release_recursive>
 800bc40:	89ab      	ldrh	r3, [r5, #12]
 800bc42:	065b      	lsls	r3, r3, #25
 800bc44:	f53f af12 	bmi.w	800ba6c <_vfiprintf_r+0x4c>
 800bc48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc4a:	e711      	b.n	800ba70 <_vfiprintf_r+0x50>
 800bc4c:	ab03      	add	r3, sp, #12
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	462a      	mov	r2, r5
 800bc52:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <_vfiprintf_r+0x258>)
 800bc54:	a904      	add	r1, sp, #16
 800bc56:	4630      	mov	r0, r6
 800bc58:	f7fb fc26 	bl	80074a8 <_printf_i>
 800bc5c:	e7e4      	b.n	800bc28 <_vfiprintf_r+0x208>
 800bc5e:	bf00      	nop
 800bc60:	0800c4f4 	.word	0x0800c4f4
 800bc64:	0800c514 	.word	0x0800c514
 800bc68:	0800c4d4 	.word	0x0800c4d4
 800bc6c:	0800c46c 	.word	0x0800c46c
 800bc70:	0800c476 	.word	0x0800c476
 800bc74:	08006f61 	.word	0x08006f61
 800bc78:	0800b9fd 	.word	0x0800b9fd
 800bc7c:	0800c472 	.word	0x0800c472

0800bc80 <__swbuf_r>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	460e      	mov	r6, r1
 800bc84:	4614      	mov	r4, r2
 800bc86:	4605      	mov	r5, r0
 800bc88:	b118      	cbz	r0, 800bc92 <__swbuf_r+0x12>
 800bc8a:	6983      	ldr	r3, [r0, #24]
 800bc8c:	b90b      	cbnz	r3, 800bc92 <__swbuf_r+0x12>
 800bc8e:	f7ff fd97 	bl	800b7c0 <__sinit>
 800bc92:	4b21      	ldr	r3, [pc, #132]	; (800bd18 <__swbuf_r+0x98>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	d12b      	bne.n	800bcf0 <__swbuf_r+0x70>
 800bc98:	686c      	ldr	r4, [r5, #4]
 800bc9a:	69a3      	ldr	r3, [r4, #24]
 800bc9c:	60a3      	str	r3, [r4, #8]
 800bc9e:	89a3      	ldrh	r3, [r4, #12]
 800bca0:	071a      	lsls	r2, r3, #28
 800bca2:	d52f      	bpl.n	800bd04 <__swbuf_r+0x84>
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	b36b      	cbz	r3, 800bd04 <__swbuf_r+0x84>
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	6820      	ldr	r0, [r4, #0]
 800bcac:	1ac0      	subs	r0, r0, r3
 800bcae:	6963      	ldr	r3, [r4, #20]
 800bcb0:	b2f6      	uxtb	r6, r6
 800bcb2:	4283      	cmp	r3, r0
 800bcb4:	4637      	mov	r7, r6
 800bcb6:	dc04      	bgt.n	800bcc2 <__swbuf_r+0x42>
 800bcb8:	4621      	mov	r1, r4
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f7ff fcec 	bl	800b698 <_fflush_r>
 800bcc0:	bb30      	cbnz	r0, 800bd10 <__swbuf_r+0x90>
 800bcc2:	68a3      	ldr	r3, [r4, #8]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	60a3      	str	r3, [r4, #8]
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	1c5a      	adds	r2, r3, #1
 800bccc:	6022      	str	r2, [r4, #0]
 800bcce:	701e      	strb	r6, [r3, #0]
 800bcd0:	6963      	ldr	r3, [r4, #20]
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	4283      	cmp	r3, r0
 800bcd6:	d004      	beq.n	800bce2 <__swbuf_r+0x62>
 800bcd8:	89a3      	ldrh	r3, [r4, #12]
 800bcda:	07db      	lsls	r3, r3, #31
 800bcdc:	d506      	bpl.n	800bcec <__swbuf_r+0x6c>
 800bcde:	2e0a      	cmp	r6, #10
 800bce0:	d104      	bne.n	800bcec <__swbuf_r+0x6c>
 800bce2:	4621      	mov	r1, r4
 800bce4:	4628      	mov	r0, r5
 800bce6:	f7ff fcd7 	bl	800b698 <_fflush_r>
 800bcea:	b988      	cbnz	r0, 800bd10 <__swbuf_r+0x90>
 800bcec:	4638      	mov	r0, r7
 800bcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcf0:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <__swbuf_r+0x9c>)
 800bcf2:	429c      	cmp	r4, r3
 800bcf4:	d101      	bne.n	800bcfa <__swbuf_r+0x7a>
 800bcf6:	68ac      	ldr	r4, [r5, #8]
 800bcf8:	e7cf      	b.n	800bc9a <__swbuf_r+0x1a>
 800bcfa:	4b09      	ldr	r3, [pc, #36]	; (800bd20 <__swbuf_r+0xa0>)
 800bcfc:	429c      	cmp	r4, r3
 800bcfe:	bf08      	it	eq
 800bd00:	68ec      	ldreq	r4, [r5, #12]
 800bd02:	e7ca      	b.n	800bc9a <__swbuf_r+0x1a>
 800bd04:	4621      	mov	r1, r4
 800bd06:	4628      	mov	r0, r5
 800bd08:	f000 f80c 	bl	800bd24 <__swsetup_r>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d0cb      	beq.n	800bca8 <__swbuf_r+0x28>
 800bd10:	f04f 37ff 	mov.w	r7, #4294967295
 800bd14:	e7ea      	b.n	800bcec <__swbuf_r+0x6c>
 800bd16:	bf00      	nop
 800bd18:	0800c4f4 	.word	0x0800c4f4
 800bd1c:	0800c514 	.word	0x0800c514
 800bd20:	0800c4d4 	.word	0x0800c4d4

0800bd24 <__swsetup_r>:
 800bd24:	4b32      	ldr	r3, [pc, #200]	; (800bdf0 <__swsetup_r+0xcc>)
 800bd26:	b570      	push	{r4, r5, r6, lr}
 800bd28:	681d      	ldr	r5, [r3, #0]
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	b125      	cbz	r5, 800bd3a <__swsetup_r+0x16>
 800bd30:	69ab      	ldr	r3, [r5, #24]
 800bd32:	b913      	cbnz	r3, 800bd3a <__swsetup_r+0x16>
 800bd34:	4628      	mov	r0, r5
 800bd36:	f7ff fd43 	bl	800b7c0 <__sinit>
 800bd3a:	4b2e      	ldr	r3, [pc, #184]	; (800bdf4 <__swsetup_r+0xd0>)
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	d10f      	bne.n	800bd60 <__swsetup_r+0x3c>
 800bd40:	686c      	ldr	r4, [r5, #4]
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd48:	0719      	lsls	r1, r3, #28
 800bd4a:	d42c      	bmi.n	800bda6 <__swsetup_r+0x82>
 800bd4c:	06dd      	lsls	r5, r3, #27
 800bd4e:	d411      	bmi.n	800bd74 <__swsetup_r+0x50>
 800bd50:	2309      	movs	r3, #9
 800bd52:	6033      	str	r3, [r6, #0]
 800bd54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd58:	81a3      	strh	r3, [r4, #12]
 800bd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5e:	e03e      	b.n	800bdde <__swsetup_r+0xba>
 800bd60:	4b25      	ldr	r3, [pc, #148]	; (800bdf8 <__swsetup_r+0xd4>)
 800bd62:	429c      	cmp	r4, r3
 800bd64:	d101      	bne.n	800bd6a <__swsetup_r+0x46>
 800bd66:	68ac      	ldr	r4, [r5, #8]
 800bd68:	e7eb      	b.n	800bd42 <__swsetup_r+0x1e>
 800bd6a:	4b24      	ldr	r3, [pc, #144]	; (800bdfc <__swsetup_r+0xd8>)
 800bd6c:	429c      	cmp	r4, r3
 800bd6e:	bf08      	it	eq
 800bd70:	68ec      	ldreq	r4, [r5, #12]
 800bd72:	e7e6      	b.n	800bd42 <__swsetup_r+0x1e>
 800bd74:	0758      	lsls	r0, r3, #29
 800bd76:	d512      	bpl.n	800bd9e <__swsetup_r+0x7a>
 800bd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd7a:	b141      	cbz	r1, 800bd8e <__swsetup_r+0x6a>
 800bd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd80:	4299      	cmp	r1, r3
 800bd82:	d002      	beq.n	800bd8a <__swsetup_r+0x66>
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7fe fd63 	bl	800a850 <_free_r>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd94:	81a3      	strh	r3, [r4, #12]
 800bd96:	2300      	movs	r3, #0
 800bd98:	6063      	str	r3, [r4, #4]
 800bd9a:	6923      	ldr	r3, [r4, #16]
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	89a3      	ldrh	r3, [r4, #12]
 800bda0:	f043 0308 	orr.w	r3, r3, #8
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	b94b      	cbnz	r3, 800bdbe <__swsetup_r+0x9a>
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb4:	d003      	beq.n	800bdbe <__swsetup_r+0x9a>
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f000 f84d 	bl	800be58 <__smakebuf_r>
 800bdbe:	89a0      	ldrh	r0, [r4, #12]
 800bdc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdc4:	f010 0301 	ands.w	r3, r0, #1
 800bdc8:	d00a      	beq.n	800bde0 <__swsetup_r+0xbc>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60a3      	str	r3, [r4, #8]
 800bdce:	6963      	ldr	r3, [r4, #20]
 800bdd0:	425b      	negs	r3, r3
 800bdd2:	61a3      	str	r3, [r4, #24]
 800bdd4:	6923      	ldr	r3, [r4, #16]
 800bdd6:	b943      	cbnz	r3, 800bdea <__swsetup_r+0xc6>
 800bdd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bddc:	d1ba      	bne.n	800bd54 <__swsetup_r+0x30>
 800bdde:	bd70      	pop	{r4, r5, r6, pc}
 800bde0:	0781      	lsls	r1, r0, #30
 800bde2:	bf58      	it	pl
 800bde4:	6963      	ldrpl	r3, [r4, #20]
 800bde6:	60a3      	str	r3, [r4, #8]
 800bde8:	e7f4      	b.n	800bdd4 <__swsetup_r+0xb0>
 800bdea:	2000      	movs	r0, #0
 800bdec:	e7f7      	b.n	800bdde <__swsetup_r+0xba>
 800bdee:	bf00      	nop
 800bdf0:	20000808 	.word	0x20000808
 800bdf4:	0800c4f4 	.word	0x0800c4f4
 800bdf8:	0800c514 	.word	0x0800c514
 800bdfc:	0800c4d4 	.word	0x0800c4d4

0800be00 <abort>:
 800be00:	b508      	push	{r3, lr}
 800be02:	2006      	movs	r0, #6
 800be04:	f000 f898 	bl	800bf38 <raise>
 800be08:	2001      	movs	r0, #1
 800be0a:	f7f6 ff23 	bl	8002c54 <_exit>

0800be0e <__swhatbuf_r>:
 800be0e:	b570      	push	{r4, r5, r6, lr}
 800be10:	460e      	mov	r6, r1
 800be12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be16:	2900      	cmp	r1, #0
 800be18:	b096      	sub	sp, #88	; 0x58
 800be1a:	4614      	mov	r4, r2
 800be1c:	461d      	mov	r5, r3
 800be1e:	da08      	bge.n	800be32 <__swhatbuf_r+0x24>
 800be20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	602a      	str	r2, [r5, #0]
 800be28:	061a      	lsls	r2, r3, #24
 800be2a:	d410      	bmi.n	800be4e <__swhatbuf_r+0x40>
 800be2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be30:	e00e      	b.n	800be50 <__swhatbuf_r+0x42>
 800be32:	466a      	mov	r2, sp
 800be34:	f000 f89c 	bl	800bf70 <_fstat_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	dbf1      	blt.n	800be20 <__swhatbuf_r+0x12>
 800be3c:	9a01      	ldr	r2, [sp, #4]
 800be3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be46:	425a      	negs	r2, r3
 800be48:	415a      	adcs	r2, r3
 800be4a:	602a      	str	r2, [r5, #0]
 800be4c:	e7ee      	b.n	800be2c <__swhatbuf_r+0x1e>
 800be4e:	2340      	movs	r3, #64	; 0x40
 800be50:	2000      	movs	r0, #0
 800be52:	6023      	str	r3, [r4, #0]
 800be54:	b016      	add	sp, #88	; 0x58
 800be56:	bd70      	pop	{r4, r5, r6, pc}

0800be58 <__smakebuf_r>:
 800be58:	898b      	ldrh	r3, [r1, #12]
 800be5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be5c:	079d      	lsls	r5, r3, #30
 800be5e:	4606      	mov	r6, r0
 800be60:	460c      	mov	r4, r1
 800be62:	d507      	bpl.n	800be74 <__smakebuf_r+0x1c>
 800be64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	6123      	str	r3, [r4, #16]
 800be6c:	2301      	movs	r3, #1
 800be6e:	6163      	str	r3, [r4, #20]
 800be70:	b002      	add	sp, #8
 800be72:	bd70      	pop	{r4, r5, r6, pc}
 800be74:	ab01      	add	r3, sp, #4
 800be76:	466a      	mov	r2, sp
 800be78:	f7ff ffc9 	bl	800be0e <__swhatbuf_r>
 800be7c:	9900      	ldr	r1, [sp, #0]
 800be7e:	4605      	mov	r5, r0
 800be80:	4630      	mov	r0, r6
 800be82:	f7fe fd51 	bl	800a928 <_malloc_r>
 800be86:	b948      	cbnz	r0, 800be9c <__smakebuf_r+0x44>
 800be88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be8c:	059a      	lsls	r2, r3, #22
 800be8e:	d4ef      	bmi.n	800be70 <__smakebuf_r+0x18>
 800be90:	f023 0303 	bic.w	r3, r3, #3
 800be94:	f043 0302 	orr.w	r3, r3, #2
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	e7e3      	b.n	800be64 <__smakebuf_r+0xc>
 800be9c:	4b0d      	ldr	r3, [pc, #52]	; (800bed4 <__smakebuf_r+0x7c>)
 800be9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	6020      	str	r0, [r4, #0]
 800bea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	9b00      	ldr	r3, [sp, #0]
 800beac:	6163      	str	r3, [r4, #20]
 800beae:	9b01      	ldr	r3, [sp, #4]
 800beb0:	6120      	str	r0, [r4, #16]
 800beb2:	b15b      	cbz	r3, 800becc <__smakebuf_r+0x74>
 800beb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beb8:	4630      	mov	r0, r6
 800beba:	f000 f86b 	bl	800bf94 <_isatty_r>
 800bebe:	b128      	cbz	r0, 800becc <__smakebuf_r+0x74>
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	f023 0303 	bic.w	r3, r3, #3
 800bec6:	f043 0301 	orr.w	r3, r3, #1
 800beca:	81a3      	strh	r3, [r4, #12]
 800becc:	89a0      	ldrh	r0, [r4, #12]
 800bece:	4305      	orrs	r5, r0
 800bed0:	81a5      	strh	r5, [r4, #12]
 800bed2:	e7cd      	b.n	800be70 <__smakebuf_r+0x18>
 800bed4:	0800b759 	.word	0x0800b759

0800bed8 <_malloc_usable_size_r>:
 800bed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bedc:	1f18      	subs	r0, r3, #4
 800bede:	2b00      	cmp	r3, #0
 800bee0:	bfbc      	itt	lt
 800bee2:	580b      	ldrlt	r3, [r1, r0]
 800bee4:	18c0      	addlt	r0, r0, r3
 800bee6:	4770      	bx	lr

0800bee8 <_raise_r>:
 800bee8:	291f      	cmp	r1, #31
 800beea:	b538      	push	{r3, r4, r5, lr}
 800beec:	4604      	mov	r4, r0
 800beee:	460d      	mov	r5, r1
 800bef0:	d904      	bls.n	800befc <_raise_r+0x14>
 800bef2:	2316      	movs	r3, #22
 800bef4:	6003      	str	r3, [r0, #0]
 800bef6:	f04f 30ff 	mov.w	r0, #4294967295
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800befe:	b112      	cbz	r2, 800bf06 <_raise_r+0x1e>
 800bf00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf04:	b94b      	cbnz	r3, 800bf1a <_raise_r+0x32>
 800bf06:	4620      	mov	r0, r4
 800bf08:	f000 f830 	bl	800bf6c <_getpid_r>
 800bf0c:	462a      	mov	r2, r5
 800bf0e:	4601      	mov	r1, r0
 800bf10:	4620      	mov	r0, r4
 800bf12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf16:	f000 b817 	b.w	800bf48 <_kill_r>
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d00a      	beq.n	800bf34 <_raise_r+0x4c>
 800bf1e:	1c59      	adds	r1, r3, #1
 800bf20:	d103      	bne.n	800bf2a <_raise_r+0x42>
 800bf22:	2316      	movs	r3, #22
 800bf24:	6003      	str	r3, [r0, #0]
 800bf26:	2001      	movs	r0, #1
 800bf28:	e7e7      	b.n	800befa <_raise_r+0x12>
 800bf2a:	2400      	movs	r4, #0
 800bf2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf30:	4628      	mov	r0, r5
 800bf32:	4798      	blx	r3
 800bf34:	2000      	movs	r0, #0
 800bf36:	e7e0      	b.n	800befa <_raise_r+0x12>

0800bf38 <raise>:
 800bf38:	4b02      	ldr	r3, [pc, #8]	; (800bf44 <raise+0xc>)
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	f7ff bfd3 	b.w	800bee8 <_raise_r>
 800bf42:	bf00      	nop
 800bf44:	20000808 	.word	0x20000808

0800bf48 <_kill_r>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	4d07      	ldr	r5, [pc, #28]	; (800bf68 <_kill_r+0x20>)
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	4604      	mov	r4, r0
 800bf50:	4608      	mov	r0, r1
 800bf52:	4611      	mov	r1, r2
 800bf54:	602b      	str	r3, [r5, #0]
 800bf56:	f7f6 fe6d 	bl	8002c34 <_kill>
 800bf5a:	1c43      	adds	r3, r0, #1
 800bf5c:	d102      	bne.n	800bf64 <_kill_r+0x1c>
 800bf5e:	682b      	ldr	r3, [r5, #0]
 800bf60:	b103      	cbz	r3, 800bf64 <_kill_r+0x1c>
 800bf62:	6023      	str	r3, [r4, #0]
 800bf64:	bd38      	pop	{r3, r4, r5, pc}
 800bf66:	bf00      	nop
 800bf68:	200010b4 	.word	0x200010b4

0800bf6c <_getpid_r>:
 800bf6c:	f7f6 be5a 	b.w	8002c24 <_getpid>

0800bf70 <_fstat_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	; (800bf90 <_fstat_r+0x20>)
 800bf74:	2300      	movs	r3, #0
 800bf76:	4604      	mov	r4, r0
 800bf78:	4608      	mov	r0, r1
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	f7f6 feb8 	bl	8002cf2 <_fstat>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	d102      	bne.n	800bf8c <_fstat_r+0x1c>
 800bf86:	682b      	ldr	r3, [r5, #0]
 800bf88:	b103      	cbz	r3, 800bf8c <_fstat_r+0x1c>
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
 800bf8e:	bf00      	nop
 800bf90:	200010b4 	.word	0x200010b4

0800bf94 <_isatty_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d06      	ldr	r5, [pc, #24]	; (800bfb0 <_isatty_r+0x1c>)
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	f7f6 feb7 	bl	8002d12 <_isatty>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_isatty_r+0x1a>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_isatty_r+0x1a>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	200010b4 	.word	0x200010b4

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
