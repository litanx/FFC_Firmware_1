
FFC_Firmware_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc28  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800bdd8  0800bdd8  0000cdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2cc  0800c2cc  0000e9dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2cc  0800c2cc  0000d2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d4  0800c2d4  0000e9dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d4  0800c2d4  0000d2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d8  0800c2d8  0000d2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009dc  20000000  0800c2dc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e9dc  2**0
                  CONTENTS
 10 .bss          0000081c  200009e0  200009e0  0000e9e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200011fc  200011fc  0000e9e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e9dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f45  00000000  00000000  0000ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d19  00000000  00000000  00021951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00024670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2f  00000000  00000000  00025760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b9a  00000000  00000000  0002648f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146e1  00000000  00000000  0004c029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000defb0  00000000  00000000  0006070a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f6ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dd4  00000000  00000000  0013f700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  001454d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200009e0 	.word	0x200009e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bdc0 	.word	0x0800bdc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200009e4 	.word	0x200009e4
 80001ec:	0800bdc0 	.word	0x0800bdc0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <ADS1220_writeRegister>:
 */

#include "ADS1220.h"
#include "main.h"
void ADS1220_writeRegister(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t value)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
 8001010:	4613      	mov	r3, r2
 8001012:	70bb      	strb	r3, [r7, #2]
	uint8_t arr[2] =
	{ ADS1220_WREG | (address << 2), value };
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101e:	b25b      	sxtb	r3, r3
 8001020:	b2db      	uxtb	r3, r3
	uint8_t arr[2] =
 8001022:	733b      	strb	r3, [r7, #12]
 8001024:	78bb      	ldrb	r3, [r7, #2]
 8001026:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(hspi, arr, 2, 100);
 8001028:	f107 010c 	add.w	r1, r7, #12
 800102c:	2364      	movs	r3, #100	@ 0x64
 800102e:	2202      	movs	r2, #2
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f003 fb9a 	bl	800476a <HAL_SPI_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ADS1220_readRegister>:

uint8_t ADS1220_readRegister(SPI_HandleTypeDef *hspi, uint8_t address)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af02      	add	r7, sp, #8
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] =
 800104a:	2300      	movs	r3, #0
 800104c:	81bb      	strh	r3, [r7, #12]
	{ 0, 0 };

	uint8_t txd[2] =
	{ (ADS1220_RREG | (address << 2)), 0xFF };
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	b25b      	sxtb	r3, r3
 800105a:	b2db      	uxtb	r3, r3
	uint8_t txd[2] =
 800105c:	723b      	strb	r3, [r7, #8]
 800105e:	23ff      	movs	r3, #255	@ 0xff
 8001060:	727b      	strb	r3, [r7, #9]

	HAL_SPI_TransmitReceive(hspi, txd, data, 2, 1000); // When doing bidirectional, transmit a dummy byte(0xFF), 2 in total, received register is in [1]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	f107 0108 	add.w	r1, r7, #8
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f003 fdc6 	bl	8004c04 <HAL_SPI_TransmitReceive>
	return data[1];
 8001078:	7b7b      	ldrb	r3, [r7, #13]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <ADS1220_reset>:

void ADS1220_reset(SPI_HandleTypeDef *hspi)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_RESET;
 800108a:	2306      	movs	r3, #6
 800108c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 800108e:	f107 010f 	add.w	r1, r7, #15
 8001092:	2364      	movs	r3, #100	@ 0x64
 8001094:	2201      	movs	r2, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f003 fb67 	bl	800476a <HAL_SPI_Transmit>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <ADS1220_init>:

uint8_t ADS1220_init(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	ADS1220_reset(hspi);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffe7 	bl	8001082 <ADS1220_reset>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f001 fecf 	bl	8002e58 <HAL_Delay>

	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS, r->cfg_reg0);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff9e 	bl	8001004 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2101      	movs	r1, #1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff97 	bl	8001004 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS, r->cfg_reg2);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	461a      	mov	r2, r3
 80010dc:	2102      	movs	r1, #2
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff90 	bl	8001004 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS, r->cfg_reg3);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	78db      	ldrb	r3, [r3, #3]
 80010e8:	461a      	mov	r2, r3
 80010ea:	2103      	movs	r1, #3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff89 	bl	8001004 <ADS1220_writeRegister>

	uint8_t CR0 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS);
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffa2 	bl	800103e <ADS1220_readRegister>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
	uint8_t CR1 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS);
 80010fe:	2101      	movs	r1, #1
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff9c 	bl	800103e <ADS1220_readRegister>
 8001106:	4603      	mov	r3, r0
 8001108:	73bb      	strb	r3, [r7, #14]
	uint8_t CR2 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS);
 800110a:	2102      	movs	r1, #2
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff96 	bl	800103e <ADS1220_readRegister>
 8001112:	4603      	mov	r3, r0
 8001114:	737b      	strb	r3, [r7, #13]
	uint8_t CR3 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS);
 8001116:	2103      	movs	r1, #3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff90 	bl	800103e <ADS1220_readRegister>
 800111e:	4603      	mov	r3, r0
 8001120:	733b      	strb	r3, [r7, #12]

	return (CR0 == r->cfg_reg0 && CR1 == r->cfg_reg1 && CR2 == r->cfg_reg2 && CR3 == r->cfg_reg3);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	429a      	cmp	r2, r3
 800112a:	d110      	bne.n	800114e <ADS1220_init+0xaa>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	7bba      	ldrb	r2, [r7, #14]
 8001132:	429a      	cmp	r2, r3
 8001134:	d10b      	bne.n	800114e <ADS1220_init+0xaa>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	7b7a      	ldrb	r2, [r7, #13]
 800113c:	429a      	cmp	r2, r3
 800113e:	d106      	bne.n	800114e <ADS1220_init+0xaa>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	7b3a      	ldrb	r2, [r7, #12]
 8001146:	429a      	cmp	r2, r3
 8001148:	d101      	bne.n	800114e <ADS1220_init+0xaa>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <ADS1220_init+0xac>
 800114e:	2300      	movs	r3, #0
 8001150:	b2db      	uxtb	r3, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <ADS1220_start_conversion>:

void ADS1220_start_conversion(SPI_HandleTypeDef *hspi)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_START;
 8001162:	2308      	movs	r3, #8
 8001164:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 8001166:	f107 010f 	add.w	r1, r7, #15
 800116a:	2364      	movs	r3, #100	@ 0x64
 800116c:	2201      	movs	r2, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f003 fafb 	bl	800476a <HAL_SPI_Transmit>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <ADS1220_set_conv_mode_single_shot>:
	r->cfg_reg1 |= _BV(2);
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
}

void ADS1220_set_conv_mode_single_shot(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	r->cfg_reg1 &= ~_BV(2);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	b2da      	uxtb	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	705a      	strb	r2, [r3, #1]
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	461a      	mov	r2, r3
 800119a:	2101      	movs	r1, #1
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff31 	bl	8001004 <ADS1220_writeRegister>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <ADS1220_read_nblocking>:
//
//	return result32;
//}


uint8_t ADS1220_read_nblocking(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, int32_t* pData){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	80fb      	strh	r3, [r7, #6]
	uint8_t SPIbuf[3] = {0};
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <ADS1220_read_nblocking+0x74>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	82bb      	strh	r3, [r7, #20]
 80011c2:	2300      	movs	r3, #0
 80011c4:	75bb      	strb	r3, [r7, #22]
	int32_t result32 = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
	long int bit24;

	if(HAL_GPIO_ReadPin(DRDY_PORT, DRDY_PIN) == GPIO_PIN_SET)	return 0;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4619      	mov	r1, r3
 80011ce:	68b8      	ldr	r0, [r7, #8]
 80011d0:	f002 fcf6 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <ADS1220_read_nblocking+0x32>
 80011da:	2300      	movs	r3, #0
 80011dc:	e01c      	b.n	8001218 <ADS1220_read_nblocking+0x6c>

	HAL_SPI_Receive(hspi, SPIbuf, 3, 100);
 80011de:	f107 0114 	add.w	r1, r7, #20
 80011e2:	2364      	movs	r3, #100	@ 0x64
 80011e4:	2203      	movs	r2, #3
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f003 fbfb 	bl	80049e2 <HAL_SPI_Receive>

	bit24 = SPIbuf[0];
 80011ec:	7d3b      	ldrb	r3, [r7, #20]
 80011ee:	61bb      	str	r3, [r7, #24]
	bit24 = (bit24 << 8) | SPIbuf[1];
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	7d7a      	ldrb	r2, [r7, #21]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
	bit24 = (bit24 << 8) | SPIbuf[2]; //Converting 3 bytes to a 24 bit int
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	7dba      	ldrb	r2, [r7, #22]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]

	bit24 = (bit24 << 8);
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	61bb      	str	r3, [r7, #24]
	result32 = (bit24 >> 8); //Converting 24 bit two's complement to 32 bit two's complement
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	121b      	asrs	r3, r3, #8
 800120e:	61fb      	str	r3, [r7, #28]

	*pData = result32;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	601a      	str	r2, [r3, #0]
	return 1;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0800bdd8 	.word	0x0800bdd8

08001224 <ADS1220_read_singleshot>:


uint8_t ADS1220_read_singleshot(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, int32_t* pData, uint32_t timeout){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	80fb      	strh	r3, [r7, #6]

	static uint8_t status = 1;
	static uint32_t timeStamp = 0;

	switch(status){
 8001234:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <ADS1220_read_singleshot+0x8c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <ADS1220_read_singleshot+0x1e>
 800123c:	2b01      	cmp	r3, #1
 800123e:	d020      	beq.n	8001282 <ADS1220_read_singleshot+0x5e>
 8001240:	e02b      	b.n	800129a <ADS1220_read_singleshot+0x76>

	case 0:
		if( !ADS1220_read_nblocking(hspi, DRDY_PORT, DRDY_PIN, pData) ){
 8001242:	88fa      	ldrh	r2, [r7, #6]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff ffaf 	bl	80011ac <ADS1220_read_nblocking>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <ADS1220_read_singleshot+0x4a>
			if (HAL_GetTick() > (timeStamp + timeout)) 	status = 1; // Timeout, reTry
 8001254:	f001 fdf4 	bl	8002e40 <HAL_GetTick>
 8001258:	4601      	mov	r1, r0
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <ADS1220_read_singleshot+0x90>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4413      	add	r3, r2
 8001262:	4299      	cmp	r1, r3
 8001264:	d91d      	bls.n	80012a2 <ADS1220_read_singleshot+0x7e>
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <ADS1220_read_singleshot+0x8c>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e009      	b.n	8001282 <ADS1220_read_singleshot+0x5e>
			else 			break;									// Still waiting
		}else{														// Data ready
			timeStamp = HAL_GetTick();
 800126e:	f001 fde7 	bl	8002e40 <HAL_GetTick>
 8001272:	4603      	mov	r3, r0
 8001274:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <ADS1220_read_singleshot+0x90>)
 8001276:	6013      	str	r3, [r2, #0]
			ADS1220_start_conversion(hspi);
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ff6e 	bl	800115a <ADS1220_start_conversion>
			return 1;
 800127e:	2301      	movs	r3, #1
 8001280:	e011      	b.n	80012a6 <ADS1220_read_singleshot+0x82>
		}

	case 1:
		timeStamp = HAL_GetTick();
 8001282:	f001 fddd 	bl	8002e40 <HAL_GetTick>
 8001286:	4603      	mov	r3, r0
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <ADS1220_read_singleshot+0x90>)
 800128a:	6013      	str	r3, [r2, #0]
		ADS1220_start_conversion(hspi);
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff ff64 	bl	800115a <ADS1220_start_conversion>
		status = 0;
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <ADS1220_read_singleshot+0x8c>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		break;
 8001298:	e004      	b.n	80012a4 <ADS1220_read_singleshot+0x80>

	default:
		status = 1;
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <ADS1220_read_singleshot+0x8c>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
		break;
 80012a0:	e000      	b.n	80012a4 <ADS1220_read_singleshot+0x80>
			else 			break;									// Still waiting
 80012a2:	bf00      	nop
	}

	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000
 80012b4:	200009fc 	.word	0x200009fc

080012b8 <Compute_PI>:
 *
 * */


//https://uk.mathworks.com/help/sps/ref/discretepicontroller.html
float Compute_PI(piCon_t *con, float setpoint, float input){
 80012b8:	b480      	push	{r7}
 80012ba:	b08b      	sub	sp, #44	@ 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80012c4:	edc7 0a01 	vstr	s1, [r7, #4]

	float dt = (float)con->dt / 1000000;	// Convert dt to (s)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d4:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001394 <Compute_PI+0xdc>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Calculate the error term
    float error = setpoint - input;
 80012e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80012e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ec:	edc7 7a08 	vstr	s15, [r7, #32]

    // Calculate the integral term
    float temp_iTerm = con->iTerm + (con->ki * dt * error);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80012fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001300:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001304:	edd7 7a08 	vldr	s15, [r7, #32]
 8001308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001310:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate the output
    float u = (con->kp * error) + con->iTerm;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	ed93 7a01 	vldr	s14, [r3, #4]
 800131a:	edd7 7a08 	vldr	s15, [r7, #32]
 800131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	edd3 7a05 	vldr	s15, [r3, #20]
 8001328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132c:	edc7 7a06 	vstr	s15, [r7, #24]

    // Saturate the output
    float u_sat = CONSTRAIN( u, con->outMin, con->outMax );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	edd3 7a04 	vldr	s15, [r3, #16]
 8001336:	ed97 7a06 	vldr	s14, [r7, #24]
 800133a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	d502      	bpl.n	800134a <Compute_PI+0x92>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	e00d      	b.n	8001366 <Compute_PI+0xae>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001350:	ed97 7a06 	vldr	s14, [r7, #24]
 8001354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	dd02      	ble.n	8001364 <Compute_PI+0xac>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	e000      	b.n	8001366 <Compute_PI+0xae>
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	617b      	str	r3, [r7, #20]

    if(u_sat == u) con->iTerm = temp_iTerm; 	// If output clipping, do not update controller iTerm
 8001368:	ed97 7a05 	vldr	s14, [r7, #20]
 800136c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001370:	eeb4 7a67 	vcmp.f32	s14, s15
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	d102      	bne.n	8001380 <Compute_PI+0xc8>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	615a      	str	r2, [r3, #20]

    return u_sat;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	ee07 3a90 	vmov	s15, r3

}
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	372c      	adds	r7, #44	@ 0x2c
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	49742400 	.word	0x49742400

08001398 <refModel_Tick>:
/*
 * Mass-spring-damper model with stick/slip friction
 * Compute system status for a given input force and position
 */

void refModel_Tick(rMod_t *mod, double iForce){
 8001398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800139c:	b08e      	sub	sp, #56	@ 0x38
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	ed87 0b00 	vstr	d0, [r7]

	float frictionForce = 0;
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t stuck = 0;			/* = 1 when velocity is under dynamic friction velocity threshold (dfv) */
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	//double dt = (double)mod->dt / 1000000;	// Convert dt to (s)

	// Compute ref Velocity
	mod->vel = mod->vel_1 + ((mod->dt * mod->acc_1) / 1000000); // Convert dt to (s)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80013ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ce:	ed9f 6a96 	vldr	s12, [pc, #600]	@ 8001628 <refModel_Tick+0x290>
 80013d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	// Limit Velocity Hard Stops
	mod->vSaturated = 0;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	if(mod->vel > mod->velMaxLim){
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	dd07      	ble.n	800140e <refModel_Tick+0x76>

		mod->vel = mod->velMaxLim;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	63da      	str	r2, [r3, #60]	@ 0x3c
		mod->vSaturated = 1;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}

	if(mod->vel < mod->velMinLim){
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800141a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	d507      	bpl.n	8001434 <refModel_Tick+0x9c>

		mod->vel = mod->velMinLim;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	63da      	str	r2, [r3, #60]	@ 0x3c
		mod->vSaturated = 1;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}

	// Compute ref Position
	mod->pos = mod->pos_1 + ((mod->dt * mod->vel) / 1000000); // Convert dt to (s)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800144c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001450:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 8001628 <refModel_Tick+0x290>
 8001454:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Limit position Hard Stops
	mod->pSaturated = 0;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	
	if(mod->pos >= mod->posMaxLim){
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	db0b      	blt.n	8001498 <refModel_Tick+0x100>

		mod->pos = mod->posMaxLim;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
		mod->vel = 0;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c
		mod->pSaturated = 1;		
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}

	if(mod->pos <= mod->posMinLim){
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	d80b      	bhi.n	80014c6 <refModel_Tick+0x12e>

		mod->pos = mod->posMinLim;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40
		mod->vel = 0;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c
		mod->pSaturated = 1;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}

	/* Calculate forces relative to the position of the system */
	double springForce = interpolate_force(mod, mod->pos);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f84c 	bl	8000568 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	ec43 2b10 	vmov	d0, r2, r3
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f907 	bl	80016ec <interpolate_force>
 80014de:	ee10 3a10 	vmov	r3, s0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f840 	bl	8000568 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
//	double springForce = (mod->k * mod->pos);

	/* Calculate damping force */
	double dampingForce = ((mod->c * mod->vel) / 1000); // Convert vel to (m/s)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800162c <refModel_Tick+0x294>
 8001504:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001508:	ee16 0a90 	vmov	r0, s13
 800150c:	f7ff f82c 	bl	8000568 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	e9c7 2308 	strd	r2, r3, [r7, #32]

	/* Friction Model --------------------------------------------------------------------------------*/
	// F = u * N -> where N is the Normal force between the moving object and the sliding surface.

	/* Velocity - Hit crossing (threshold) */
	if( mod->vel < mod->dfv && mod->vel > (-mod->dfv)) stuck = 1;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d50f      	bpl.n	800154e <refModel_Tick+0x1b6>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800153a:	eef1 7a67 	vneg.f32	s15, s15
 800153e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	dd02      	ble.n	800154e <refModel_Tick+0x1b6>
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	if(stuck){
 800154e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001552:	2b00      	cmp	r3, #0
 8001554:	d05e      	beq.n	8001614 <refModel_Tick+0x27c>

		int8_t sign = ((iForce - springForce) > 0) ? 1 : -1; 	// Get the sign of the applied force (input-spring)
 8001556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800155a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800155e:	f7fe fea3 	bl	80002a8 <__aeabi_dsub>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f7ff fae1 	bl	8000b38 <__aeabi_dcmpgt>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <refModel_Tick+0x1e8>
 800157c:	2301      	movs	r3, #1
 800157e:	e001      	b.n	8001584 <refModel_Tick+0x1ec>
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	77bb      	strb	r3, [r7, #30]
		double modForce = fabs(iForce - springForce);			// Get the module of the applied force
 8001586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800158a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800158e:	f7fe fe8b 	bl	80002a8 <__aeabi_dsub>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4611      	mov	r1, r2
 8001598:	6139      	str	r1, [r7, #16]
 800159a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800159e:	617b      	str	r3, [r7, #20]

		/* Choose the smallest force: [applied force] Vs [Static Friction] */
		frictionForce = (modForce < (mod->us * mod->N)) ? (sign) * modForce : (sign) * (mod->us * mod->N);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80015ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b0:	ee17 0a90 	vmov	r0, s15
 80015b4:	f7fe ffd8 	bl	8000568 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015c0:	f7ff fa9c 	bl	8000afc <__aeabi_dcmplt>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d011      	beq.n	80015ee <refModel_Tick+0x256>
 80015ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffb8 	bl	8000544 <__aeabi_i2d>
 80015d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015d8:	f7ff f81e 	bl	8000618 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fb10 	bl	8000c08 <__aeabi_d2f>
 80015e8:	ee07 0a90 	vmov	s15, r0
 80015ec:	e00f      	b.n	800160e <refModel_Tick+0x276>
 80015ee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	edd3 7a08 	vldr	s15, [r3, #32]
 8001606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001612:	e022      	b.n	800165a <refModel_Tick+0x2c2>

	}else{

		int8_t sign = (mod->vel > 0) ? 1 : -1;					// Get the sign of the velocity
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800161a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001622:	dd05      	ble.n	8001630 <refModel_Tick+0x298>
 8001624:	2301      	movs	r3, #1
 8001626:	e005      	b.n	8001634 <refModel_Tick+0x29c>
 8001628:	49742400 	.word	0x49742400
 800162c:	447a0000 	.word	0x447a0000
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	77fb      	strb	r3, [r7, #31]
		frictionForce = (sign) * (mod->ud * mod->N);			// Calculate dynamic friction
 8001636:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	edd3 6a07 	vldr	s13, [r3, #28]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	edd3 7a08 	vldr	s15, [r3, #32]
 800164e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	/* Do I want to have mass dependent to the position? for instance I could emulate backslash */
	/* Do I want to have damping and friction dependent to the position? emulate different surfaces? */
	/* In a two axis controller the forces relatives to position will depend on a 2 dimensional array */

	// Compute ref Acceleration ->  ∑F = m * a
	mod->acc = ((1000 / (mod->m)) * (iForce - dampingForce - frictionForce - springForce )); // Convert acc to (mm/s2)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001660:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 800162c <refModel_Tick+0x294>
 8001664:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001668:	ee16 0a90 	vmov	r0, s13
 800166c:	f7fe ff7c 	bl	8000568 <__aeabi_f2d>
 8001670:	4604      	mov	r4, r0
 8001672:	460d      	mov	r5, r1
 8001674:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167c:	f7fe fe14 	bl	80002a8 <__aeabi_dsub>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4690      	mov	r8, r2
 8001686:	4699      	mov	r9, r3
 8001688:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800168a:	f7fe ff6d 	bl	8000568 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4640      	mov	r0, r8
 8001694:	4649      	mov	r1, r9
 8001696:	f7fe fe07 	bl	80002a8 <__aeabi_dsub>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016a6:	f7fe fdff 	bl	80002a8 <__aeabi_dsub>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe ffb1 	bl	8000618 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff faa3 	bl	8000c08 <__aeabi_d2f>
 80016c2:	4602      	mov	r2, r0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	639a      	str	r2, [r3, #56]	@ 0x38

	// Store previous values
	mod->pos_1 = mod->pos;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	64da      	str	r2, [r3, #76]	@ 0x4c
	mod->vel_1 = mod->vel;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	649a      	str	r2, [r3, #72]	@ 0x48
	mod->acc_1 = mod->acc;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	645a      	str	r2, [r3, #68]	@ 0x44

}
 80016e0:	bf00      	nop
 80016e2:	3738      	adds	r7, #56	@ 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016ea:	bf00      	nop

080016ec <interpolate_force>:
 * Linear Interpolation (y) = y1 + [(x-x1) × (y2-y1)]/ (x2-x1)
 * Where (x1,y1) & (x2,y2) are coordinates
 * x is the point to perform interpolation
 * y is the interpolated value.
 * */
static float interpolate_force(rMod_t *mod, double x){
 80016ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016f0:	b088      	sub	sp, #32
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	ed87 0b00 	vstr	d0, [r7]

	if(!mod->cMap_size) 	return 0; // Empty vector
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	791b      	ldrb	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <interpolate_force+0x1c>
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e0c5      	b.n	8001894 <interpolate_force+0x1a8>
	if(mod->cMap == NULL) 	return 0; // No vector defined
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <interpolate_force+0x2a>
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e0be      	b.n	8001894 <interpolate_force+0x1a8>

	cMap_1d_t* cMap = (cMap_1d_t*)mod->cMap;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
	uint8_t last = mod->cMap_size - 1;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	791b      	ldrb	r3, [r3, #4]
 8001720:	3b01      	subs	r3, #1
 8001722:	75fb      	strb	r3, [r7, #23]

	/* if pos < min known value > saturate */
	if(x < cMap[0].x)				return cMap[0].f;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff1d 	bl	8000568 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001736:	f7ff f9e1 	bl	8000afc <__aeabi_dcmplt>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <interpolate_force+0x5a>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	e0a6      	b.n	8001894 <interpolate_force+0x1a8>

	/* if pos > max known value > saturate */
	else if(x > cMap[last].x)		return cMap[last].f;
 8001746:	7dfb      	ldrb	r3, [r7, #23]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff09 	bl	8000568 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800175e:	f7ff f9eb 	bl	8000b38 <__aeabi_dcmpgt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <interpolate_force+0x88>
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4413      	add	r3, r2
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	e08f      	b.n	8001894 <interpolate_force+0x1a8>

	/* otherwise find the adjacent upper and lower points in the array to interpolate */
	for(int i=0; i<last; i++){
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	e085      	b.n	8001886 <interpolate_force+0x19a>

		if( cMap[i].x <= x && cMap[i+1].x >= x)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe feef 	bl	8000568 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001792:	f7ff f9c7 	bl	8000b24 <__aeabi_dcmpge>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d071      	beq.n	8001880 <interpolate_force+0x194>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3301      	adds	r3, #1
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fedd 	bl	8000568 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017b6:	f7ff f9ab 	bl	8000b10 <__aeabi_dcmple>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d05f      	beq.n	8001880 <interpolate_force+0x194>
			return  cMap[i].f + ((x - cMap[i].x) * (cMap[i+1].f - cMap[i].f)) / (cMap[i+1].x - cMap[i].x);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4413      	add	r3, r2
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fecc 	bl	8000568 <__aeabi_f2d>
 80017d0:	4604      	mov	r4, r0
 80017d2:	460d      	mov	r5, r1
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fec2 	bl	8000568 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ec:	f7fe fd5c 	bl	80002a8 <__aeabi_dsub>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4690      	mov	r8, r2
 80017f6:	4699      	mov	r9, r3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4413      	add	r3, r2
 8001802:	ed93 7a01 	vldr	s14, [r3, #4]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4413      	add	r3, r2
 800180e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	ee17 0a90 	vmov	r0, s15
 800181a:	f7fe fea5 	bl	8000568 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4640      	mov	r0, r8
 8001824:	4649      	mov	r1, r9
 8001826:	f7fe fef7 	bl	8000618 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4690      	mov	r8, r2
 8001830:	4699      	mov	r9, r3
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4413      	add	r3, r2
 800183c:	ed93 7a00 	vldr	s14, [r3]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4413      	add	r3, r2
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001850:	ee17 0a90 	vmov	r0, s15
 8001854:	f7fe fe88 	bl	8000568 <__aeabi_f2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4640      	mov	r0, r8
 800185e:	4649      	mov	r1, r9
 8001860:	f7ff f804 	bl	800086c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4620      	mov	r0, r4
 800186a:	4629      	mov	r1, r5
 800186c:	f7fe fd1e 	bl	80002ac <__adddf3>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f9c6 	bl	8000c08 <__aeabi_d2f>
 800187c:	4603      	mov	r3, r0
 800187e:	e009      	b.n	8001894 <interpolate_force+0x1a8>
	for(int i=0; i<last; i++){
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3301      	adds	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	429a      	cmp	r2, r3
 800188c:	f6ff af75 	blt.w	800177a <interpolate_force+0x8e>

	}

	return 0; /* The program should never reach this line */
 8001890:	f04f 0300 	mov.w	r3, #0
}
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eeb0 0a67 	vmov.f32	s0, s15
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018a4:	0000      	movs	r0, r0
	...

080018a8 <StepCon_GetPosition>:

static uint16_t stepLimit = 0; // anti-stall, prevents the motor running if the refModel is not ticking.


/* Returns actuator position in mm */
float StepCon_GetPosition(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	MotorPos = ((double)stepCount / MICROSTEP) * MM_PER_REV;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <StepCon_GetPosition+0x58>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe47 	bl	8000544 <__aeabi_i2d>
 80018b6:	a310      	add	r3, pc, #64	@ (adr r3, 80018f8 <StepCon_GetPosition+0x50>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe ffd6 	bl	800086c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <StepCon_GetPosition+0x5c>)
 80018ce:	f7fe fea3 	bl	8000618 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	490c      	ldr	r1, [pc, #48]	@ (8001908 <StepCon_GetPosition+0x60>)
 80018d8:	e9c1 2300 	strd	r2, r3, [r1]
	return MotorPos;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <StepCon_GetPosition+0x60>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f98f 	bl	8000c08 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	ee07 3a90 	vmov	s15, r3
}
 80018f0:	eeb0 0a67 	vmov.f32	s0, s15
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40c38800 	.word	0x40c38800
 8001900:	20000a04 	.word	0x20000a04
 8001904:	40440000 	.word	0x40440000
 8001908:	20000a08 	.word	0x20000a08

0800190c <StepCon_Speed>:

// set linear actuator to a speed of speed mm/s
void StepCon_Speed(float speed){
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	ed87 0a01 	vstr	s0, [r7, #4]

	//if (speed < sDeadBand && speed > -sDeadBand) mStop = 1; // Dead band

	//else
	if(speed < 0){
 8001916:	edd7 7a01 	vldr	s15, [r7, #4]
 800191a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d515      	bpl.n	8001950 <StepCon_Speed+0x44>
		//mStop = 0;
		dir = 0;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <StepCon_Speed+0x7c>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
		StepCon_CCW; 			// CCW Direction
 800192a:	2200      	movs	r2, #0
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	4817      	ldr	r0, [pc, #92]	@ (800198c <StepCon_Speed+0x80>)
 8001930:	f002 f95e 	bl	8003bf0 <HAL_GPIO_WritePin>
		pulseTime = -4000/speed;
 8001934:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001990 <StepCon_Speed+0x84>
 8001938:	ed97 7a01 	vldr	s14, [r7, #4]
 800193c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001944:	ee17 3a90 	vmov	r3, s15
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <StepCon_Speed+0x88>)
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	e014      	b.n	800197a <StepCon_Speed+0x6e>
	}
	else{
		//mStop = 0;
		dir = 1;
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <StepCon_Speed+0x7c>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		StepCon_CW; 			// CW Direction
 8001956:	2201      	movs	r2, #1
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	480c      	ldr	r0, [pc, #48]	@ (800198c <StepCon_Speed+0x80>)
 800195c:	f002 f948 	bl	8003bf0 <HAL_GPIO_WritePin>
		pulseTime = 4000/speed;
 8001960:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001998 <StepCon_Speed+0x8c>
 8001964:	ed97 7a01 	vldr	s14, [r7, #4]
 8001968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <StepCon_Speed+0x88>)
 8001978:	801a      	strh	r2, [r3, #0]
	}

	stepLimit = 0; // Reste motor watchdog
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <StepCon_Speed+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]

}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000a00 	.word	0x20000a00
 800198c:	40021800 	.word	0x40021800
 8001990:	c57a0000 	.word	0xc57a0000
 8001994:	20000002 	.word	0x20000002
 8001998:	457a0000 	.word	0x457a0000
 800199c:	20000a10 	.word	0x20000a10

080019a0 <StepCon_pulseTick>:

/*
 * Timer callback routine
 **/
extern uint16_t oddDrv;
void StepCon_pulseTick(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

	if(pulseTime < MIN_PULSE_TIME){
 80019a4:	4b32      	ldr	r3, [pc, #200]	@ (8001a70 <StepCon_pulseTick+0xd0>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d80c      	bhi.n	80019c6 <StepCon_pulseTick+0x26>
		__HAL_TIM_SET_COUNTER(&htim2, MIN_PULSE_TIME);
 80019ac:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <StepCon_pulseTick+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2205      	movs	r2, #5
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24
		pulseTime = MIN_PULSE_TIME;
 80019b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a70 <StepCon_pulseTick+0xd0>)
 80019b6:	2205      	movs	r2, #5
 80019b8:	801a      	strh	r2, [r3, #0]
		oddDrv++;
 80019ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <StepCon_pulseTick+0xd8>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <StepCon_pulseTick+0xd8>)
 80019c4:	801a      	strh	r2, [r3, #0]
	}

	__HAL_TIM_SET_COUNTER(&htim2, pulseTime);
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <StepCon_pulseTick+0xd0>)
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <StepCon_pulseTick+0xd4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24

	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <StepCon_pulseTick+0xdc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <StepCon_pulseTick+0x4e>
 80019d8:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <StepCon_pulseTick+0xe0>)
 80019da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <StepCon_pulseTick+0xe4>)
 80019e4:	f7ff f8a8 	bl	8000b38 <__aeabi_dcmpgt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d139      	bne.n	8001a62 <StepCon_pulseTick+0xc2>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <StepCon_pulseTick+0xdc>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <StepCon_pulseTick+0x6c>
 80019f6:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <StepCon_pulseTick+0xe0>)
 80019f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <StepCon_pulseTick+0xe8>)
 8001a02:	f7ff f87b 	bl	8000afc <__aeabi_dcmplt>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d12c      	bne.n	8001a66 <StepCon_pulseTick+0xc6>

	if(stepLimit++ > 500) {
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <StepCon_pulseTick+0xec>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	b291      	uxth	r1, r2
 8001a14:	4a1d      	ldr	r2, [pc, #116]	@ (8001a8c <StepCon_pulseTick+0xec>)
 8001a16:	8011      	strh	r1, [r2, #0]
 8001a18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a1c:	d825      	bhi.n	8001a6a <StepCon_pulseTick+0xca>
		//BKPT;
		return;
	}

	/*Send pulse */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2120      	movs	r1, #32
 8001a22:	481b      	ldr	r0, [pc, #108]	@ (8001a90 <StepCon_pulseTick+0xf0>)
 8001a24:	f002 f8e4 	bl	8003bf0 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim2) > pulseTime);
 8001a28:	bf00      	nop
 8001a2a:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <StepCon_pulseTick+0xd4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <StepCon_pulseTick+0xd0>)
 8001a32:	8812      	ldrh	r2, [r2, #0]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d8f8      	bhi.n	8001a2a <StepCon_pulseTick+0x8a>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	4814      	ldr	r0, [pc, #80]	@ (8001a90 <StepCon_pulseTick+0xf0>)
 8001a3e:	f002 f8d7 	bl	8003bf0 <HAL_GPIO_WritePin>

	if(dir) stepCount++;		/* Track how many pulses have been sent to the stepper */
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <StepCon_pulseTick+0xdc>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <StepCon_pulseTick+0xb6>
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <StepCon_pulseTick+0xf4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <StepCon_pulseTick+0xf4>)
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e00a      	b.n	8001a6c <StepCon_pulseTick+0xcc>
	else 	stepCount--;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <StepCon_pulseTick+0xf4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a94 <StepCon_pulseTick+0xf4>)
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e004      	b.n	8001a6c <StepCon_pulseTick+0xcc>
	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001a62:	bf00      	nop
 8001a64:	e002      	b.n	8001a6c <StepCon_pulseTick+0xcc>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <StepCon_pulseTick+0xcc>
		return;
 8001a6a:	bf00      	nop

}
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000002 	.word	0x20000002
 8001a74:	20000e94 	.word	0x20000e94
 8001a78:	20000fea 	.word	0x20000fea
 8001a7c:	20000a00 	.word	0x20000a00
 8001a80:	20000a08 	.word	0x20000a08
 8001a84:	405b8000 	.word	0x405b8000
 8001a88:	c05b8000 	.word	0xc05b8000
 8001a8c:	20000a10 	.word	0x20000a10
 8001a90:	40021800 	.word	0x40021800
 8001a94:	20000a04 	.word	0x20000a04

08001a98 <UART1_Init>:

	/*----------------------------*/
}


void UART1_Init(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

  HAL_UART_Receive_DMA(&huart1, (uint8_t *)UART1_Rx_Buf, UART1_BUF_LEN);  // Initializes DMA for UART1
 8001a9c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001aa0:	4902      	ldr	r1, [pc, #8]	@ (8001aac <UART1_Init+0x14>)
 8001aa2:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <UART1_Init+0x18>)
 8001aa4:	f004 f924 	bl	8005cf0 <HAL_UART_Receive_DMA>

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000a14 	.word	0x20000a14
 8001ab0:	20000f24 	.word	0x20000f24

08001ab4 <UART1_Handler>:

/*@Brief Gets Commands from UART1 RingBuffer
 *
 */
void UART1_Handler(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

	static uint8_t UART1_CMD_Buff[300];	/* Command Handler Buffer */
	static uint16_t UART1_cmdPtr = 0;

	while(UART1_DataAvailable()){
 8001aba:	e02a      	b.n	8001b12 <UART1_Handler+0x5e>

		uint8_t aux = UART1_getChar();
 8001abc:	f000 f8ac 	bl	8001c18 <UART1_getChar>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]

		if(aux == '\n' || aux == '\r' ) { // End Command
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b0a      	cmp	r3, #10
 8001ac8:	d002      	beq.n	8001ad0 <UART1_Handler+0x1c>
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b0d      	cmp	r3, #13
 8001ace:	d10f      	bne.n	8001af0 <UART1_Handler+0x3c>

				UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <UART1_Handler+0x74>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4a15      	ldr	r2, [pc, #84]	@ (8001b2c <UART1_Handler+0x78>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	5453      	strb	r3, [r2, r1]
				UART1_Cmd_Callback(UART1_CMD_Buff, UART1_cmdPtr);
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <UART1_Handler+0x74>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4812      	ldr	r0, [pc, #72]	@ (8001b2c <UART1_Handler+0x78>)
 8001ae4:	f000 fd16 	bl	8002514 <UART1_Cmd_Callback>
				UART1_cmdPtr=0;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <UART1_Handler+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
 8001aee:	e010      	b.n	8001b12 <UART1_Handler+0x5e>

		}else{             				// Command body

		UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001af0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <UART1_Handler+0x74>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <UART1_Handler+0x78>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	5453      	strb	r3, [r2, r1]
		if (UART1_cmdPtr < 299) UART1_cmdPtr++;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <UART1_Handler+0x74>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001b04:	d805      	bhi.n	8001b12 <UART1_Handler+0x5e>
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <UART1_Handler+0x74>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <UART1_Handler+0x74>)
 8001b10:	801a      	strh	r2, [r3, #0]
	while(UART1_DataAvailable()){
 8001b12:	f000 f843 	bl	8001b9c <UART1_DataAvailable>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1cf      	bne.n	8001abc <UART1_Handler+0x8>

		}
	}
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000c0c 	.word	0x20000c0c
 8001b2c:	20000c10 	.word	0x20000c10

08001b30 <UART1_printf>:

void UART1_printf(const char *fmt, ...){
 8001b30:	b40f      	push	{r0, r1, r2, r3}
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
	static char tempBuff[256];

	//memset(tempBuff, 0, 256);
	va_list arg;

	va_start (arg, fmt);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	603b      	str	r3, [r7, #0]
	uint16_t len = vsprintf(tempBuff,fmt, arg);
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	6939      	ldr	r1, [r7, #16]
 8001b42:	4809      	ldr	r0, [pc, #36]	@ (8001b68 <UART1_printf+0x38>)
 8001b44:	f006 f95c 	bl	8007e00 <vsiprintf>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	80fb      	strh	r3, [r7, #6]
	va_end (arg);

	//HAL_UART_Transmit(&huart1, (const uint8_t*)tempBuff, len, 0xff); /* Transmit over uart */
	HAL_UART_Transmit_IT(&huart1, (const uint8_t*)tempBuff, len); /* Transmit over uart */
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4905      	ldr	r1, [pc, #20]	@ (8001b68 <UART1_printf+0x38>)
 8001b52:	4806      	ldr	r0, [pc, #24]	@ (8001b6c <UART1_printf+0x3c>)
 8001b54:	f004 f887 	bl	8005c66 <HAL_UART_Transmit_IT>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b62:	b004      	add	sp, #16
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000d3c 	.word	0x20000d3c
 8001b6c:	20000f24 	.word	0x20000f24

08001b70 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

    if(huart == &huart1){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_UART_RxCpltCallback+0x24>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d102      	bne.n	8001b86 <HAL_UART_RxCpltCallback+0x16>
      UART1_DMA_Ovrn = 1;
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_UART_RxCpltCallback+0x28>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
    }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000f24 	.word	0x20000f24
 8001b98:	20000c08 	.word	0x20000c08

08001b9c <UART1_DataAvailable>:

static uint8_t UART1_DataAvailable() {
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  if (((UART1_oPtr < UART1_iPtr) && !UART1_DMA_Ovrn) || ((UART1_oPtr > UART1_iPtr) && UART1_DMA_Ovrn)) {
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <UART1_DataAvailable+0x70>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <UART1_DataAvailable+0x74>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d203      	bcs.n	8001bbc <UART1_DataAvailable+0x20>
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <UART1_DataAvailable+0x78>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00d      	beq.n	8001bd8 <UART1_DataAvailable+0x3c>
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <UART1_DataAvailable+0x70>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <UART1_DataAvailable+0x74>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d905      	bls.n	8001bdc <UART1_DataAvailable+0x40>
 8001bd0:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <UART1_DataAvailable+0x78>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <UART1_DataAvailable+0x40>
    return 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e012      	b.n	8001c02 <UART1_DataAvailable+0x66>
  } else if (UART1_DMA_Ovrn){
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <UART1_DataAvailable+0x78>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <UART1_DataAvailable+0x64>
    UART1_oPtr = UART1_iPtr;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <UART1_DataAvailable+0x74>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <UART1_DataAvailable+0x70>)
 8001bf4:	801a      	strh	r2, [r3, #0]
    UART1_DMA_Ovrn = 0;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <UART1_DataAvailable+0x78>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
    return 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <UART1_DataAvailable+0x66>
  }
  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000c0a 	.word	0x20000c0a
 8001c10:	20000f68 	.word	0x20000f68
 8001c14:	20000c08 	.word	0x20000c08

08001c18 <UART1_getChar>:

static uint8_t UART1_getChar() {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if (UART1_DataAvailable()) {
 8001c22:	f7ff ffbb 	bl	8001b9c <UART1_DataAvailable>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d014      	beq.n	8001c56 <UART1_getChar+0x3e>
    ch = UART1_Rx_Buf[UART1_oPtr++];
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <UART1_getChar+0x48>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	b291      	uxth	r1, r2
 8001c34:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <UART1_getChar+0x48>)
 8001c36:	8011      	strh	r1, [r2, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <UART1_getChar+0x4c>)
 8001c3c:	5c9b      	ldrb	r3, [r3, r2]
 8001c3e:	71fb      	strb	r3, [r7, #7]
    if (UART1_oPtr >= UART1_BUF_LEN) {
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <UART1_getChar+0x48>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c48:	d305      	bcc.n	8001c56 <UART1_getChar+0x3e>
      UART1_oPtr = 0;
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <UART1_getChar+0x48>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
      UART1_DMA_Ovrn = 0;
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <UART1_getChar+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
    }
  }
  return ch;
 8001c56:	79fb      	ldrb	r3, [r7, #7]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000c0a 	.word	0x20000c0a
 8001c64:	20000a14 	.word	0x20000a14
 8001c68:	20000c08 	.word	0x20000c08

08001c6c <checkModelTimeout>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t checkModelTimeout(uint8_t rst, uint32_t dt){
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]

	static uint8_t ptr = 0;

	if (rst) {
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <checkModelTimeout+0x24>
		ptr = 0;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <checkModelTimeout+0xb8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
		memset(tMarks, 0, sizeof(tMarks));
 8001c84:	2214      	movs	r2, #20
 8001c86:	2100      	movs	r1, #0
 8001c88:	4827      	ldr	r0, [pc, #156]	@ (8001d28 <checkModelTimeout+0xbc>)
 8001c8a:	f006 f8c3 	bl	8007e14 <memset>
 8001c8e:	e028      	b.n	8001ce2 <checkModelTimeout+0x76>
	}else{
		if(ptr == 0) tMarks[ptr++] = __HAL_TIM_GET_COUNTER(&htim3);
 8001c90:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <checkModelTimeout+0xb8>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10e      	bne.n	8001cb6 <checkModelTimeout+0x4a>
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <checkModelTimeout+0xc0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c9e:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <checkModelTimeout+0xb8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	b2d0      	uxtb	r0, r2
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <checkModelTimeout+0xb8>)
 8001ca8:	7010      	strb	r0, [r2, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	b289      	uxth	r1, r1
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <checkModelTimeout+0xbc>)
 8001cb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001cb4:	e015      	b.n	8001ce2 <checkModelTimeout+0x76>
		else tMarks[ptr++] = __HAL_TIM_GET_COUNTER(&htim3) - tMarks[ptr-1];
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <checkModelTimeout+0xc0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <checkModelTimeout+0xb8>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	4a18      	ldr	r2, [pc, #96]	@ (8001d28 <checkModelTimeout+0xbc>)
 8001cc6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <checkModelTimeout+0xb8>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	1c58      	adds	r0, r3, #1
 8001cd0:	b2c4      	uxtb	r4, r0
 8001cd2:	4814      	ldr	r0, [pc, #80]	@ (8001d24 <checkModelTimeout+0xb8>)
 8001cd4:	7004      	strb	r4, [r0, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	1a8b      	subs	r3, r1, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <checkModelTimeout+0xbc>)
 8001cde:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
	}
	  if(__HAL_TIM_GET_COUNTER(&htim3) > dt){
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <checkModelTimeout+0xc0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d214      	bcs.n	8001d18 <checkModelTimeout+0xac>
		  HAL_TIM_Base_Stop(&htim3);
 8001cee:	480f      	ldr	r0, [pc, #60]	@ (8001d2c <checkModelTimeout+0xc0>)
 8001cf0:	f003 fb12 	bl	8005318 <HAL_TIM_Base_Stop>
		  HAL_TIM_Base_Stop(&htim2);
 8001cf4:	480e      	ldr	r0, [pc, #56]	@ (8001d30 <checkModelTimeout+0xc4>)
 8001cf6:	f003 fb0f 	bl	8005318 <HAL_TIM_Base_Stop>
		  asm("NOP");
 8001cfa:	bf00      	nop
		  timeouts++;
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <checkModelTimeout+0xc8>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <checkModelTimeout+0xc8>)
 8001d06:	801a      	strh	r2, [r3, #0]
		  HAL_TIM_Base_Start(&htim3);
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <checkModelTimeout+0xc0>)
 8001d0a:	f003 fa9d 	bl	8005248 <HAL_TIM_Base_Start>
		  HAL_TIM_Base_Start(&htim2);
 8001d0e:	4808      	ldr	r0, [pc, #32]	@ (8001d30 <checkModelTimeout+0xc4>)
 8001d10:	f003 fa9a 	bl	8005248 <HAL_TIM_Base_Start>
		  return 1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <checkModelTimeout+0xae>
	  }
	  return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20001058 	.word	0x20001058
 8001d28:	20000fd4 	.word	0x20000fd4
 8001d2c:	20000edc 	.word	0x20000edc
 8001d30:	20000e94 	.word	0x20000e94
 8001d34:	20000fe8 	.word	0x20000fe8

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	ed2d 8b02 	vpush	{d8}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d42:	f001 f847 	bl	8002dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d46:	f000 f977 	bl	8002038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d4a:	f000 faff 	bl	800234c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d4e:	f000 fadd 	bl	800230c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d52:	f000 fab1 	bl	80022b8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001d56:	f000 fa15 	bl	8002184 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d5a:	f000 fa5f 	bl	800221c <MX_TIM3_Init>
  MX_SPI1_Init();
 8001d5e:	f000 f9db 	bl	8002118 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001d62:	489d      	ldr	r0, [pc, #628]	@ (8001fd8 <main+0x2a0>)
 8001d64:	f003 fa70 	bl	8005248 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001d68:	489c      	ldr	r0, [pc, #624]	@ (8001fdc <main+0x2a4>)
 8001d6a:	f003 fafd 	bl	8005368 <HAL_TIM_Base_Start_IT>
  UART1_Init();
 8001d6e:	f7ff fe93 	bl	8001a98 <UART1_Init>
//  ADS1220_set_conv_mode_continuous(&hspi1, &regs);
//  ADS1220_set_voltage_ref(&hspi1, ADS1220_VREF_EXT_REF_1, &regs);
//  ADS1220_enable_PSW(&hspi1, &regs);
//  ADS1220_get_config(&hspi1, &regs);

  ADS1220_regs regs = { 0x3E, 0xD4, 0x88, 0x00 };
 8001d72:	4b9b      	ldr	r3, [pc, #620]	@ (8001fe0 <main+0x2a8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	607b      	str	r3, [r7, #4]
  ADS1220_init(&hspi1, &regs); // Optionally check for failure
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4899      	ldr	r0, [pc, #612]	@ (8001fe4 <main+0x2ac>)
 8001d7e:	f7ff f991 	bl	80010a4 <ADS1220_init>
  ADS1220_set_conv_mode_single_shot(&hspi1, &regs);
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4897      	ldr	r0, [pc, #604]	@ (8001fe4 <main+0x2ac>)
 8001d88:	f7ff f9f8 	bl	800117c <ADS1220_set_conv_mode_single_shot>
  //ADS1220_start_conversion(&hspi1);


  	uint32_t timeStamp = 0; /* Timer for UART tx */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]

  	//force emulation
	int32_t fOffset = 137;
 8001d90:	2389      	movs	r3, #137	@ 0x89
 8001d92:	61bb      	str	r3, [r7, #24]
	float scalingFactor_N = 84.5;  // bits per Newton
 8001d94:	4b94      	ldr	r3, [pc, #592]	@ (8001fe8 <main+0x2b0>)
 8001d96:	617b      	str	r3, [r7, #20]

	hmod1.dt = 500; 	// us /* This can go lower than 500us due ADC timing limitations */
 8001d98:	4b94      	ldr	r3, [pc, #592]	@ (8001fec <main+0x2b4>)
 8001d9a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d9e:	601a      	str	r2, [r3, #0]

	hmod1.m = 1;
 8001da0:	4b92      	ldr	r3, [pc, #584]	@ (8001fec <main+0x2b4>)
 8001da2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001da6:	60da      	str	r2, [r3, #12]
	hmod1.c = 20; 		// N.s/m
 8001da8:	4b90      	ldr	r3, [pc, #576]	@ (8001fec <main+0x2b4>)
 8001daa:	4a91      	ldr	r2, [pc, #580]	@ (8001ff0 <main+0x2b8>)
 8001dac:	611a      	str	r2, [r3, #16]
	//hmod1.k = 50; 		// N/m

	hmod1.cMap = &curve;
 8001dae:	4b8f      	ldr	r3, [pc, #572]	@ (8001fec <main+0x2b4>)
 8001db0:	4a90      	ldr	r2, [pc, #576]	@ (8001ff4 <main+0x2bc>)
 8001db2:	609a      	str	r2, [r3, #8]
	hmod1.cMap_size = nPoints;
 8001db4:	4b90      	ldr	r3, [pc, #576]	@ (8001ff8 <main+0x2c0>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b8c      	ldr	r3, [pc, #560]	@ (8001fec <main+0x2b4>)
 8001dba:	711a      	strb	r2, [r3, #4]

	hmod1.us = 0.2; 		// Dynamic friction coefficient
 8001dbc:	4b8b      	ldr	r3, [pc, #556]	@ (8001fec <main+0x2b4>)
 8001dbe:	4a8f      	ldr	r2, [pc, #572]	@ (8001ffc <main+0x2c4>)
 8001dc0:	619a      	str	r2, [r3, #24]
	hmod1.ud = 0.2; 		// Static friction coefficient
 8001dc2:	4b8a      	ldr	r3, [pc, #552]	@ (8001fec <main+0x2b4>)
 8001dc4:	4a8d      	ldr	r2, [pc, #564]	@ (8001ffc <main+0x2c4>)
 8001dc6:	61da      	str	r2, [r3, #28]
	hmod1.N = 5; 			// Normal Force (Weight)
 8001dc8:	4b88      	ldr	r3, [pc, #544]	@ (8001fec <main+0x2b4>)
 8001dca:	4a8d      	ldr	r2, [pc, #564]	@ (8002000 <main+0x2c8>)
 8001dcc:	621a      	str	r2, [r3, #32]
	hmod1.dfv = 0.01;	// mm/s
 8001dce:	4b87      	ldr	r3, [pc, #540]	@ (8001fec <main+0x2b4>)
 8001dd0:	4a8c      	ldr	r2, [pc, #560]	@ (8002004 <main+0x2cc>)
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24

	hmod1.posMinLim = curve[0].x;
 8001dd4:	4b87      	ldr	r3, [pc, #540]	@ (8001ff4 <main+0x2bc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a84      	ldr	r2, [pc, #528]	@ (8001fec <main+0x2b4>)
 8001dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
	hmod1.posMaxLim = curve[nPoints-1].x;
 8001ddc:	4b86      	ldr	r3, [pc, #536]	@ (8001ff8 <main+0x2c0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	4a84      	ldr	r2, [pc, #528]	@ (8001ff4 <main+0x2bc>)
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a80      	ldr	r2, [pc, #512]	@ (8001fec <main+0x2b4>)
 8001dec:	6293      	str	r3, [r2, #40]	@ 0x28

	hmod1.velMaxLim = 1500;	// Hardware max reachable speed.
 8001dee:	4b7f      	ldr	r3, [pc, #508]	@ (8001fec <main+0x2b4>)
 8001df0:	4a85      	ldr	r2, [pc, #532]	@ (8002008 <main+0x2d0>)
 8001df2:	631a      	str	r2, [r3, #48]	@ 0x30
	hmod1.velMinLim = -1500;
 8001df4:	4b7d      	ldr	r3, [pc, #500]	@ (8001fec <main+0x2b4>)
 8001df6:	4a85      	ldr	r2, [pc, #532]	@ (800200c <main+0x2d4>)
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34

	hcon1.dt = hmod1.dt;
 8001dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8001fec <main+0x2b4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a84      	ldr	r2, [pc, #528]	@ (8002010 <main+0x2d8>)
 8001e00:	6013      	str	r3, [r2, #0]
	hcon1.kp = 100;
 8001e02:	4b83      	ldr	r3, [pc, #524]	@ (8002010 <main+0x2d8>)
 8001e04:	4a83      	ldr	r2, [pc, #524]	@ (8002014 <main+0x2dc>)
 8001e06:	605a      	str	r2, [r3, #4]
	hcon1.ki = 0.25;
 8001e08:	4b81      	ldr	r3, [pc, #516]	@ (8002010 <main+0x2d8>)
 8001e0a:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001e0e:	609a      	str	r2, [r3, #8]
	hcon1.outMax = hmod1.velMaxLim;
 8001e10:	4b76      	ldr	r3, [pc, #472]	@ (8001fec <main+0x2b4>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	4a7e      	ldr	r2, [pc, #504]	@ (8002010 <main+0x2d8>)
 8001e16:	60d3      	str	r3, [r2, #12]
	hcon1.outMin = hmod1.velMinLim;
 8001e18:	4b74      	ldr	r3, [pc, #464]	@ (8001fec <main+0x2b4>)
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1c:	4a7c      	ldr	r2, [pc, #496]	@ (8002010 <main+0x2d8>)
 8001e1e:	6113      	str	r3, [r2, #16]

  while (1)
  {
	  __HAL_TIM_SET_COUNTER(&htim3, 0); // re-start monitoring timer
 8001e20:	4b6d      	ldr	r3, [pc, #436]	@ (8001fd8 <main+0x2a0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	@ 0x24
/*N*/  checkModelTimeout(1, hmod1.dt);
 8001e28:	4b70      	ldr	r3, [pc, #448]	@ (8001fec <main+0x2b4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff ff1c 	bl	8001c6c <checkModelTimeout>

	  UART1_Handler();
 8001e34:	f7ff fe3e 	bl	8001ab4 <UART1_Handler>
	  /*1*/  checkModelTimeout(0, hmod1.dt);
 8001e38:	4b6c      	ldr	r3, [pc, #432]	@ (8001fec <main+0x2b4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff ff14 	bl	8001c6c <checkModelTimeout>
	  int32_t sAux = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	603b      	str	r3, [r7, #0]
	  if( ADS1220_read_singleshot(&hspi1, GPIOC, GPIO_PIN_4, &sAux, 10) ){
 8001e48:	463b      	mov	r3, r7
 8001e4a:	220a      	movs	r2, #10
 8001e4c:	9200      	str	r2, [sp, #0]
 8001e4e:	2210      	movs	r2, #16
 8001e50:	4971      	ldr	r1, [pc, #452]	@ (8002018 <main+0x2e0>)
 8001e52:	4864      	ldr	r0, [pc, #400]	@ (8001fe4 <main+0x2ac>)
 8001e54:	f7ff f9e6 	bl	8001224 <ADS1220_read_singleshot>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d02d      	beq.n	8001eba <main+0x182>

		  int16_t raw = ((sAux & 0x00FFFF00)>>8) + fOffset;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	121b      	asrs	r3, r3, #8
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	827b      	strh	r3, [r7, #18]
		  float nforce = (float)raw / scalingFactor_N;
 8001e6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e82:	edc7 7a03 	vstr	s15, [r7, #12]

		  /*Debug Foce sensor*/
		  if(fabs((double)(nforce-force)) > th){
 8001e86:	4b65      	ldr	r3, [pc, #404]	@ (800201c <main+0x2e4>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e94:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e98:	4b61      	ldr	r3, [pc, #388]	@ (8002020 <main+0x2e8>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	dd05      	ble.n	8001eb4 <main+0x17c>
			fforce++;
 8001ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8002024 <main+0x2ec>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002024 <main+0x2ec>)
 8001eb2:	801a      	strh	r2, [r3, #0]
		  }

		  force = nforce;
 8001eb4:	4a59      	ldr	r2, [pc, #356]	@ (800201c <main+0x2e4>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6013      	str	r3, [r2, #0]
	  }

	  /*2*/  checkModelTimeout(0, hmod1.dt);
 8001eba:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <main+0x2b4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fed3 	bl	8001c6c <checkModelTimeout>
	// Filter 1 Force
	  static float smoothForce = 0;
	  smoothForce = smoothForce - (LPF1_Beta * (smoothForce - force));
 8001ec6:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <main+0x2f0>)
 8001ec8:	ed93 7a00 	vldr	s14, [r3]
 8001ecc:	4b56      	ldr	r3, [pc, #344]	@ (8002028 <main+0x2f0>)
 8001ece:	edd3 6a00 	vldr	s13, [r3]
 8001ed2:	4b52      	ldr	r3, [pc, #328]	@ (800201c <main+0x2e4>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <main+0x2f4>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eea:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <main+0x2f0>)
 8001eec:	edc3 7a00 	vstr	s15, [r3]
	  /*3*/  checkModelTimeout(0, hmod1.dt);
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fec <main+0x2b4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff feb8 	bl	8001c6c <checkModelTimeout>
	// Reference model
	//------------------------------------------//
	 refModel_Tick(&hmod1, smoothForce);
 8001efc:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <main+0x2f0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb31 	bl	8000568 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	ec43 2b10 	vmov	d0, r2, r3
 8001f0e:	4837      	ldr	r0, [pc, #220]	@ (8001fec <main+0x2b4>)
 8001f10:	f7ff fa42 	bl	8001398 <refModel_Tick>
	//------------------------------------------//
	 /*4*/  checkModelTimeout(0, hmod1.dt);
 8001f14:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <main+0x2b4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f7ff fea6 	bl	8001c6c <checkModelTimeout>
	// Position Controller
	//------------------------------------------//
	hcon1.dt = hmod1.dt;
 8001f20:	4b32      	ldr	r3, [pc, #200]	@ (8001fec <main+0x2b4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a3a      	ldr	r2, [pc, #232]	@ (8002010 <main+0x2d8>)
 8001f26:	6013      	str	r3, [r2, #0]
	float refSpeed = Compute_PI(&hcon1, hmod1.pos, (StepCon_GetPosition()));
 8001f28:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <main+0x2b4>)
 8001f2a:	ed93 8a10 	vldr	s16, [r3, #64]	@ 0x40
 8001f2e:	f7ff fcbb 	bl	80018a8 <StepCon_GetPosition>
 8001f32:	eef0 7a40 	vmov.f32	s15, s0
 8001f36:	eef0 0a67 	vmov.f32	s1, s15
 8001f3a:	eeb0 0a48 	vmov.f32	s0, s16
 8001f3e:	4834      	ldr	r0, [pc, #208]	@ (8002010 <main+0x2d8>)
 8001f40:	f7ff f9ba 	bl	80012b8 <Compute_PI>
 8001f44:	ed87 0a02 	vstr	s0, [r7, #8]
	/*5*/  checkModelTimeout(0, hmod1.dt);
 8001f48:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <main+0x2b4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fe8c 	bl	8001c6c <checkModelTimeout>
	//------------------------------------------//

	 /* Drive motor Speed with corrected ref velocity */
	 speed = (hmod1.vel + refSpeed); // in mm/s
 8001f54:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <main+0x2b4>)
 8001f56:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001f5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f62:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <main+0x2f8>)
 8001f64:	edc3 7a00 	vstr	s15, [r3]

	 StepCon_Speed(speed);
 8001f68:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <main+0x2f8>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	f7ff fccb 	bl	800190c <StepCon_Speed>

	 // Console logs
	 if(timeStamp + 50 < HAL_GetTick()){
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8001f7c:	f000 ff60 	bl	8002e40 <HAL_GetTick>
 8001f80:	4603      	mov	r3, r0
 8001f82:	429c      	cmp	r4, r3
 8001f84:	d219      	bcs.n	8001fba <main+0x282>
		 UART1_printf("cmd=%.4f, %.4f\r\n", (float)StepCon_GetPosition(), smoothForce);
 8001f86:	f7ff fc8f 	bl	80018a8 <StepCon_GetPosition>
 8001f8a:	ee10 3a10 	vmov	r3, s0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe faea 	bl	8000568 <__aeabi_f2d>
 8001f94:	4604      	mov	r4, r0
 8001f96:	460d      	mov	r5, r1
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <main+0x2f0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fae3 	bl	8000568 <__aeabi_f2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8001faa:	4622      	mov	r2, r4
 8001fac:	462b      	mov	r3, r5
 8001fae:	4821      	ldr	r0, [pc, #132]	@ (8002034 <main+0x2fc>)
 8001fb0:	f7ff fdbe 	bl	8001b30 <UART1_printf>
		 timeStamp = HAL_GetTick();
 8001fb4:	f000 ff44 	bl	8002e40 <HAL_GetTick>
 8001fb8:	61f8      	str	r0, [r7, #28]
//	//	 * You can compare the timer counter and trigger an alarm
//	//	 * if the time was already gone by the time the program
//	//	 * reached this point
//	//	 **/

/*6*/  checkModelTimeout(0, hmod1.dt);
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <main+0x2b4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff fe53 	bl	8001c6c <checkModelTimeout>
	 while(__HAL_TIM_GET_COUNTER(&htim3) < hmod1.dt);
 8001fc6:	bf00      	nop
 8001fc8:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <main+0x2a0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fce:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <main+0x2b4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3f8      	bcc.n	8001fc8 <main+0x290>
  {
 8001fd6:	e723      	b.n	8001e20 <main+0xe8>
 8001fd8:	20000edc 	.word	0x20000edc
 8001fdc:	20000e94 	.word	0x20000e94
 8001fe0:	0800bdf0 	.word	0x0800bdf0
 8001fe4:	20000e3c 	.word	0x20000e3c
 8001fe8:	42a90000 	.word	0x42a90000
 8001fec:	20000fec 	.word	0x20000fec
 8001ff0:	41a00000 	.word	0x41a00000
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	20000804 	.word	0x20000804
 8001ffc:	3e4ccccd 	.word	0x3e4ccccd
 8002000:	40a00000 	.word	0x40a00000
 8002004:	3c23d70a 	.word	0x3c23d70a
 8002008:	44bb8000 	.word	0x44bb8000
 800200c:	c4bb8000 	.word	0xc4bb8000
 8002010:	20001040 	.word	0x20001040
 8002014:	42c80000 	.word	0x42c80000
 8002018:	40020800 	.word	0x40020800
 800201c:	20000fcc 	.word	0x20000fcc
 8002020:	20000008 	.word	0x20000008
 8002024:	20000fd0 	.word	0x20000fd0
 8002028:	2000105c 	.word	0x2000105c
 800202c:	20000004 	.word	0x20000004
 8002030:	20000fc8 	.word	0x20000fc8
 8002034:	0800bddc 	.word	0x0800bddc

08002038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b094      	sub	sp, #80	@ 0x50
 800203c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203e:	f107 0320 	add.w	r3, r7, #32
 8002042:	2230      	movs	r2, #48	@ 0x30
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f005 fee4 	bl	8007e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <SystemClock_Config+0xd8>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <SystemClock_Config+0xd8>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <SystemClock_Config+0xd8>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	4b25      	ldr	r3, [pc, #148]	@ (8002114 <SystemClock_Config+0xdc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a24      	ldr	r2, [pc, #144]	@ (8002114 <SystemClock_Config+0xdc>)
 8002082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b22      	ldr	r3, [pc, #136]	@ (8002114 <SystemClock_Config+0xdc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002094:	2301      	movs	r3, #1
 8002096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002098:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209e:	2302      	movs	r3, #2
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020a8:	2304      	movs	r3, #4
 80020aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80020ac:	23b4      	movs	r3, #180	@ 0xb4
 80020ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020b0:	2302      	movs	r3, #2
 80020b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020b4:	2303      	movs	r3, #3
 80020b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b8:	f107 0320 	add.w	r3, r7, #32
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fe01 	bl	8003cc4 <HAL_RCC_OscConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020c8:	f000 fb78 	bl	80027bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020cc:	f001 fdaa 	bl	8003c24 <HAL_PWREx_EnableOverDrive>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80020d6:	f000 fb71 	bl	80027bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020da:	230f      	movs	r3, #15
 80020dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020de:	2302      	movs	r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80020ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2105      	movs	r1, #5
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 f85b 	bl	80041b4 <HAL_RCC_ClockConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002104:	f000 fb5a 	bl	80027bc <Error_Handler>
  }
}
 8002108:	bf00      	nop
 800210a:	3750      	adds	r7, #80	@ 0x50
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800211c:	4b17      	ldr	r3, [pc, #92]	@ (800217c <MX_SPI1_Init+0x64>)
 800211e:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <MX_SPI1_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <MX_SPI1_Init+0x64>)
 8002124:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <MX_SPI1_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <MX_SPI1_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_SPI1_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <MX_SPI1_Init+0x64>)
 800213e:	2201      	movs	r2, #1
 8002140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_SPI1_Init+0x64>)
 8002144:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_SPI1_Init+0x64>)
 800214c:	2210      	movs	r2, #16
 800214e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <MX_SPI1_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_SPI1_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	@ (800217c <MX_SPI1_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_SPI1_Init+0x64>)
 8002164:	220a      	movs	r2, #10
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	@ (800217c <MX_SPI1_Init+0x64>)
 800216a:	f002 fa75 	bl	8004658 <HAL_SPI_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002174:	f000 fb22 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000e3c 	.word	0x20000e3c
 8002180:	40013000 	.word	0x40013000

08002184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021aa:	2259      	movs	r2, #89	@ 0x59
 80021ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021b0:	2210      	movs	r2, #16
 80021b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80021ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c8:	4813      	ldr	r0, [pc, #76]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021ca:	f002 ffed 	bl	80051a8 <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021d4:	f000 faf2 	bl	80027bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4619      	mov	r1, r3
 80021e4:	480c      	ldr	r0, [pc, #48]	@ (8002218 <MX_TIM2_Init+0x94>)
 80021e6:	f003 fa37 	bl	8005658 <HAL_TIM_ConfigClockSource>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021f0:	f000 fae4 	bl	80027bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_TIM2_Init+0x94>)
 8002202:	f003 fc53 	bl	8005aac <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800220c:	f000 fad6 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000e94 	.word	0x20000e94

0800221c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <MX_TIM3_Init+0x94>)
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <MX_TIM3_Init+0x98>)
 800223c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <MX_TIM3_Init+0x94>)
 8002240:	2259      	movs	r2, #89	@ 0x59
 8002242:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <MX_TIM3_Init+0x94>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <MX_TIM3_Init+0x94>)
 800224c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002250:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002252:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <MX_TIM3_Init+0x94>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <MX_TIM3_Init+0x94>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800225e:	4814      	ldr	r0, [pc, #80]	@ (80022b0 <MX_TIM3_Init+0x94>)
 8002260:	f002 ffa2 	bl	80051a8 <HAL_TIM_Base_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800226a:	f000 faa7 	bl	80027bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002272:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	4619      	mov	r1, r3
 800227a:	480d      	ldr	r0, [pc, #52]	@ (80022b0 <MX_TIM3_Init+0x94>)
 800227c:	f003 f9ec 	bl	8005658 <HAL_TIM_ConfigClockSource>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002286:	f000 fa99 	bl	80027bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002292:	463b      	mov	r3, r7
 8002294:	4619      	mov	r1, r3
 8002296:	4806      	ldr	r0, [pc, #24]	@ (80022b0 <MX_TIM3_Init+0x94>)
 8002298:	f003 fc08 	bl	8005aac <HAL_TIMEx_MasterConfigSynchronization>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022a2:	f000 fa8b 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000edc 	.word	0x20000edc
 80022b4:	40000400 	.word	0x40000400

080022b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <MX_USART1_UART_Init+0x50>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	@ (8002304 <MX_USART1_UART_Init+0x4c>)
 80022f0:	f003 fc6c 	bl	8005bcc <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022fa:	f000 fa5f 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000f24 	.word	0x20000f24
 8002308:	40011000 	.word	0x40011000

0800230c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <MX_DMA_Init+0x3c>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a0b      	ldr	r2, [pc, #44]	@ (8002348 <MX_DMA_Init+0x3c>)
 800231c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <MX_DMA_Init+0x3c>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 6, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2106      	movs	r1, #6
 8002332:	203a      	movs	r0, #58	@ 0x3a
 8002334:	f000 fe6c 	bl	8003010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002338:	203a      	movs	r0, #58	@ 0x3a
 800233a:	f000 fe85 	bl	8003048 <HAL_NVIC_EnableIRQ>

}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	@ 0x28
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	4b66      	ldr	r3, [pc, #408]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 800236c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002370:	6313      	str	r3, [r2, #48]	@ 0x30
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b5f      	ldr	r3, [pc, #380]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a5e      	ldr	r2, [pc, #376]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b5c      	ldr	r3, [pc, #368]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b58      	ldr	r3, [pc, #352]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a57      	ldr	r2, [pc, #348]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b55      	ldr	r3, [pc, #340]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	4a50      	ldr	r2, [pc, #320]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	4a49      	ldr	r2, [pc, #292]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <MX_GPIO_Init+0x1b4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2110      	movs	r1, #16
 80023f2:	4844      	ldr	r0, [pc, #272]	@ (8002504 <MX_GPIO_Init+0x1b8>)
 80023f4:	f001 fbfc 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023fe:	4842      	ldr	r0, [pc, #264]	@ (8002508 <MX_GPIO_Init+0x1bc>)
 8002400:	f001 fbf6 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_7|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f246 01a0 	movw	r1, #24736	@ 0x60a0
 800240a:	4840      	ldr	r0, [pc, #256]	@ (800250c <MX_GPIO_Init+0x1c0>)
 800240c:	f001 fbf0 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2140      	movs	r1, #64	@ 0x40
 8002414:	483e      	ldr	r0, [pc, #248]	@ (8002510 <MX_GPIO_Init+0x1c4>)
 8002416:	f001 fbeb 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800241e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4835      	ldr	r0, [pc, #212]	@ (8002504 <MX_GPIO_Init+0x1b8>)
 8002430:	f001 fa1a 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002434:	2310      	movs	r3, #16
 8002436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002438:	2301      	movs	r3, #1
 800243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	482e      	ldr	r0, [pc, #184]	@ (8002504 <MX_GPIO_Init+0x1b8>)
 800244c:	f001 fa0c 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002450:	2310      	movs	r3, #16
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	482b      	ldr	r0, [pc, #172]	@ (8002510 <MX_GPIO_Init+0x1c4>)
 8002464:	f001 fa00 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4822      	ldr	r0, [pc, #136]	@ (8002508 <MX_GPIO_Init+0x1bc>)
 800247e:	f001 f9f3 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002482:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	2301      	movs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	481b      	ldr	r0, [pc, #108]	@ (8002508 <MX_GPIO_Init+0x1bc>)
 800249c:	f001 f9e4 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024a0:	2320      	movs	r3, #32
 80024a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a4:	2301      	movs	r3, #1
 80024a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	4815      	ldr	r0, [pc, #84]	@ (800250c <MX_GPIO_Init+0x1c0>)
 80024b8:	f001 f9d6 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LD3_Pin|LD4_Pin;
 80024bc:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 80024c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <MX_GPIO_Init+0x1c0>)
 80024d6:	f001 f9c7 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024da:	2340      	movs	r3, #64	@ 0x40
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024de:	2301      	movs	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	4807      	ldr	r0, [pc, #28]	@ (8002510 <MX_GPIO_Init+0x1c4>)
 80024f2:	f001 f9b9 	bl	8003868 <HAL_GPIO_Init>

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021800 	.word	0x40021800
 8002510:	40020800 	.word	0x40020800

08002514 <UART1_Cmd_Callback>:

/* USER CODE BEGIN 4 */


void UART1_Cmd_Callback(uint8_t* cmd, uint16_t len){
 8002514:	b580      	push	{r7, lr}
 8002516:	b092      	sub	sp, #72	@ 0x48
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]

	/* Process your commands here */
	float aux = 0;
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	617b      	str	r3, [r7, #20]

	if(!len) return; /* Ignore empty commands */
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 810f 	beq.w	800274c <UART1_Cmd_Callback+0x238>


	if( isCmd("cmap=") ) {
 800252e:	2205      	movs	r2, #5
 8002530:	4989      	ldr	r1, [pc, #548]	@ (8002758 <UART1_Cmd_Callback+0x244>)
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f005 fc76 	bl	8007e24 <strncmp>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8093 	bne.w	8002666 <UART1_Cmd_Callback+0x152>

		cMap_1d_t* points = (cMap_1d_t*) hmod1.cMap;
 8002540:	4b86      	ldr	r3, [pc, #536]	@ (800275c <UART1_Cmd_Callback+0x248>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	623b      	str	r3, [r7, #32]

		// Skip the "cmap=" prefix
		const char* data_start = (const char*)cmd + 5;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3305      	adds	r3, #5
 800254a:	61fb      	str	r3, [r7, #28]

		// Determine the number of pairs by counting commas
		uint16_t num_pairs = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		const char* ptr = data_start;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	643b      	str	r3, [r7, #64]	@ 0x40
		//while (*ptr) {
		for (int i=0;i<(len-5);i++){
 8002556:	2300      	movs	r3, #0
 8002558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800255a:	e00e      	b.n	800257a <UART1_Cmd_Callback+0x66>
			if (*ptr == ',') {
 800255c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b2c      	cmp	r3, #44	@ 0x2c
 8002562:	d104      	bne.n	800256e <UART1_Cmd_Callback+0x5a>
				num_pairs++;
 8002564:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002568:	3301      	adds	r3, #1
 800256a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			}
			ptr++;
 800256e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002570:	3301      	adds	r3, #1
 8002572:	643b      	str	r3, [r7, #64]	@ 0x40
		for (int i=0;i<(len-5);i++){
 8002574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002576:	3301      	adds	r3, #1
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	3b05      	subs	r3, #5
 800257e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002580:	429a      	cmp	r2, r3
 8002582:	dbeb      	blt.n	800255c <UART1_Cmd_Callback+0x48>
		}

		// Each pair has two values, so number of pairs is half the commas
		num_pairs = (num_pairs + 1) / 2;
 8002584:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002588:	3301      	adds	r3, #1
 800258a:	0fda      	lsrs	r2, r3, #31
 800258c:	4413      	add	r3, r2
 800258e:	105b      	asrs	r3, r3, #1
 8002590:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

		if (num_pairs > 255) return;
 8002594:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002598:	2bff      	cmp	r3, #255	@ 0xff
 800259a:	f200 80d9 	bhi.w	8002750 <UART1_Cmd_Callback+0x23c>

		// Parse the data points using sscanf
		size_t index = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	63bb      	str	r3, [r7, #56]	@ 0x38
		ptr = data_start;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	643b      	str	r3, [r7, #64]	@ 0x40
		while (index < num_pairs && *ptr) {
 80025a6:	e040      	b.n	800262a <UART1_Cmd_Callback+0x116>
			float x, y;
			int scanned = sscanf(ptr, "%f,%f", &x, &y);
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	f107 0210 	add.w	r2, r7, #16
 80025b0:	496b      	ldr	r1, [pc, #428]	@ (8002760 <UART1_Cmd_Callback+0x24c>)
 80025b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80025b4:	f005 fb9e 	bl	8007cf4 <siscanf>
 80025b8:	61b8      	str	r0, [r7, #24]
			if (scanned == 2) {
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d112      	bne.n	80025e6 <UART1_Cmd_Callback+0xd2>
				points[index].x = x;
 80025c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	6a3a      	ldr	r2, [r7, #32]
 80025c6:	4413      	add	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	601a      	str	r2, [r3, #0]
				points[index].f = y;
 80025cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	4413      	add	r3, r2
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
				index++;
 80025d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025da:	3301      	adds	r3, #1
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			// Move pointer to the next pair
			while (*ptr && *ptr != ',') ptr++;
 80025de:	e002      	b.n	80025e6 <UART1_Cmd_Callback+0xd2>
 80025e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e2:	3301      	adds	r3, #1
 80025e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80025e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <UART1_Cmd_Callback+0xe2>
 80025ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b2c      	cmp	r3, #44	@ 0x2c
 80025f4:	d1f4      	bne.n	80025e0 <UART1_Cmd_Callback+0xcc>
			if (*ptr == ',') ptr++;
 80025f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b2c      	cmp	r3, #44	@ 0x2c
 80025fc:	d106      	bne.n	800260c <UART1_Cmd_Callback+0xf8>
 80025fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002600:	3301      	adds	r3, #1
 8002602:	643b      	str	r3, [r7, #64]	@ 0x40
			while (*ptr && *ptr != ',') ptr++;
 8002604:	e002      	b.n	800260c <UART1_Cmd_Callback+0xf8>
 8002606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002608:	3301      	adds	r3, #1
 800260a:	643b      	str	r3, [r7, #64]	@ 0x40
 800260c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <UART1_Cmd_Callback+0x108>
 8002614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b2c      	cmp	r3, #44	@ 0x2c
 800261a:	d1f4      	bne.n	8002606 <UART1_Cmd_Callback+0xf2>
			if (*ptr == ',') ptr++;
 800261c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b2c      	cmp	r3, #44	@ 0x2c
 8002622:	d102      	bne.n	800262a <UART1_Cmd_Callback+0x116>
 8002624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002626:	3301      	adds	r3, #1
 8002628:	643b      	str	r3, [r7, #64]	@ 0x40
		while (index < num_pairs && *ptr) {
 800262a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800262e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002630:	429a      	cmp	r2, r3
 8002632:	d203      	bcs.n	800263c <UART1_Cmd_Callback+0x128>
 8002634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1b5      	bne.n	80025a8 <UART1_Cmd_Callback+0x94>
		}

		hmod1.cMap_size = num_pairs;
 800263c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b46      	ldr	r3, [pc, #280]	@ (800275c <UART1_Cmd_Callback+0x248>)
 8002644:	711a      	strb	r2, [r3, #4]

		hmod1.posMinLim = points[0].x;
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a44      	ldr	r2, [pc, #272]	@ (800275c <UART1_Cmd_Callback+0x248>)
 800264c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		hmod1.posMaxLim = points[num_pairs-1].x;
 800264e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002652:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002656:	3b01      	subs	r3, #1
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	6a3a      	ldr	r2, [r7, #32]
 800265c:	4413      	add	r3, r2
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3e      	ldr	r2, [pc, #248]	@ (800275c <UART1_Cmd_Callback+0x248>)
 8002662:	6293      	str	r3, [r2, #40]	@ 0x28
 8002664:	e075      	b.n	8002752 <UART1_Cmd_Callback+0x23e>

	}else if( isCmd("mass=") ) {
 8002666:	2205      	movs	r2, #5
 8002668:	493e      	ldr	r1, [pc, #248]	@ (8002764 <UART1_Cmd_Callback+0x250>)
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f005 fbda 	bl	8007e24 <strncmp>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <UART1_Cmd_Callback+0x180>

		int res = sscanf((const char*)cmd,"mass=%f", &aux);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	461a      	mov	r2, r3
 800267c:	493a      	ldr	r1, [pc, #232]	@ (8002768 <UART1_Cmd_Callback+0x254>)
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f005 fb38 	bl	8007cf4 <siscanf>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24
		if(res) {
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d062      	beq.n	8002752 <UART1_Cmd_Callback+0x23e>
			hmod1.m = aux;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4a33      	ldr	r2, [pc, #204]	@ (800275c <UART1_Cmd_Callback+0x248>)
 8002690:	60d3      	str	r3, [r2, #12]
 8002692:	e05e      	b.n	8002752 <UART1_Cmd_Callback+0x23e>
		}

	}else if( isCmd("damp=") ) {
 8002694:	2205      	movs	r2, #5
 8002696:	4935      	ldr	r1, [pc, #212]	@ (800276c <UART1_Cmd_Callback+0x258>)
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f005 fbc3 	bl	8007e24 <strncmp>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10e      	bne.n	80026c2 <UART1_Cmd_Callback+0x1ae>
		int res = sscanf((const char*)cmd,"damp=%f", &aux);
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	461a      	mov	r2, r3
 80026aa:	4931      	ldr	r1, [pc, #196]	@ (8002770 <UART1_Cmd_Callback+0x25c>)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f005 fb21 	bl	8007cf4 <siscanf>
 80026b2:	62b8      	str	r0, [r7, #40]	@ 0x28
		if(res) {
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d04b      	beq.n	8002752 <UART1_Cmd_Callback+0x23e>
			hmod1.c = aux;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a27      	ldr	r2, [pc, #156]	@ (800275c <UART1_Cmd_Callback+0x248>)
 80026be:	6113      	str	r3, [r2, #16]
 80026c0:	e047      	b.n	8002752 <UART1_Cmd_Callback+0x23e>
		}

	}else if( isCmd("frcn=") ) {
 80026c2:	2205      	movs	r2, #5
 80026c4:	492b      	ldr	r1, [pc, #172]	@ (8002774 <UART1_Cmd_Callback+0x260>)
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f005 fbac 	bl	8007e24 <strncmp>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10e      	bne.n	80026f0 <UART1_Cmd_Callback+0x1dc>
		int res = sscanf((const char*)cmd,"frcn=%f", &aux);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	461a      	mov	r2, r3
 80026d8:	4927      	ldr	r1, [pc, #156]	@ (8002778 <UART1_Cmd_Callback+0x264>)
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f005 fb0a 	bl	8007cf4 <siscanf>
 80026e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(res) {
 80026e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d034      	beq.n	8002752 <UART1_Cmd_Callback+0x23e>
			hmod1.N = aux;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	4a1c      	ldr	r2, [pc, #112]	@ (800275c <UART1_Cmd_Callback+0x248>)
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	e030      	b.n	8002752 <UART1_Cmd_Callback+0x23e>
		}

	}else if( isCmd("vmax=") ) {
 80026f0:	2205      	movs	r2, #5
 80026f2:	4922      	ldr	r1, [pc, #136]	@ (800277c <UART1_Cmd_Callback+0x268>)
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f005 fb95 	bl	8007e24 <strncmp>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10e      	bne.n	800271e <UART1_Cmd_Callback+0x20a>
		int res = sscanf((const char*)cmd,"vmax=%f", &aux);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	461a      	mov	r2, r3
 8002706:	491e      	ldr	r1, [pc, #120]	@ (8002780 <UART1_Cmd_Callback+0x26c>)
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f005 faf3 	bl	8007cf4 <siscanf>
 800270e:	6338      	str	r0, [r7, #48]	@ 0x30
		if(res) {
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01d      	beq.n	8002752 <UART1_Cmd_Callback+0x23e>
			hmod1.velMaxLim = aux;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4a10      	ldr	r2, [pc, #64]	@ (800275c <UART1_Cmd_Callback+0x248>)
 800271a:	6313      	str	r3, [r2, #48]	@ 0x30
 800271c:	e019      	b.n	8002752 <UART1_Cmd_Callback+0x23e>
		}

	}else if( isCmd("vmin=") ) {
 800271e:	2205      	movs	r2, #5
 8002720:	4918      	ldr	r1, [pc, #96]	@ (8002784 <UART1_Cmd_Callback+0x270>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f005 fb7e 	bl	8007e24 <strncmp>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d111      	bne.n	8002752 <UART1_Cmd_Callback+0x23e>
		int res = sscanf((const char*)cmd,"vmin=%f", &aux);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	461a      	mov	r2, r3
 8002734:	4914      	ldr	r1, [pc, #80]	@ (8002788 <UART1_Cmd_Callback+0x274>)
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f005 fadc 	bl	8007cf4 <siscanf>
 800273c:	6378      	str	r0, [r7, #52]	@ 0x34
		if(res) {
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <UART1_Cmd_Callback+0x23e>
			hmod1.velMinLim = aux;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <UART1_Cmd_Callback+0x248>)
 8002748:	6353      	str	r3, [r2, #52]	@ 0x34
 800274a:	e002      	b.n	8002752 <UART1_Cmd_Callback+0x23e>
	if(!len) return; /* Ignore empty commands */
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <UART1_Cmd_Callback+0x23e>
		if (num_pairs > 255) return;
 8002750:	bf00      	nop
		}
	}


	/*----------------------------*/
}
 8002752:	3748      	adds	r7, #72	@ 0x48
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	0800bdf4 	.word	0x0800bdf4
 800275c:	20000fec 	.word	0x20000fec
 8002760:	0800bdfc 	.word	0x0800bdfc
 8002764:	0800be04 	.word	0x0800be04
 8002768:	0800be0c 	.word	0x0800be0c
 800276c:	0800be14 	.word	0x0800be14
 8002770:	0800be1c 	.word	0x0800be1c
 8002774:	0800be24 	.word	0x0800be24
 8002778:	0800be2c 	.word	0x0800be2c
 800277c:	0800be34 	.word	0x0800be34
 8002780:	0800be3c 	.word	0x0800be3c
 8002784:	0800be44 	.word	0x0800be44
 8002788:	0800be4c 	.word	0x0800be4c

0800278c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		StepCon_pulseTick();
 800279e:	f7ff f8ff 	bl	80019a0 <StepCon_pulseTick>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 80027ac:	f000 fb34 	bl	8002e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40001000 	.word	0x40001000

080027bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c0:	b672      	cpsid	i
}
 80027c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <Error_Handler+0x8>

080027c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_MspInit+0x4c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_MspInit+0x4c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_MspInit+0x4c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_MspInit+0x4c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	4a08      	ldr	r2, [pc, #32]	@ (8002814 <HAL_MspInit+0x4c>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_MspInit+0x4c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	@ 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a19      	ldr	r2, [pc, #100]	@ (800289c <HAL_SPI_MspInit+0x84>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12c      	bne.n	8002894 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002848:	6453      	str	r3, [r2, #68]	@ 0x44
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8002872:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002884:	2305      	movs	r3, #5
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <HAL_SPI_MspInit+0x8c>)
 8002890:	f000 ffea 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	@ 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40013000 	.word	0x40013000
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020000 	.word	0x40020000

080028a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b8:	d116      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b16      	ldr	r3, [pc, #88]	@ (8002918 <HAL_TIM_Base_MspInit+0x70>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <HAL_TIM_Base_MspInit+0x70>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ca:	4b13      	ldr	r3, [pc, #76]	@ (8002918 <HAL_TIM_Base_MspInit+0x70>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	201c      	movs	r0, #28
 80028dc:	f000 fb98 	bl	8003010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028e0:	201c      	movs	r0, #28
 80028e2:	f000 fbb1 	bl	8003048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028e6:	e012      	b.n	800290e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <HAL_TIM_Base_MspInit+0x74>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10d      	bne.n	800290e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_TIM_Base_MspInit+0x70>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	4a07      	ldr	r2, [pc, #28]	@ (8002918 <HAL_TIM_Base_MspInit+0x70>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6413      	str	r3, [r2, #64]	@ 0x40
 8002902:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_TIM_Base_MspInit+0x70>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40000400 	.word	0x40000400

08002920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a35      	ldr	r2, [pc, #212]	@ (8002a14 <HAL_UART_MspInit+0xf4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d163      	bne.n	8002a0a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b34      	ldr	r3, [pc, #208]	@ (8002a18 <HAL_UART_MspInit+0xf8>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	4a33      	ldr	r2, [pc, #204]	@ (8002a18 <HAL_UART_MspInit+0xf8>)
 800294c:	f043 0310 	orr.w	r3, r3, #16
 8002950:	6453      	str	r3, [r2, #68]	@ 0x44
 8002952:	4b31      	ldr	r3, [pc, #196]	@ (8002a18 <HAL_UART_MspInit+0xf8>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b2d      	ldr	r3, [pc, #180]	@ (8002a18 <HAL_UART_MspInit+0xf8>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <HAL_UART_MspInit+0xf8>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a18 <HAL_UART_MspInit+0xf8>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800297a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800297e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800298c:	2307      	movs	r3, #7
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4821      	ldr	r0, [pc, #132]	@ (8002a1c <HAL_UART_MspInit+0xfc>)
 8002998:	f000 ff66 	bl	8003868 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800299c:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 800299e:	4a21      	ldr	r2, [pc, #132]	@ (8002a24 <HAL_UART_MspInit+0x104>)
 80029a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029be:	4b18      	ldr	r3, [pc, #96]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c4:	4b16      	ldr	r3, [pc, #88]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029ca:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029d2:	4b13      	ldr	r3, [pc, #76]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029da:	2200      	movs	r2, #0
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029de:	4810      	ldr	r0, [pc, #64]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029e0:	f000 fb40 	bl	8003064 <HAL_DMA_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80029ea:	f7ff fee7 	bl	80027bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80029f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <HAL_UART_MspInit+0x100>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2106      	movs	r1, #6
 80029fe:	2025      	movs	r0, #37	@ 0x25
 8002a00:	f000 fb06 	bl	8003010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a04:	2025      	movs	r0, #37	@ 0x25
 8002a06:	f000 fb1f 	bl	8003048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	@ 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	20000f68 	.word	0x20000f68
 8002a24:	40026440 	.word	0x40026440

08002a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	@ 0x38
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_InitTick+0xe4>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	4a32      	ldr	r2, [pc, #200]	@ (8002b0c <HAL_InitTick+0xe4>)
 8002a42:	f043 0310 	orr.w	r3, r3, #16
 8002a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a48:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <HAL_InitTick+0xe4>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a54:	f107 0210 	add.w	r2, r7, #16
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 fdc8 	bl	80045f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a6e:	f001 fd99 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8002a72:	6378      	str	r0, [r7, #52]	@ 0x34
 8002a74:	e004      	b.n	8002a80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a76:	f001 fd95 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a82:	4a23      	ldr	r2, [pc, #140]	@ (8002b10 <HAL_InitTick+0xe8>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0c9b      	lsrs	r3, r3, #18
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a8e:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <HAL_InitTick+0xec>)
 8002a90:	4a21      	ldr	r2, [pc, #132]	@ (8002b18 <HAL_InitTick+0xf0>)
 8002a92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a94:	4b1f      	ldr	r3, [pc, #124]	@ (8002b14 <HAL_InitTick+0xec>)
 8002a96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b14 <HAL_InitTick+0xec>)
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b14 <HAL_InitTick+0xec>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <HAL_InitTick+0xec>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_InitTick+0xec>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ab4:	4817      	ldr	r0, [pc, #92]	@ (8002b14 <HAL_InitTick+0xec>)
 8002ab6:	f002 fb77 	bl	80051a8 <HAL_TIM_Base_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11b      	bne.n	8002b00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002ac8:	4812      	ldr	r0, [pc, #72]	@ (8002b14 <HAL_InitTick+0xec>)
 8002aca:	f002 fc4d 	bl	8005368 <HAL_TIM_Base_Start_IT>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d111      	bne.n	8002b00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002adc:	2036      	movs	r0, #54	@ 0x36
 8002ade:	f000 fab3 	bl	8003048 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d808      	bhi.n	8002afa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	2036      	movs	r0, #54	@ 0x36
 8002aee:	f000 fa8f 	bl	8003010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_InitTick+0xf4>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e002      	b.n	8002b00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3738      	adds	r7, #56	@ 0x38
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	431bde83 	.word	0x431bde83
 8002b14:	20001060 	.word	0x20001060
 8002b18:	40001000 	.word	0x40001000
 8002b1c:	2000080c 	.word	0x2000080c

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <NMI_Handler+0x4>

08002b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <MemManage_Handler+0x4>

08002b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <BusFault_Handler+0x4>

08002b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <UsageFault_Handler+0x4>

08002b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <TIM2_IRQHandler+0x10>)
 8002b86:	f002 fc5f 	bl	8005448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000e94 	.word	0x20000e94

08002b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <USART1_IRQHandler+0x10>)
 8002b9a:	f003 f8d9 	bl	8005d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000f24 	.word	0x20000f24

08002ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bac:	4802      	ldr	r0, [pc, #8]	@ (8002bb8 <TIM6_DAC_IRQHandler+0x10>)
 8002bae:	f002 fc4b 	bl	8005448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20001060 	.word	0x20001060

08002bbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bc0:	4802      	ldr	r0, [pc, #8]	@ (8002bcc <DMA2_Stream2_IRQHandler+0x10>)
 8002bc2:	f000 fbe7 	bl	8003394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000f68 	.word	0x20000f68

08002bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return 1;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_kill>:

int _kill(int pid, int sig)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bea:	f005 f977 	bl	8007edc <__errno>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2216      	movs	r2, #22
 8002bf2:	601a      	str	r2, [r3, #0]
  return -1;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_exit>:

void _exit (int status)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ffe7 	bl	8002be0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c12:	bf00      	nop
 8002c14:	e7fd      	b.n	8002c12 <_exit+0x12>

08002c16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e00a      	b.n	8002c3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c28:	f3af 8000 	nop.w
 8002c2c:	4601      	mov	r1, r0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	60ba      	str	r2, [r7, #8]
 8002c34:	b2ca      	uxtb	r2, r1
 8002c36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	dbf0      	blt.n	8002c28 <_read+0x12>
  }

  return len;
 8002c46:	687b      	ldr	r3, [r7, #4]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e009      	b.n	8002c76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	60ba      	str	r2, [r7, #8]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	dbf1      	blt.n	8002c62 <_write+0x12>
  }
  return len;
 8002c7e:	687b      	ldr	r3, [r7, #4]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_close>:

int _close(int file)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cb0:	605a      	str	r2, [r3, #4]
  return 0;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_isatty>:

int _isatty(int file)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cc8:	2301      	movs	r3, #1
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	@ (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f005 f8dc 	bl	8007edc <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	@ (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20030000 	.word	0x20030000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	200010a8 	.word	0x200010a8
 8002d58:	20001200 	.word	0x20001200

08002d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <SystemInit+0x20>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	4a05      	ldr	r2, [pc, #20]	@ (8002d7c <SystemInit+0x20>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002db8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d84:	480d      	ldr	r0, [pc, #52]	@ (8002dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d86:	490e      	ldr	r1, [pc, #56]	@ (8002dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d88:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8002dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002daa:	f7ff ffd7 	bl	8002d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dae:	f005 f89b 	bl	8007ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002db2:	f7fe ffc1 	bl	8001d38 <main>
  bx  lr    
 8002db6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002db8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc0:	200009dc 	.word	0x200009dc
  ldr r2, =_sidata
 8002dc4:	0800c2dc 	.word	0x0800c2dc
  ldr r2, =_sbss
 8002dc8:	200009e0 	.word	0x200009e0
  ldr r4, =_ebss
 8002dcc:	200011fc 	.word	0x200011fc

08002dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <ADC_IRQHandler>
	...

08002dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e14 <HAL_Init+0x40>)
 8002dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <HAL_Init+0x40>)
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	@ (8002e14 <HAL_Init+0x40>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f000 f8fc 	bl	8002ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f7ff fe10 	bl	8002a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e08:	f7ff fcde 	bl	80027c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00

08002e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000810 	.word	0x20000810
 8002e3c:	200010ac 	.word	0x200010ac

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	200010ac 	.word	0x200010ac

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff ffee 	bl	8002e40 <HAL_GetTick>
 8002e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d005      	beq.n	8002e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_Delay+0x44>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7e:	bf00      	nop
 8002e80:	f7ff ffde 	bl	8002e40 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f7      	bhi.n	8002e80 <HAL_Delay+0x28>
  {
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000810 	.word	0x20000810

08002ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	60d3      	str	r3, [r2, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eec:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <__NVIC_GetPriorityGrouping+0x18>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0307 	and.w	r3, r3, #7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db0b      	blt.n	8002f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4907      	ldr	r1, [pc, #28]	@ (8002f3c <__NVIC_EnableIRQ+0x38>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	@ (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	@ (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	@ 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	@ 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff4c 	bl	8002ea0 <__NVIC_SetPriorityGrouping>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003022:	f7ff ff61 	bl	8002ee8 <__NVIC_GetPriorityGrouping>
 8003026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	6978      	ldr	r0, [r7, #20]
 800302e:	f7ff ffb1 	bl	8002f94 <NVIC_EncodePriority>
 8003032:	4602      	mov	r2, r0
 8003034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff80 	bl	8002f40 <__NVIC_SetPriority>
}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff54 	bl	8002f04 <__NVIC_EnableIRQ>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff fee6 	bl	8002e40 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e099      	b.n	80031b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a0:	e00f      	b.n	80030c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030a2:	f7ff fecd 	bl	8002e40 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d908      	bls.n	80030c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e078      	b.n	80031b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e8      	bne.n	80030a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4b38      	ldr	r3, [pc, #224]	@ (80031bc <HAL_DMA_Init+0x158>)
 80030dc:	4013      	ands	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	2b04      	cmp	r3, #4
 800311a:	d107      	bne.n	800312c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	4313      	orrs	r3, r2
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	2b04      	cmp	r3, #4
 8003154:	d117      	bne.n	8003186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fb01 	bl	8003770 <DMA_CheckFifoParam>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003182:	2301      	movs	r3, #1
 8003184:	e016      	b.n	80031b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fab8 	bl	8003704 <DMA_CalcBaseAndBitshift>
 8003194:	4603      	mov	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	223f      	movs	r2, #63	@ 0x3f
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	f010803f 	.word	0xf010803f

080031c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_DMA_Start_IT+0x26>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e040      	b.n	8003268 <HAL_DMA_Start_IT+0xa8>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d12f      	bne.n	800325a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa4a 	bl	80036a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	223f      	movs	r2, #63	@ 0x3f
 800321a:	409a      	lsls	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0216 	orr.w	r2, r2, #22
 800322e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0208 	orr.w	r2, r2, #8
 8003246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e005      	b.n	8003266 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800327e:	f7ff fddf 	bl	8002e40 <HAL_GetTick>
 8003282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d008      	beq.n	80032a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e052      	b.n	8003348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0216 	bic.w	r2, r2, #22
 80032b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <HAL_DMA_Abort+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0208 	bic.w	r2, r2, #8
 80032e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	e013      	b.n	800331c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032f4:	f7ff fda4 	bl	8002e40 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d90c      	bls.n	800331c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e015      	b.n	8003348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e4      	bne.n	80032f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	223f      	movs	r2, #63	@ 0x3f
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d004      	beq.n	800336e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e00c      	b.n	8003388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2205      	movs	r2, #5
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a0:	4b8e      	ldr	r3, [pc, #568]	@ (80035dc <HAL_DMA_IRQHandler+0x248>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a8e      	ldr	r2, [pc, #568]	@ (80035e0 <HAL_DMA_IRQHandler+0x24c>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	2208      	movs	r2, #8
 80033c0:	409a      	lsls	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0204 	bic.w	r2, r2, #4
 80033e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	2208      	movs	r2, #8
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343a:	2204      	movs	r2, #4
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	2204      	movs	r2, #4
 800345a:	409a      	lsls	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f043 0204 	orr.w	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	2210      	movs	r2, #16
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d043      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03c      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	2210      	movs	r2, #16
 8003490:	409a      	lsls	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d024      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
 80034c2:	e01f      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
 80034d4:	e016      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d107      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0208 	bic.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	2220      	movs	r2, #32
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 808f 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8087 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352a:	2220      	movs	r2, #32
 800352c:	409a      	lsls	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b05      	cmp	r3, #5
 800353c:	d136      	bne.n	80035ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0216 	bic.w	r2, r2, #22
 800354c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800355c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_DMA_IRQHandler+0x1da>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0208 	bic.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	223f      	movs	r2, #63	@ 0x3f
 8003584:	409a      	lsls	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d07e      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
        }
        return;
 80035aa:	e079      	b.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d031      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e02c      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
 80035da:	bf00      	nop
 80035dc:	20000808 	.word	0x20000808
 80035e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e01e      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0210 	bic.w	r2, r2, #16
 8003612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d032      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d022      	beq.n	800368e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3301      	adds	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	d307      	bcc.n	800367c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f2      	bne.n	8003660 <HAL_DMA_IRQHandler+0x2cc>
 800367a:	e000      	b.n	800367e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800367c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	e000      	b.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036a0:	bf00      	nop
    }
  }
}
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b40      	cmp	r3, #64	@ 0x40
 80036d4:	d108      	bne.n	80036e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036e6:	e007      	b.n	80036f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3b10      	subs	r3, #16
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <DMA_CalcBaseAndBitshift+0x64>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800371e:	4a13      	ldr	r2, [pc, #76]	@ (800376c <DMA_CalcBaseAndBitshift+0x68>)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d909      	bls.n	8003746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	659a      	str	r2, [r3, #88]	@ 0x58
 8003744:	e007      	b.n	8003756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	aaaaaaab 	.word	0xaaaaaaab
 800376c:	0800be78 	.word	0x0800be78

08003770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11f      	bne.n	80037ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d856      	bhi.n	800383e <DMA_CheckFifoParam+0xce>
 8003790:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <DMA_CheckFifoParam+0x28>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037bb 	.word	0x080037bb
 80037a0:	080037a9 	.word	0x080037a9
 80037a4:	0800383f 	.word	0x0800383f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d046      	beq.n	8003842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e043      	b.n	8003842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037c2:	d140      	bne.n	8003846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e03d      	b.n	8003846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d2:	d121      	bne.n	8003818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d837      	bhi.n	800384a <DMA_CheckFifoParam+0xda>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <DMA_CheckFifoParam+0x70>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	080037f7 	.word	0x080037f7
 80037e8:	080037f1 	.word	0x080037f1
 80037ec:	08003809 	.word	0x08003809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e030      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d025      	beq.n	800384e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003806:	e022      	b.n	800384e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003810:	d11f      	bne.n	8003852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003816:	e01c      	b.n	8003852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d903      	bls.n	8003826 <DMA_CheckFifoParam+0xb6>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d003      	beq.n	800382c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003824:	e018      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      break;
 800382a:	e015      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e00b      	b.n	8003856 <DMA_CheckFifoParam+0xe6>
      break;
 800383e:	bf00      	nop
 8003840:	e00a      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e008      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
 8003848:	e006      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
 800384c:	e004      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;   
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
    }
  } 
  
  return status; 
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e177      	b.n	8003b74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	f040 8166 	bne.w	8003b6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d005      	beq.n	80038ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d130      	bne.n	800391c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f0:	2201      	movs	r2, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 0201 	and.w	r2, r3, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d017      	beq.n	8003958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d123      	bne.n	80039ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80c0 	beq.w	8003b6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b66      	ldr	r3, [pc, #408]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4a65      	ldr	r2, [pc, #404]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039fe:	4b63      	ldr	r3, [pc, #396]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0a:	4a61      	ldr	r2, [pc, #388]	@ (8003b90 <HAL_GPIO_Init+0x328>)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a58      	ldr	r2, [pc, #352]	@ (8003b94 <HAL_GPIO_Init+0x32c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d037      	beq.n	8003aa6 <HAL_GPIO_Init+0x23e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a57      	ldr	r2, [pc, #348]	@ (8003b98 <HAL_GPIO_Init+0x330>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d031      	beq.n	8003aa2 <HAL_GPIO_Init+0x23a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a56      	ldr	r2, [pc, #344]	@ (8003b9c <HAL_GPIO_Init+0x334>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02b      	beq.n	8003a9e <HAL_GPIO_Init+0x236>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a55      	ldr	r2, [pc, #340]	@ (8003ba0 <HAL_GPIO_Init+0x338>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d025      	beq.n	8003a9a <HAL_GPIO_Init+0x232>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a54      	ldr	r2, [pc, #336]	@ (8003ba4 <HAL_GPIO_Init+0x33c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01f      	beq.n	8003a96 <HAL_GPIO_Init+0x22e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a53      	ldr	r2, [pc, #332]	@ (8003ba8 <HAL_GPIO_Init+0x340>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d019      	beq.n	8003a92 <HAL_GPIO_Init+0x22a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a52      	ldr	r2, [pc, #328]	@ (8003bac <HAL_GPIO_Init+0x344>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_GPIO_Init+0x226>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a51      	ldr	r2, [pc, #324]	@ (8003bb0 <HAL_GPIO_Init+0x348>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_GPIO_Init+0x222>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a50      	ldr	r2, [pc, #320]	@ (8003bb4 <HAL_GPIO_Init+0x34c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x21e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb8 <HAL_GPIO_Init+0x350>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_GPIO_Init+0x21a>
 8003a7e:	2309      	movs	r3, #9
 8003a80:	e012      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a82:	230a      	movs	r3, #10
 8003a84:	e010      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a86:	2308      	movs	r3, #8
 8003a88:	e00e      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	e00c      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a8e:	2306      	movs	r3, #6
 8003a90:	e00a      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a92:	2305      	movs	r3, #5
 8003a94:	e008      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a96:	2304      	movs	r3, #4
 8003a98:	e006      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e004      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e002      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_GPIO_Init+0x240>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	f002 0203 	and.w	r2, r2, #3
 8003aae:	0092      	lsls	r2, r2, #2
 8003ab0:	4093      	lsls	r3, r2
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab8:	4935      	ldr	r1, [pc, #212]	@ (8003b90 <HAL_GPIO_Init+0x328>)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	089b      	lsrs	r3, r3, #2
 8003abe:	3302      	adds	r3, #2
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aea:	4a34      	ldr	r2, [pc, #208]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af0:	4b32      	ldr	r3, [pc, #200]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b14:	4a29      	ldr	r2, [pc, #164]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b1a:	4b28      	ldr	r3, [pc, #160]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b44:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b68:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <HAL_GPIO_Init+0x354>)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b0f      	cmp	r3, #15
 8003b78:	f67f ae84 	bls.w	8003884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3724      	adds	r7, #36	@ 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40013800 	.word	0x40013800
 8003b94:	40020000 	.word	0x40020000
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	40020800 	.word	0x40020800
 8003ba0:	40020c00 	.word	0x40020c00
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40021400 	.word	0x40021400
 8003bac:	40021800 	.word	0x40021800
 8003bb0:	40021c00 	.word	0x40021c00
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40022400 	.word	0x40022400
 8003bbc:	40013c00 	.word	0x40013c00

08003bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e001      	b.n	8003be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c0c:	e003      	b.n	8003c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	041a      	lsls	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c50:	f7ff f8f6 	bl	8002e40 <HAL_GetTick>
 8003c54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c56:	e009      	b.n	8003c6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c58:	f7ff f8f2 	bl	8002e40 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c66:	d901      	bls.n	8003c6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e01f      	b.n	8003cac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c6c:	4b13      	ldr	r3, [pc, #76]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d1ee      	bne.n	8003c58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c7a:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c80:	f7ff f8de 	bl	8002e40 <HAL_GetTick>
 8003c84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c86:	e009      	b.n	8003c9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c88:	f7ff f8da 	bl	8002e40 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c96:	d901      	bls.n	8003c9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e007      	b.n	8003cac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c9c:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	420e0040 	.word	0x420e0040
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	420e0044 	.word	0x420e0044

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e267      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d075      	beq.n	8003dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce2:	4b88      	ldr	r3, [pc, #544]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b85      	ldr	r3, [pc, #532]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d112      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b82      	ldr	r3, [pc, #520]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	4b7e      	ldr	r3, [pc, #504]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d05b      	beq.n	8003dcc <HAL_RCC_OscConfig+0x108>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d157      	bne.n	8003dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e242      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x74>
 8003d2a:	4b76      	ldr	r3, [pc, #472]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a75      	ldr	r2, [pc, #468]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x98>
 8003d42:	4b70      	ldr	r3, [pc, #448]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6f      	ldr	r2, [pc, #444]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6c      	ldr	r2, [pc, #432]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	4b69      	ldr	r3, [pc, #420]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a68      	ldr	r2, [pc, #416]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b66      	ldr	r3, [pc, #408]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7ff f860 	bl	8002e40 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d84:	f7ff f85c 	bl	8002e40 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	@ 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e207      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b5b      	ldr	r3, [pc, #364]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xc0>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7ff f84c 	bl	8002e40 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dac:	f7ff f848 	bl	8002e40 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	@ 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1f3      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	4b51      	ldr	r3, [pc, #324]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0xe8>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d063      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dda:	4b4a      	ldr	r3, [pc, #296]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d11c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df2:	4b44      	ldr	r3, [pc, #272]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d116      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e1c7      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b3b      	ldr	r3, [pc, #236]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4937      	ldr	r1, [pc, #220]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	e03a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e34:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7ff f801 	bl	8002e40 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fe fffd 	bl	8002e40 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1a8      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	4b2b      	ldr	r3, [pc, #172]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b28      	ldr	r3, [pc, #160]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4925      	ldr	r1, [pc, #148]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e015      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe ffe0 	bl	8002e40 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e84:	f7fe ffdc 	bl	8002e40 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e187      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d036      	beq.n	8003f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fe ffc0 	bl	8002e40 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fe ffbc 	bl	8002e40 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e167      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x200>
 8003ee2:	e01b      	b.n	8003f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee4:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fe ffa9 	bl	8002e40 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	e00e      	b.n	8003f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7fe ffa5 	bl	8002e40 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d907      	bls.n	8003f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e150      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470000 	.word	0x42470000
 8003f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	4b88      	ldr	r3, [pc, #544]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ea      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8097 	beq.w	8004058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2e:	4b81      	ldr	r3, [pc, #516]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	4a7c      	ldr	r2, [pc, #496]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	4b77      	ldr	r3, [pc, #476]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d118      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f66:	4b74      	ldr	r3, [pc, #464]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a73      	ldr	r2, [pc, #460]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fe ff65 	bl	8002e40 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fe ff61 	bl	8002e40 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e10c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x2ea>
 8003fa0:	4b64      	ldr	r3, [pc, #400]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	4a63      	ldr	r2, [pc, #396]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x30c>
 8003fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a5e      	ldr	r2, [pc, #376]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fd0:	4b58      	ldr	r3, [pc, #352]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a57      	ldr	r2, [pc, #348]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fdc:	4b55      	ldr	r3, [pc, #340]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	4a54      	ldr	r2, [pc, #336]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 0304 	bic.w	r3, r3, #4
 8003fe6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe ff26 	bl	8002e40 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe ff22 	bl	8002e40 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0cb      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	4b49      	ldr	r3, [pc, #292]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ee      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x334>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fe ff10 	bl	8002e40 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fe ff0c 	bl	8002e40 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0b5      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	4b3e      	ldr	r3, [pc, #248]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ee      	bne.n	8004024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404c:	4b39      	ldr	r3, [pc, #228]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	4a38      	ldr	r2, [pc, #224]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004056:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80a1 	beq.w	80041a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004062:	4b34      	ldr	r3, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b08      	cmp	r3, #8
 800406c:	d05c      	beq.n	8004128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d141      	bne.n	80040fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b31      	ldr	r3, [pc, #196]	@ (800413c <HAL_RCC_OscConfig+0x478>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fee0 	bl	8002e40 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe fedc 	bl	8002e40 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e087      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	491b      	ldr	r1, [pc, #108]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040cc:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x478>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe feb5 	bl	8002e40 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe feb1 	bl	8002e40 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e05c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ec:	4b11      	ldr	r3, [pc, #68]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x416>
 80040f8:	e054      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCC_OscConfig+0x478>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe fe9e 	bl	8002e40 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fe fe9a 	bl	8002e40 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e045      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x444>
 8004126:	e03d      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e038      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCC_OscConfig+0x4ec>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d028      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d121      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d11a      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0cc      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b68      	ldr	r3, [pc, #416]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d90c      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b65      	ldr	r3, [pc, #404]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b63      	ldr	r3, [pc, #396]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b8      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004208:	4b59      	ldr	r3, [pc, #356]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a58      	ldr	r2, [pc, #352]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004220:	4b53      	ldr	r3, [pc, #332]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800422a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	494d      	ldr	r1, [pc, #308]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d044      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b47      	ldr	r3, [pc, #284]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d119      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d003      	beq.n	8004272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b3f      	ldr	r3, [pc, #252]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b3b      	ldr	r3, [pc, #236]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e067      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004292:	4b37      	ldr	r3, [pc, #220]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4934      	ldr	r1, [pc, #208]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fe fdcc 	bl	8002e40 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ac:	f7fe fdc8 	bl	8002e40 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 020c 	and.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1eb      	bne.n	80042ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b25      	ldr	r3, [pc, #148]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d20c      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b22      	ldr	r3, [pc, #136]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b20      	ldr	r3, [pc, #128]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e032      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4916      	ldr	r1, [pc, #88]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	490e      	ldr	r1, [pc, #56]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433a:	f000 f821 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800433e:	4602      	mov	r2, r0
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	490a      	ldr	r1, [pc, #40]	@ (8004374 <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe fb64 	bl	8002a28 <HAL_InitTick>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00
 8004370:	40023800 	.word	0x40023800
 8004374:	0800be60 	.word	0x0800be60
 8004378:	20000808 	.word	0x20000808
 800437c:	2000080c 	.word	0x2000080c

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b094      	sub	sp, #80	@ 0x50
 8004386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	647b      	str	r3, [r7, #68]	@ 0x44
 800438c:	2300      	movs	r3, #0
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004390:	2300      	movs	r3, #0
 8004392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004398:	4b79      	ldr	r3, [pc, #484]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d00d      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x40>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	f200 80e1 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x1ec>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x3a>
 80043b2:	e0db      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b73      	ldr	r3, [pc, #460]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x204>)
 80043b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043b8:	e0db      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ba:	4b73      	ldr	r3, [pc, #460]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x208>)
 80043bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043be:	e0d8      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	f04f 0000 	mov.w	r0, #0
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	0159      	lsls	r1, r3, #5
 8004400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004404:	0150      	lsls	r0, r2, #5
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4621      	mov	r1, r4
 800440c:	1a51      	subs	r1, r2, r1
 800440e:	6139      	str	r1, [r7, #16]
 8004410:	4629      	mov	r1, r5
 8004412:	eb63 0301 	sbc.w	r3, r3, r1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004424:	4659      	mov	r1, fp
 8004426:	018b      	lsls	r3, r1, #6
 8004428:	4651      	mov	r1, sl
 800442a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800442e:	4651      	mov	r1, sl
 8004430:	018a      	lsls	r2, r1, #6
 8004432:	4651      	mov	r1, sl
 8004434:	ebb2 0801 	subs.w	r8, r2, r1
 8004438:	4659      	mov	r1, fp
 800443a:	eb63 0901 	sbc.w	r9, r3, r1
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800444a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800444e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004452:	4690      	mov	r8, r2
 8004454:	4699      	mov	r9, r3
 8004456:	4623      	mov	r3, r4
 8004458:	eb18 0303 	adds.w	r3, r8, r3
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	462b      	mov	r3, r5
 8004460:	eb49 0303 	adc.w	r3, r9, r3
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004472:	4629      	mov	r1, r5
 8004474:	024b      	lsls	r3, r1, #9
 8004476:	4621      	mov	r1, r4
 8004478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800447c:	4621      	mov	r1, r4
 800447e:	024a      	lsls	r2, r1, #9
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004486:	2200      	movs	r2, #0
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800448a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800448c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004490:	f7fc fc0a 	bl	8000ca8 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449c:	e058      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b38      	ldr	r3, [pc, #224]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	2200      	movs	r2, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	4611      	mov	r1, r2
 80044aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	2300      	movs	r3, #0
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044b8:	4642      	mov	r2, r8
 80044ba:	464b      	mov	r3, r9
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	0159      	lsls	r1, r3, #5
 80044c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ca:	0150      	lsls	r0, r2, #5
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4641      	mov	r1, r8
 80044d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044d6:	4649      	mov	r1, r9
 80044d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044f0:	ebb2 040a 	subs.w	r4, r2, sl
 80044f4:	eb63 050b 	sbc.w	r5, r3, fp
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	00eb      	lsls	r3, r5, #3
 8004502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004506:	00e2      	lsls	r2, r4, #3
 8004508:	4614      	mov	r4, r2
 800450a:	461d      	mov	r5, r3
 800450c:	4643      	mov	r3, r8
 800450e:	18e3      	adds	r3, r4, r3
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	464b      	mov	r3, r9
 8004514:	eb45 0303 	adc.w	r3, r5, r3
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004526:	4629      	mov	r1, r5
 8004528:	028b      	lsls	r3, r1, #10
 800452a:	4621      	mov	r1, r4
 800452c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004530:	4621      	mov	r1, r4
 8004532:	028a      	lsls	r2, r1, #10
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453a:	2200      	movs	r2, #0
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	61fa      	str	r2, [r7, #28]
 8004540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004544:	f7fc fbb0 	bl	8000ca8 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x204>)
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004574:	4618      	mov	r0, r3
 8004576:	3750      	adds	r7, #80	@ 0x50
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	007a1200 	.word	0x007a1200

0800458c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004590:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000808 	.word	0x20000808

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a8:	f7ff fff0 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0a9b      	lsrs	r3, r3, #10
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	@ (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	0800be70 	.word	0x0800be70

080045cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d0:	f7ff ffdc 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0b5b      	lsrs	r3, r3, #13
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	@ (80045f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	0800be70 	.word	0x0800be70

080045f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	220f      	movs	r2, #15
 8004602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0203 	and.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004610:	4b0f      	ldr	r3, [pc, #60]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004628:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004636:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <HAL_RCC_GetClockConfig+0x60>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	601a      	str	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	40023c00 	.word	0x40023c00

08004658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07b      	b.n	8004762 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800467a:	d009      	beq.n	8004690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
 8004682:	e005      	b.n	8004690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fe f8b4 	bl	8002818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004714:	ea42 0103 	orr.w	r1, r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0104 	and.w	r1, r3, #4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	f003 0210 	and.w	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b088      	sub	sp, #32
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_SPI_Transmit+0x22>
 8004788:	2302      	movs	r3, #2
 800478a:	e126      	b.n	80049da <HAL_SPI_Transmit+0x270>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004794:	f7fe fb54 	bl	8002e40 <HAL_GetTick>
 8004798:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ae:	e10b      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_SPI_Transmit+0x52>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c0:	e102      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004808:	d10f      	bne.n	800482a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004818:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004828:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004834:	2b40      	cmp	r3, #64	@ 0x40
 8004836:	d007      	beq.n	8004848 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004850:	d14b      	bne.n	80048ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Transmit+0xf6>
 800485a:	8afb      	ldrh	r3, [r7, #22]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d13e      	bne.n	80048de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004884:	e02b      	b.n	80048de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d112      	bne.n	80048ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048b8:	e011      	b.n	80048de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ba:	f7fe fac1 	bl	8002e40 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d803      	bhi.n	80048d2 <HAL_SPI_Transmit+0x168>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d102      	bne.n	80048d8 <HAL_SPI_Transmit+0x16e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048dc:	e074      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ce      	bne.n	8004886 <HAL_SPI_Transmit+0x11c>
 80048e8:	e04c      	b.n	8004984 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x18e>
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d140      	bne.n	800497a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800491e:	e02c      	b.n	800497a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d113      	bne.n	8004956 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004954:	e011      	b.n	800497a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004956:	f7fe fa73 	bl	8002e40 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d803      	bhi.n	800496e <HAL_SPI_Transmit+0x204>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d102      	bne.n	8004974 <HAL_SPI_Transmit+0x20a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004978:	e026      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cd      	bne.n	8004920 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fbcb 	bl	8005124 <SPI_EndRxTxTransaction>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e000      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b088      	sub	sp, #32
 80049e6:	af02      	add	r7, sp, #8
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049fe:	d112      	bne.n	8004a26 <HAL_SPI_Receive+0x44>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10e      	bne.n	8004a26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f8f1 	bl	8004c04 <HAL_SPI_TransmitReceive>
 8004a22:	4603      	mov	r3, r0
 8004a24:	e0ea      	b.n	8004bfc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_SPI_Receive+0x52>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0e3      	b.n	8004bfc <HAL_SPI_Receive+0x21a>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a3c:	f7fe fa00 	bl	8002e40 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a52:	e0ca      	b.n	8004bea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Receive+0x7e>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a64:	e0c1      	b.n	8004bea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2204      	movs	r2, #4
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aac:	d10f      	bne.n	8004ace <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004acc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d007      	beq.n	8004aec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d162      	bne.n	8004bba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004af4:	e02e      	b.n	8004b54 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d115      	bne.n	8004b30 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f103 020c 	add.w	r2, r3, #12
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b2e:	e011      	b.n	8004b54 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b30:	f7fe f986 	bl	8002e40 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d803      	bhi.n	8004b48 <HAL_SPI_Receive+0x166>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_Receive+0x16c>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b52:	e04a      	b.n	8004bea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1cb      	bne.n	8004af6 <HAL_SPI_Receive+0x114>
 8004b5e:	e031      	b.n	8004bc4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d113      	bne.n	8004b96 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b94:	e011      	b.n	8004bba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b96:	f7fe f953 	bl	8002e40 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d803      	bhi.n	8004bae <HAL_SPI_Receive+0x1cc>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d102      	bne.n	8004bb4 <HAL_SPI_Receive+0x1d2>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bb8:	e017      	b.n	8004bea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1cd      	bne.n	8004b60 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa45 	bl	8005058 <SPI_EndRxTransaction>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
 8004be6:	e000      	b.n	8004bea <HAL_SPI_Receive+0x208>
  }

error :
 8004be8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	@ 0x30
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c12:	2301      	movs	r3, #1
 8004c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x26>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e18a      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x33c>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c32:	f7fe f905 	bl	8002e40 <HAL_GetTick>
 8004c36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d00f      	beq.n	8004c74 <HAL_SPI_TransmitReceive+0x70>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c5a:	d107      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x68>
 8004c64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d003      	beq.n	8004c74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c72:	e15b      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0x82>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0x82>
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c8c:	e14e      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d003      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	887a      	ldrh	r2, [r7, #2]
 8004cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	887a      	ldrh	r2, [r7, #2]
 8004cca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce2:	2b40      	cmp	r3, #64	@ 0x40
 8004ce4:	d007      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfe:	d178      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x10a>
 8004d08:	8b7b      	ldrh	r3, [r7, #26]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d166      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d32:	e053      	b.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d11b      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x176>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d016      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x176>
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d113      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	881a      	ldrh	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d119      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x1b8>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d014      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db8:	2301      	movs	r3, #1
 8004dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dbc:	f7fe f840 	bl	8002e40 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d807      	bhi.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d003      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004dda:	e0a7      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1a6      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x130>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1a1      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x130>
 8004df0:	e07c      	b.n	8004eec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x1fc>
 8004dfa:	8b7b      	ldrh	r3, [r7, #26]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d16b      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	7812      	ldrb	r2, [r2, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e26:	e057      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d11c      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x26c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d017      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x26c>
 8004e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d114      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d119      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x2ae>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d014      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb2:	f7fd ffc5 	bl	8002e40 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d803      	bhi.n	8004eca <HAL_SPI_TransmitReceive+0x2c6>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x2cc>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004ed6:	e029      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1a2      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x224>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d19d      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f917 	bl	8005124 <SPI_EndRxTxTransaction>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f08:	e010      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	e000      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3730      	adds	r7, #48	@ 0x30
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f58:	f7fd ff72 	bl	8002e40 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f68:	f7fd ff6a 	bl	8002e40 <HAL_GetTick>
 8004f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f6e:	4b39      	ldr	r3, [pc, #228]	@ (8005054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	015b      	lsls	r3, r3, #5
 8004f74:	0d1b      	lsrs	r3, r3, #20
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f7e:	e054      	b.n	800502a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d050      	beq.n	800502a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f88:	f7fd ff5a 	bl	8002e40 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d902      	bls.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d13d      	bne.n	800501a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb6:	d111      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc0:	d004      	beq.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fca:	d107      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe4:	d10f      	bne.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e017      	b.n	800504a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3b01      	subs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	bf0c      	ite	eq
 800503a:	2301      	moveq	r3, #1
 800503c:	2300      	movne	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	429a      	cmp	r2, r3
 8005046:	d19b      	bne.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000808 	.word	0x20000808

08005058 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800506c:	d111      	bne.n	8005092 <SPI_EndRxTransaction+0x3a>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005076:	d004      	beq.n	8005082 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005080:	d107      	bne.n	8005092 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800509a:	d12a      	bne.n	80050f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a4:	d012      	beq.n	80050cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2180      	movs	r1, #128	@ 0x80
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff49 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d02d      	beq.n	8005118 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e026      	b.n	800511a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2200      	movs	r2, #0
 80050d4:	2101      	movs	r1, #1
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff ff36 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01a      	beq.n	8005118 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e013      	b.n	800511a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2101      	movs	r1, #1
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff ff23 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510c:	f043 0220 	orr.w	r2, r3, #32
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e000      	b.n	800511a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005130:	4b1b      	ldr	r3, [pc, #108]	@ (80051a0 <SPI_EndRxTxTransaction+0x7c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <SPI_EndRxTxTransaction+0x80>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0d5b      	lsrs	r3, r3, #21
 800513c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800514e:	d112      	bne.n	8005176 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	2180      	movs	r1, #128	@ 0x80
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fef4 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	f043 0220 	orr.w	r2, r3, #32
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e00f      	b.n	8005196 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3b01      	subs	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518c:	2b80      	cmp	r3, #128	@ 0x80
 800518e:	d0f2      	beq.n	8005176 <SPI_EndRxTxTransaction+0x52>
 8005190:	e000      	b.n	8005194 <SPI_EndRxTxTransaction+0x70>
        break;
 8005192:	bf00      	nop
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000808 	.word	0x20000808
 80051a4:	165e9f81 	.word	0x165e9f81

080051a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e041      	b.n	800523e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd fb6a 	bl	80028a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f000 fb26 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d001      	beq.n	8005260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e046      	b.n	80052ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <HAL_TIM_Base_Start+0xb4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d022      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527a:	d01d      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <HAL_TIM_Base_Start+0xb8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d018      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1e      	ldr	r2, [pc, #120]	@ (8005304 <HAL_TIM_Base_Start+0xbc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1c      	ldr	r2, [pc, #112]	@ (8005308 <HAL_TIM_Base_Start+0xc0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00e      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1b      	ldr	r2, [pc, #108]	@ (800530c <HAL_TIM_Base_Start+0xc4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a19      	ldr	r2, [pc, #100]	@ (8005310 <HAL_TIM_Base_Start+0xc8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <HAL_TIM_Base_Start+0xcc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d111      	bne.n	80052dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d010      	beq.n	80052ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	e007      	b.n	80052ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800
 8005308:	40000c00 	.word	0x40000c00
 800530c:	40010400 	.word	0x40010400
 8005310:	40014000 	.word	0x40014000
 8005314:	40001800 	.word	0x40001800

08005318 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	f241 1311 	movw	r3, #4369	@ 0x1111
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10f      	bne.n	8005350 <HAL_TIM_Base_Stop+0x38>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	f240 4344 	movw	r3, #1092	@ 0x444
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <HAL_TIM_Base_Stop+0x38>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d001      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e04e      	b.n	800541e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a23      	ldr	r2, [pc, #140]	@ (800542c <HAL_TIM_Base_Start_IT+0xc4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	d01d      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005430 <HAL_TIM_Base_Start_IT+0xc8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005434 <HAL_TIM_Base_Start_IT+0xcc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <HAL_TIM_Base_Start_IT+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <HAL_TIM_Base_Start_IT+0xd4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <HAL_TIM_Base_Start_IT+0xd8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <HAL_TIM_Base_Start_IT+0xdc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d111      	bne.n	800540c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b06      	cmp	r3, #6
 80053f8:	d010      	beq.n	800541c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540a:	e007      	b.n	800541c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40010000 	.word	0x40010000
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00
 800543c:	40010400 	.word	0x40010400
 8005440:	40014000 	.word	0x40014000
 8005444:	40001800 	.word	0x40001800

08005448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b02      	cmp	r3, #2
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b02      	cmp	r3, #2
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0202 	mvn.w	r2, #2
 8005474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f9b5 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f9a7 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f9b8 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0204 	mvn.w	r2, #4
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f98b 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f97d 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f98e 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b08      	cmp	r3, #8
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b08      	cmp	r3, #8
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0208 	mvn.w	r2, #8
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2204      	movs	r2, #4
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f961 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f953 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f964 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b10      	cmp	r3, #16
 8005558:	d122      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b10      	cmp	r3, #16
 8005566:	d11b      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0210 	mvn.w	r2, #16
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2208      	movs	r2, #8
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f937 	bl	80057fa <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f929 	bl	80057e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f93a 	bl	800580e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d10e      	bne.n	80055cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0201 	mvn.w	r2, #1
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fd f8e0 	bl	800278c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d6:	2b80      	cmp	r3, #128	@ 0x80
 80055d8:	d10e      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e4:	2b80      	cmp	r3, #128	@ 0x80
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fae0 	bl	8005bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	d10e      	bne.n	8005624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005610:	2b40      	cmp	r3, #64	@ 0x40
 8005612:	d107      	bne.n	8005624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8ff 	bl	8005822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b20      	cmp	r3, #32
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b20      	cmp	r3, #32
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0220 	mvn.w	r2, #32
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 faaa 	bl	8005ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIM_ConfigClockSource+0x1c>
 8005670:	2302      	movs	r3, #2
 8005672:	e0b4      	b.n	80057de <HAL_TIM_ConfigClockSource+0x186>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800569a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ac:	d03e      	beq.n	800572c <HAL_TIM_ConfigClockSource+0xd4>
 80056ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b2:	f200 8087 	bhi.w	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ba:	f000 8086 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x172>
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c2:	d87f      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b70      	cmp	r3, #112	@ 0x70
 80056c6:	d01a      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0xa6>
 80056c8:	2b70      	cmp	r3, #112	@ 0x70
 80056ca:	d87b      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b60      	cmp	r3, #96	@ 0x60
 80056ce:	d050      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x11a>
 80056d0:	2b60      	cmp	r3, #96	@ 0x60
 80056d2:	d877      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b50      	cmp	r3, #80	@ 0x50
 80056d6:	d03c      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0xfa>
 80056d8:	2b50      	cmp	r3, #80	@ 0x50
 80056da:	d873      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b40      	cmp	r3, #64	@ 0x40
 80056de:	d058      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x13a>
 80056e0:	2b40      	cmp	r3, #64	@ 0x40
 80056e2:	d86f      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b30      	cmp	r3, #48	@ 0x30
 80056e6:	d064      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056e8:	2b30      	cmp	r3, #48	@ 0x30
 80056ea:	d86b      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d060      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d867      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05c      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d05a      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x15a>
 80056fc:	e062      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6899      	ldr	r1, [r3, #8]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f000 f9ad 	bl	8005a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	609a      	str	r2, [r3, #8]
      break;
 800572a:	e04f      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6899      	ldr	r1, [r3, #8]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f000 f996 	bl	8005a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800574e:	609a      	str	r2, [r3, #8]
      break;
 8005750:	e03c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	461a      	mov	r2, r3
 8005760:	f000 f90a 	bl	8005978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2150      	movs	r1, #80	@ 0x50
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f963 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 8005770:	e02c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	461a      	mov	r2, r3
 8005780:	f000 f929 	bl	80059d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2160      	movs	r1, #96	@ 0x60
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f953 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 8005790:	e01c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	461a      	mov	r2, r3
 80057a0:	f000 f8ea 	bl	8005978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2140      	movs	r1, #64	@ 0x40
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 f943 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 80057b0:	e00c      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f000 f93a 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 80057c2:	e003      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	e000      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a40      	ldr	r2, [pc, #256]	@ (800594c <TIM_Base_SetConfig+0x114>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3d      	ldr	r2, [pc, #244]	@ (8005950 <TIM_Base_SetConfig+0x118>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3c      	ldr	r2, [pc, #240]	@ (8005954 <TIM_Base_SetConfig+0x11c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3b      	ldr	r2, [pc, #236]	@ (8005958 <TIM_Base_SetConfig+0x120>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3a      	ldr	r2, [pc, #232]	@ (800595c <TIM_Base_SetConfig+0x124>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2f      	ldr	r2, [pc, #188]	@ (800594c <TIM_Base_SetConfig+0x114>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005898:	d027      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2c      	ldr	r2, [pc, #176]	@ (8005950 <TIM_Base_SetConfig+0x118>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d023      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005954 <TIM_Base_SetConfig+0x11c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01f      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <TIM_Base_SetConfig+0x120>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a29      	ldr	r2, [pc, #164]	@ (800595c <TIM_Base_SetConfig+0x124>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d017      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a28      	ldr	r2, [pc, #160]	@ (8005960 <TIM_Base_SetConfig+0x128>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a27      	ldr	r2, [pc, #156]	@ (8005964 <TIM_Base_SetConfig+0x12c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00f      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a26      	ldr	r2, [pc, #152]	@ (8005968 <TIM_Base_SetConfig+0x130>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a25      	ldr	r2, [pc, #148]	@ (800596c <TIM_Base_SetConfig+0x134>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a24      	ldr	r2, [pc, #144]	@ (8005970 <TIM_Base_SetConfig+0x138>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a23      	ldr	r2, [pc, #140]	@ (8005974 <TIM_Base_SetConfig+0x13c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d108      	bne.n	80058fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a0a      	ldr	r2, [pc, #40]	@ (800594c <TIM_Base_SetConfig+0x114>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0xf8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a0c      	ldr	r2, [pc, #48]	@ (800595c <TIM_Base_SetConfig+0x124>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d103      	bne.n	8005938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	615a      	str	r2, [r3, #20]
}
 800593e:	bf00      	nop
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40010400 	.word	0x40010400
 8005960:	40014000 	.word	0x40014000
 8005964:	40014400 	.word	0x40014400
 8005968:	40014800 	.word	0x40014800
 800596c:	40001800 	.word	0x40001800
 8005970:	40001c00 	.word	0x40001c00
 8005974:	40002000 	.word	0x40002000

08005978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f023 0201 	bic.w	r2, r3, #1
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 030a 	bic.w	r3, r3, #10
 80059b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b087      	sub	sp, #28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0210 	bic.w	r2, r3, #16
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	031b      	lsls	r3, r3, #12
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f043 0307 	orr.w	r3, r3, #7
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	609a      	str	r2, [r3, #8]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	021a      	lsls	r2, r3, #8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	609a      	str	r2, [r3, #8]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e05a      	b.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a21      	ldr	r2, [pc, #132]	@ (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d022      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b10:	d01d      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1d      	ldr	r2, [pc, #116]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d018      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1b      	ldr	r2, [pc, #108]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00e      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a18      	ldr	r2, [pc, #96]	@ (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a17      	ldr	r2, [pc, #92]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a15      	ldr	r2, [pc, #84]	@ (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10c      	bne.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40000400 	.word	0x40000400
 8005b90:	40000800 	.word	0x40000800
 8005b94:	40000c00 	.word	0x40000c00
 8005b98:	40010400 	.word	0x40010400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40001800 	.word	0x40001800

08005ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e03f      	b.n	8005c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc fe94 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	@ 0x24
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fead 	bl	8006970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	4613      	mov	r3, r2
 8005c72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d130      	bne.n	8005ce2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_UART_Transmit_IT+0x26>
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e029      	b.n	8005ce4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Transmit_IT+0x38>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e022      	b.n	8005ce4 <HAL_UART_Transmit_IT+0x7e>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	88fa      	ldrh	r2, [r7, #6]
 8005cb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	88fa      	ldrh	r2, [r7, #6]
 8005cb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2221      	movs	r2, #33	@ 0x21
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cdc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e000      	b.n	8005ce4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d11d      	bne.n	8005d46 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_UART_Receive_DMA+0x26>
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e016      	b.n	8005d48 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Receive_DMA+0x38>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e00f      	b.n	8005d48 <HAL_UART_Receive_DMA+0x58>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fbb7 	bl	80064b0 <UART_Start_Receive_DMA>
 8005d42:	4603      	mov	r3, r0
 8005d44:	e000      	b.n	8005d48 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d46:	2302      	movs	r3, #2
  }
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b0ba      	sub	sp, #232	@ 0xe8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_UART_IRQHandler+0x66>
 8005da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fd23 	bl	80067fa <UART_Receive_IT>
      return;
 8005db4:	e256      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 80de 	beq.w	8005f7c <HAL_UART_IRQHandler+0x22c>
 8005dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80d1 	beq.w	8005f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0xae>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	f043 0201 	orr.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_UART_IRQHandler+0xd2>
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	f043 0202 	orr.w	r2, r3, #2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_UART_IRQHandler+0xf6>
 8005e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d011      	beq.n	8005e76 <HAL_UART_IRQHandler+0x126>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	f043 0208 	orr.w	r2, r3, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 81ed 	beq.w	800625a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_UART_IRQHandler+0x14e>
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fcae 	bl	80067fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b40      	cmp	r3, #64	@ 0x40
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <HAL_UART_IRQHandler+0x17a>
 8005ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04f      	beq.n	8005f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fbb6 	bl	800663c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eda:	2b40      	cmp	r3, #64	@ 0x40
 8005edc:	d141      	bne.n	8005f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1d9      	bne.n	8005ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d013      	beq.n	8005f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	4a7d      	ldr	r2, [pc, #500]	@ (800612c <HAL_UART_IRQHandler+0x3dc>)
 8005f38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fd fa06 	bl	8003350 <HAL_DMA_Abort_IT>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	e00e      	b.n	8005f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f99a 	bl	8006294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	e00a      	b.n	8005f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f996 	bl	8006294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	e006      	b.n	8005f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f992 	bl	8006294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005f76:	e170      	b.n	800625a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	bf00      	nop
    return;
 8005f7a:	e16e      	b.n	800625a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	f040 814a 	bne.w	800621a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8143 	beq.w	800621a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 813c 	beq.w	800621a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b40      	cmp	r3, #64	@ 0x40
 8005fc4:	f040 80b4 	bne.w	8006130 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8140 	beq.w	800625e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	f080 8139 	bcs.w	800625e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ffe:	f000 8088 	beq.w	8006112 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800601c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800602e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800603a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1d9      	bne.n	8006002 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800605e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3314      	adds	r3, #20
 800606e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006072:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006076:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800607a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e1      	bne.n	800604e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800609a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800609c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3314      	adds	r3, #20
 80060aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e3      	bne.n	800608a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e2:	f023 0310 	bic.w	r3, r3, #16
 80060e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e3      	bne.n	80060d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd f8af 	bl	8003270 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800611a:	b29b      	uxth	r3, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f8c0 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006128:	e099      	b.n	800625e <HAL_UART_IRQHandler+0x50e>
 800612a:	bf00      	nop
 800612c:	08006703 	.word	0x08006703
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006138:	b29b      	uxth	r3, r3
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 808b 	beq.w	8006262 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800614c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8086 	beq.w	8006262 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800616c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800617a:	647a      	str	r2, [r7, #68]	@ 0x44
 800617c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e3      	bne.n	8006156 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	623b      	str	r3, [r7, #32]
   return(result);
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3314      	adds	r3, #20
 80061ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80061b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e3      	bne.n	800618e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0310 	bic.w	r3, r3, #16
 80061ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061f8:	61fa      	str	r2, [r7, #28]
 80061fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	617b      	str	r3, [r7, #20]
   return(result);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e3      	bne.n	80061d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800620c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f848 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006218:	e023      	b.n	8006262 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_UART_IRQHandler+0x4ea>
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800622a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa79 	bl	800672a <UART_Transmit_IT>
    return;
 8006238:	e014      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <HAL_UART_IRQHandler+0x514>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fab9 	bl	80067ca <UART_EndTransmit_IT>
    return;
 8006258:	e004      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
    return;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
      return;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
      return;
 8006262:	bf00      	nop
  }
}
 8006264:	37e8      	adds	r7, #232	@ 0xe8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b09c      	sub	sp, #112	@ 0x70
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d172      	bne.n	80063c2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80062dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062de:	2200      	movs	r2, #0
 80062e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	330c      	adds	r3, #12
 80062e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006302:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006304:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e5      	bne.n	80062e2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3314      	adds	r3, #20
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	667b      	str	r3, [r7, #100]	@ 0x64
 800632e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006336:	647a      	str	r2, [r7, #68]	@ 0x44
 8006338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800633c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e5      	bne.n	8006316 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3314      	adds	r3, #20
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	623b      	str	r3, [r7, #32]
   return(result);
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006360:	663b      	str	r3, [r7, #96]	@ 0x60
 8006362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800636a:	633a      	str	r2, [r7, #48]	@ 0x30
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800637e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638a:	2b01      	cmp	r3, #1
 800638c:	d119      	bne.n	80063c2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	60fb      	str	r3, [r7, #12]
   return(result);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 0310 	bic.w	r3, r3, #16
 80063a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063ae:	61fa      	str	r2, [r7, #28]
 80063b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	69b9      	ldr	r1, [r7, #24]
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	617b      	str	r3, [r7, #20]
   return(result);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d106      	bne.n	80063d8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063ce:	4619      	mov	r1, r3
 80063d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80063d2:	f7ff ff69 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063d6:	e002      	b.n	80063de <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80063d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80063da:	f7fb fbc9 	bl	8001b70 <HAL_UART_RxCpltCallback>
}
 80063de:	bf00      	nop
 80063e0:	3770      	adds	r7, #112	@ 0x70
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d108      	bne.n	800640e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	4619      	mov	r1, r3
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff ff4e 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800640c:	e002      	b.n	8006414 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff ff36 	bl	8006280 <HAL_UART_RxHalfCpltCallback>
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006438:	2b80      	cmp	r3, #128	@ 0x80
 800643a:	bf0c      	ite	eq
 800643c:	2301      	moveq	r3, #1
 800643e:	2300      	movne	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b21      	cmp	r3, #33	@ 0x21
 800644e:	d108      	bne.n	8006462 <UART_DMAError+0x46>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2200      	movs	r2, #0
 800645a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800645c:	68b8      	ldr	r0, [r7, #8]
 800645e:	f000 f8c5 	bl	80065ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646c:	2b40      	cmp	r3, #64	@ 0x40
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b22      	cmp	r3, #34	@ 0x22
 8006482:	d108      	bne.n	8006496 <UART_DMAError+0x7a>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2200      	movs	r2, #0
 800648e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006490:	68b8      	ldr	r0, [r7, #8]
 8006492:	f000 f8d3 	bl	800663c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649a:	f043 0210 	orr.w	r2, r3, #16
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064a2:	68b8      	ldr	r0, [r7, #8]
 80064a4:	f7ff fef6 	bl	8006294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b098      	sub	sp, #96	@ 0x60
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2222      	movs	r2, #34	@ 0x22
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	4a40      	ldr	r2, [pc, #256]	@ (80065e0 <UART_Start_Receive_DMA+0x130>)
 80064de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	4a3f      	ldr	r2, [pc, #252]	@ (80065e4 <UART_Start_Receive_DMA+0x134>)
 80064e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	4a3e      	ldr	r2, [pc, #248]	@ (80065e8 <UART_Start_Receive_DMA+0x138>)
 80064ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	2200      	movs	r2, #0
 80064f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	f7fc fe56 	bl	80031c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d019      	beq.n	800656e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800654a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800655a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800655c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e5      	bne.n	800653a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	657b      	str	r3, [r7, #84]	@ 0x54
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3314      	adds	r3, #20
 800658c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800658e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006590:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e5      	bne.n	800656e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	617b      	str	r3, [r7, #20]
   return(result);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80065c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6a39      	ldr	r1, [r7, #32]
 80065c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3760      	adds	r7, #96	@ 0x60
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	080062c1 	.word	0x080062c1
 80065e4:	080063e7 	.word	0x080063e7
 80065e8:	0800641d 	.word	0x0800641d

080065ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b089      	sub	sp, #36	@ 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	60bb      	str	r3, [r7, #8]
   return(result);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	61ba      	str	r2, [r7, #24]
 8006616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6979      	ldr	r1, [r7, #20]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	613b      	str	r3, [r7, #16]
   return(result);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8006630:	bf00      	nop
 8006632:	3724      	adds	r7, #36	@ 0x24
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b095      	sub	sp, #84	@ 0x54
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800665a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006664:	643a      	str	r2, [r7, #64]	@ 0x40
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800666a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e5      	bne.n	8006644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	61fb      	str	r3, [r7, #28]
   return(result);
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3314      	adds	r3, #20
 8006696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800669a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800669e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e5      	bne.n	8006678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d119      	bne.n	80066e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 0310 	bic.w	r3, r3, #16
 80066ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066d4:	61ba      	str	r2, [r7, #24]
 80066d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6979      	ldr	r1, [r7, #20]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	613b      	str	r3, [r7, #16]
   return(result);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066f6:	bf00      	nop
 80066f8:	3754      	adds	r7, #84	@ 0x54
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff fdb9 	bl	8006294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b21      	cmp	r3, #33	@ 0x21
 800673c:	d13e      	bne.n	80067bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006746:	d114      	bne.n	8006772 <UART_Transmit_IT+0x48>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d110      	bne.n	8006772 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006764:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	621a      	str	r2, [r3, #32]
 8006770:	e008      	b.n	8006784 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	1c59      	adds	r1, r3, #1
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6211      	str	r1, [r2, #32]
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4619      	mov	r1, r3
 8006792:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10f      	bne.n	80067b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e000      	b.n	80067be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fd3e 	bl	800626c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b08c      	sub	sp, #48	@ 0x30
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b22      	cmp	r3, #34	@ 0x22
 800680c:	f040 80ab 	bne.w	8006966 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006818:	d117      	bne.n	800684a <UART_Receive_IT+0x50>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d113      	bne.n	800684a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006838:	b29a      	uxth	r2, r3
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	1c9a      	adds	r2, r3, #2
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	629a      	str	r2, [r3, #40]	@ 0x28
 8006848:	e026      	b.n	8006898 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685c:	d007      	beq.n	800686e <UART_Receive_IT+0x74>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <UART_Receive_IT+0x82>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e008      	b.n	800688e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006888:	b2da      	uxtb	r2, r3
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4619      	mov	r1, r3
 80068a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d15a      	bne.n	8006962 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0220 	bic.w	r2, r2, #32
 80068ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d135      	bne.n	8006958 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	613b      	str	r3, [r7, #16]
   return(result);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f023 0310 	bic.w	r3, r3, #16
 8006908:	627b      	str	r3, [r7, #36]	@ 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006912:	623a      	str	r2, [r7, #32]
 8006914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	69f9      	ldr	r1, [r7, #28]
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b10      	cmp	r3, #16
 8006932:	d10a      	bne.n	800694a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff fca9 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
 8006956:	e002      	b.n	800695e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fb f909 	bl	8001b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e002      	b.n	8006968 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
  }
}
 8006968:	4618      	mov	r0, r3
 800696a:	3730      	adds	r7, #48	@ 0x30
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006974:	b0c0      	sub	sp, #256	@ 0x100
 8006976:	af00      	add	r7, sp, #0
 8006978:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698c:	68d9      	ldr	r1, [r3, #12]
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	ea40 0301 	orr.w	r3, r0, r1
 8006998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069c8:	f021 010c 	bic.w	r1, r1, #12
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069d6:	430b      	orrs	r3, r1
 80069d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ea:	6999      	ldr	r1, [r3, #24]
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	ea40 0301 	orr.w	r3, r0, r1
 80069f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b8f      	ldr	r3, [pc, #572]	@ (8006c3c <UART_SetConfig+0x2cc>)
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d005      	beq.n	8006a10 <UART_SetConfig+0xa0>
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c40 <UART_SetConfig+0x2d0>)
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d104      	bne.n	8006a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a10:	f7fd fddc 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8006a14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a18:	e003      	b.n	8006a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a1a:	f7fd fdc3 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8006a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2c:	f040 810c 	bne.w	8006c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a42:	4622      	mov	r2, r4
 8006a44:	462b      	mov	r3, r5
 8006a46:	1891      	adds	r1, r2, r2
 8006a48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a4a:	415b      	adcs	r3, r3
 8006a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a52:	4621      	mov	r1, r4
 8006a54:	eb12 0801 	adds.w	r8, r2, r1
 8006a58:	4629      	mov	r1, r5
 8006a5a:	eb43 0901 	adc.w	r9, r3, r1
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a72:	4690      	mov	r8, r2
 8006a74:	4699      	mov	r9, r3
 8006a76:	4623      	mov	r3, r4
 8006a78:	eb18 0303 	adds.w	r3, r8, r3
 8006a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a80:	462b      	mov	r3, r5
 8006a82:	eb49 0303 	adc.w	r3, r9, r3
 8006a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	18db      	adds	r3, r3, r3
 8006aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	eb42 0303 	adc.w	r3, r2, r3
 8006aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ab4:	f7fa f8f8 	bl	8000ca8 <__aeabi_uldivmod>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4b61      	ldr	r3, [pc, #388]	@ (8006c44 <UART_SetConfig+0x2d4>)
 8006abe:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	011c      	lsls	r4, r3, #4
 8006ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ad8:	4642      	mov	r2, r8
 8006ada:	464b      	mov	r3, r9
 8006adc:	1891      	adds	r1, r2, r2
 8006ade:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ae0:	415b      	adcs	r3, r3
 8006ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ae8:	4641      	mov	r1, r8
 8006aea:	eb12 0a01 	adds.w	sl, r2, r1
 8006aee:	4649      	mov	r1, r9
 8006af0:	eb43 0b01 	adc.w	fp, r3, r1
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b08:	4692      	mov	sl, r2
 8006b0a:	469b      	mov	fp, r3
 8006b0c:	4643      	mov	r3, r8
 8006b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b16:	464b      	mov	r3, r9
 8006b18:	eb4b 0303 	adc.w	r3, fp, r3
 8006b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b34:	460b      	mov	r3, r1
 8006b36:	18db      	adds	r3, r3, r3
 8006b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	eb42 0303 	adc.w	r3, r2, r3
 8006b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b4a:	f7fa f8ad 	bl	8000ca8 <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4611      	mov	r1, r2
 8006b54:	4b3b      	ldr	r3, [pc, #236]	@ (8006c44 <UART_SetConfig+0x2d4>)
 8006b56:	fba3 2301 	umull	r2, r3, r3, r1
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	2264      	movs	r2, #100	@ 0x64
 8006b5e:	fb02 f303 	mul.w	r3, r2, r3
 8006b62:	1acb      	subs	r3, r1, r3
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b6a:	4b36      	ldr	r3, [pc, #216]	@ (8006c44 <UART_SetConfig+0x2d4>)
 8006b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b78:	441c      	add	r4, r3
 8006b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	464b      	mov	r3, r9
 8006b90:	1891      	adds	r1, r2, r2
 8006b92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b94:	415b      	adcs	r3, r3
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	1851      	adds	r1, r2, r1
 8006ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	414b      	adcs	r3, r1
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	00cb      	lsls	r3, r1, #3
 8006bb8:	4651      	mov	r1, sl
 8006bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bbe:	4651      	mov	r1, sl
 8006bc0:	00ca      	lsls	r2, r1, #3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4642      	mov	r2, r8
 8006bca:	189b      	adds	r3, r3, r2
 8006bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	460a      	mov	r2, r1
 8006bd4:	eb42 0303 	adc.w	r3, r2, r3
 8006bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006be8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	18db      	adds	r3, r3, r3
 8006bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	eb42 0303 	adc.w	r3, r2, r3
 8006bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c06:	f7fa f84f 	bl	8000ca8 <__aeabi_uldivmod>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <UART_SetConfig+0x2d4>)
 8006c10:	fba3 1302 	umull	r1, r3, r3, r2
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	2164      	movs	r1, #100	@ 0x64
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	3332      	adds	r3, #50	@ 0x32
 8006c22:	4a08      	ldr	r2, [pc, #32]	@ (8006c44 <UART_SetConfig+0x2d4>)
 8006c24:	fba2 2303 	umull	r2, r3, r2, r3
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	f003 0207 	and.w	r2, r3, #7
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4422      	add	r2, r4
 8006c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c38:	e106      	b.n	8006e48 <UART_SetConfig+0x4d8>
 8006c3a:	bf00      	nop
 8006c3c:	40011000 	.word	0x40011000
 8006c40:	40011400 	.word	0x40011400
 8006c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c5a:	4642      	mov	r2, r8
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	1891      	adds	r1, r2, r2
 8006c60:	6239      	str	r1, [r7, #32]
 8006c62:	415b      	adcs	r3, r3
 8006c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c6a:	4641      	mov	r1, r8
 8006c6c:	1854      	adds	r4, r2, r1
 8006c6e:	4649      	mov	r1, r9
 8006c70:	eb43 0501 	adc.w	r5, r3, r1
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	00eb      	lsls	r3, r5, #3
 8006c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c82:	00e2      	lsls	r2, r4, #3
 8006c84:	4614      	mov	r4, r2
 8006c86:	461d      	mov	r5, r3
 8006c88:	4643      	mov	r3, r8
 8006c8a:	18e3      	adds	r3, r4, r3
 8006c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c90:	464b      	mov	r3, r9
 8006c92:	eb45 0303 	adc.w	r3, r5, r3
 8006c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	008b      	lsls	r3, r1, #2
 8006cba:	4621      	mov	r1, r4
 8006cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	008a      	lsls	r2, r1, #2
 8006cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006cc8:	f7f9 ffee 	bl	8000ca8 <__aeabi_uldivmod>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4b60      	ldr	r3, [pc, #384]	@ (8006e54 <UART_SetConfig+0x4e4>)
 8006cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	011c      	lsls	r4, r3, #4
 8006cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cec:	4642      	mov	r2, r8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	1891      	adds	r1, r2, r2
 8006cf2:	61b9      	str	r1, [r7, #24]
 8006cf4:	415b      	adcs	r3, r3
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	1851      	adds	r1, r2, r1
 8006d00:	6139      	str	r1, [r7, #16]
 8006d02:	4649      	mov	r1, r9
 8006d04:	414b      	adcs	r3, r1
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d14:	4659      	mov	r1, fp
 8006d16:	00cb      	lsls	r3, r1, #3
 8006d18:	4651      	mov	r1, sl
 8006d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d1e:	4651      	mov	r1, sl
 8006d20:	00ca      	lsls	r2, r1, #3
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	4642      	mov	r2, r8
 8006d2a:	189b      	adds	r3, r3, r2
 8006d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d30:	464b      	mov	r3, r9
 8006d32:	460a      	mov	r2, r1
 8006d34:	eb42 0303 	adc.w	r3, r2, r3
 8006d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d54:	4649      	mov	r1, r9
 8006d56:	008b      	lsls	r3, r1, #2
 8006d58:	4641      	mov	r1, r8
 8006d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d5e:	4641      	mov	r1, r8
 8006d60:	008a      	lsls	r2, r1, #2
 8006d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d66:	f7f9 ff9f 	bl	8000ca8 <__aeabi_uldivmod>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4b38      	ldr	r3, [pc, #224]	@ (8006e54 <UART_SetConfig+0x4e4>)
 8006d72:	fba3 2301 	umull	r2, r3, r3, r1
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	2264      	movs	r2, #100	@ 0x64
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	1acb      	subs	r3, r1, r3
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	3332      	adds	r3, #50	@ 0x32
 8006d84:	4a33      	ldr	r2, [pc, #204]	@ (8006e54 <UART_SetConfig+0x4e4>)
 8006d86:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d90:	441c      	add	r4, r3
 8006d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d96:	2200      	movs	r2, #0
 8006d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	1891      	adds	r1, r2, r2
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	415b      	adcs	r3, r3
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006db0:	4641      	mov	r1, r8
 8006db2:	1851      	adds	r1, r2, r1
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	4649      	mov	r1, r9
 8006db8:	414b      	adcs	r3, r1
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dc8:	4659      	mov	r1, fp
 8006dca:	00cb      	lsls	r3, r1, #3
 8006dcc:	4651      	mov	r1, sl
 8006dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dd2:	4651      	mov	r1, sl
 8006dd4:	00ca      	lsls	r2, r1, #3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4642      	mov	r2, r8
 8006dde:	189b      	adds	r3, r3, r2
 8006de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006de2:	464b      	mov	r3, r9
 8006de4:	460a      	mov	r2, r1
 8006de6:	eb42 0303 	adc.w	r3, r2, r3
 8006dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006df6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e04:	4649      	mov	r1, r9
 8006e06:	008b      	lsls	r3, r1, #2
 8006e08:	4641      	mov	r1, r8
 8006e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e0e:	4641      	mov	r1, r8
 8006e10:	008a      	lsls	r2, r1, #2
 8006e12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e16:	f7f9 ff47 	bl	8000ca8 <__aeabi_uldivmod>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <UART_SetConfig+0x4e4>)
 8006e20:	fba3 1302 	umull	r1, r3, r3, r2
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	2164      	movs	r1, #100	@ 0x64
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	3332      	adds	r3, #50	@ 0x32
 8006e32:	4a08      	ldr	r2, [pc, #32]	@ (8006e54 <UART_SetConfig+0x4e4>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4422      	add	r2, r4
 8006e46:	609a      	str	r2, [r3, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e54:	51eb851f 	.word	0x51eb851f

08006e58 <__cvt>:
 8006e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5c:	ec57 6b10 	vmov	r6, r7, d0
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	460c      	mov	r4, r1
 8006e64:	4619      	mov	r1, r3
 8006e66:	463b      	mov	r3, r7
 8006e68:	bfbb      	ittet	lt
 8006e6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e6e:	461f      	movlt	r7, r3
 8006e70:	2300      	movge	r3, #0
 8006e72:	232d      	movlt	r3, #45	@ 0x2d
 8006e74:	700b      	strb	r3, [r1, #0]
 8006e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e7c:	4691      	mov	r9, r2
 8006e7e:	f023 0820 	bic.w	r8, r3, #32
 8006e82:	bfbc      	itt	lt
 8006e84:	4632      	movlt	r2, r6
 8006e86:	4616      	movlt	r6, r2
 8006e88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e8c:	d005      	beq.n	8006e9a <__cvt+0x42>
 8006e8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e92:	d100      	bne.n	8006e96 <__cvt+0x3e>
 8006e94:	3401      	adds	r4, #1
 8006e96:	2102      	movs	r1, #2
 8006e98:	e000      	b.n	8006e9c <__cvt+0x44>
 8006e9a:	2103      	movs	r1, #3
 8006e9c:	ab03      	add	r3, sp, #12
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	ab02      	add	r3, sp, #8
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	ec47 6b10 	vmov	d0, r6, r7
 8006ea8:	4653      	mov	r3, sl
 8006eaa:	4622      	mov	r2, r4
 8006eac:	f001 f8d4 	bl	8008058 <_dtoa_r>
 8006eb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	d119      	bne.n	8006eec <__cvt+0x94>
 8006eb8:	f019 0f01 	tst.w	r9, #1
 8006ebc:	d00e      	beq.n	8006edc <__cvt+0x84>
 8006ebe:	eb00 0904 	add.w	r9, r0, r4
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	4639      	mov	r1, r7
 8006eca:	f7f9 fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ece:	b108      	cbz	r0, 8006ed4 <__cvt+0x7c>
 8006ed0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ed4:	2230      	movs	r2, #48	@ 0x30
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	454b      	cmp	r3, r9
 8006eda:	d31e      	bcc.n	8006f1a <__cvt+0xc2>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ee0:	1b5b      	subs	r3, r3, r5
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	b004      	add	sp, #16
 8006ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ef0:	eb00 0904 	add.w	r9, r0, r4
 8006ef4:	d1e5      	bne.n	8006ec2 <__cvt+0x6a>
 8006ef6:	7803      	ldrb	r3, [r0, #0]
 8006ef8:	2b30      	cmp	r3, #48	@ 0x30
 8006efa:	d10a      	bne.n	8006f12 <__cvt+0xba>
 8006efc:	2200      	movs	r2, #0
 8006efe:	2300      	movs	r3, #0
 8006f00:	4630      	mov	r0, r6
 8006f02:	4639      	mov	r1, r7
 8006f04:	f7f9 fdf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f08:	b918      	cbnz	r0, 8006f12 <__cvt+0xba>
 8006f0a:	f1c4 0401 	rsb	r4, r4, #1
 8006f0e:	f8ca 4000 	str.w	r4, [sl]
 8006f12:	f8da 3000 	ldr.w	r3, [sl]
 8006f16:	4499      	add	r9, r3
 8006f18:	e7d3      	b.n	8006ec2 <__cvt+0x6a>
 8006f1a:	1c59      	adds	r1, r3, #1
 8006f1c:	9103      	str	r1, [sp, #12]
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e7d9      	b.n	8006ed6 <__cvt+0x7e>

08006f22 <__exponent>:
 8006f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f24:	2900      	cmp	r1, #0
 8006f26:	bfba      	itte	lt
 8006f28:	4249      	neglt	r1, r1
 8006f2a:	232d      	movlt	r3, #45	@ 0x2d
 8006f2c:	232b      	movge	r3, #43	@ 0x2b
 8006f2e:	2909      	cmp	r1, #9
 8006f30:	7002      	strb	r2, [r0, #0]
 8006f32:	7043      	strb	r3, [r0, #1]
 8006f34:	dd29      	ble.n	8006f8a <__exponent+0x68>
 8006f36:	f10d 0307 	add.w	r3, sp, #7
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	270a      	movs	r7, #10
 8006f3e:	461a      	mov	r2, r3
 8006f40:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f44:	fb07 1416 	mls	r4, r7, r6, r1
 8006f48:	3430      	adds	r4, #48	@ 0x30
 8006f4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f4e:	460c      	mov	r4, r1
 8006f50:	2c63      	cmp	r4, #99	@ 0x63
 8006f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f56:	4631      	mov	r1, r6
 8006f58:	dcf1      	bgt.n	8006f3e <__exponent+0x1c>
 8006f5a:	3130      	adds	r1, #48	@ 0x30
 8006f5c:	1e94      	subs	r4, r2, #2
 8006f5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f62:	1c41      	adds	r1, r0, #1
 8006f64:	4623      	mov	r3, r4
 8006f66:	42ab      	cmp	r3, r5
 8006f68:	d30a      	bcc.n	8006f80 <__exponent+0x5e>
 8006f6a:	f10d 0309 	add.w	r3, sp, #9
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	42ac      	cmp	r4, r5
 8006f72:	bf88      	it	hi
 8006f74:	2300      	movhi	r3, #0
 8006f76:	3302      	adds	r3, #2
 8006f78:	4403      	add	r3, r0
 8006f7a:	1a18      	subs	r0, r3, r0
 8006f7c:	b003      	add	sp, #12
 8006f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f88:	e7ed      	b.n	8006f66 <__exponent+0x44>
 8006f8a:	2330      	movs	r3, #48	@ 0x30
 8006f8c:	3130      	adds	r1, #48	@ 0x30
 8006f8e:	7083      	strb	r3, [r0, #2]
 8006f90:	70c1      	strb	r1, [r0, #3]
 8006f92:	1d03      	adds	r3, r0, #4
 8006f94:	e7f1      	b.n	8006f7a <__exponent+0x58>
	...

08006f98 <_printf_float>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	b08d      	sub	sp, #52	@ 0x34
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	4605      	mov	r5, r0
 8006faa:	f000 ff4d 	bl	8007e48 <_localeconv_r>
 8006fae:	6803      	ldr	r3, [r0, #0]
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7f9 f96c 	bl	8000290 <strlen>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc0:	9005      	str	r0, [sp, #20]
 8006fc2:	3307      	adds	r3, #7
 8006fc4:	f023 0307 	bic.w	r3, r3, #7
 8006fc8:	f103 0208 	add.w	r2, r3, #8
 8006fcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006fd0:	f8d4 b000 	ldr.w	fp, [r4]
 8006fd4:	f8c8 2000 	str.w	r2, [r8]
 8006fd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fe6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fee:	4b9c      	ldr	r3, [pc, #624]	@ (8007260 <_printf_float+0x2c8>)
 8006ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff4:	f7f9 fdaa 	bl	8000b4c <__aeabi_dcmpun>
 8006ff8:	bb70      	cbnz	r0, 8007058 <_printf_float+0xc0>
 8006ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ffe:	4b98      	ldr	r3, [pc, #608]	@ (8007260 <_printf_float+0x2c8>)
 8007000:	f04f 32ff 	mov.w	r2, #4294967295
 8007004:	f7f9 fd84 	bl	8000b10 <__aeabi_dcmple>
 8007008:	bb30      	cbnz	r0, 8007058 <_printf_float+0xc0>
 800700a:	2200      	movs	r2, #0
 800700c:	2300      	movs	r3, #0
 800700e:	4640      	mov	r0, r8
 8007010:	4649      	mov	r1, r9
 8007012:	f7f9 fd73 	bl	8000afc <__aeabi_dcmplt>
 8007016:	b110      	cbz	r0, 800701e <_printf_float+0x86>
 8007018:	232d      	movs	r3, #45	@ 0x2d
 800701a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800701e:	4a91      	ldr	r2, [pc, #580]	@ (8007264 <_printf_float+0x2cc>)
 8007020:	4b91      	ldr	r3, [pc, #580]	@ (8007268 <_printf_float+0x2d0>)
 8007022:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007026:	bf94      	ite	ls
 8007028:	4690      	movls	r8, r2
 800702a:	4698      	movhi	r8, r3
 800702c:	2303      	movs	r3, #3
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	f02b 0304 	bic.w	r3, fp, #4
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	f04f 0900 	mov.w	r9, #0
 800703a:	9700      	str	r7, [sp, #0]
 800703c:	4633      	mov	r3, r6
 800703e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007040:	4621      	mov	r1, r4
 8007042:	4628      	mov	r0, r5
 8007044:	f000 f9d2 	bl	80073ec <_printf_common>
 8007048:	3001      	adds	r0, #1
 800704a:	f040 808d 	bne.w	8007168 <_printf_float+0x1d0>
 800704e:	f04f 30ff 	mov.w	r0, #4294967295
 8007052:	b00d      	add	sp, #52	@ 0x34
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	4640      	mov	r0, r8
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 fd74 	bl	8000b4c <__aeabi_dcmpun>
 8007064:	b140      	cbz	r0, 8007078 <_printf_float+0xe0>
 8007066:	464b      	mov	r3, r9
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfbc      	itt	lt
 800706c:	232d      	movlt	r3, #45	@ 0x2d
 800706e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007072:	4a7e      	ldr	r2, [pc, #504]	@ (800726c <_printf_float+0x2d4>)
 8007074:	4b7e      	ldr	r3, [pc, #504]	@ (8007270 <_printf_float+0x2d8>)
 8007076:	e7d4      	b.n	8007022 <_printf_float+0x8a>
 8007078:	6863      	ldr	r3, [r4, #4]
 800707a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800707e:	9206      	str	r2, [sp, #24]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	d13b      	bne.n	80070fc <_printf_float+0x164>
 8007084:	2306      	movs	r3, #6
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800708c:	2300      	movs	r3, #0
 800708e:	6022      	str	r2, [r4, #0]
 8007090:	9303      	str	r3, [sp, #12]
 8007092:	ab0a      	add	r3, sp, #40	@ 0x28
 8007094:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007098:	ab09      	add	r3, sp, #36	@ 0x24
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	6861      	ldr	r1, [r4, #4]
 800709e:	ec49 8b10 	vmov	d0, r8, r9
 80070a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80070a6:	4628      	mov	r0, r5
 80070a8:	f7ff fed6 	bl	8006e58 <__cvt>
 80070ac:	9b06      	ldr	r3, [sp, #24]
 80070ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070b0:	2b47      	cmp	r3, #71	@ 0x47
 80070b2:	4680      	mov	r8, r0
 80070b4:	d129      	bne.n	800710a <_printf_float+0x172>
 80070b6:	1cc8      	adds	r0, r1, #3
 80070b8:	db02      	blt.n	80070c0 <_printf_float+0x128>
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	4299      	cmp	r1, r3
 80070be:	dd41      	ble.n	8007144 <_printf_float+0x1ac>
 80070c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80070c4:	fa5f fa8a 	uxtb.w	sl, sl
 80070c8:	3901      	subs	r1, #1
 80070ca:	4652      	mov	r2, sl
 80070cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80070d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80070d2:	f7ff ff26 	bl	8006f22 <__exponent>
 80070d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070d8:	1813      	adds	r3, r2, r0
 80070da:	2a01      	cmp	r2, #1
 80070dc:	4681      	mov	r9, r0
 80070de:	6123      	str	r3, [r4, #16]
 80070e0:	dc02      	bgt.n	80070e8 <_printf_float+0x150>
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	07d2      	lsls	r2, r2, #31
 80070e6:	d501      	bpl.n	80070ec <_printf_float+0x154>
 80070e8:	3301      	adds	r3, #1
 80070ea:	6123      	str	r3, [r4, #16]
 80070ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0a2      	beq.n	800703a <_printf_float+0xa2>
 80070f4:	232d      	movs	r3, #45	@ 0x2d
 80070f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070fa:	e79e      	b.n	800703a <_printf_float+0xa2>
 80070fc:	9a06      	ldr	r2, [sp, #24]
 80070fe:	2a47      	cmp	r2, #71	@ 0x47
 8007100:	d1c2      	bne.n	8007088 <_printf_float+0xf0>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1c0      	bne.n	8007088 <_printf_float+0xf0>
 8007106:	2301      	movs	r3, #1
 8007108:	e7bd      	b.n	8007086 <_printf_float+0xee>
 800710a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800710e:	d9db      	bls.n	80070c8 <_printf_float+0x130>
 8007110:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007114:	d118      	bne.n	8007148 <_printf_float+0x1b0>
 8007116:	2900      	cmp	r1, #0
 8007118:	6863      	ldr	r3, [r4, #4]
 800711a:	dd0b      	ble.n	8007134 <_printf_float+0x19c>
 800711c:	6121      	str	r1, [r4, #16]
 800711e:	b913      	cbnz	r3, 8007126 <_printf_float+0x18e>
 8007120:	6822      	ldr	r2, [r4, #0]
 8007122:	07d0      	lsls	r0, r2, #31
 8007124:	d502      	bpl.n	800712c <_printf_float+0x194>
 8007126:	3301      	adds	r3, #1
 8007128:	440b      	add	r3, r1
 800712a:	6123      	str	r3, [r4, #16]
 800712c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800712e:	f04f 0900 	mov.w	r9, #0
 8007132:	e7db      	b.n	80070ec <_printf_float+0x154>
 8007134:	b913      	cbnz	r3, 800713c <_printf_float+0x1a4>
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	07d2      	lsls	r2, r2, #31
 800713a:	d501      	bpl.n	8007140 <_printf_float+0x1a8>
 800713c:	3302      	adds	r3, #2
 800713e:	e7f4      	b.n	800712a <_printf_float+0x192>
 8007140:	2301      	movs	r3, #1
 8007142:	e7f2      	b.n	800712a <_printf_float+0x192>
 8007144:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714a:	4299      	cmp	r1, r3
 800714c:	db05      	blt.n	800715a <_printf_float+0x1c2>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	6121      	str	r1, [r4, #16]
 8007152:	07d8      	lsls	r0, r3, #31
 8007154:	d5ea      	bpl.n	800712c <_printf_float+0x194>
 8007156:	1c4b      	adds	r3, r1, #1
 8007158:	e7e7      	b.n	800712a <_printf_float+0x192>
 800715a:	2900      	cmp	r1, #0
 800715c:	bfd4      	ite	le
 800715e:	f1c1 0202 	rsble	r2, r1, #2
 8007162:	2201      	movgt	r2, #1
 8007164:	4413      	add	r3, r2
 8007166:	e7e0      	b.n	800712a <_printf_float+0x192>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	055a      	lsls	r2, r3, #21
 800716c:	d407      	bmi.n	800717e <_printf_float+0x1e6>
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	4642      	mov	r2, r8
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	d12b      	bne.n	80071d4 <_printf_float+0x23c>
 800717c:	e767      	b.n	800704e <_printf_float+0xb6>
 800717e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007182:	f240 80dd 	bls.w	8007340 <_printf_float+0x3a8>
 8007186:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800718a:	2200      	movs	r2, #0
 800718c:	2300      	movs	r3, #0
 800718e:	f7f9 fcab 	bl	8000ae8 <__aeabi_dcmpeq>
 8007192:	2800      	cmp	r0, #0
 8007194:	d033      	beq.n	80071fe <_printf_float+0x266>
 8007196:	4a37      	ldr	r2, [pc, #220]	@ (8007274 <_printf_float+0x2dc>)
 8007198:	2301      	movs	r3, #1
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	f43f af54 	beq.w	800704e <_printf_float+0xb6>
 80071a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80071aa:	4543      	cmp	r3, r8
 80071ac:	db02      	blt.n	80071b4 <_printf_float+0x21c>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	07d8      	lsls	r0, r3, #31
 80071b2:	d50f      	bpl.n	80071d4 <_printf_float+0x23c>
 80071b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f af45 	beq.w	800704e <_printf_float+0xb6>
 80071c4:	f04f 0900 	mov.w	r9, #0
 80071c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80071cc:	f104 0a1a 	add.w	sl, r4, #26
 80071d0:	45c8      	cmp	r8, r9
 80071d2:	dc09      	bgt.n	80071e8 <_printf_float+0x250>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	079b      	lsls	r3, r3, #30
 80071d8:	f100 8103 	bmi.w	80073e2 <_printf_float+0x44a>
 80071dc:	68e0      	ldr	r0, [r4, #12]
 80071de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e0:	4298      	cmp	r0, r3
 80071e2:	bfb8      	it	lt
 80071e4:	4618      	movlt	r0, r3
 80071e6:	e734      	b.n	8007052 <_printf_float+0xba>
 80071e8:	2301      	movs	r3, #1
 80071ea:	4652      	mov	r2, sl
 80071ec:	4631      	mov	r1, r6
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f af2b 	beq.w	800704e <_printf_float+0xb6>
 80071f8:	f109 0901 	add.w	r9, r9, #1
 80071fc:	e7e8      	b.n	80071d0 <_printf_float+0x238>
 80071fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	dc39      	bgt.n	8007278 <_printf_float+0x2e0>
 8007204:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <_printf_float+0x2dc>)
 8007206:	2301      	movs	r3, #1
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f af1d 	beq.w	800704e <_printf_float+0xb6>
 8007214:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007218:	ea59 0303 	orrs.w	r3, r9, r3
 800721c:	d102      	bne.n	8007224 <_printf_float+0x28c>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	07d9      	lsls	r1, r3, #31
 8007222:	d5d7      	bpl.n	80071d4 <_printf_float+0x23c>
 8007224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f af0d 	beq.w	800704e <_printf_float+0xb6>
 8007234:	f04f 0a00 	mov.w	sl, #0
 8007238:	f104 0b1a 	add.w	fp, r4, #26
 800723c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723e:	425b      	negs	r3, r3
 8007240:	4553      	cmp	r3, sl
 8007242:	dc01      	bgt.n	8007248 <_printf_float+0x2b0>
 8007244:	464b      	mov	r3, r9
 8007246:	e793      	b.n	8007170 <_printf_float+0x1d8>
 8007248:	2301      	movs	r3, #1
 800724a:	465a      	mov	r2, fp
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f aefb 	beq.w	800704e <_printf_float+0xb6>
 8007258:	f10a 0a01 	add.w	sl, sl, #1
 800725c:	e7ee      	b.n	800723c <_printf_float+0x2a4>
 800725e:	bf00      	nop
 8007260:	7fefffff 	.word	0x7fefffff
 8007264:	0800be80 	.word	0x0800be80
 8007268:	0800be84 	.word	0x0800be84
 800726c:	0800be88 	.word	0x0800be88
 8007270:	0800be8c 	.word	0x0800be8c
 8007274:	0800c220 	.word	0x0800c220
 8007278:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800727a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800727e:	4553      	cmp	r3, sl
 8007280:	bfa8      	it	ge
 8007282:	4653      	movge	r3, sl
 8007284:	2b00      	cmp	r3, #0
 8007286:	4699      	mov	r9, r3
 8007288:	dc36      	bgt.n	80072f8 <_printf_float+0x360>
 800728a:	f04f 0b00 	mov.w	fp, #0
 800728e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007292:	f104 021a 	add.w	r2, r4, #26
 8007296:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007298:	9306      	str	r3, [sp, #24]
 800729a:	eba3 0309 	sub.w	r3, r3, r9
 800729e:	455b      	cmp	r3, fp
 80072a0:	dc31      	bgt.n	8007306 <_printf_float+0x36e>
 80072a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a4:	459a      	cmp	sl, r3
 80072a6:	dc3a      	bgt.n	800731e <_printf_float+0x386>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	07da      	lsls	r2, r3, #31
 80072ac:	d437      	bmi.n	800731e <_printf_float+0x386>
 80072ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b0:	ebaa 0903 	sub.w	r9, sl, r3
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	ebaa 0303 	sub.w	r3, sl, r3
 80072ba:	4599      	cmp	r9, r3
 80072bc:	bfa8      	it	ge
 80072be:	4699      	movge	r9, r3
 80072c0:	f1b9 0f00 	cmp.w	r9, #0
 80072c4:	dc33      	bgt.n	800732e <_printf_float+0x396>
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ce:	f104 0b1a 	add.w	fp, r4, #26
 80072d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d4:	ebaa 0303 	sub.w	r3, sl, r3
 80072d8:	eba3 0309 	sub.w	r3, r3, r9
 80072dc:	4543      	cmp	r3, r8
 80072de:	f77f af79 	ble.w	80071d4 <_printf_float+0x23c>
 80072e2:	2301      	movs	r3, #1
 80072e4:	465a      	mov	r2, fp
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b8      	blx	r7
 80072ec:	3001      	adds	r0, #1
 80072ee:	f43f aeae 	beq.w	800704e <_printf_float+0xb6>
 80072f2:	f108 0801 	add.w	r8, r8, #1
 80072f6:	e7ec      	b.n	80072d2 <_printf_float+0x33a>
 80072f8:	4642      	mov	r2, r8
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	d1c2      	bne.n	800728a <_printf_float+0x2f2>
 8007304:	e6a3      	b.n	800704e <_printf_float+0xb6>
 8007306:	2301      	movs	r3, #1
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	9206      	str	r2, [sp, #24]
 800730e:	47b8      	blx	r7
 8007310:	3001      	adds	r0, #1
 8007312:	f43f ae9c 	beq.w	800704e <_printf_float+0xb6>
 8007316:	9a06      	ldr	r2, [sp, #24]
 8007318:	f10b 0b01 	add.w	fp, fp, #1
 800731c:	e7bb      	b.n	8007296 <_printf_float+0x2fe>
 800731e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	d1c0      	bne.n	80072ae <_printf_float+0x316>
 800732c:	e68f      	b.n	800704e <_printf_float+0xb6>
 800732e:	9a06      	ldr	r2, [sp, #24]
 8007330:	464b      	mov	r3, r9
 8007332:	4442      	add	r2, r8
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	d1c3      	bne.n	80072c6 <_printf_float+0x32e>
 800733e:	e686      	b.n	800704e <_printf_float+0xb6>
 8007340:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007344:	f1ba 0f01 	cmp.w	sl, #1
 8007348:	dc01      	bgt.n	800734e <_printf_float+0x3b6>
 800734a:	07db      	lsls	r3, r3, #31
 800734c:	d536      	bpl.n	80073bc <_printf_float+0x424>
 800734e:	2301      	movs	r3, #1
 8007350:	4642      	mov	r2, r8
 8007352:	4631      	mov	r1, r6
 8007354:	4628      	mov	r0, r5
 8007356:	47b8      	blx	r7
 8007358:	3001      	adds	r0, #1
 800735a:	f43f ae78 	beq.w	800704e <_printf_float+0xb6>
 800735e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007362:	4631      	mov	r1, r6
 8007364:	4628      	mov	r0, r5
 8007366:	47b8      	blx	r7
 8007368:	3001      	adds	r0, #1
 800736a:	f43f ae70 	beq.w	800704e <_printf_float+0xb6>
 800736e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007372:	2200      	movs	r2, #0
 8007374:	2300      	movs	r3, #0
 8007376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737a:	f7f9 fbb5 	bl	8000ae8 <__aeabi_dcmpeq>
 800737e:	b9c0      	cbnz	r0, 80073b2 <_printf_float+0x41a>
 8007380:	4653      	mov	r3, sl
 8007382:	f108 0201 	add.w	r2, r8, #1
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	d10c      	bne.n	80073aa <_printf_float+0x412>
 8007390:	e65d      	b.n	800704e <_printf_float+0xb6>
 8007392:	2301      	movs	r3, #1
 8007394:	465a      	mov	r2, fp
 8007396:	4631      	mov	r1, r6
 8007398:	4628      	mov	r0, r5
 800739a:	47b8      	blx	r7
 800739c:	3001      	adds	r0, #1
 800739e:	f43f ae56 	beq.w	800704e <_printf_float+0xb6>
 80073a2:	f108 0801 	add.w	r8, r8, #1
 80073a6:	45d0      	cmp	r8, sl
 80073a8:	dbf3      	blt.n	8007392 <_printf_float+0x3fa>
 80073aa:	464b      	mov	r3, r9
 80073ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80073b0:	e6df      	b.n	8007172 <_printf_float+0x1da>
 80073b2:	f04f 0800 	mov.w	r8, #0
 80073b6:	f104 0b1a 	add.w	fp, r4, #26
 80073ba:	e7f4      	b.n	80073a6 <_printf_float+0x40e>
 80073bc:	2301      	movs	r3, #1
 80073be:	4642      	mov	r2, r8
 80073c0:	e7e1      	b.n	8007386 <_printf_float+0x3ee>
 80073c2:	2301      	movs	r3, #1
 80073c4:	464a      	mov	r2, r9
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	f43f ae3e 	beq.w	800704e <_printf_float+0xb6>
 80073d2:	f108 0801 	add.w	r8, r8, #1
 80073d6:	68e3      	ldr	r3, [r4, #12]
 80073d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073da:	1a5b      	subs	r3, r3, r1
 80073dc:	4543      	cmp	r3, r8
 80073de:	dcf0      	bgt.n	80073c2 <_printf_float+0x42a>
 80073e0:	e6fc      	b.n	80071dc <_printf_float+0x244>
 80073e2:	f04f 0800 	mov.w	r8, #0
 80073e6:	f104 0919 	add.w	r9, r4, #25
 80073ea:	e7f4      	b.n	80073d6 <_printf_float+0x43e>

080073ec <_printf_common>:
 80073ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	4616      	mov	r6, r2
 80073f2:	4698      	mov	r8, r3
 80073f4:	688a      	ldr	r2, [r1, #8]
 80073f6:	690b      	ldr	r3, [r1, #16]
 80073f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	bfb8      	it	lt
 8007400:	4613      	movlt	r3, r2
 8007402:	6033      	str	r3, [r6, #0]
 8007404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007408:	4607      	mov	r7, r0
 800740a:	460c      	mov	r4, r1
 800740c:	b10a      	cbz	r2, 8007412 <_printf_common+0x26>
 800740e:	3301      	adds	r3, #1
 8007410:	6033      	str	r3, [r6, #0]
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	0699      	lsls	r1, r3, #26
 8007416:	bf42      	ittt	mi
 8007418:	6833      	ldrmi	r3, [r6, #0]
 800741a:	3302      	addmi	r3, #2
 800741c:	6033      	strmi	r3, [r6, #0]
 800741e:	6825      	ldr	r5, [r4, #0]
 8007420:	f015 0506 	ands.w	r5, r5, #6
 8007424:	d106      	bne.n	8007434 <_printf_common+0x48>
 8007426:	f104 0a19 	add.w	sl, r4, #25
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	6832      	ldr	r2, [r6, #0]
 800742e:	1a9b      	subs	r3, r3, r2
 8007430:	42ab      	cmp	r3, r5
 8007432:	dc26      	bgt.n	8007482 <_printf_common+0x96>
 8007434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007438:	6822      	ldr	r2, [r4, #0]
 800743a:	3b00      	subs	r3, #0
 800743c:	bf18      	it	ne
 800743e:	2301      	movne	r3, #1
 8007440:	0692      	lsls	r2, r2, #26
 8007442:	d42b      	bmi.n	800749c <_printf_common+0xb0>
 8007444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007448:	4641      	mov	r1, r8
 800744a:	4638      	mov	r0, r7
 800744c:	47c8      	blx	r9
 800744e:	3001      	adds	r0, #1
 8007450:	d01e      	beq.n	8007490 <_printf_common+0xa4>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	6922      	ldr	r2, [r4, #16]
 8007456:	f003 0306 	and.w	r3, r3, #6
 800745a:	2b04      	cmp	r3, #4
 800745c:	bf02      	ittt	eq
 800745e:	68e5      	ldreq	r5, [r4, #12]
 8007460:	6833      	ldreq	r3, [r6, #0]
 8007462:	1aed      	subeq	r5, r5, r3
 8007464:	68a3      	ldr	r3, [r4, #8]
 8007466:	bf0c      	ite	eq
 8007468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800746c:	2500      	movne	r5, #0
 800746e:	4293      	cmp	r3, r2
 8007470:	bfc4      	itt	gt
 8007472:	1a9b      	subgt	r3, r3, r2
 8007474:	18ed      	addgt	r5, r5, r3
 8007476:	2600      	movs	r6, #0
 8007478:	341a      	adds	r4, #26
 800747a:	42b5      	cmp	r5, r6
 800747c:	d11a      	bne.n	80074b4 <_printf_common+0xc8>
 800747e:	2000      	movs	r0, #0
 8007480:	e008      	b.n	8007494 <_printf_common+0xa8>
 8007482:	2301      	movs	r3, #1
 8007484:	4652      	mov	r2, sl
 8007486:	4641      	mov	r1, r8
 8007488:	4638      	mov	r0, r7
 800748a:	47c8      	blx	r9
 800748c:	3001      	adds	r0, #1
 800748e:	d103      	bne.n	8007498 <_printf_common+0xac>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007498:	3501      	adds	r5, #1
 800749a:	e7c6      	b.n	800742a <_printf_common+0x3e>
 800749c:	18e1      	adds	r1, r4, r3
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	2030      	movs	r0, #48	@ 0x30
 80074a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074a6:	4422      	add	r2, r4
 80074a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074b0:	3302      	adds	r3, #2
 80074b2:	e7c7      	b.n	8007444 <_printf_common+0x58>
 80074b4:	2301      	movs	r3, #1
 80074b6:	4622      	mov	r2, r4
 80074b8:	4641      	mov	r1, r8
 80074ba:	4638      	mov	r0, r7
 80074bc:	47c8      	blx	r9
 80074be:	3001      	adds	r0, #1
 80074c0:	d0e6      	beq.n	8007490 <_printf_common+0xa4>
 80074c2:	3601      	adds	r6, #1
 80074c4:	e7d9      	b.n	800747a <_printf_common+0x8e>
	...

080074c8 <_printf_i>:
 80074c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	7e0f      	ldrb	r7, [r1, #24]
 80074ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074d0:	2f78      	cmp	r7, #120	@ 0x78
 80074d2:	4691      	mov	r9, r2
 80074d4:	4680      	mov	r8, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	469a      	mov	sl, r3
 80074da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074de:	d807      	bhi.n	80074f0 <_printf_i+0x28>
 80074e0:	2f62      	cmp	r7, #98	@ 0x62
 80074e2:	d80a      	bhi.n	80074fa <_printf_i+0x32>
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	f000 80d2 	beq.w	800768e <_printf_i+0x1c6>
 80074ea:	2f58      	cmp	r7, #88	@ 0x58
 80074ec:	f000 80b9 	beq.w	8007662 <_printf_i+0x19a>
 80074f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074f8:	e03a      	b.n	8007570 <_printf_i+0xa8>
 80074fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074fe:	2b15      	cmp	r3, #21
 8007500:	d8f6      	bhi.n	80074f0 <_printf_i+0x28>
 8007502:	a101      	add	r1, pc, #4	@ (adr r1, 8007508 <_printf_i+0x40>)
 8007504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007508:	08007561 	.word	0x08007561
 800750c:	08007575 	.word	0x08007575
 8007510:	080074f1 	.word	0x080074f1
 8007514:	080074f1 	.word	0x080074f1
 8007518:	080074f1 	.word	0x080074f1
 800751c:	080074f1 	.word	0x080074f1
 8007520:	08007575 	.word	0x08007575
 8007524:	080074f1 	.word	0x080074f1
 8007528:	080074f1 	.word	0x080074f1
 800752c:	080074f1 	.word	0x080074f1
 8007530:	080074f1 	.word	0x080074f1
 8007534:	08007675 	.word	0x08007675
 8007538:	0800759f 	.word	0x0800759f
 800753c:	0800762f 	.word	0x0800762f
 8007540:	080074f1 	.word	0x080074f1
 8007544:	080074f1 	.word	0x080074f1
 8007548:	08007697 	.word	0x08007697
 800754c:	080074f1 	.word	0x080074f1
 8007550:	0800759f 	.word	0x0800759f
 8007554:	080074f1 	.word	0x080074f1
 8007558:	080074f1 	.word	0x080074f1
 800755c:	08007637 	.word	0x08007637
 8007560:	6833      	ldr	r3, [r6, #0]
 8007562:	1d1a      	adds	r2, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6032      	str	r2, [r6, #0]
 8007568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800756c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007570:	2301      	movs	r3, #1
 8007572:	e09d      	b.n	80076b0 <_printf_i+0x1e8>
 8007574:	6833      	ldr	r3, [r6, #0]
 8007576:	6820      	ldr	r0, [r4, #0]
 8007578:	1d19      	adds	r1, r3, #4
 800757a:	6031      	str	r1, [r6, #0]
 800757c:	0606      	lsls	r6, r0, #24
 800757e:	d501      	bpl.n	8007584 <_printf_i+0xbc>
 8007580:	681d      	ldr	r5, [r3, #0]
 8007582:	e003      	b.n	800758c <_printf_i+0xc4>
 8007584:	0645      	lsls	r5, r0, #25
 8007586:	d5fb      	bpl.n	8007580 <_printf_i+0xb8>
 8007588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800758c:	2d00      	cmp	r5, #0
 800758e:	da03      	bge.n	8007598 <_printf_i+0xd0>
 8007590:	232d      	movs	r3, #45	@ 0x2d
 8007592:	426d      	negs	r5, r5
 8007594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007598:	4859      	ldr	r0, [pc, #356]	@ (8007700 <_printf_i+0x238>)
 800759a:	230a      	movs	r3, #10
 800759c:	e011      	b.n	80075c2 <_printf_i+0xfa>
 800759e:	6821      	ldr	r1, [r4, #0]
 80075a0:	6833      	ldr	r3, [r6, #0]
 80075a2:	0608      	lsls	r0, r1, #24
 80075a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80075a8:	d402      	bmi.n	80075b0 <_printf_i+0xe8>
 80075aa:	0649      	lsls	r1, r1, #25
 80075ac:	bf48      	it	mi
 80075ae:	b2ad      	uxthmi	r5, r5
 80075b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80075b2:	4853      	ldr	r0, [pc, #332]	@ (8007700 <_printf_i+0x238>)
 80075b4:	6033      	str	r3, [r6, #0]
 80075b6:	bf14      	ite	ne
 80075b8:	230a      	movne	r3, #10
 80075ba:	2308      	moveq	r3, #8
 80075bc:	2100      	movs	r1, #0
 80075be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075c2:	6866      	ldr	r6, [r4, #4]
 80075c4:	60a6      	str	r6, [r4, #8]
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	bfa2      	ittt	ge
 80075ca:	6821      	ldrge	r1, [r4, #0]
 80075cc:	f021 0104 	bicge.w	r1, r1, #4
 80075d0:	6021      	strge	r1, [r4, #0]
 80075d2:	b90d      	cbnz	r5, 80075d8 <_printf_i+0x110>
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	d04b      	beq.n	8007670 <_printf_i+0x1a8>
 80075d8:	4616      	mov	r6, r2
 80075da:	fbb5 f1f3 	udiv	r1, r5, r3
 80075de:	fb03 5711 	mls	r7, r3, r1, r5
 80075e2:	5dc7      	ldrb	r7, [r0, r7]
 80075e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075e8:	462f      	mov	r7, r5
 80075ea:	42bb      	cmp	r3, r7
 80075ec:	460d      	mov	r5, r1
 80075ee:	d9f4      	bls.n	80075da <_printf_i+0x112>
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d10b      	bne.n	800760c <_printf_i+0x144>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	07df      	lsls	r7, r3, #31
 80075f8:	d508      	bpl.n	800760c <_printf_i+0x144>
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	4299      	cmp	r1, r3
 8007600:	bfde      	ittt	le
 8007602:	2330      	movle	r3, #48	@ 0x30
 8007604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800760c:	1b92      	subs	r2, r2, r6
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	f8cd a000 	str.w	sl, [sp]
 8007614:	464b      	mov	r3, r9
 8007616:	aa03      	add	r2, sp, #12
 8007618:	4621      	mov	r1, r4
 800761a:	4640      	mov	r0, r8
 800761c:	f7ff fee6 	bl	80073ec <_printf_common>
 8007620:	3001      	adds	r0, #1
 8007622:	d14a      	bne.n	80076ba <_printf_i+0x1f2>
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	f043 0320 	orr.w	r3, r3, #32
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	4833      	ldr	r0, [pc, #204]	@ (8007704 <_printf_i+0x23c>)
 8007638:	2778      	movs	r7, #120	@ 0x78
 800763a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	6831      	ldr	r1, [r6, #0]
 8007642:	061f      	lsls	r7, r3, #24
 8007644:	f851 5b04 	ldr.w	r5, [r1], #4
 8007648:	d402      	bmi.n	8007650 <_printf_i+0x188>
 800764a:	065f      	lsls	r7, r3, #25
 800764c:	bf48      	it	mi
 800764e:	b2ad      	uxthmi	r5, r5
 8007650:	6031      	str	r1, [r6, #0]
 8007652:	07d9      	lsls	r1, r3, #31
 8007654:	bf44      	itt	mi
 8007656:	f043 0320 	orrmi.w	r3, r3, #32
 800765a:	6023      	strmi	r3, [r4, #0]
 800765c:	b11d      	cbz	r5, 8007666 <_printf_i+0x19e>
 800765e:	2310      	movs	r3, #16
 8007660:	e7ac      	b.n	80075bc <_printf_i+0xf4>
 8007662:	4827      	ldr	r0, [pc, #156]	@ (8007700 <_printf_i+0x238>)
 8007664:	e7e9      	b.n	800763a <_printf_i+0x172>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	f023 0320 	bic.w	r3, r3, #32
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	e7f6      	b.n	800765e <_printf_i+0x196>
 8007670:	4616      	mov	r6, r2
 8007672:	e7bd      	b.n	80075f0 <_printf_i+0x128>
 8007674:	6833      	ldr	r3, [r6, #0]
 8007676:	6825      	ldr	r5, [r4, #0]
 8007678:	6961      	ldr	r1, [r4, #20]
 800767a:	1d18      	adds	r0, r3, #4
 800767c:	6030      	str	r0, [r6, #0]
 800767e:	062e      	lsls	r6, r5, #24
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	d501      	bpl.n	8007688 <_printf_i+0x1c0>
 8007684:	6019      	str	r1, [r3, #0]
 8007686:	e002      	b.n	800768e <_printf_i+0x1c6>
 8007688:	0668      	lsls	r0, r5, #25
 800768a:	d5fb      	bpl.n	8007684 <_printf_i+0x1bc>
 800768c:	8019      	strh	r1, [r3, #0]
 800768e:	2300      	movs	r3, #0
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	4616      	mov	r6, r2
 8007694:	e7bc      	b.n	8007610 <_printf_i+0x148>
 8007696:	6833      	ldr	r3, [r6, #0]
 8007698:	1d1a      	adds	r2, r3, #4
 800769a:	6032      	str	r2, [r6, #0]
 800769c:	681e      	ldr	r6, [r3, #0]
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	2100      	movs	r1, #0
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7f8 fda4 	bl	80001f0 <memchr>
 80076a8:	b108      	cbz	r0, 80076ae <_printf_i+0x1e6>
 80076aa:	1b80      	subs	r0, r0, r6
 80076ac:	6060      	str	r0, [r4, #4]
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	2300      	movs	r3, #0
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076b8:	e7aa      	b.n	8007610 <_printf_i+0x148>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	4632      	mov	r2, r6
 80076be:	4649      	mov	r1, r9
 80076c0:	4640      	mov	r0, r8
 80076c2:	47d0      	blx	sl
 80076c4:	3001      	adds	r0, #1
 80076c6:	d0ad      	beq.n	8007624 <_printf_i+0x15c>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	079b      	lsls	r3, r3, #30
 80076cc:	d413      	bmi.n	80076f6 <_printf_i+0x22e>
 80076ce:	68e0      	ldr	r0, [r4, #12]
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	4298      	cmp	r0, r3
 80076d4:	bfb8      	it	lt
 80076d6:	4618      	movlt	r0, r3
 80076d8:	e7a6      	b.n	8007628 <_printf_i+0x160>
 80076da:	2301      	movs	r3, #1
 80076dc:	4632      	mov	r2, r6
 80076de:	4649      	mov	r1, r9
 80076e0:	4640      	mov	r0, r8
 80076e2:	47d0      	blx	sl
 80076e4:	3001      	adds	r0, #1
 80076e6:	d09d      	beq.n	8007624 <_printf_i+0x15c>
 80076e8:	3501      	adds	r5, #1
 80076ea:	68e3      	ldr	r3, [r4, #12]
 80076ec:	9903      	ldr	r1, [sp, #12]
 80076ee:	1a5b      	subs	r3, r3, r1
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	dcf2      	bgt.n	80076da <_printf_i+0x212>
 80076f4:	e7eb      	b.n	80076ce <_printf_i+0x206>
 80076f6:	2500      	movs	r5, #0
 80076f8:	f104 0619 	add.w	r6, r4, #25
 80076fc:	e7f5      	b.n	80076ea <_printf_i+0x222>
 80076fe:	bf00      	nop
 8007700:	0800be90 	.word	0x0800be90
 8007704:	0800bea1 	.word	0x0800bea1

08007708 <_scanf_float>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	b087      	sub	sp, #28
 800770e:	4617      	mov	r7, r2
 8007710:	9303      	str	r3, [sp, #12]
 8007712:	688b      	ldr	r3, [r1, #8]
 8007714:	1e5a      	subs	r2, r3, #1
 8007716:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800771a:	bf81      	itttt	hi
 800771c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007720:	eb03 0b05 	addhi.w	fp, r3, r5
 8007724:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007728:	608b      	strhi	r3, [r1, #8]
 800772a:	680b      	ldr	r3, [r1, #0]
 800772c:	460a      	mov	r2, r1
 800772e:	f04f 0500 	mov.w	r5, #0
 8007732:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007736:	f842 3b1c 	str.w	r3, [r2], #28
 800773a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800773e:	4680      	mov	r8, r0
 8007740:	460c      	mov	r4, r1
 8007742:	bf98      	it	ls
 8007744:	f04f 0b00 	movls.w	fp, #0
 8007748:	9201      	str	r2, [sp, #4]
 800774a:	4616      	mov	r6, r2
 800774c:	46aa      	mov	sl, r5
 800774e:	46a9      	mov	r9, r5
 8007750:	9502      	str	r5, [sp, #8]
 8007752:	68a2      	ldr	r2, [r4, #8]
 8007754:	b152      	cbz	r2, 800776c <_scanf_float+0x64>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b4e      	cmp	r3, #78	@ 0x4e
 800775c:	d864      	bhi.n	8007828 <_scanf_float+0x120>
 800775e:	2b40      	cmp	r3, #64	@ 0x40
 8007760:	d83c      	bhi.n	80077dc <_scanf_float+0xd4>
 8007762:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007766:	b2c8      	uxtb	r0, r1
 8007768:	280e      	cmp	r0, #14
 800776a:	d93a      	bls.n	80077e2 <_scanf_float+0xda>
 800776c:	f1b9 0f00 	cmp.w	r9, #0
 8007770:	d003      	beq.n	800777a <_scanf_float+0x72>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800777e:	f1ba 0f01 	cmp.w	sl, #1
 8007782:	f200 8117 	bhi.w	80079b4 <_scanf_float+0x2ac>
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	429e      	cmp	r6, r3
 800778a:	f200 8108 	bhi.w	800799e <_scanf_float+0x296>
 800778e:	2001      	movs	r0, #1
 8007790:	b007      	add	sp, #28
 8007792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007796:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800779a:	2a0d      	cmp	r2, #13
 800779c:	d8e6      	bhi.n	800776c <_scanf_float+0x64>
 800779e:	a101      	add	r1, pc, #4	@ (adr r1, 80077a4 <_scanf_float+0x9c>)
 80077a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077a4:	080078eb 	.word	0x080078eb
 80077a8:	0800776d 	.word	0x0800776d
 80077ac:	0800776d 	.word	0x0800776d
 80077b0:	0800776d 	.word	0x0800776d
 80077b4:	0800794b 	.word	0x0800794b
 80077b8:	08007923 	.word	0x08007923
 80077bc:	0800776d 	.word	0x0800776d
 80077c0:	0800776d 	.word	0x0800776d
 80077c4:	080078f9 	.word	0x080078f9
 80077c8:	0800776d 	.word	0x0800776d
 80077cc:	0800776d 	.word	0x0800776d
 80077d0:	0800776d 	.word	0x0800776d
 80077d4:	0800776d 	.word	0x0800776d
 80077d8:	080078b1 	.word	0x080078b1
 80077dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80077e0:	e7db      	b.n	800779a <_scanf_float+0x92>
 80077e2:	290e      	cmp	r1, #14
 80077e4:	d8c2      	bhi.n	800776c <_scanf_float+0x64>
 80077e6:	a001      	add	r0, pc, #4	@ (adr r0, 80077ec <_scanf_float+0xe4>)
 80077e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80077ec:	080078a1 	.word	0x080078a1
 80077f0:	0800776d 	.word	0x0800776d
 80077f4:	080078a1 	.word	0x080078a1
 80077f8:	08007937 	.word	0x08007937
 80077fc:	0800776d 	.word	0x0800776d
 8007800:	08007849 	.word	0x08007849
 8007804:	08007887 	.word	0x08007887
 8007808:	08007887 	.word	0x08007887
 800780c:	08007887 	.word	0x08007887
 8007810:	08007887 	.word	0x08007887
 8007814:	08007887 	.word	0x08007887
 8007818:	08007887 	.word	0x08007887
 800781c:	08007887 	.word	0x08007887
 8007820:	08007887 	.word	0x08007887
 8007824:	08007887 	.word	0x08007887
 8007828:	2b6e      	cmp	r3, #110	@ 0x6e
 800782a:	d809      	bhi.n	8007840 <_scanf_float+0x138>
 800782c:	2b60      	cmp	r3, #96	@ 0x60
 800782e:	d8b2      	bhi.n	8007796 <_scanf_float+0x8e>
 8007830:	2b54      	cmp	r3, #84	@ 0x54
 8007832:	d07b      	beq.n	800792c <_scanf_float+0x224>
 8007834:	2b59      	cmp	r3, #89	@ 0x59
 8007836:	d199      	bne.n	800776c <_scanf_float+0x64>
 8007838:	2d07      	cmp	r5, #7
 800783a:	d197      	bne.n	800776c <_scanf_float+0x64>
 800783c:	2508      	movs	r5, #8
 800783e:	e02c      	b.n	800789a <_scanf_float+0x192>
 8007840:	2b74      	cmp	r3, #116	@ 0x74
 8007842:	d073      	beq.n	800792c <_scanf_float+0x224>
 8007844:	2b79      	cmp	r3, #121	@ 0x79
 8007846:	e7f6      	b.n	8007836 <_scanf_float+0x12e>
 8007848:	6821      	ldr	r1, [r4, #0]
 800784a:	05c8      	lsls	r0, r1, #23
 800784c:	d51b      	bpl.n	8007886 <_scanf_float+0x17e>
 800784e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007852:	6021      	str	r1, [r4, #0]
 8007854:	f109 0901 	add.w	r9, r9, #1
 8007858:	f1bb 0f00 	cmp.w	fp, #0
 800785c:	d003      	beq.n	8007866 <_scanf_float+0x15e>
 800785e:	3201      	adds	r2, #1
 8007860:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007864:	60a2      	str	r2, [r4, #8]
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	3b01      	subs	r3, #1
 800786a:	60a3      	str	r3, [r4, #8]
 800786c:	6923      	ldr	r3, [r4, #16]
 800786e:	3301      	adds	r3, #1
 8007870:	6123      	str	r3, [r4, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3b01      	subs	r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	f340 8087 	ble.w	800798c <_scanf_float+0x284>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	e765      	b.n	8007752 <_scanf_float+0x4a>
 8007886:	eb1a 0105 	adds.w	r1, sl, r5
 800788a:	f47f af6f 	bne.w	800776c <_scanf_float+0x64>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007894:	6022      	str	r2, [r4, #0]
 8007896:	460d      	mov	r5, r1
 8007898:	468a      	mov	sl, r1
 800789a:	f806 3b01 	strb.w	r3, [r6], #1
 800789e:	e7e2      	b.n	8007866 <_scanf_float+0x15e>
 80078a0:	6822      	ldr	r2, [r4, #0]
 80078a2:	0610      	lsls	r0, r2, #24
 80078a4:	f57f af62 	bpl.w	800776c <_scanf_float+0x64>
 80078a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	e7f4      	b.n	800789a <_scanf_float+0x192>
 80078b0:	f1ba 0f00 	cmp.w	sl, #0
 80078b4:	d10e      	bne.n	80078d4 <_scanf_float+0x1cc>
 80078b6:	f1b9 0f00 	cmp.w	r9, #0
 80078ba:	d10e      	bne.n	80078da <_scanf_float+0x1d2>
 80078bc:	6822      	ldr	r2, [r4, #0]
 80078be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80078c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80078c6:	d108      	bne.n	80078da <_scanf_float+0x1d2>
 80078c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80078cc:	6022      	str	r2, [r4, #0]
 80078ce:	f04f 0a01 	mov.w	sl, #1
 80078d2:	e7e2      	b.n	800789a <_scanf_float+0x192>
 80078d4:	f1ba 0f02 	cmp.w	sl, #2
 80078d8:	d055      	beq.n	8007986 <_scanf_float+0x27e>
 80078da:	2d01      	cmp	r5, #1
 80078dc:	d002      	beq.n	80078e4 <_scanf_float+0x1dc>
 80078de:	2d04      	cmp	r5, #4
 80078e0:	f47f af44 	bne.w	800776c <_scanf_float+0x64>
 80078e4:	3501      	adds	r5, #1
 80078e6:	b2ed      	uxtb	r5, r5
 80078e8:	e7d7      	b.n	800789a <_scanf_float+0x192>
 80078ea:	f1ba 0f01 	cmp.w	sl, #1
 80078ee:	f47f af3d 	bne.w	800776c <_scanf_float+0x64>
 80078f2:	f04f 0a02 	mov.w	sl, #2
 80078f6:	e7d0      	b.n	800789a <_scanf_float+0x192>
 80078f8:	b97d      	cbnz	r5, 800791a <_scanf_float+0x212>
 80078fa:	f1b9 0f00 	cmp.w	r9, #0
 80078fe:	f47f af38 	bne.w	8007772 <_scanf_float+0x6a>
 8007902:	6822      	ldr	r2, [r4, #0]
 8007904:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007908:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800790c:	f040 8108 	bne.w	8007b20 <_scanf_float+0x418>
 8007910:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	2501      	movs	r5, #1
 8007918:	e7bf      	b.n	800789a <_scanf_float+0x192>
 800791a:	2d03      	cmp	r5, #3
 800791c:	d0e2      	beq.n	80078e4 <_scanf_float+0x1dc>
 800791e:	2d05      	cmp	r5, #5
 8007920:	e7de      	b.n	80078e0 <_scanf_float+0x1d8>
 8007922:	2d02      	cmp	r5, #2
 8007924:	f47f af22 	bne.w	800776c <_scanf_float+0x64>
 8007928:	2503      	movs	r5, #3
 800792a:	e7b6      	b.n	800789a <_scanf_float+0x192>
 800792c:	2d06      	cmp	r5, #6
 800792e:	f47f af1d 	bne.w	800776c <_scanf_float+0x64>
 8007932:	2507      	movs	r5, #7
 8007934:	e7b1      	b.n	800789a <_scanf_float+0x192>
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	0591      	lsls	r1, r2, #22
 800793a:	f57f af17 	bpl.w	800776c <_scanf_float+0x64>
 800793e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	f8cd 9008 	str.w	r9, [sp, #8]
 8007948:	e7a7      	b.n	800789a <_scanf_float+0x192>
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007950:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007954:	d006      	beq.n	8007964 <_scanf_float+0x25c>
 8007956:	0550      	lsls	r0, r2, #21
 8007958:	f57f af08 	bpl.w	800776c <_scanf_float+0x64>
 800795c:	f1b9 0f00 	cmp.w	r9, #0
 8007960:	f000 80de 	beq.w	8007b20 <_scanf_float+0x418>
 8007964:	0591      	lsls	r1, r2, #22
 8007966:	bf58      	it	pl
 8007968:	9902      	ldrpl	r1, [sp, #8]
 800796a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800796e:	bf58      	it	pl
 8007970:	eba9 0101 	subpl.w	r1, r9, r1
 8007974:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007978:	bf58      	it	pl
 800797a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	e789      	b.n	800789a <_scanf_float+0x192>
 8007986:	f04f 0a03 	mov.w	sl, #3
 800798a:	e786      	b.n	800789a <_scanf_float+0x192>
 800798c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007990:	4639      	mov	r1, r7
 8007992:	4640      	mov	r0, r8
 8007994:	4798      	blx	r3
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f aedb 	beq.w	8007752 <_scanf_float+0x4a>
 800799c:	e6e6      	b.n	800776c <_scanf_float+0x64>
 800799e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079a6:	463a      	mov	r2, r7
 80079a8:	4640      	mov	r0, r8
 80079aa:	4798      	blx	r3
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	e6e8      	b.n	8007786 <_scanf_float+0x7e>
 80079b4:	1e6b      	subs	r3, r5, #1
 80079b6:	2b06      	cmp	r3, #6
 80079b8:	d824      	bhi.n	8007a04 <_scanf_float+0x2fc>
 80079ba:	2d02      	cmp	r5, #2
 80079bc:	d836      	bhi.n	8007a2c <_scanf_float+0x324>
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	429e      	cmp	r6, r3
 80079c2:	f67f aee4 	bls.w	800778e <_scanf_float+0x86>
 80079c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079ce:	463a      	mov	r2, r7
 80079d0:	4640      	mov	r0, r8
 80079d2:	4798      	blx	r3
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	6123      	str	r3, [r4, #16]
 80079da:	e7f0      	b.n	80079be <_scanf_float+0x2b6>
 80079dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80079e4:	463a      	mov	r2, r7
 80079e6:	4640      	mov	r0, r8
 80079e8:	4798      	blx	r3
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	6123      	str	r3, [r4, #16]
 80079f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079f4:	fa5f fa8a 	uxtb.w	sl, sl
 80079f8:	f1ba 0f02 	cmp.w	sl, #2
 80079fc:	d1ee      	bne.n	80079dc <_scanf_float+0x2d4>
 80079fe:	3d03      	subs	r5, #3
 8007a00:	b2ed      	uxtb	r5, r5
 8007a02:	1b76      	subs	r6, r6, r5
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	05da      	lsls	r2, r3, #23
 8007a08:	d530      	bpl.n	8007a6c <_scanf_float+0x364>
 8007a0a:	055b      	lsls	r3, r3, #21
 8007a0c:	d511      	bpl.n	8007a32 <_scanf_float+0x32a>
 8007a0e:	9b01      	ldr	r3, [sp, #4]
 8007a10:	429e      	cmp	r6, r3
 8007a12:	f67f aebc 	bls.w	800778e <_scanf_float+0x86>
 8007a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a1e:	463a      	mov	r2, r7
 8007a20:	4640      	mov	r0, r8
 8007a22:	4798      	blx	r3
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	e7f0      	b.n	8007a0e <_scanf_float+0x306>
 8007a2c:	46aa      	mov	sl, r5
 8007a2e:	46b3      	mov	fp, r6
 8007a30:	e7de      	b.n	80079f0 <_scanf_float+0x2e8>
 8007a32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	2965      	cmp	r1, #101	@ 0x65
 8007a3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	d00c      	beq.n	8007a60 <_scanf_float+0x358>
 8007a46:	2945      	cmp	r1, #69	@ 0x45
 8007a48:	d00a      	beq.n	8007a60 <_scanf_float+0x358>
 8007a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a4e:	463a      	mov	r2, r7
 8007a50:	4640      	mov	r0, r8
 8007a52:	4798      	blx	r3
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	1eb5      	subs	r5, r6, #2
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a64:	463a      	mov	r2, r7
 8007a66:	4640      	mov	r0, r8
 8007a68:	4798      	blx	r3
 8007a6a:	462e      	mov	r6, r5
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	f012 0210 	ands.w	r2, r2, #16
 8007a72:	d001      	beq.n	8007a78 <_scanf_float+0x370>
 8007a74:	2000      	movs	r0, #0
 8007a76:	e68b      	b.n	8007790 <_scanf_float+0x88>
 8007a78:	7032      	strb	r2, [r6, #0]
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a84:	d11c      	bne.n	8007ac0 <_scanf_float+0x3b8>
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	454b      	cmp	r3, r9
 8007a8a:	eba3 0209 	sub.w	r2, r3, r9
 8007a8e:	d123      	bne.n	8007ad8 <_scanf_float+0x3d0>
 8007a90:	9901      	ldr	r1, [sp, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	4640      	mov	r0, r8
 8007a96:	f002 fc57 	bl	800a348 <_strtod_r>
 8007a9a:	9b03      	ldr	r3, [sp, #12]
 8007a9c:	6821      	ldr	r1, [r4, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f011 0f02 	tst.w	r1, #2
 8007aa4:	ec57 6b10 	vmov	r6, r7, d0
 8007aa8:	f103 0204 	add.w	r2, r3, #4
 8007aac:	d01f      	beq.n	8007aee <_scanf_float+0x3e6>
 8007aae:	9903      	ldr	r1, [sp, #12]
 8007ab0:	600a      	str	r2, [r1, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	e9c3 6700 	strd	r6, r7, [r3]
 8007ab8:	68e3      	ldr	r3, [r4, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60e3      	str	r3, [r4, #12]
 8007abe:	e7d9      	b.n	8007a74 <_scanf_float+0x36c>
 8007ac0:	9b04      	ldr	r3, [sp, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0e4      	beq.n	8007a90 <_scanf_float+0x388>
 8007ac6:	9905      	ldr	r1, [sp, #20]
 8007ac8:	230a      	movs	r3, #10
 8007aca:	3101      	adds	r1, #1
 8007acc:	4640      	mov	r0, r8
 8007ace:	f002 fcbb 	bl	800a448 <_strtol_r>
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	9e05      	ldr	r6, [sp, #20]
 8007ad6:	1ac2      	subs	r2, r0, r3
 8007ad8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007adc:	429e      	cmp	r6, r3
 8007ade:	bf28      	it	cs
 8007ae0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007ae4:	4910      	ldr	r1, [pc, #64]	@ (8007b28 <_scanf_float+0x420>)
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f000 f8e4 	bl	8007cb4 <siprintf>
 8007aec:	e7d0      	b.n	8007a90 <_scanf_float+0x388>
 8007aee:	f011 0f04 	tst.w	r1, #4
 8007af2:	9903      	ldr	r1, [sp, #12]
 8007af4:	600a      	str	r2, [r1, #0]
 8007af6:	d1dc      	bne.n	8007ab2 <_scanf_float+0x3aa>
 8007af8:	681d      	ldr	r5, [r3, #0]
 8007afa:	4632      	mov	r2, r6
 8007afc:	463b      	mov	r3, r7
 8007afe:	4630      	mov	r0, r6
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f9 f823 	bl	8000b4c <__aeabi_dcmpun>
 8007b06:	b128      	cbz	r0, 8007b14 <_scanf_float+0x40c>
 8007b08:	4808      	ldr	r0, [pc, #32]	@ (8007b2c <_scanf_float+0x424>)
 8007b0a:	f000 fa15 	bl	8007f38 <nanf>
 8007b0e:	ed85 0a00 	vstr	s0, [r5]
 8007b12:	e7d1      	b.n	8007ab8 <_scanf_float+0x3b0>
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f9 f876 	bl	8000c08 <__aeabi_d2f>
 8007b1c:	6028      	str	r0, [r5, #0]
 8007b1e:	e7cb      	b.n	8007ab8 <_scanf_float+0x3b0>
 8007b20:	f04f 0900 	mov.w	r9, #0
 8007b24:	e629      	b.n	800777a <_scanf_float+0x72>
 8007b26:	bf00      	nop
 8007b28:	0800beb2 	.word	0x0800beb2
 8007b2c:	0800c268 	.word	0x0800c268

08007b30 <std>:
 8007b30:	2300      	movs	r3, #0
 8007b32:	b510      	push	{r4, lr}
 8007b34:	4604      	mov	r4, r0
 8007b36:	e9c0 3300 	strd	r3, r3, [r0]
 8007b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b3e:	6083      	str	r3, [r0, #8]
 8007b40:	8181      	strh	r1, [r0, #12]
 8007b42:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b44:	81c2      	strh	r2, [r0, #14]
 8007b46:	6183      	str	r3, [r0, #24]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	305c      	adds	r0, #92	@ 0x5c
 8007b4e:	f000 f961 	bl	8007e14 <memset>
 8007b52:	4b0d      	ldr	r3, [pc, #52]	@ (8007b88 <std+0x58>)
 8007b54:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b56:	4b0d      	ldr	r3, [pc, #52]	@ (8007b8c <std+0x5c>)
 8007b58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b90 <std+0x60>)
 8007b5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <std+0x64>)
 8007b60:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <std+0x68>)
 8007b64:	6224      	str	r4, [r4, #32]
 8007b66:	429c      	cmp	r4, r3
 8007b68:	d006      	beq.n	8007b78 <std+0x48>
 8007b6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b6e:	4294      	cmp	r4, r2
 8007b70:	d002      	beq.n	8007b78 <std+0x48>
 8007b72:	33d0      	adds	r3, #208	@ 0xd0
 8007b74:	429c      	cmp	r4, r3
 8007b76:	d105      	bne.n	8007b84 <std+0x54>
 8007b78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b80:	f000 b9d6 	b.w	8007f30 <__retarget_lock_init_recursive>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	bf00      	nop
 8007b88:	08007d49 	.word	0x08007d49
 8007b8c:	08007d6f 	.word	0x08007d6f
 8007b90:	08007da7 	.word	0x08007da7
 8007b94:	08007dcb 	.word	0x08007dcb
 8007b98:	200010b0 	.word	0x200010b0

08007b9c <stdio_exit_handler>:
 8007b9c:	4a02      	ldr	r2, [pc, #8]	@ (8007ba8 <stdio_exit_handler+0xc>)
 8007b9e:	4903      	ldr	r1, [pc, #12]	@ (8007bac <stdio_exit_handler+0x10>)
 8007ba0:	4803      	ldr	r0, [pc, #12]	@ (8007bb0 <stdio_exit_handler+0x14>)
 8007ba2:	f000 b869 	b.w	8007c78 <_fwalk_sglue>
 8007ba6:	bf00      	nop
 8007ba8:	20000814 	.word	0x20000814
 8007bac:	0800ae39 	.word	0x0800ae39
 8007bb0:	20000824 	.word	0x20000824

08007bb4 <cleanup_stdio>:
 8007bb4:	6841      	ldr	r1, [r0, #4]
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007be8 <cleanup_stdio+0x34>)
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	d001      	beq.n	8007bc4 <cleanup_stdio+0x10>
 8007bc0:	f003 f93a 	bl	800ae38 <_fflush_r>
 8007bc4:	68a1      	ldr	r1, [r4, #8]
 8007bc6:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <cleanup_stdio+0x38>)
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	d002      	beq.n	8007bd2 <cleanup_stdio+0x1e>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f003 f933 	bl	800ae38 <_fflush_r>
 8007bd2:	68e1      	ldr	r1, [r4, #12]
 8007bd4:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <cleanup_stdio+0x3c>)
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	d004      	beq.n	8007be4 <cleanup_stdio+0x30>
 8007bda:	4620      	mov	r0, r4
 8007bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be0:	f003 b92a 	b.w	800ae38 <_fflush_r>
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	bf00      	nop
 8007be8:	200010b0 	.word	0x200010b0
 8007bec:	20001118 	.word	0x20001118
 8007bf0:	20001180 	.word	0x20001180

08007bf4 <global_stdio_init.part.0>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c24 <global_stdio_init.part.0+0x30>)
 8007bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8007c28 <global_stdio_init.part.0+0x34>)
 8007bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8007c2c <global_stdio_init.part.0+0x38>)
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	2200      	movs	r2, #0
 8007c02:	2104      	movs	r1, #4
 8007c04:	f7ff ff94 	bl	8007b30 <std>
 8007c08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	2109      	movs	r1, #9
 8007c10:	f7ff ff8e 	bl	8007b30 <std>
 8007c14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c18:	2202      	movs	r2, #2
 8007c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1e:	2112      	movs	r1, #18
 8007c20:	f7ff bf86 	b.w	8007b30 <std>
 8007c24:	200011e8 	.word	0x200011e8
 8007c28:	200010b0 	.word	0x200010b0
 8007c2c:	08007b9d 	.word	0x08007b9d

08007c30 <__sfp_lock_acquire>:
 8007c30:	4801      	ldr	r0, [pc, #4]	@ (8007c38 <__sfp_lock_acquire+0x8>)
 8007c32:	f000 b97e 	b.w	8007f32 <__retarget_lock_acquire_recursive>
 8007c36:	bf00      	nop
 8007c38:	200011f1 	.word	0x200011f1

08007c3c <__sfp_lock_release>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	@ (8007c44 <__sfp_lock_release+0x8>)
 8007c3e:	f000 b979 	b.w	8007f34 <__retarget_lock_release_recursive>
 8007c42:	bf00      	nop
 8007c44:	200011f1 	.word	0x200011f1

08007c48 <__sinit>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	f7ff fff0 	bl	8007c30 <__sfp_lock_acquire>
 8007c50:	6a23      	ldr	r3, [r4, #32]
 8007c52:	b11b      	cbz	r3, 8007c5c <__sinit+0x14>
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	f7ff bff0 	b.w	8007c3c <__sfp_lock_release>
 8007c5c:	4b04      	ldr	r3, [pc, #16]	@ (8007c70 <__sinit+0x28>)
 8007c5e:	6223      	str	r3, [r4, #32]
 8007c60:	4b04      	ldr	r3, [pc, #16]	@ (8007c74 <__sinit+0x2c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f5      	bne.n	8007c54 <__sinit+0xc>
 8007c68:	f7ff ffc4 	bl	8007bf4 <global_stdio_init.part.0>
 8007c6c:	e7f2      	b.n	8007c54 <__sinit+0xc>
 8007c6e:	bf00      	nop
 8007c70:	08007bb5 	.word	0x08007bb5
 8007c74:	200011e8 	.word	0x200011e8

08007c78 <_fwalk_sglue>:
 8007c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	4688      	mov	r8, r1
 8007c80:	4614      	mov	r4, r2
 8007c82:	2600      	movs	r6, #0
 8007c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c88:	f1b9 0901 	subs.w	r9, r9, #1
 8007c8c:	d505      	bpl.n	8007c9a <_fwalk_sglue+0x22>
 8007c8e:	6824      	ldr	r4, [r4, #0]
 8007c90:	2c00      	cmp	r4, #0
 8007c92:	d1f7      	bne.n	8007c84 <_fwalk_sglue+0xc>
 8007c94:	4630      	mov	r0, r6
 8007c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d907      	bls.n	8007cb0 <_fwalk_sglue+0x38>
 8007ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	d003      	beq.n	8007cb0 <_fwalk_sglue+0x38>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4638      	mov	r0, r7
 8007cac:	47c0      	blx	r8
 8007cae:	4306      	orrs	r6, r0
 8007cb0:	3568      	adds	r5, #104	@ 0x68
 8007cb2:	e7e9      	b.n	8007c88 <_fwalk_sglue+0x10>

08007cb4 <siprintf>:
 8007cb4:	b40e      	push	{r1, r2, r3}
 8007cb6:	b500      	push	{lr}
 8007cb8:	b09c      	sub	sp, #112	@ 0x70
 8007cba:	ab1d      	add	r3, sp, #116	@ 0x74
 8007cbc:	9002      	str	r0, [sp, #8]
 8007cbe:	9006      	str	r0, [sp, #24]
 8007cc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007cc4:	4809      	ldr	r0, [pc, #36]	@ (8007cec <siprintf+0x38>)
 8007cc6:	9107      	str	r1, [sp, #28]
 8007cc8:	9104      	str	r1, [sp, #16]
 8007cca:	4909      	ldr	r1, [pc, #36]	@ (8007cf0 <siprintf+0x3c>)
 8007ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd0:	9105      	str	r1, [sp, #20]
 8007cd2:	6800      	ldr	r0, [r0, #0]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	a902      	add	r1, sp, #8
 8007cd8:	f002 fc14 	bl	800a504 <_svfiprintf_r>
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	b01c      	add	sp, #112	@ 0x70
 8007ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce8:	b003      	add	sp, #12
 8007cea:	4770      	bx	lr
 8007cec:	20000820 	.word	0x20000820
 8007cf0:	ffff0208 	.word	0xffff0208

08007cf4 <siscanf>:
 8007cf4:	b40e      	push	{r1, r2, r3}
 8007cf6:	b530      	push	{r4, r5, lr}
 8007cf8:	b09c      	sub	sp, #112	@ 0x70
 8007cfa:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007cfc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007d00:	f854 5b04 	ldr.w	r5, [r4], #4
 8007d04:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d08:	9002      	str	r0, [sp, #8]
 8007d0a:	9006      	str	r0, [sp, #24]
 8007d0c:	f7f8 fac0 	bl	8000290 <strlen>
 8007d10:	4b0b      	ldr	r3, [pc, #44]	@ (8007d40 <siscanf+0x4c>)
 8007d12:	9003      	str	r0, [sp, #12]
 8007d14:	9007      	str	r0, [sp, #28]
 8007d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d18:	480a      	ldr	r0, [pc, #40]	@ (8007d44 <siscanf+0x50>)
 8007d1a:	9401      	str	r4, [sp, #4]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d20:	9314      	str	r3, [sp, #80]	@ 0x50
 8007d22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d2a:	462a      	mov	r2, r5
 8007d2c:	4623      	mov	r3, r4
 8007d2e:	a902      	add	r1, sp, #8
 8007d30:	6800      	ldr	r0, [r0, #0]
 8007d32:	f002 fd3b 	bl	800a7ac <__ssvfiscanf_r>
 8007d36:	b01c      	add	sp, #112	@ 0x70
 8007d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d3c:	b003      	add	sp, #12
 8007d3e:	4770      	bx	lr
 8007d40:	08007d6b 	.word	0x08007d6b
 8007d44:	20000820 	.word	0x20000820

08007d48 <__sread>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d50:	f000 f8a0 	bl	8007e94 <_read_r>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	bfab      	itete	ge
 8007d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d5c:	181b      	addge	r3, r3, r0
 8007d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d62:	bfac      	ite	ge
 8007d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d66:	81a3      	strhlt	r3, [r4, #12]
 8007d68:	bd10      	pop	{r4, pc}

08007d6a <__seofread>:
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	4770      	bx	lr

08007d6e <__swrite>:
 8007d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d72:	461f      	mov	r7, r3
 8007d74:	898b      	ldrh	r3, [r1, #12]
 8007d76:	05db      	lsls	r3, r3, #23
 8007d78:	4605      	mov	r5, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	d505      	bpl.n	8007d8c <__swrite+0x1e>
 8007d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d84:	2302      	movs	r3, #2
 8007d86:	2200      	movs	r2, #0
 8007d88:	f000 f872 	bl	8007e70 <_lseek_r>
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d96:	81a3      	strh	r3, [r4, #12]
 8007d98:	4632      	mov	r2, r6
 8007d9a:	463b      	mov	r3, r7
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007da2:	f000 b889 	b.w	8007eb8 <_write_r>

08007da6 <__sseek>:
 8007da6:	b510      	push	{r4, lr}
 8007da8:	460c      	mov	r4, r1
 8007daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dae:	f000 f85f 	bl	8007e70 <_lseek_r>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	bf15      	itete	ne
 8007db8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dc2:	81a3      	strheq	r3, [r4, #12]
 8007dc4:	bf18      	it	ne
 8007dc6:	81a3      	strhne	r3, [r4, #12]
 8007dc8:	bd10      	pop	{r4, pc}

08007dca <__sclose>:
 8007dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dce:	f000 b83f 	b.w	8007e50 <_close_r>
	...

08007dd4 <_vsiprintf_r>:
 8007dd4:	b500      	push	{lr}
 8007dd6:	b09b      	sub	sp, #108	@ 0x6c
 8007dd8:	9100      	str	r1, [sp, #0]
 8007dda:	9104      	str	r1, [sp, #16]
 8007ddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007de0:	9105      	str	r1, [sp, #20]
 8007de2:	9102      	str	r1, [sp, #8]
 8007de4:	4905      	ldr	r1, [pc, #20]	@ (8007dfc <_vsiprintf_r+0x28>)
 8007de6:	9103      	str	r1, [sp, #12]
 8007de8:	4669      	mov	r1, sp
 8007dea:	f002 fb8b 	bl	800a504 <_svfiprintf_r>
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	b01b      	add	sp, #108	@ 0x6c
 8007df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dfa:	bf00      	nop
 8007dfc:	ffff0208 	.word	0xffff0208

08007e00 <vsiprintf>:
 8007e00:	4613      	mov	r3, r2
 8007e02:	460a      	mov	r2, r1
 8007e04:	4601      	mov	r1, r0
 8007e06:	4802      	ldr	r0, [pc, #8]	@ (8007e10 <vsiprintf+0x10>)
 8007e08:	6800      	ldr	r0, [r0, #0]
 8007e0a:	f7ff bfe3 	b.w	8007dd4 <_vsiprintf_r>
 8007e0e:	bf00      	nop
 8007e10:	20000820 	.word	0x20000820

08007e14 <memset>:
 8007e14:	4402      	add	r2, r0
 8007e16:	4603      	mov	r3, r0
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d100      	bne.n	8007e1e <memset+0xa>
 8007e1c:	4770      	bx	lr
 8007e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e22:	e7f9      	b.n	8007e18 <memset+0x4>

08007e24 <strncmp>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	b16a      	cbz	r2, 8007e44 <strncmp+0x20>
 8007e28:	3901      	subs	r1, #1
 8007e2a:	1884      	adds	r4, r0, r2
 8007e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d103      	bne.n	8007e40 <strncmp+0x1c>
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d001      	beq.n	8007e40 <strncmp+0x1c>
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d1f5      	bne.n	8007e2c <strncmp+0x8>
 8007e40:	1ad0      	subs	r0, r2, r3
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	4610      	mov	r0, r2
 8007e46:	e7fc      	b.n	8007e42 <strncmp+0x1e>

08007e48 <_localeconv_r>:
 8007e48:	4800      	ldr	r0, [pc, #0]	@ (8007e4c <_localeconv_r+0x4>)
 8007e4a:	4770      	bx	lr
 8007e4c:	20000960 	.word	0x20000960

08007e50 <_close_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d06      	ldr	r5, [pc, #24]	@ (8007e6c <_close_r+0x1c>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	f7fa ff14 	bl	8002c88 <_close>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d102      	bne.n	8007e6a <_close_r+0x1a>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	b103      	cbz	r3, 8007e6a <_close_r+0x1a>
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	200011ec 	.word	0x200011ec

08007e70 <_lseek_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4d07      	ldr	r5, [pc, #28]	@ (8007e90 <_lseek_r+0x20>)
 8007e74:	4604      	mov	r4, r0
 8007e76:	4608      	mov	r0, r1
 8007e78:	4611      	mov	r1, r2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	602a      	str	r2, [r5, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f7fa ff29 	bl	8002cd6 <_lseek>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_lseek_r+0x1e>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_lseek_r+0x1e>
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	200011ec 	.word	0x200011ec

08007e94 <_read_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4d07      	ldr	r5, [pc, #28]	@ (8007eb4 <_read_r+0x20>)
 8007e98:	4604      	mov	r4, r0
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7fa feb7 	bl	8002c16 <_read>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_read_r+0x1e>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_read_r+0x1e>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	200011ec 	.word	0x200011ec

08007eb8 <_write_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d07      	ldr	r5, [pc, #28]	@ (8007ed8 <_write_r+0x20>)
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	602a      	str	r2, [r5, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f7fa fec2 	bl	8002c50 <_write>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_write_r+0x1e>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_write_r+0x1e>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	200011ec 	.word	0x200011ec

08007edc <__errno>:
 8007edc:	4b01      	ldr	r3, [pc, #4]	@ (8007ee4 <__errno+0x8>)
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000820 	.word	0x20000820

08007ee8 <__libc_init_array>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4d0d      	ldr	r5, [pc, #52]	@ (8007f20 <__libc_init_array+0x38>)
 8007eec:	4c0d      	ldr	r4, [pc, #52]	@ (8007f24 <__libc_init_array+0x3c>)
 8007eee:	1b64      	subs	r4, r4, r5
 8007ef0:	10a4      	asrs	r4, r4, #2
 8007ef2:	2600      	movs	r6, #0
 8007ef4:	42a6      	cmp	r6, r4
 8007ef6:	d109      	bne.n	8007f0c <__libc_init_array+0x24>
 8007ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8007f28 <__libc_init_array+0x40>)
 8007efa:	4c0c      	ldr	r4, [pc, #48]	@ (8007f2c <__libc_init_array+0x44>)
 8007efc:	f003 ff60 	bl	800bdc0 <_init>
 8007f00:	1b64      	subs	r4, r4, r5
 8007f02:	10a4      	asrs	r4, r4, #2
 8007f04:	2600      	movs	r6, #0
 8007f06:	42a6      	cmp	r6, r4
 8007f08:	d105      	bne.n	8007f16 <__libc_init_array+0x2e>
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f10:	4798      	blx	r3
 8007f12:	3601      	adds	r6, #1
 8007f14:	e7ee      	b.n	8007ef4 <__libc_init_array+0xc>
 8007f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1a:	4798      	blx	r3
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	e7f2      	b.n	8007f06 <__libc_init_array+0x1e>
 8007f20:	0800c2d4 	.word	0x0800c2d4
 8007f24:	0800c2d4 	.word	0x0800c2d4
 8007f28:	0800c2d4 	.word	0x0800c2d4
 8007f2c:	0800c2d8 	.word	0x0800c2d8

08007f30 <__retarget_lock_init_recursive>:
 8007f30:	4770      	bx	lr

08007f32 <__retarget_lock_acquire_recursive>:
 8007f32:	4770      	bx	lr

08007f34 <__retarget_lock_release_recursive>:
 8007f34:	4770      	bx	lr
	...

08007f38 <nanf>:
 8007f38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007f40 <nanf+0x8>
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	7fc00000 	.word	0x7fc00000

08007f44 <quorem>:
 8007f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	6903      	ldr	r3, [r0, #16]
 8007f4a:	690c      	ldr	r4, [r1, #16]
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	4607      	mov	r7, r0
 8007f50:	db7e      	blt.n	8008050 <quorem+0x10c>
 8007f52:	3c01      	subs	r4, #1
 8007f54:	f101 0814 	add.w	r8, r1, #20
 8007f58:	00a3      	lsls	r3, r4, #2
 8007f5a:	f100 0514 	add.w	r5, r0, #20
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	429a      	cmp	r2, r3
 8007f72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f76:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f7a:	d32e      	bcc.n	8007fda <quorem+0x96>
 8007f7c:	f04f 0a00 	mov.w	sl, #0
 8007f80:	46c4      	mov	ip, r8
 8007f82:	46ae      	mov	lr, r5
 8007f84:	46d3      	mov	fp, sl
 8007f86:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f8a:	b298      	uxth	r0, r3
 8007f8c:	fb06 a000 	mla	r0, r6, r0, sl
 8007f90:	0c02      	lsrs	r2, r0, #16
 8007f92:	0c1b      	lsrs	r3, r3, #16
 8007f94:	fb06 2303 	mla	r3, r6, r3, r2
 8007f98:	f8de 2000 	ldr.w	r2, [lr]
 8007f9c:	b280      	uxth	r0, r0
 8007f9e:	b292      	uxth	r2, r2
 8007fa0:	1a12      	subs	r2, r2, r0
 8007fa2:	445a      	add	r2, fp
 8007fa4:	f8de 0000 	ldr.w	r0, [lr]
 8007fa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fbc:	45e1      	cmp	r9, ip
 8007fbe:	f84e 2b04 	str.w	r2, [lr], #4
 8007fc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fc6:	d2de      	bcs.n	8007f86 <quorem+0x42>
 8007fc8:	9b00      	ldr	r3, [sp, #0]
 8007fca:	58eb      	ldr	r3, [r5, r3]
 8007fcc:	b92b      	cbnz	r3, 8007fda <quorem+0x96>
 8007fce:	9b01      	ldr	r3, [sp, #4]
 8007fd0:	3b04      	subs	r3, #4
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	d32f      	bcc.n	8008038 <quorem+0xf4>
 8007fd8:	613c      	str	r4, [r7, #16]
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f001 f9c4 	bl	8009368 <__mcmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	db25      	blt.n	8008030 <quorem+0xec>
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fec:	f8d1 c000 	ldr.w	ip, [r1]
 8007ff0:	fa1f fe82 	uxth.w	lr, r2
 8007ff4:	fa1f f38c 	uxth.w	r3, ip
 8007ff8:	eba3 030e 	sub.w	r3, r3, lr
 8007ffc:	4403      	add	r3, r0
 8007ffe:	0c12      	lsrs	r2, r2, #16
 8008000:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008004:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008008:	b29b      	uxth	r3, r3
 800800a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800800e:	45c1      	cmp	r9, r8
 8008010:	f841 3b04 	str.w	r3, [r1], #4
 8008014:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008018:	d2e6      	bcs.n	8007fe8 <quorem+0xa4>
 800801a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800801e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008022:	b922      	cbnz	r2, 800802e <quorem+0xea>
 8008024:	3b04      	subs	r3, #4
 8008026:	429d      	cmp	r5, r3
 8008028:	461a      	mov	r2, r3
 800802a:	d30b      	bcc.n	8008044 <quorem+0x100>
 800802c:	613c      	str	r4, [r7, #16]
 800802e:	3601      	adds	r6, #1
 8008030:	4630      	mov	r0, r6
 8008032:	b003      	add	sp, #12
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	6812      	ldr	r2, [r2, #0]
 800803a:	3b04      	subs	r3, #4
 800803c:	2a00      	cmp	r2, #0
 800803e:	d1cb      	bne.n	8007fd8 <quorem+0x94>
 8008040:	3c01      	subs	r4, #1
 8008042:	e7c6      	b.n	8007fd2 <quorem+0x8e>
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	3b04      	subs	r3, #4
 8008048:	2a00      	cmp	r2, #0
 800804a:	d1ef      	bne.n	800802c <quorem+0xe8>
 800804c:	3c01      	subs	r4, #1
 800804e:	e7ea      	b.n	8008026 <quorem+0xe2>
 8008050:	2000      	movs	r0, #0
 8008052:	e7ee      	b.n	8008032 <quorem+0xee>
 8008054:	0000      	movs	r0, r0
	...

08008058 <_dtoa_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	69c7      	ldr	r7, [r0, #28]
 800805e:	b099      	sub	sp, #100	@ 0x64
 8008060:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008064:	ec55 4b10 	vmov	r4, r5, d0
 8008068:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800806a:	9109      	str	r1, [sp, #36]	@ 0x24
 800806c:	4683      	mov	fp, r0
 800806e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008070:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008072:	b97f      	cbnz	r7, 8008094 <_dtoa_r+0x3c>
 8008074:	2010      	movs	r0, #16
 8008076:	f000 fdfd 	bl	8008c74 <malloc>
 800807a:	4602      	mov	r2, r0
 800807c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008080:	b920      	cbnz	r0, 800808c <_dtoa_r+0x34>
 8008082:	4ba7      	ldr	r3, [pc, #668]	@ (8008320 <_dtoa_r+0x2c8>)
 8008084:	21ef      	movs	r1, #239	@ 0xef
 8008086:	48a7      	ldr	r0, [pc, #668]	@ (8008324 <_dtoa_r+0x2cc>)
 8008088:	f002 ffb2 	bl	800aff0 <__assert_func>
 800808c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008090:	6007      	str	r7, [r0, #0]
 8008092:	60c7      	str	r7, [r0, #12]
 8008094:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008098:	6819      	ldr	r1, [r3, #0]
 800809a:	b159      	cbz	r1, 80080b4 <_dtoa_r+0x5c>
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	604a      	str	r2, [r1, #4]
 80080a0:	2301      	movs	r3, #1
 80080a2:	4093      	lsls	r3, r2
 80080a4:	608b      	str	r3, [r1, #8]
 80080a6:	4658      	mov	r0, fp
 80080a8:	f000 feda 	bl	8008e60 <_Bfree>
 80080ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	1e2b      	subs	r3, r5, #0
 80080b6:	bfb9      	ittee	lt
 80080b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080bc:	9303      	strlt	r3, [sp, #12]
 80080be:	2300      	movge	r3, #0
 80080c0:	6033      	strge	r3, [r6, #0]
 80080c2:	9f03      	ldr	r7, [sp, #12]
 80080c4:	4b98      	ldr	r3, [pc, #608]	@ (8008328 <_dtoa_r+0x2d0>)
 80080c6:	bfbc      	itt	lt
 80080c8:	2201      	movlt	r2, #1
 80080ca:	6032      	strlt	r2, [r6, #0]
 80080cc:	43bb      	bics	r3, r7
 80080ce:	d112      	bne.n	80080f6 <_dtoa_r+0x9e>
 80080d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80080d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080dc:	4323      	orrs	r3, r4
 80080de:	f000 854d 	beq.w	8008b7c <_dtoa_r+0xb24>
 80080e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800833c <_dtoa_r+0x2e4>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 854f 	beq.w	8008b8c <_dtoa_r+0xb34>
 80080ee:	f10a 0303 	add.w	r3, sl, #3
 80080f2:	f000 bd49 	b.w	8008b88 <_dtoa_r+0xb30>
 80080f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	ec51 0b17 	vmov	r0, r1, d7
 8008100:	2300      	movs	r3, #0
 8008102:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008106:	f7f8 fcef 	bl	8000ae8 <__aeabi_dcmpeq>
 800810a:	4680      	mov	r8, r0
 800810c:	b158      	cbz	r0, 8008126 <_dtoa_r+0xce>
 800810e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008110:	2301      	movs	r3, #1
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008116:	b113      	cbz	r3, 800811e <_dtoa_r+0xc6>
 8008118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800811a:	4b84      	ldr	r3, [pc, #528]	@ (800832c <_dtoa_r+0x2d4>)
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008340 <_dtoa_r+0x2e8>
 8008122:	f000 bd33 	b.w	8008b8c <_dtoa_r+0xb34>
 8008126:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800812a:	aa16      	add	r2, sp, #88	@ 0x58
 800812c:	a917      	add	r1, sp, #92	@ 0x5c
 800812e:	4658      	mov	r0, fp
 8008130:	f001 fa3a 	bl	80095a8 <__d2b>
 8008134:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008138:	4681      	mov	r9, r0
 800813a:	2e00      	cmp	r6, #0
 800813c:	d077      	beq.n	800822e <_dtoa_r+0x1d6>
 800813e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008140:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800814c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008150:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008154:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008158:	4619      	mov	r1, r3
 800815a:	2200      	movs	r2, #0
 800815c:	4b74      	ldr	r3, [pc, #464]	@ (8008330 <_dtoa_r+0x2d8>)
 800815e:	f7f8 f8a3 	bl	80002a8 <__aeabi_dsub>
 8008162:	a369      	add	r3, pc, #420	@ (adr r3, 8008308 <_dtoa_r+0x2b0>)
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f7f8 fa56 	bl	8000618 <__aeabi_dmul>
 800816c:	a368      	add	r3, pc, #416	@ (adr r3, 8008310 <_dtoa_r+0x2b8>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f7f8 f89b 	bl	80002ac <__adddf3>
 8008176:	4604      	mov	r4, r0
 8008178:	4630      	mov	r0, r6
 800817a:	460d      	mov	r5, r1
 800817c:	f7f8 f9e2 	bl	8000544 <__aeabi_i2d>
 8008180:	a365      	add	r3, pc, #404	@ (adr r3, 8008318 <_dtoa_r+0x2c0>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 fa47 	bl	8000618 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4620      	mov	r0, r4
 8008190:	4629      	mov	r1, r5
 8008192:	f7f8 f88b 	bl	80002ac <__adddf3>
 8008196:	4604      	mov	r4, r0
 8008198:	460d      	mov	r5, r1
 800819a:	f7f8 fced 	bl	8000b78 <__aeabi_d2iz>
 800819e:	2200      	movs	r2, #0
 80081a0:	4607      	mov	r7, r0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4620      	mov	r0, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7f8 fca8 	bl	8000afc <__aeabi_dcmplt>
 80081ac:	b140      	cbz	r0, 80081c0 <_dtoa_r+0x168>
 80081ae:	4638      	mov	r0, r7
 80081b0:	f7f8 f9c8 	bl	8000544 <__aeabi_i2d>
 80081b4:	4622      	mov	r2, r4
 80081b6:	462b      	mov	r3, r5
 80081b8:	f7f8 fc96 	bl	8000ae8 <__aeabi_dcmpeq>
 80081bc:	b900      	cbnz	r0, 80081c0 <_dtoa_r+0x168>
 80081be:	3f01      	subs	r7, #1
 80081c0:	2f16      	cmp	r7, #22
 80081c2:	d851      	bhi.n	8008268 <_dtoa_r+0x210>
 80081c4:	4b5b      	ldr	r3, [pc, #364]	@ (8008334 <_dtoa_r+0x2dc>)
 80081c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081d2:	f7f8 fc93 	bl	8000afc <__aeabi_dcmplt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d048      	beq.n	800826c <_dtoa_r+0x214>
 80081da:	3f01      	subs	r7, #1
 80081dc:	2300      	movs	r3, #0
 80081de:	9312      	str	r3, [sp, #72]	@ 0x48
 80081e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081e2:	1b9b      	subs	r3, r3, r6
 80081e4:	1e5a      	subs	r2, r3, #1
 80081e6:	bf44      	itt	mi
 80081e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80081ec:	2300      	movmi	r3, #0
 80081ee:	9208      	str	r2, [sp, #32]
 80081f0:	bf54      	ite	pl
 80081f2:	f04f 0800 	movpl.w	r8, #0
 80081f6:	9308      	strmi	r3, [sp, #32]
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	db39      	blt.n	8008270 <_dtoa_r+0x218>
 80081fc:	9b08      	ldr	r3, [sp, #32]
 80081fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008200:	443b      	add	r3, r7
 8008202:	9308      	str	r3, [sp, #32]
 8008204:	2300      	movs	r3, #0
 8008206:	930a      	str	r3, [sp, #40]	@ 0x28
 8008208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820a:	2b09      	cmp	r3, #9
 800820c:	d864      	bhi.n	80082d8 <_dtoa_r+0x280>
 800820e:	2b05      	cmp	r3, #5
 8008210:	bfc4      	itt	gt
 8008212:	3b04      	subgt	r3, #4
 8008214:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008218:	f1a3 0302 	sub.w	r3, r3, #2
 800821c:	bfcc      	ite	gt
 800821e:	2400      	movgt	r4, #0
 8008220:	2401      	movle	r4, #1
 8008222:	2b03      	cmp	r3, #3
 8008224:	d863      	bhi.n	80082ee <_dtoa_r+0x296>
 8008226:	e8df f003 	tbb	[pc, r3]
 800822a:	372a      	.short	0x372a
 800822c:	5535      	.short	0x5535
 800822e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008232:	441e      	add	r6, r3
 8008234:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008238:	2b20      	cmp	r3, #32
 800823a:	bfc1      	itttt	gt
 800823c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008240:	409f      	lslgt	r7, r3
 8008242:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008246:	fa24 f303 	lsrgt.w	r3, r4, r3
 800824a:	bfd6      	itet	le
 800824c:	f1c3 0320 	rsble	r3, r3, #32
 8008250:	ea47 0003 	orrgt.w	r0, r7, r3
 8008254:	fa04 f003 	lslle.w	r0, r4, r3
 8008258:	f7f8 f964 	bl	8000524 <__aeabi_ui2d>
 800825c:	2201      	movs	r2, #1
 800825e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008262:	3e01      	subs	r6, #1
 8008264:	9214      	str	r2, [sp, #80]	@ 0x50
 8008266:	e777      	b.n	8008158 <_dtoa_r+0x100>
 8008268:	2301      	movs	r3, #1
 800826a:	e7b8      	b.n	80081de <_dtoa_r+0x186>
 800826c:	9012      	str	r0, [sp, #72]	@ 0x48
 800826e:	e7b7      	b.n	80081e0 <_dtoa_r+0x188>
 8008270:	427b      	negs	r3, r7
 8008272:	930a      	str	r3, [sp, #40]	@ 0x28
 8008274:	2300      	movs	r3, #0
 8008276:	eba8 0807 	sub.w	r8, r8, r7
 800827a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800827c:	e7c4      	b.n	8008208 <_dtoa_r+0x1b0>
 800827e:	2300      	movs	r3, #0
 8008280:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008284:	2b00      	cmp	r3, #0
 8008286:	dc35      	bgt.n	80082f4 <_dtoa_r+0x29c>
 8008288:	2301      	movs	r3, #1
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	9307      	str	r3, [sp, #28]
 800828e:	461a      	mov	r2, r3
 8008290:	920e      	str	r2, [sp, #56]	@ 0x38
 8008292:	e00b      	b.n	80082ac <_dtoa_r+0x254>
 8008294:	2301      	movs	r3, #1
 8008296:	e7f3      	b.n	8008280 <_dtoa_r+0x228>
 8008298:	2300      	movs	r3, #0
 800829a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800829c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800829e:	18fb      	adds	r3, r7, r3
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	9307      	str	r3, [sp, #28]
 80082a8:	bfb8      	it	lt
 80082aa:	2301      	movlt	r3, #1
 80082ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80082b0:	2100      	movs	r1, #0
 80082b2:	2204      	movs	r2, #4
 80082b4:	f102 0514 	add.w	r5, r2, #20
 80082b8:	429d      	cmp	r5, r3
 80082ba:	d91f      	bls.n	80082fc <_dtoa_r+0x2a4>
 80082bc:	6041      	str	r1, [r0, #4]
 80082be:	4658      	mov	r0, fp
 80082c0:	f000 fd8e 	bl	8008de0 <_Balloc>
 80082c4:	4682      	mov	sl, r0
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d13c      	bne.n	8008344 <_dtoa_r+0x2ec>
 80082ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008338 <_dtoa_r+0x2e0>)
 80082cc:	4602      	mov	r2, r0
 80082ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80082d2:	e6d8      	b.n	8008086 <_dtoa_r+0x2e>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e7e0      	b.n	800829a <_dtoa_r+0x242>
 80082d8:	2401      	movs	r4, #1
 80082da:	2300      	movs	r3, #0
 80082dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	9307      	str	r3, [sp, #28]
 80082e8:	2200      	movs	r2, #0
 80082ea:	2312      	movs	r3, #18
 80082ec:	e7d0      	b.n	8008290 <_dtoa_r+0x238>
 80082ee:	2301      	movs	r3, #1
 80082f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082f2:	e7f5      	b.n	80082e0 <_dtoa_r+0x288>
 80082f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	9307      	str	r3, [sp, #28]
 80082fa:	e7d7      	b.n	80082ac <_dtoa_r+0x254>
 80082fc:	3101      	adds	r1, #1
 80082fe:	0052      	lsls	r2, r2, #1
 8008300:	e7d8      	b.n	80082b4 <_dtoa_r+0x25c>
 8008302:	bf00      	nop
 8008304:	f3af 8000 	nop.w
 8008308:	636f4361 	.word	0x636f4361
 800830c:	3fd287a7 	.word	0x3fd287a7
 8008310:	8b60c8b3 	.word	0x8b60c8b3
 8008314:	3fc68a28 	.word	0x3fc68a28
 8008318:	509f79fb 	.word	0x509f79fb
 800831c:	3fd34413 	.word	0x3fd34413
 8008320:	0800bec4 	.word	0x0800bec4
 8008324:	0800bedb 	.word	0x0800bedb
 8008328:	7ff00000 	.word	0x7ff00000
 800832c:	0800c221 	.word	0x0800c221
 8008330:	3ff80000 	.word	0x3ff80000
 8008334:	0800bfd8 	.word	0x0800bfd8
 8008338:	0800bf33 	.word	0x0800bf33
 800833c:	0800bec0 	.word	0x0800bec0
 8008340:	0800c220 	.word	0x0800c220
 8008344:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008348:	6018      	str	r0, [r3, #0]
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	2b0e      	cmp	r3, #14
 800834e:	f200 80a4 	bhi.w	800849a <_dtoa_r+0x442>
 8008352:	2c00      	cmp	r4, #0
 8008354:	f000 80a1 	beq.w	800849a <_dtoa_r+0x442>
 8008358:	2f00      	cmp	r7, #0
 800835a:	dd33      	ble.n	80083c4 <_dtoa_r+0x36c>
 800835c:	4bad      	ldr	r3, [pc, #692]	@ (8008614 <_dtoa_r+0x5bc>)
 800835e:	f007 020f 	and.w	r2, r7, #15
 8008362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008366:	ed93 7b00 	vldr	d7, [r3]
 800836a:	05f8      	lsls	r0, r7, #23
 800836c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008370:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008374:	d516      	bpl.n	80083a4 <_dtoa_r+0x34c>
 8008376:	4ba8      	ldr	r3, [pc, #672]	@ (8008618 <_dtoa_r+0x5c0>)
 8008378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800837c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008380:	f7f8 fa74 	bl	800086c <__aeabi_ddiv>
 8008384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008388:	f004 040f 	and.w	r4, r4, #15
 800838c:	2603      	movs	r6, #3
 800838e:	4da2      	ldr	r5, [pc, #648]	@ (8008618 <_dtoa_r+0x5c0>)
 8008390:	b954      	cbnz	r4, 80083a8 <_dtoa_r+0x350>
 8008392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800839a:	f7f8 fa67 	bl	800086c <__aeabi_ddiv>
 800839e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a2:	e028      	b.n	80083f6 <_dtoa_r+0x39e>
 80083a4:	2602      	movs	r6, #2
 80083a6:	e7f2      	b.n	800838e <_dtoa_r+0x336>
 80083a8:	07e1      	lsls	r1, r4, #31
 80083aa:	d508      	bpl.n	80083be <_dtoa_r+0x366>
 80083ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083b4:	f7f8 f930 	bl	8000618 <__aeabi_dmul>
 80083b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083bc:	3601      	adds	r6, #1
 80083be:	1064      	asrs	r4, r4, #1
 80083c0:	3508      	adds	r5, #8
 80083c2:	e7e5      	b.n	8008390 <_dtoa_r+0x338>
 80083c4:	f000 80d2 	beq.w	800856c <_dtoa_r+0x514>
 80083c8:	427c      	negs	r4, r7
 80083ca:	4b92      	ldr	r3, [pc, #584]	@ (8008614 <_dtoa_r+0x5bc>)
 80083cc:	4d92      	ldr	r5, [pc, #584]	@ (8008618 <_dtoa_r+0x5c0>)
 80083ce:	f004 020f 	and.w	r2, r4, #15
 80083d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083de:	f7f8 f91b 	bl	8000618 <__aeabi_dmul>
 80083e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e6:	1124      	asrs	r4, r4, #4
 80083e8:	2300      	movs	r3, #0
 80083ea:	2602      	movs	r6, #2
 80083ec:	2c00      	cmp	r4, #0
 80083ee:	f040 80b2 	bne.w	8008556 <_dtoa_r+0x4fe>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1d3      	bne.n	800839e <_dtoa_r+0x346>
 80083f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 80b7 	beq.w	8008570 <_dtoa_r+0x518>
 8008402:	4b86      	ldr	r3, [pc, #536]	@ (800861c <_dtoa_r+0x5c4>)
 8008404:	2200      	movs	r2, #0
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 fb77 	bl	8000afc <__aeabi_dcmplt>
 800840e:	2800      	cmp	r0, #0
 8008410:	f000 80ae 	beq.w	8008570 <_dtoa_r+0x518>
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80aa 	beq.w	8008570 <_dtoa_r+0x518>
 800841c:	9b00      	ldr	r3, [sp, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	dd37      	ble.n	8008492 <_dtoa_r+0x43a>
 8008422:	1e7b      	subs	r3, r7, #1
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	4620      	mov	r0, r4
 8008428:	4b7d      	ldr	r3, [pc, #500]	@ (8008620 <_dtoa_r+0x5c8>)
 800842a:	2200      	movs	r2, #0
 800842c:	4629      	mov	r1, r5
 800842e:	f7f8 f8f3 	bl	8000618 <__aeabi_dmul>
 8008432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008436:	9c00      	ldr	r4, [sp, #0]
 8008438:	3601      	adds	r6, #1
 800843a:	4630      	mov	r0, r6
 800843c:	f7f8 f882 	bl	8000544 <__aeabi_i2d>
 8008440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008444:	f7f8 f8e8 	bl	8000618 <__aeabi_dmul>
 8008448:	4b76      	ldr	r3, [pc, #472]	@ (8008624 <_dtoa_r+0x5cc>)
 800844a:	2200      	movs	r2, #0
 800844c:	f7f7 ff2e 	bl	80002ac <__adddf3>
 8008450:	4605      	mov	r5, r0
 8008452:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008456:	2c00      	cmp	r4, #0
 8008458:	f040 808d 	bne.w	8008576 <_dtoa_r+0x51e>
 800845c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008460:	4b71      	ldr	r3, [pc, #452]	@ (8008628 <_dtoa_r+0x5d0>)
 8008462:	2200      	movs	r2, #0
 8008464:	f7f7 ff20 	bl	80002a8 <__aeabi_dsub>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008470:	462a      	mov	r2, r5
 8008472:	4633      	mov	r3, r6
 8008474:	f7f8 fb60 	bl	8000b38 <__aeabi_dcmpgt>
 8008478:	2800      	cmp	r0, #0
 800847a:	f040 828b 	bne.w	8008994 <_dtoa_r+0x93c>
 800847e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008482:	462a      	mov	r2, r5
 8008484:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008488:	f7f8 fb38 	bl	8000afc <__aeabi_dcmplt>
 800848c:	2800      	cmp	r0, #0
 800848e:	f040 8128 	bne.w	80086e2 <_dtoa_r+0x68a>
 8008492:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008496:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800849a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800849c:	2b00      	cmp	r3, #0
 800849e:	f2c0 815a 	blt.w	8008756 <_dtoa_r+0x6fe>
 80084a2:	2f0e      	cmp	r7, #14
 80084a4:	f300 8157 	bgt.w	8008756 <_dtoa_r+0x6fe>
 80084a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008614 <_dtoa_r+0x5bc>)
 80084aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084ae:	ed93 7b00 	vldr	d7, [r3]
 80084b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	ed8d 7b00 	vstr	d7, [sp]
 80084ba:	da03      	bge.n	80084c4 <_dtoa_r+0x46c>
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f340 8101 	ble.w	80086c6 <_dtoa_r+0x66e>
 80084c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084c8:	4656      	mov	r6, sl
 80084ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 f9cb 	bl	800086c <__aeabi_ddiv>
 80084d6:	f7f8 fb4f 	bl	8000b78 <__aeabi_d2iz>
 80084da:	4680      	mov	r8, r0
 80084dc:	f7f8 f832 	bl	8000544 <__aeabi_i2d>
 80084e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084e4:	f7f8 f898 	bl	8000618 <__aeabi_dmul>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4620      	mov	r0, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084f4:	f7f7 fed8 	bl	80002a8 <__aeabi_dsub>
 80084f8:	f806 4b01 	strb.w	r4, [r6], #1
 80084fc:	9d07      	ldr	r5, [sp, #28]
 80084fe:	eba6 040a 	sub.w	r4, r6, sl
 8008502:	42a5      	cmp	r5, r4
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	f040 8117 	bne.w	800873a <_dtoa_r+0x6e2>
 800850c:	f7f7 fece 	bl	80002ac <__adddf3>
 8008510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008514:	4604      	mov	r4, r0
 8008516:	460d      	mov	r5, r1
 8008518:	f7f8 fb0e 	bl	8000b38 <__aeabi_dcmpgt>
 800851c:	2800      	cmp	r0, #0
 800851e:	f040 80f9 	bne.w	8008714 <_dtoa_r+0x6bc>
 8008522:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f7f8 fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 800852e:	b118      	cbz	r0, 8008538 <_dtoa_r+0x4e0>
 8008530:	f018 0f01 	tst.w	r8, #1
 8008534:	f040 80ee 	bne.w	8008714 <_dtoa_r+0x6bc>
 8008538:	4649      	mov	r1, r9
 800853a:	4658      	mov	r0, fp
 800853c:	f000 fc90 	bl	8008e60 <_Bfree>
 8008540:	2300      	movs	r3, #0
 8008542:	7033      	strb	r3, [r6, #0]
 8008544:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008546:	3701      	adds	r7, #1
 8008548:	601f      	str	r7, [r3, #0]
 800854a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 831d 	beq.w	8008b8c <_dtoa_r+0xb34>
 8008552:	601e      	str	r6, [r3, #0]
 8008554:	e31a      	b.n	8008b8c <_dtoa_r+0xb34>
 8008556:	07e2      	lsls	r2, r4, #31
 8008558:	d505      	bpl.n	8008566 <_dtoa_r+0x50e>
 800855a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800855e:	f7f8 f85b 	bl	8000618 <__aeabi_dmul>
 8008562:	3601      	adds	r6, #1
 8008564:	2301      	movs	r3, #1
 8008566:	1064      	asrs	r4, r4, #1
 8008568:	3508      	adds	r5, #8
 800856a:	e73f      	b.n	80083ec <_dtoa_r+0x394>
 800856c:	2602      	movs	r6, #2
 800856e:	e742      	b.n	80083f6 <_dtoa_r+0x39e>
 8008570:	9c07      	ldr	r4, [sp, #28]
 8008572:	9704      	str	r7, [sp, #16]
 8008574:	e761      	b.n	800843a <_dtoa_r+0x3e2>
 8008576:	4b27      	ldr	r3, [pc, #156]	@ (8008614 <_dtoa_r+0x5bc>)
 8008578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800857a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800857e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008582:	4454      	add	r4, sl
 8008584:	2900      	cmp	r1, #0
 8008586:	d053      	beq.n	8008630 <_dtoa_r+0x5d8>
 8008588:	4928      	ldr	r1, [pc, #160]	@ (800862c <_dtoa_r+0x5d4>)
 800858a:	2000      	movs	r0, #0
 800858c:	f7f8 f96e 	bl	800086c <__aeabi_ddiv>
 8008590:	4633      	mov	r3, r6
 8008592:	462a      	mov	r2, r5
 8008594:	f7f7 fe88 	bl	80002a8 <__aeabi_dsub>
 8008598:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800859c:	4656      	mov	r6, sl
 800859e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a2:	f7f8 fae9 	bl	8000b78 <__aeabi_d2iz>
 80085a6:	4605      	mov	r5, r0
 80085a8:	f7f7 ffcc 	bl	8000544 <__aeabi_i2d>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085b4:	f7f7 fe78 	bl	80002a8 <__aeabi_dsub>
 80085b8:	3530      	adds	r5, #48	@ 0x30
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085c2:	f806 5b01 	strb.w	r5, [r6], #1
 80085c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085ca:	f7f8 fa97 	bl	8000afc <__aeabi_dcmplt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d171      	bne.n	80086b6 <_dtoa_r+0x65e>
 80085d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d6:	4911      	ldr	r1, [pc, #68]	@ (800861c <_dtoa_r+0x5c4>)
 80085d8:	2000      	movs	r0, #0
 80085da:	f7f7 fe65 	bl	80002a8 <__aeabi_dsub>
 80085de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085e2:	f7f8 fa8b 	bl	8000afc <__aeabi_dcmplt>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f040 8095 	bne.w	8008716 <_dtoa_r+0x6be>
 80085ec:	42a6      	cmp	r6, r4
 80085ee:	f43f af50 	beq.w	8008492 <_dtoa_r+0x43a>
 80085f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008620 <_dtoa_r+0x5c8>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	f7f8 f80d 	bl	8000618 <__aeabi_dmul>
 80085fe:	4b08      	ldr	r3, [pc, #32]	@ (8008620 <_dtoa_r+0x5c8>)
 8008600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008604:	2200      	movs	r2, #0
 8008606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860a:	f7f8 f805 	bl	8000618 <__aeabi_dmul>
 800860e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008612:	e7c4      	b.n	800859e <_dtoa_r+0x546>
 8008614:	0800bfd8 	.word	0x0800bfd8
 8008618:	0800bfb0 	.word	0x0800bfb0
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	40240000 	.word	0x40240000
 8008624:	401c0000 	.word	0x401c0000
 8008628:	40140000 	.word	0x40140000
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	f7f7 fff0 	bl	8000618 <__aeabi_dmul>
 8008638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800863c:	9415      	str	r4, [sp, #84]	@ 0x54
 800863e:	4656      	mov	r6, sl
 8008640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008644:	f7f8 fa98 	bl	8000b78 <__aeabi_d2iz>
 8008648:	4605      	mov	r5, r0
 800864a:	f7f7 ff7b 	bl	8000544 <__aeabi_i2d>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008656:	f7f7 fe27 	bl	80002a8 <__aeabi_dsub>
 800865a:	3530      	adds	r5, #48	@ 0x30
 800865c:	f806 5b01 	strb.w	r5, [r6], #1
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	42a6      	cmp	r6, r4
 8008666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	d124      	bne.n	80086ba <_dtoa_r+0x662>
 8008670:	4bac      	ldr	r3, [pc, #688]	@ (8008924 <_dtoa_r+0x8cc>)
 8008672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008676:	f7f7 fe19 	bl	80002ac <__adddf3>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008682:	f7f8 fa59 	bl	8000b38 <__aeabi_dcmpgt>
 8008686:	2800      	cmp	r0, #0
 8008688:	d145      	bne.n	8008716 <_dtoa_r+0x6be>
 800868a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800868e:	49a5      	ldr	r1, [pc, #660]	@ (8008924 <_dtoa_r+0x8cc>)
 8008690:	2000      	movs	r0, #0
 8008692:	f7f7 fe09 	bl	80002a8 <__aeabi_dsub>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800869e:	f7f8 fa2d 	bl	8000afc <__aeabi_dcmplt>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	f43f aef5 	beq.w	8008492 <_dtoa_r+0x43a>
 80086a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80086aa:	1e73      	subs	r3, r6, #1
 80086ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80086ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086b2:	2b30      	cmp	r3, #48	@ 0x30
 80086b4:	d0f8      	beq.n	80086a8 <_dtoa_r+0x650>
 80086b6:	9f04      	ldr	r7, [sp, #16]
 80086b8:	e73e      	b.n	8008538 <_dtoa_r+0x4e0>
 80086ba:	4b9b      	ldr	r3, [pc, #620]	@ (8008928 <_dtoa_r+0x8d0>)
 80086bc:	f7f7 ffac 	bl	8000618 <__aeabi_dmul>
 80086c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c4:	e7bc      	b.n	8008640 <_dtoa_r+0x5e8>
 80086c6:	d10c      	bne.n	80086e2 <_dtoa_r+0x68a>
 80086c8:	4b98      	ldr	r3, [pc, #608]	@ (800892c <_dtoa_r+0x8d4>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086d0:	f7f7 ffa2 	bl	8000618 <__aeabi_dmul>
 80086d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d8:	f7f8 fa24 	bl	8000b24 <__aeabi_dcmpge>
 80086dc:	2800      	cmp	r0, #0
 80086de:	f000 8157 	beq.w	8008990 <_dtoa_r+0x938>
 80086e2:	2400      	movs	r4, #0
 80086e4:	4625      	mov	r5, r4
 80086e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086e8:	43db      	mvns	r3, r3
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	4656      	mov	r6, sl
 80086ee:	2700      	movs	r7, #0
 80086f0:	4621      	mov	r1, r4
 80086f2:	4658      	mov	r0, fp
 80086f4:	f000 fbb4 	bl	8008e60 <_Bfree>
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	d0dc      	beq.n	80086b6 <_dtoa_r+0x65e>
 80086fc:	b12f      	cbz	r7, 800870a <_dtoa_r+0x6b2>
 80086fe:	42af      	cmp	r7, r5
 8008700:	d003      	beq.n	800870a <_dtoa_r+0x6b2>
 8008702:	4639      	mov	r1, r7
 8008704:	4658      	mov	r0, fp
 8008706:	f000 fbab 	bl	8008e60 <_Bfree>
 800870a:	4629      	mov	r1, r5
 800870c:	4658      	mov	r0, fp
 800870e:	f000 fba7 	bl	8008e60 <_Bfree>
 8008712:	e7d0      	b.n	80086b6 <_dtoa_r+0x65e>
 8008714:	9704      	str	r7, [sp, #16]
 8008716:	4633      	mov	r3, r6
 8008718:	461e      	mov	r6, r3
 800871a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800871e:	2a39      	cmp	r2, #57	@ 0x39
 8008720:	d107      	bne.n	8008732 <_dtoa_r+0x6da>
 8008722:	459a      	cmp	sl, r3
 8008724:	d1f8      	bne.n	8008718 <_dtoa_r+0x6c0>
 8008726:	9a04      	ldr	r2, [sp, #16]
 8008728:	3201      	adds	r2, #1
 800872a:	9204      	str	r2, [sp, #16]
 800872c:	2230      	movs	r2, #48	@ 0x30
 800872e:	f88a 2000 	strb.w	r2, [sl]
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	3201      	adds	r2, #1
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	e7bd      	b.n	80086b6 <_dtoa_r+0x65e>
 800873a:	4b7b      	ldr	r3, [pc, #492]	@ (8008928 <_dtoa_r+0x8d0>)
 800873c:	2200      	movs	r2, #0
 800873e:	f7f7 ff6b 	bl	8000618 <__aeabi_dmul>
 8008742:	2200      	movs	r2, #0
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	460d      	mov	r5, r1
 800874a:	f7f8 f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f aebb 	beq.w	80084ca <_dtoa_r+0x472>
 8008754:	e6f0      	b.n	8008538 <_dtoa_r+0x4e0>
 8008756:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008758:	2a00      	cmp	r2, #0
 800875a:	f000 80db 	beq.w	8008914 <_dtoa_r+0x8bc>
 800875e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008760:	2a01      	cmp	r2, #1
 8008762:	f300 80bf 	bgt.w	80088e4 <_dtoa_r+0x88c>
 8008766:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008768:	2a00      	cmp	r2, #0
 800876a:	f000 80b7 	beq.w	80088dc <_dtoa_r+0x884>
 800876e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008772:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008774:	4646      	mov	r6, r8
 8008776:	9a08      	ldr	r2, [sp, #32]
 8008778:	2101      	movs	r1, #1
 800877a:	441a      	add	r2, r3
 800877c:	4658      	mov	r0, fp
 800877e:	4498      	add	r8, r3
 8008780:	9208      	str	r2, [sp, #32]
 8008782:	f000 fc6b 	bl	800905c <__i2b>
 8008786:	4605      	mov	r5, r0
 8008788:	b15e      	cbz	r6, 80087a2 <_dtoa_r+0x74a>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dd08      	ble.n	80087a2 <_dtoa_r+0x74a>
 8008790:	42b3      	cmp	r3, r6
 8008792:	9a08      	ldr	r2, [sp, #32]
 8008794:	bfa8      	it	ge
 8008796:	4633      	movge	r3, r6
 8008798:	eba8 0803 	sub.w	r8, r8, r3
 800879c:	1af6      	subs	r6, r6, r3
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	9308      	str	r3, [sp, #32]
 80087a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087a4:	b1f3      	cbz	r3, 80087e4 <_dtoa_r+0x78c>
 80087a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 80b7 	beq.w	800891c <_dtoa_r+0x8c4>
 80087ae:	b18c      	cbz	r4, 80087d4 <_dtoa_r+0x77c>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4622      	mov	r2, r4
 80087b4:	4658      	mov	r0, fp
 80087b6:	f000 fd11 	bl	80091dc <__pow5mult>
 80087ba:	464a      	mov	r2, r9
 80087bc:	4601      	mov	r1, r0
 80087be:	4605      	mov	r5, r0
 80087c0:	4658      	mov	r0, fp
 80087c2:	f000 fc61 	bl	8009088 <__multiply>
 80087c6:	4649      	mov	r1, r9
 80087c8:	9004      	str	r0, [sp, #16]
 80087ca:	4658      	mov	r0, fp
 80087cc:	f000 fb48 	bl	8008e60 <_Bfree>
 80087d0:	9b04      	ldr	r3, [sp, #16]
 80087d2:	4699      	mov	r9, r3
 80087d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087d6:	1b1a      	subs	r2, r3, r4
 80087d8:	d004      	beq.n	80087e4 <_dtoa_r+0x78c>
 80087da:	4649      	mov	r1, r9
 80087dc:	4658      	mov	r0, fp
 80087de:	f000 fcfd 	bl	80091dc <__pow5mult>
 80087e2:	4681      	mov	r9, r0
 80087e4:	2101      	movs	r1, #1
 80087e6:	4658      	mov	r0, fp
 80087e8:	f000 fc38 	bl	800905c <__i2b>
 80087ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087ee:	4604      	mov	r4, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 81cf 	beq.w	8008b94 <_dtoa_r+0xb3c>
 80087f6:	461a      	mov	r2, r3
 80087f8:	4601      	mov	r1, r0
 80087fa:	4658      	mov	r0, fp
 80087fc:	f000 fcee 	bl	80091dc <__pow5mult>
 8008800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008802:	2b01      	cmp	r3, #1
 8008804:	4604      	mov	r4, r0
 8008806:	f300 8095 	bgt.w	8008934 <_dtoa_r+0x8dc>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 8087 	bne.w	8008920 <_dtoa_r+0x8c8>
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008818:	2b00      	cmp	r3, #0
 800881a:	f040 8089 	bne.w	8008930 <_dtoa_r+0x8d8>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008824:	0d1b      	lsrs	r3, r3, #20
 8008826:	051b      	lsls	r3, r3, #20
 8008828:	b12b      	cbz	r3, 8008836 <_dtoa_r+0x7de>
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	3301      	adds	r3, #1
 800882e:	9308      	str	r3, [sp, #32]
 8008830:	f108 0801 	add.w	r8, r8, #1
 8008834:	2301      	movs	r3, #1
 8008836:	930a      	str	r3, [sp, #40]	@ 0x28
 8008838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 81b0 	beq.w	8008ba0 <_dtoa_r+0xb48>
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008846:	6918      	ldr	r0, [r3, #16]
 8008848:	f000 fbbc 	bl	8008fc4 <__hi0bits>
 800884c:	f1c0 0020 	rsb	r0, r0, #32
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	4418      	add	r0, r3
 8008854:	f010 001f 	ands.w	r0, r0, #31
 8008858:	d077      	beq.n	800894a <_dtoa_r+0x8f2>
 800885a:	f1c0 0320 	rsb	r3, r0, #32
 800885e:	2b04      	cmp	r3, #4
 8008860:	dd6b      	ble.n	800893a <_dtoa_r+0x8e2>
 8008862:	9b08      	ldr	r3, [sp, #32]
 8008864:	f1c0 001c 	rsb	r0, r0, #28
 8008868:	4403      	add	r3, r0
 800886a:	4480      	add	r8, r0
 800886c:	4406      	add	r6, r0
 800886e:	9308      	str	r3, [sp, #32]
 8008870:	f1b8 0f00 	cmp.w	r8, #0
 8008874:	dd05      	ble.n	8008882 <_dtoa_r+0x82a>
 8008876:	4649      	mov	r1, r9
 8008878:	4642      	mov	r2, r8
 800887a:	4658      	mov	r0, fp
 800887c:	f000 fd08 	bl	8009290 <__lshift>
 8008880:	4681      	mov	r9, r0
 8008882:	9b08      	ldr	r3, [sp, #32]
 8008884:	2b00      	cmp	r3, #0
 8008886:	dd05      	ble.n	8008894 <_dtoa_r+0x83c>
 8008888:	4621      	mov	r1, r4
 800888a:	461a      	mov	r2, r3
 800888c:	4658      	mov	r0, fp
 800888e:	f000 fcff 	bl	8009290 <__lshift>
 8008892:	4604      	mov	r4, r0
 8008894:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008896:	2b00      	cmp	r3, #0
 8008898:	d059      	beq.n	800894e <_dtoa_r+0x8f6>
 800889a:	4621      	mov	r1, r4
 800889c:	4648      	mov	r0, r9
 800889e:	f000 fd63 	bl	8009368 <__mcmp>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	da53      	bge.n	800894e <_dtoa_r+0x8f6>
 80088a6:	1e7b      	subs	r3, r7, #1
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	4649      	mov	r1, r9
 80088ac:	2300      	movs	r3, #0
 80088ae:	220a      	movs	r2, #10
 80088b0:	4658      	mov	r0, fp
 80088b2:	f000 faf7 	bl	8008ea4 <__multadd>
 80088b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088b8:	4681      	mov	r9, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8172 	beq.w	8008ba4 <_dtoa_r+0xb4c>
 80088c0:	2300      	movs	r3, #0
 80088c2:	4629      	mov	r1, r5
 80088c4:	220a      	movs	r2, #10
 80088c6:	4658      	mov	r0, fp
 80088c8:	f000 faec 	bl	8008ea4 <__multadd>
 80088cc:	9b00      	ldr	r3, [sp, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	4605      	mov	r5, r0
 80088d2:	dc67      	bgt.n	80089a4 <_dtoa_r+0x94c>
 80088d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	dc41      	bgt.n	800895e <_dtoa_r+0x906>
 80088da:	e063      	b.n	80089a4 <_dtoa_r+0x94c>
 80088dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80088de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088e2:	e746      	b.n	8008772 <_dtoa_r+0x71a>
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	1e5c      	subs	r4, r3, #1
 80088e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	bfbf      	itttt	lt
 80088ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80088f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80088f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80088f4:	1ae3      	sublt	r3, r4, r3
 80088f6:	bfb4      	ite	lt
 80088f8:	18d2      	addlt	r2, r2, r3
 80088fa:	1b1c      	subge	r4, r3, r4
 80088fc:	9b07      	ldr	r3, [sp, #28]
 80088fe:	bfbc      	itt	lt
 8008900:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008902:	2400      	movlt	r4, #0
 8008904:	2b00      	cmp	r3, #0
 8008906:	bfb5      	itete	lt
 8008908:	eba8 0603 	sublt.w	r6, r8, r3
 800890c:	9b07      	ldrge	r3, [sp, #28]
 800890e:	2300      	movlt	r3, #0
 8008910:	4646      	movge	r6, r8
 8008912:	e730      	b.n	8008776 <_dtoa_r+0x71e>
 8008914:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008916:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008918:	4646      	mov	r6, r8
 800891a:	e735      	b.n	8008788 <_dtoa_r+0x730>
 800891c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800891e:	e75c      	b.n	80087da <_dtoa_r+0x782>
 8008920:	2300      	movs	r3, #0
 8008922:	e788      	b.n	8008836 <_dtoa_r+0x7de>
 8008924:	3fe00000 	.word	0x3fe00000
 8008928:	40240000 	.word	0x40240000
 800892c:	40140000 	.word	0x40140000
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	e780      	b.n	8008836 <_dtoa_r+0x7de>
 8008934:	2300      	movs	r3, #0
 8008936:	930a      	str	r3, [sp, #40]	@ 0x28
 8008938:	e782      	b.n	8008840 <_dtoa_r+0x7e8>
 800893a:	d099      	beq.n	8008870 <_dtoa_r+0x818>
 800893c:	9a08      	ldr	r2, [sp, #32]
 800893e:	331c      	adds	r3, #28
 8008940:	441a      	add	r2, r3
 8008942:	4498      	add	r8, r3
 8008944:	441e      	add	r6, r3
 8008946:	9208      	str	r2, [sp, #32]
 8008948:	e792      	b.n	8008870 <_dtoa_r+0x818>
 800894a:	4603      	mov	r3, r0
 800894c:	e7f6      	b.n	800893c <_dtoa_r+0x8e4>
 800894e:	9b07      	ldr	r3, [sp, #28]
 8008950:	9704      	str	r7, [sp, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	dc20      	bgt.n	8008998 <_dtoa_r+0x940>
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895a:	2b02      	cmp	r3, #2
 800895c:	dd1e      	ble.n	800899c <_dtoa_r+0x944>
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f47f aec0 	bne.w	80086e6 <_dtoa_r+0x68e>
 8008966:	4621      	mov	r1, r4
 8008968:	2205      	movs	r2, #5
 800896a:	4658      	mov	r0, fp
 800896c:	f000 fa9a 	bl	8008ea4 <__multadd>
 8008970:	4601      	mov	r1, r0
 8008972:	4604      	mov	r4, r0
 8008974:	4648      	mov	r0, r9
 8008976:	f000 fcf7 	bl	8009368 <__mcmp>
 800897a:	2800      	cmp	r0, #0
 800897c:	f77f aeb3 	ble.w	80086e6 <_dtoa_r+0x68e>
 8008980:	4656      	mov	r6, sl
 8008982:	2331      	movs	r3, #49	@ 0x31
 8008984:	f806 3b01 	strb.w	r3, [r6], #1
 8008988:	9b04      	ldr	r3, [sp, #16]
 800898a:	3301      	adds	r3, #1
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	e6ae      	b.n	80086ee <_dtoa_r+0x696>
 8008990:	9c07      	ldr	r4, [sp, #28]
 8008992:	9704      	str	r7, [sp, #16]
 8008994:	4625      	mov	r5, r4
 8008996:	e7f3      	b.n	8008980 <_dtoa_r+0x928>
 8008998:	9b07      	ldr	r3, [sp, #28]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8104 	beq.w	8008bac <_dtoa_r+0xb54>
 80089a4:	2e00      	cmp	r6, #0
 80089a6:	dd05      	ble.n	80089b4 <_dtoa_r+0x95c>
 80089a8:	4629      	mov	r1, r5
 80089aa:	4632      	mov	r2, r6
 80089ac:	4658      	mov	r0, fp
 80089ae:	f000 fc6f 	bl	8009290 <__lshift>
 80089b2:	4605      	mov	r5, r0
 80089b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d05a      	beq.n	8008a70 <_dtoa_r+0xa18>
 80089ba:	6869      	ldr	r1, [r5, #4]
 80089bc:	4658      	mov	r0, fp
 80089be:	f000 fa0f 	bl	8008de0 <_Balloc>
 80089c2:	4606      	mov	r6, r0
 80089c4:	b928      	cbnz	r0, 80089d2 <_dtoa_r+0x97a>
 80089c6:	4b84      	ldr	r3, [pc, #528]	@ (8008bd8 <_dtoa_r+0xb80>)
 80089c8:	4602      	mov	r2, r0
 80089ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089ce:	f7ff bb5a 	b.w	8008086 <_dtoa_r+0x2e>
 80089d2:	692a      	ldr	r2, [r5, #16]
 80089d4:	3202      	adds	r2, #2
 80089d6:	0092      	lsls	r2, r2, #2
 80089d8:	f105 010c 	add.w	r1, r5, #12
 80089dc:	300c      	adds	r0, #12
 80089de:	f002 faf1 	bl	800afc4 <memcpy>
 80089e2:	2201      	movs	r2, #1
 80089e4:	4631      	mov	r1, r6
 80089e6:	4658      	mov	r0, fp
 80089e8:	f000 fc52 	bl	8009290 <__lshift>
 80089ec:	f10a 0301 	add.w	r3, sl, #1
 80089f0:	9307      	str	r3, [sp, #28]
 80089f2:	9b00      	ldr	r3, [sp, #0]
 80089f4:	4453      	add	r3, sl
 80089f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	462f      	mov	r7, r5
 8008a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a02:	4605      	mov	r5, r0
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	4621      	mov	r1, r4
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	f7ff fa99 	bl	8007f44 <quorem>
 8008a12:	4639      	mov	r1, r7
 8008a14:	9002      	str	r0, [sp, #8]
 8008a16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a1a:	4648      	mov	r0, r9
 8008a1c:	f000 fca4 	bl	8009368 <__mcmp>
 8008a20:	462a      	mov	r2, r5
 8008a22:	9008      	str	r0, [sp, #32]
 8008a24:	4621      	mov	r1, r4
 8008a26:	4658      	mov	r0, fp
 8008a28:	f000 fcba 	bl	80093a0 <__mdiff>
 8008a2c:	68c2      	ldr	r2, [r0, #12]
 8008a2e:	4606      	mov	r6, r0
 8008a30:	bb02      	cbnz	r2, 8008a74 <_dtoa_r+0xa1c>
 8008a32:	4601      	mov	r1, r0
 8008a34:	4648      	mov	r0, r9
 8008a36:	f000 fc97 	bl	8009368 <__mcmp>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4658      	mov	r0, fp
 8008a40:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a42:	f000 fa0d 	bl	8008e60 <_Bfree>
 8008a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a4a:	9e07      	ldr	r6, [sp, #28]
 8008a4c:	ea43 0102 	orr.w	r1, r3, r2
 8008a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a52:	4319      	orrs	r1, r3
 8008a54:	d110      	bne.n	8008a78 <_dtoa_r+0xa20>
 8008a56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a5a:	d029      	beq.n	8008ab0 <_dtoa_r+0xa58>
 8008a5c:	9b08      	ldr	r3, [sp, #32]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	dd02      	ble.n	8008a68 <_dtoa_r+0xa10>
 8008a62:	9b02      	ldr	r3, [sp, #8]
 8008a64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a68:	9b00      	ldr	r3, [sp, #0]
 8008a6a:	f883 8000 	strb.w	r8, [r3]
 8008a6e:	e63f      	b.n	80086f0 <_dtoa_r+0x698>
 8008a70:	4628      	mov	r0, r5
 8008a72:	e7bb      	b.n	80089ec <_dtoa_r+0x994>
 8008a74:	2201      	movs	r2, #1
 8008a76:	e7e1      	b.n	8008a3c <_dtoa_r+0x9e4>
 8008a78:	9b08      	ldr	r3, [sp, #32]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	db04      	blt.n	8008a88 <_dtoa_r+0xa30>
 8008a7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a80:	430b      	orrs	r3, r1
 8008a82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a84:	430b      	orrs	r3, r1
 8008a86:	d120      	bne.n	8008aca <_dtoa_r+0xa72>
 8008a88:	2a00      	cmp	r2, #0
 8008a8a:	dded      	ble.n	8008a68 <_dtoa_r+0xa10>
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	2201      	movs	r2, #1
 8008a90:	4658      	mov	r0, fp
 8008a92:	f000 fbfd 	bl	8009290 <__lshift>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4681      	mov	r9, r0
 8008a9a:	f000 fc65 	bl	8009368 <__mcmp>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	dc03      	bgt.n	8008aaa <_dtoa_r+0xa52>
 8008aa2:	d1e1      	bne.n	8008a68 <_dtoa_r+0xa10>
 8008aa4:	f018 0f01 	tst.w	r8, #1
 8008aa8:	d0de      	beq.n	8008a68 <_dtoa_r+0xa10>
 8008aaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aae:	d1d8      	bne.n	8008a62 <_dtoa_r+0xa0a>
 8008ab0:	9a00      	ldr	r2, [sp, #0]
 8008ab2:	2339      	movs	r3, #57	@ 0x39
 8008ab4:	7013      	strb	r3, [r2, #0]
 8008ab6:	4633      	mov	r3, r6
 8008ab8:	461e      	mov	r6, r3
 8008aba:	3b01      	subs	r3, #1
 8008abc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ac0:	2a39      	cmp	r2, #57	@ 0x39
 8008ac2:	d052      	beq.n	8008b6a <_dtoa_r+0xb12>
 8008ac4:	3201      	adds	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	e612      	b.n	80086f0 <_dtoa_r+0x698>
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	dd07      	ble.n	8008ade <_dtoa_r+0xa86>
 8008ace:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ad2:	d0ed      	beq.n	8008ab0 <_dtoa_r+0xa58>
 8008ad4:	9a00      	ldr	r2, [sp, #0]
 8008ad6:	f108 0301 	add.w	r3, r8, #1
 8008ada:	7013      	strb	r3, [r2, #0]
 8008adc:	e608      	b.n	80086f0 <_dtoa_r+0x698>
 8008ade:	9b07      	ldr	r3, [sp, #28]
 8008ae0:	9a07      	ldr	r2, [sp, #28]
 8008ae2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d028      	beq.n	8008b3e <_dtoa_r+0xae6>
 8008aec:	4649      	mov	r1, r9
 8008aee:	2300      	movs	r3, #0
 8008af0:	220a      	movs	r2, #10
 8008af2:	4658      	mov	r0, fp
 8008af4:	f000 f9d6 	bl	8008ea4 <__multadd>
 8008af8:	42af      	cmp	r7, r5
 8008afa:	4681      	mov	r9, r0
 8008afc:	f04f 0300 	mov.w	r3, #0
 8008b00:	f04f 020a 	mov.w	r2, #10
 8008b04:	4639      	mov	r1, r7
 8008b06:	4658      	mov	r0, fp
 8008b08:	d107      	bne.n	8008b1a <_dtoa_r+0xac2>
 8008b0a:	f000 f9cb 	bl	8008ea4 <__multadd>
 8008b0e:	4607      	mov	r7, r0
 8008b10:	4605      	mov	r5, r0
 8008b12:	9b07      	ldr	r3, [sp, #28]
 8008b14:	3301      	adds	r3, #1
 8008b16:	9307      	str	r3, [sp, #28]
 8008b18:	e774      	b.n	8008a04 <_dtoa_r+0x9ac>
 8008b1a:	f000 f9c3 	bl	8008ea4 <__multadd>
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4607      	mov	r7, r0
 8008b22:	2300      	movs	r3, #0
 8008b24:	220a      	movs	r2, #10
 8008b26:	4658      	mov	r0, fp
 8008b28:	f000 f9bc 	bl	8008ea4 <__multadd>
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	e7f0      	b.n	8008b12 <_dtoa_r+0xaba>
 8008b30:	9b00      	ldr	r3, [sp, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfcc      	ite	gt
 8008b36:	461e      	movgt	r6, r3
 8008b38:	2601      	movle	r6, #1
 8008b3a:	4456      	add	r6, sl
 8008b3c:	2700      	movs	r7, #0
 8008b3e:	4649      	mov	r1, r9
 8008b40:	2201      	movs	r2, #1
 8008b42:	4658      	mov	r0, fp
 8008b44:	f000 fba4 	bl	8009290 <__lshift>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4681      	mov	r9, r0
 8008b4c:	f000 fc0c 	bl	8009368 <__mcmp>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	dcb0      	bgt.n	8008ab6 <_dtoa_r+0xa5e>
 8008b54:	d102      	bne.n	8008b5c <_dtoa_r+0xb04>
 8008b56:	f018 0f01 	tst.w	r8, #1
 8008b5a:	d1ac      	bne.n	8008ab6 <_dtoa_r+0xa5e>
 8008b5c:	4633      	mov	r3, r6
 8008b5e:	461e      	mov	r6, r3
 8008b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b64:	2a30      	cmp	r2, #48	@ 0x30
 8008b66:	d0fa      	beq.n	8008b5e <_dtoa_r+0xb06>
 8008b68:	e5c2      	b.n	80086f0 <_dtoa_r+0x698>
 8008b6a:	459a      	cmp	sl, r3
 8008b6c:	d1a4      	bne.n	8008ab8 <_dtoa_r+0xa60>
 8008b6e:	9b04      	ldr	r3, [sp, #16]
 8008b70:	3301      	adds	r3, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	2331      	movs	r3, #49	@ 0x31
 8008b76:	f88a 3000 	strb.w	r3, [sl]
 8008b7a:	e5b9      	b.n	80086f0 <_dtoa_r+0x698>
 8008b7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bdc <_dtoa_r+0xb84>
 8008b82:	b11b      	cbz	r3, 8008b8c <_dtoa_r+0xb34>
 8008b84:	f10a 0308 	add.w	r3, sl, #8
 8008b88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	4650      	mov	r0, sl
 8008b8e:	b019      	add	sp, #100	@ 0x64
 8008b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	f77f ae37 	ble.w	800880a <_dtoa_r+0x7b2>
 8008b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	e655      	b.n	8008850 <_dtoa_r+0x7f8>
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f77f aed6 	ble.w	8008958 <_dtoa_r+0x900>
 8008bac:	4656      	mov	r6, sl
 8008bae:	4621      	mov	r1, r4
 8008bb0:	4648      	mov	r0, r9
 8008bb2:	f7ff f9c7 	bl	8007f44 <quorem>
 8008bb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bba:	f806 8b01 	strb.w	r8, [r6], #1
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	eba6 020a 	sub.w	r2, r6, sl
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	ddb3      	ble.n	8008b30 <_dtoa_r+0xad8>
 8008bc8:	4649      	mov	r1, r9
 8008bca:	2300      	movs	r3, #0
 8008bcc:	220a      	movs	r2, #10
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f000 f968 	bl	8008ea4 <__multadd>
 8008bd4:	4681      	mov	r9, r0
 8008bd6:	e7ea      	b.n	8008bae <_dtoa_r+0xb56>
 8008bd8:	0800bf33 	.word	0x0800bf33
 8008bdc:	0800beb7 	.word	0x0800beb7

08008be0 <_free_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4605      	mov	r5, r0
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d041      	beq.n	8008c6c <_free_r+0x8c>
 8008be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bec:	1f0c      	subs	r4, r1, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfb8      	it	lt
 8008bf2:	18e4      	addlt	r4, r4, r3
 8008bf4:	f000 f8e8 	bl	8008dc8 <__malloc_lock>
 8008bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c70 <_free_r+0x90>)
 8008bfa:	6813      	ldr	r3, [r2, #0]
 8008bfc:	b933      	cbnz	r3, 8008c0c <_free_r+0x2c>
 8008bfe:	6063      	str	r3, [r4, #4]
 8008c00:	6014      	str	r4, [r2, #0]
 8008c02:	4628      	mov	r0, r5
 8008c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c08:	f000 b8e4 	b.w	8008dd4 <__malloc_unlock>
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d908      	bls.n	8008c22 <_free_r+0x42>
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	1821      	adds	r1, r4, r0
 8008c14:	428b      	cmp	r3, r1
 8008c16:	bf01      	itttt	eq
 8008c18:	6819      	ldreq	r1, [r3, #0]
 8008c1a:	685b      	ldreq	r3, [r3, #4]
 8008c1c:	1809      	addeq	r1, r1, r0
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	e7ed      	b.n	8008bfe <_free_r+0x1e>
 8008c22:	461a      	mov	r2, r3
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	b10b      	cbz	r3, 8008c2c <_free_r+0x4c>
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	d9fa      	bls.n	8008c22 <_free_r+0x42>
 8008c2c:	6811      	ldr	r1, [r2, #0]
 8008c2e:	1850      	adds	r0, r2, r1
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d10b      	bne.n	8008c4c <_free_r+0x6c>
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	4401      	add	r1, r0
 8008c38:	1850      	adds	r0, r2, r1
 8008c3a:	4283      	cmp	r3, r0
 8008c3c:	6011      	str	r1, [r2, #0]
 8008c3e:	d1e0      	bne.n	8008c02 <_free_r+0x22>
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	6053      	str	r3, [r2, #4]
 8008c46:	4408      	add	r0, r1
 8008c48:	6010      	str	r0, [r2, #0]
 8008c4a:	e7da      	b.n	8008c02 <_free_r+0x22>
 8008c4c:	d902      	bls.n	8008c54 <_free_r+0x74>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	e7d6      	b.n	8008c02 <_free_r+0x22>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	1821      	adds	r1, r4, r0
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	bf04      	itt	eq
 8008c5c:	6819      	ldreq	r1, [r3, #0]
 8008c5e:	685b      	ldreq	r3, [r3, #4]
 8008c60:	6063      	str	r3, [r4, #4]
 8008c62:	bf04      	itt	eq
 8008c64:	1809      	addeq	r1, r1, r0
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	6054      	str	r4, [r2, #4]
 8008c6a:	e7ca      	b.n	8008c02 <_free_r+0x22>
 8008c6c:	bd38      	pop	{r3, r4, r5, pc}
 8008c6e:	bf00      	nop
 8008c70:	200011f8 	.word	0x200011f8

08008c74 <malloc>:
 8008c74:	4b02      	ldr	r3, [pc, #8]	@ (8008c80 <malloc+0xc>)
 8008c76:	4601      	mov	r1, r0
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	f000 b825 	b.w	8008cc8 <_malloc_r>
 8008c7e:	bf00      	nop
 8008c80:	20000820 	.word	0x20000820

08008c84 <sbrk_aligned>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	4e0f      	ldr	r6, [pc, #60]	@ (8008cc4 <sbrk_aligned+0x40>)
 8008c88:	460c      	mov	r4, r1
 8008c8a:	6831      	ldr	r1, [r6, #0]
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	b911      	cbnz	r1, 8008c96 <sbrk_aligned+0x12>
 8008c90:	f002 f988 	bl	800afa4 <_sbrk_r>
 8008c94:	6030      	str	r0, [r6, #0]
 8008c96:	4621      	mov	r1, r4
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f002 f983 	bl	800afa4 <_sbrk_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d103      	bne.n	8008caa <sbrk_aligned+0x26>
 8008ca2:	f04f 34ff 	mov.w	r4, #4294967295
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	bd70      	pop	{r4, r5, r6, pc}
 8008caa:	1cc4      	adds	r4, r0, #3
 8008cac:	f024 0403 	bic.w	r4, r4, #3
 8008cb0:	42a0      	cmp	r0, r4
 8008cb2:	d0f8      	beq.n	8008ca6 <sbrk_aligned+0x22>
 8008cb4:	1a21      	subs	r1, r4, r0
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f002 f974 	bl	800afa4 <_sbrk_r>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d1f2      	bne.n	8008ca6 <sbrk_aligned+0x22>
 8008cc0:	e7ef      	b.n	8008ca2 <sbrk_aligned+0x1e>
 8008cc2:	bf00      	nop
 8008cc4:	200011f4 	.word	0x200011f4

08008cc8 <_malloc_r>:
 8008cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ccc:	1ccd      	adds	r5, r1, #3
 8008cce:	f025 0503 	bic.w	r5, r5, #3
 8008cd2:	3508      	adds	r5, #8
 8008cd4:	2d0c      	cmp	r5, #12
 8008cd6:	bf38      	it	cc
 8008cd8:	250c      	movcc	r5, #12
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	4606      	mov	r6, r0
 8008cde:	db01      	blt.n	8008ce4 <_malloc_r+0x1c>
 8008ce0:	42a9      	cmp	r1, r5
 8008ce2:	d904      	bls.n	8008cee <_malloc_r+0x26>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	6033      	str	r3, [r6, #0]
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dc4 <_malloc_r+0xfc>
 8008cf2:	f000 f869 	bl	8008dc8 <__malloc_lock>
 8008cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cfa:	461c      	mov	r4, r3
 8008cfc:	bb44      	cbnz	r4, 8008d50 <_malloc_r+0x88>
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4630      	mov	r0, r6
 8008d02:	f7ff ffbf 	bl	8008c84 <sbrk_aligned>
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	4604      	mov	r4, r0
 8008d0a:	d158      	bne.n	8008dbe <_malloc_r+0xf6>
 8008d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8008d10:	4627      	mov	r7, r4
 8008d12:	2f00      	cmp	r7, #0
 8008d14:	d143      	bne.n	8008d9e <_malloc_r+0xd6>
 8008d16:	2c00      	cmp	r4, #0
 8008d18:	d04b      	beq.n	8008db2 <_malloc_r+0xea>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4630      	mov	r0, r6
 8008d20:	eb04 0903 	add.w	r9, r4, r3
 8008d24:	f002 f93e 	bl	800afa4 <_sbrk_r>
 8008d28:	4581      	cmp	r9, r0
 8008d2a:	d142      	bne.n	8008db2 <_malloc_r+0xea>
 8008d2c:	6821      	ldr	r1, [r4, #0]
 8008d2e:	1a6d      	subs	r5, r5, r1
 8008d30:	4629      	mov	r1, r5
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7ff ffa6 	bl	8008c84 <sbrk_aligned>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d03a      	beq.n	8008db2 <_malloc_r+0xea>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	442b      	add	r3, r5
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	f8d8 3000 	ldr.w	r3, [r8]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	bb62      	cbnz	r2, 8008da4 <_malloc_r+0xdc>
 8008d4a:	f8c8 7000 	str.w	r7, [r8]
 8008d4e:	e00f      	b.n	8008d70 <_malloc_r+0xa8>
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	1b52      	subs	r2, r2, r5
 8008d54:	d420      	bmi.n	8008d98 <_malloc_r+0xd0>
 8008d56:	2a0b      	cmp	r2, #11
 8008d58:	d917      	bls.n	8008d8a <_malloc_r+0xc2>
 8008d5a:	1961      	adds	r1, r4, r5
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	6025      	str	r5, [r4, #0]
 8008d60:	bf18      	it	ne
 8008d62:	6059      	strne	r1, [r3, #4]
 8008d64:	6863      	ldr	r3, [r4, #4]
 8008d66:	bf08      	it	eq
 8008d68:	f8c8 1000 	streq.w	r1, [r8]
 8008d6c:	5162      	str	r2, [r4, r5]
 8008d6e:	604b      	str	r3, [r1, #4]
 8008d70:	4630      	mov	r0, r6
 8008d72:	f000 f82f 	bl	8008dd4 <__malloc_unlock>
 8008d76:	f104 000b 	add.w	r0, r4, #11
 8008d7a:	1d23      	adds	r3, r4, #4
 8008d7c:	f020 0007 	bic.w	r0, r0, #7
 8008d80:	1ac2      	subs	r2, r0, r3
 8008d82:	bf1c      	itt	ne
 8008d84:	1a1b      	subne	r3, r3, r0
 8008d86:	50a3      	strne	r3, [r4, r2]
 8008d88:	e7af      	b.n	8008cea <_malloc_r+0x22>
 8008d8a:	6862      	ldr	r2, [r4, #4]
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	bf0c      	ite	eq
 8008d90:	f8c8 2000 	streq.w	r2, [r8]
 8008d94:	605a      	strne	r2, [r3, #4]
 8008d96:	e7eb      	b.n	8008d70 <_malloc_r+0xa8>
 8008d98:	4623      	mov	r3, r4
 8008d9a:	6864      	ldr	r4, [r4, #4]
 8008d9c:	e7ae      	b.n	8008cfc <_malloc_r+0x34>
 8008d9e:	463c      	mov	r4, r7
 8008da0:	687f      	ldr	r7, [r7, #4]
 8008da2:	e7b6      	b.n	8008d12 <_malloc_r+0x4a>
 8008da4:	461a      	mov	r2, r3
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d1fb      	bne.n	8008da4 <_malloc_r+0xdc>
 8008dac:	2300      	movs	r3, #0
 8008dae:	6053      	str	r3, [r2, #4]
 8008db0:	e7de      	b.n	8008d70 <_malloc_r+0xa8>
 8008db2:	230c      	movs	r3, #12
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	4630      	mov	r0, r6
 8008db8:	f000 f80c 	bl	8008dd4 <__malloc_unlock>
 8008dbc:	e794      	b.n	8008ce8 <_malloc_r+0x20>
 8008dbe:	6005      	str	r5, [r0, #0]
 8008dc0:	e7d6      	b.n	8008d70 <_malloc_r+0xa8>
 8008dc2:	bf00      	nop
 8008dc4:	200011f8 	.word	0x200011f8

08008dc8 <__malloc_lock>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	@ (8008dd0 <__malloc_lock+0x8>)
 8008dca:	f7ff b8b2 	b.w	8007f32 <__retarget_lock_acquire_recursive>
 8008dce:	bf00      	nop
 8008dd0:	200011f0 	.word	0x200011f0

08008dd4 <__malloc_unlock>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	@ (8008ddc <__malloc_unlock+0x8>)
 8008dd6:	f7ff b8ad 	b.w	8007f34 <__retarget_lock_release_recursive>
 8008dda:	bf00      	nop
 8008ddc:	200011f0 	.word	0x200011f0

08008de0 <_Balloc>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	69c6      	ldr	r6, [r0, #28]
 8008de4:	4604      	mov	r4, r0
 8008de6:	460d      	mov	r5, r1
 8008de8:	b976      	cbnz	r6, 8008e08 <_Balloc+0x28>
 8008dea:	2010      	movs	r0, #16
 8008dec:	f7ff ff42 	bl	8008c74 <malloc>
 8008df0:	4602      	mov	r2, r0
 8008df2:	61e0      	str	r0, [r4, #28]
 8008df4:	b920      	cbnz	r0, 8008e00 <_Balloc+0x20>
 8008df6:	4b18      	ldr	r3, [pc, #96]	@ (8008e58 <_Balloc+0x78>)
 8008df8:	4818      	ldr	r0, [pc, #96]	@ (8008e5c <_Balloc+0x7c>)
 8008dfa:	216b      	movs	r1, #107	@ 0x6b
 8008dfc:	f002 f8f8 	bl	800aff0 <__assert_func>
 8008e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e04:	6006      	str	r6, [r0, #0]
 8008e06:	60c6      	str	r6, [r0, #12]
 8008e08:	69e6      	ldr	r6, [r4, #28]
 8008e0a:	68f3      	ldr	r3, [r6, #12]
 8008e0c:	b183      	cbz	r3, 8008e30 <_Balloc+0x50>
 8008e0e:	69e3      	ldr	r3, [r4, #28]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e16:	b9b8      	cbnz	r0, 8008e48 <_Balloc+0x68>
 8008e18:	2101      	movs	r1, #1
 8008e1a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e1e:	1d72      	adds	r2, r6, #5
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	4620      	mov	r0, r4
 8008e24:	f002 f902 	bl	800b02c <_calloc_r>
 8008e28:	b160      	cbz	r0, 8008e44 <_Balloc+0x64>
 8008e2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e2e:	e00e      	b.n	8008e4e <_Balloc+0x6e>
 8008e30:	2221      	movs	r2, #33	@ 0x21
 8008e32:	2104      	movs	r1, #4
 8008e34:	4620      	mov	r0, r4
 8008e36:	f002 f8f9 	bl	800b02c <_calloc_r>
 8008e3a:	69e3      	ldr	r3, [r4, #28]
 8008e3c:	60f0      	str	r0, [r6, #12]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e4      	bne.n	8008e0e <_Balloc+0x2e>
 8008e44:	2000      	movs	r0, #0
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
 8008e48:	6802      	ldr	r2, [r0, #0]
 8008e4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e54:	e7f7      	b.n	8008e46 <_Balloc+0x66>
 8008e56:	bf00      	nop
 8008e58:	0800bec4 	.word	0x0800bec4
 8008e5c:	0800bf44 	.word	0x0800bf44

08008e60 <_Bfree>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	69c6      	ldr	r6, [r0, #28]
 8008e64:	4605      	mov	r5, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	b976      	cbnz	r6, 8008e88 <_Bfree+0x28>
 8008e6a:	2010      	movs	r0, #16
 8008e6c:	f7ff ff02 	bl	8008c74 <malloc>
 8008e70:	4602      	mov	r2, r0
 8008e72:	61e8      	str	r0, [r5, #28]
 8008e74:	b920      	cbnz	r0, 8008e80 <_Bfree+0x20>
 8008e76:	4b09      	ldr	r3, [pc, #36]	@ (8008e9c <_Bfree+0x3c>)
 8008e78:	4809      	ldr	r0, [pc, #36]	@ (8008ea0 <_Bfree+0x40>)
 8008e7a:	218f      	movs	r1, #143	@ 0x8f
 8008e7c:	f002 f8b8 	bl	800aff0 <__assert_func>
 8008e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e84:	6006      	str	r6, [r0, #0]
 8008e86:	60c6      	str	r6, [r0, #12]
 8008e88:	b13c      	cbz	r4, 8008e9a <_Bfree+0x3a>
 8008e8a:	69eb      	ldr	r3, [r5, #28]
 8008e8c:	6862      	ldr	r2, [r4, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e94:	6021      	str	r1, [r4, #0]
 8008e96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	0800bec4 	.word	0x0800bec4
 8008ea0:	0800bf44 	.word	0x0800bf44

08008ea4 <__multadd>:
 8008ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea8:	690d      	ldr	r5, [r1, #16]
 8008eaa:	4607      	mov	r7, r0
 8008eac:	460c      	mov	r4, r1
 8008eae:	461e      	mov	r6, r3
 8008eb0:	f101 0c14 	add.w	ip, r1, #20
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eba:	b299      	uxth	r1, r3
 8008ebc:	fb02 6101 	mla	r1, r2, r1, r6
 8008ec0:	0c1e      	lsrs	r6, r3, #16
 8008ec2:	0c0b      	lsrs	r3, r1, #16
 8008ec4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ec8:	b289      	uxth	r1, r1
 8008eca:	3001      	adds	r0, #1
 8008ecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ed0:	4285      	cmp	r5, r0
 8008ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008eda:	dcec      	bgt.n	8008eb6 <__multadd+0x12>
 8008edc:	b30e      	cbz	r6, 8008f22 <__multadd+0x7e>
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	42ab      	cmp	r3, r5
 8008ee2:	dc19      	bgt.n	8008f18 <__multadd+0x74>
 8008ee4:	6861      	ldr	r1, [r4, #4]
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	3101      	adds	r1, #1
 8008eea:	f7ff ff79 	bl	8008de0 <_Balloc>
 8008eee:	4680      	mov	r8, r0
 8008ef0:	b928      	cbnz	r0, 8008efe <__multadd+0x5a>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <__multadd+0x84>)
 8008ef6:	480d      	ldr	r0, [pc, #52]	@ (8008f2c <__multadd+0x88>)
 8008ef8:	21ba      	movs	r1, #186	@ 0xba
 8008efa:	f002 f879 	bl	800aff0 <__assert_func>
 8008efe:	6922      	ldr	r2, [r4, #16]
 8008f00:	3202      	adds	r2, #2
 8008f02:	f104 010c 	add.w	r1, r4, #12
 8008f06:	0092      	lsls	r2, r2, #2
 8008f08:	300c      	adds	r0, #12
 8008f0a:	f002 f85b 	bl	800afc4 <memcpy>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff ffa5 	bl	8008e60 <_Bfree>
 8008f16:	4644      	mov	r4, r8
 8008f18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f1c:	3501      	adds	r5, #1
 8008f1e:	615e      	str	r6, [r3, #20]
 8008f20:	6125      	str	r5, [r4, #16]
 8008f22:	4620      	mov	r0, r4
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f28:	0800bf33 	.word	0x0800bf33
 8008f2c:	0800bf44 	.word	0x0800bf44

08008f30 <__s2b>:
 8008f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f34:	460c      	mov	r4, r1
 8008f36:	4615      	mov	r5, r2
 8008f38:	461f      	mov	r7, r3
 8008f3a:	2209      	movs	r2, #9
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	4606      	mov	r6, r0
 8008f40:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f44:	2100      	movs	r1, #0
 8008f46:	2201      	movs	r2, #1
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	db09      	blt.n	8008f60 <__s2b+0x30>
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7ff ff47 	bl	8008de0 <_Balloc>
 8008f52:	b940      	cbnz	r0, 8008f66 <__s2b+0x36>
 8008f54:	4602      	mov	r2, r0
 8008f56:	4b19      	ldr	r3, [pc, #100]	@ (8008fbc <__s2b+0x8c>)
 8008f58:	4819      	ldr	r0, [pc, #100]	@ (8008fc0 <__s2b+0x90>)
 8008f5a:	21d3      	movs	r1, #211	@ 0xd3
 8008f5c:	f002 f848 	bl	800aff0 <__assert_func>
 8008f60:	0052      	lsls	r2, r2, #1
 8008f62:	3101      	adds	r1, #1
 8008f64:	e7f0      	b.n	8008f48 <__s2b+0x18>
 8008f66:	9b08      	ldr	r3, [sp, #32]
 8008f68:	6143      	str	r3, [r0, #20]
 8008f6a:	2d09      	cmp	r5, #9
 8008f6c:	f04f 0301 	mov.w	r3, #1
 8008f70:	6103      	str	r3, [r0, #16]
 8008f72:	dd16      	ble.n	8008fa2 <__s2b+0x72>
 8008f74:	f104 0909 	add.w	r9, r4, #9
 8008f78:	46c8      	mov	r8, r9
 8008f7a:	442c      	add	r4, r5
 8008f7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f80:	4601      	mov	r1, r0
 8008f82:	3b30      	subs	r3, #48	@ 0x30
 8008f84:	220a      	movs	r2, #10
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7ff ff8c 	bl	8008ea4 <__multadd>
 8008f8c:	45a0      	cmp	r8, r4
 8008f8e:	d1f5      	bne.n	8008f7c <__s2b+0x4c>
 8008f90:	f1a5 0408 	sub.w	r4, r5, #8
 8008f94:	444c      	add	r4, r9
 8008f96:	1b2d      	subs	r5, r5, r4
 8008f98:	1963      	adds	r3, r4, r5
 8008f9a:	42bb      	cmp	r3, r7
 8008f9c:	db04      	blt.n	8008fa8 <__s2b+0x78>
 8008f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	340a      	adds	r4, #10
 8008fa4:	2509      	movs	r5, #9
 8008fa6:	e7f6      	b.n	8008f96 <__s2b+0x66>
 8008fa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fac:	4601      	mov	r1, r0
 8008fae:	3b30      	subs	r3, #48	@ 0x30
 8008fb0:	220a      	movs	r2, #10
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff ff76 	bl	8008ea4 <__multadd>
 8008fb8:	e7ee      	b.n	8008f98 <__s2b+0x68>
 8008fba:	bf00      	nop
 8008fbc:	0800bf33 	.word	0x0800bf33
 8008fc0:	0800bf44 	.word	0x0800bf44

08008fc4 <__hi0bits>:
 8008fc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008fc8:	4603      	mov	r3, r0
 8008fca:	bf36      	itet	cc
 8008fcc:	0403      	lslcc	r3, r0, #16
 8008fce:	2000      	movcs	r0, #0
 8008fd0:	2010      	movcc	r0, #16
 8008fd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fd6:	bf3c      	itt	cc
 8008fd8:	021b      	lslcc	r3, r3, #8
 8008fda:	3008      	addcc	r0, #8
 8008fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fe0:	bf3c      	itt	cc
 8008fe2:	011b      	lslcc	r3, r3, #4
 8008fe4:	3004      	addcc	r0, #4
 8008fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fea:	bf3c      	itt	cc
 8008fec:	009b      	lslcc	r3, r3, #2
 8008fee:	3002      	addcc	r0, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	db05      	blt.n	8009000 <__hi0bits+0x3c>
 8008ff4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ff8:	f100 0001 	add.w	r0, r0, #1
 8008ffc:	bf08      	it	eq
 8008ffe:	2020      	moveq	r0, #32
 8009000:	4770      	bx	lr

08009002 <__lo0bits>:
 8009002:	6803      	ldr	r3, [r0, #0]
 8009004:	4602      	mov	r2, r0
 8009006:	f013 0007 	ands.w	r0, r3, #7
 800900a:	d00b      	beq.n	8009024 <__lo0bits+0x22>
 800900c:	07d9      	lsls	r1, r3, #31
 800900e:	d421      	bmi.n	8009054 <__lo0bits+0x52>
 8009010:	0798      	lsls	r0, r3, #30
 8009012:	bf49      	itett	mi
 8009014:	085b      	lsrmi	r3, r3, #1
 8009016:	089b      	lsrpl	r3, r3, #2
 8009018:	2001      	movmi	r0, #1
 800901a:	6013      	strmi	r3, [r2, #0]
 800901c:	bf5c      	itt	pl
 800901e:	6013      	strpl	r3, [r2, #0]
 8009020:	2002      	movpl	r0, #2
 8009022:	4770      	bx	lr
 8009024:	b299      	uxth	r1, r3
 8009026:	b909      	cbnz	r1, 800902c <__lo0bits+0x2a>
 8009028:	0c1b      	lsrs	r3, r3, #16
 800902a:	2010      	movs	r0, #16
 800902c:	b2d9      	uxtb	r1, r3
 800902e:	b909      	cbnz	r1, 8009034 <__lo0bits+0x32>
 8009030:	3008      	adds	r0, #8
 8009032:	0a1b      	lsrs	r3, r3, #8
 8009034:	0719      	lsls	r1, r3, #28
 8009036:	bf04      	itt	eq
 8009038:	091b      	lsreq	r3, r3, #4
 800903a:	3004      	addeq	r0, #4
 800903c:	0799      	lsls	r1, r3, #30
 800903e:	bf04      	itt	eq
 8009040:	089b      	lsreq	r3, r3, #2
 8009042:	3002      	addeq	r0, #2
 8009044:	07d9      	lsls	r1, r3, #31
 8009046:	d403      	bmi.n	8009050 <__lo0bits+0x4e>
 8009048:	085b      	lsrs	r3, r3, #1
 800904a:	f100 0001 	add.w	r0, r0, #1
 800904e:	d003      	beq.n	8009058 <__lo0bits+0x56>
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	4770      	bx	lr
 8009054:	2000      	movs	r0, #0
 8009056:	4770      	bx	lr
 8009058:	2020      	movs	r0, #32
 800905a:	4770      	bx	lr

0800905c <__i2b>:
 800905c:	b510      	push	{r4, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	2101      	movs	r1, #1
 8009062:	f7ff febd 	bl	8008de0 <_Balloc>
 8009066:	4602      	mov	r2, r0
 8009068:	b928      	cbnz	r0, 8009076 <__i2b+0x1a>
 800906a:	4b05      	ldr	r3, [pc, #20]	@ (8009080 <__i2b+0x24>)
 800906c:	4805      	ldr	r0, [pc, #20]	@ (8009084 <__i2b+0x28>)
 800906e:	f240 1145 	movw	r1, #325	@ 0x145
 8009072:	f001 ffbd 	bl	800aff0 <__assert_func>
 8009076:	2301      	movs	r3, #1
 8009078:	6144      	str	r4, [r0, #20]
 800907a:	6103      	str	r3, [r0, #16]
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	0800bf33 	.word	0x0800bf33
 8009084:	0800bf44 	.word	0x0800bf44

08009088 <__multiply>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	4614      	mov	r4, r2
 800908e:	690a      	ldr	r2, [r1, #16]
 8009090:	6923      	ldr	r3, [r4, #16]
 8009092:	429a      	cmp	r2, r3
 8009094:	bfa8      	it	ge
 8009096:	4623      	movge	r3, r4
 8009098:	460f      	mov	r7, r1
 800909a:	bfa4      	itt	ge
 800909c:	460c      	movge	r4, r1
 800909e:	461f      	movge	r7, r3
 80090a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80090a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80090a8:	68a3      	ldr	r3, [r4, #8]
 80090aa:	6861      	ldr	r1, [r4, #4]
 80090ac:	eb0a 0609 	add.w	r6, sl, r9
 80090b0:	42b3      	cmp	r3, r6
 80090b2:	b085      	sub	sp, #20
 80090b4:	bfb8      	it	lt
 80090b6:	3101      	addlt	r1, #1
 80090b8:	f7ff fe92 	bl	8008de0 <_Balloc>
 80090bc:	b930      	cbnz	r0, 80090cc <__multiply+0x44>
 80090be:	4602      	mov	r2, r0
 80090c0:	4b44      	ldr	r3, [pc, #272]	@ (80091d4 <__multiply+0x14c>)
 80090c2:	4845      	ldr	r0, [pc, #276]	@ (80091d8 <__multiply+0x150>)
 80090c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090c8:	f001 ff92 	bl	800aff0 <__assert_func>
 80090cc:	f100 0514 	add.w	r5, r0, #20
 80090d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090d4:	462b      	mov	r3, r5
 80090d6:	2200      	movs	r2, #0
 80090d8:	4543      	cmp	r3, r8
 80090da:	d321      	bcc.n	8009120 <__multiply+0x98>
 80090dc:	f107 0114 	add.w	r1, r7, #20
 80090e0:	f104 0214 	add.w	r2, r4, #20
 80090e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090ec:	9302      	str	r3, [sp, #8]
 80090ee:	1b13      	subs	r3, r2, r4
 80090f0:	3b15      	subs	r3, #21
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	3304      	adds	r3, #4
 80090f8:	f104 0715 	add.w	r7, r4, #21
 80090fc:	42ba      	cmp	r2, r7
 80090fe:	bf38      	it	cc
 8009100:	2304      	movcc	r3, #4
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	9103      	str	r1, [sp, #12]
 8009108:	428b      	cmp	r3, r1
 800910a:	d80c      	bhi.n	8009126 <__multiply+0x9e>
 800910c:	2e00      	cmp	r6, #0
 800910e:	dd03      	ble.n	8009118 <__multiply+0x90>
 8009110:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009114:	2b00      	cmp	r3, #0
 8009116:	d05b      	beq.n	80091d0 <__multiply+0x148>
 8009118:	6106      	str	r6, [r0, #16]
 800911a:	b005      	add	sp, #20
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	f843 2b04 	str.w	r2, [r3], #4
 8009124:	e7d8      	b.n	80090d8 <__multiply+0x50>
 8009126:	f8b1 a000 	ldrh.w	sl, [r1]
 800912a:	f1ba 0f00 	cmp.w	sl, #0
 800912e:	d024      	beq.n	800917a <__multiply+0xf2>
 8009130:	f104 0e14 	add.w	lr, r4, #20
 8009134:	46a9      	mov	r9, r5
 8009136:	f04f 0c00 	mov.w	ip, #0
 800913a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800913e:	f8d9 3000 	ldr.w	r3, [r9]
 8009142:	fa1f fb87 	uxth.w	fp, r7
 8009146:	b29b      	uxth	r3, r3
 8009148:	fb0a 330b 	mla	r3, sl, fp, r3
 800914c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009150:	f8d9 7000 	ldr.w	r7, [r9]
 8009154:	4463      	add	r3, ip
 8009156:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800915a:	fb0a c70b 	mla	r7, sl, fp, ip
 800915e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009162:	b29b      	uxth	r3, r3
 8009164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009168:	4572      	cmp	r2, lr
 800916a:	f849 3b04 	str.w	r3, [r9], #4
 800916e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009172:	d8e2      	bhi.n	800913a <__multiply+0xb2>
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	f845 c003 	str.w	ip, [r5, r3]
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009180:	3104      	adds	r1, #4
 8009182:	f1b9 0f00 	cmp.w	r9, #0
 8009186:	d021      	beq.n	80091cc <__multiply+0x144>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	f104 0c14 	add.w	ip, r4, #20
 800918e:	46ae      	mov	lr, r5
 8009190:	f04f 0a00 	mov.w	sl, #0
 8009194:	f8bc b000 	ldrh.w	fp, [ip]
 8009198:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800919c:	fb09 770b 	mla	r7, r9, fp, r7
 80091a0:	4457      	add	r7, sl
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091a8:	f84e 3b04 	str.w	r3, [lr], #4
 80091ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091b4:	f8be 3000 	ldrh.w	r3, [lr]
 80091b8:	fb09 330a 	mla	r3, r9, sl, r3
 80091bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80091c0:	4562      	cmp	r2, ip
 80091c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091c6:	d8e5      	bhi.n	8009194 <__multiply+0x10c>
 80091c8:	9f01      	ldr	r7, [sp, #4]
 80091ca:	51eb      	str	r3, [r5, r7]
 80091cc:	3504      	adds	r5, #4
 80091ce:	e799      	b.n	8009104 <__multiply+0x7c>
 80091d0:	3e01      	subs	r6, #1
 80091d2:	e79b      	b.n	800910c <__multiply+0x84>
 80091d4:	0800bf33 	.word	0x0800bf33
 80091d8:	0800bf44 	.word	0x0800bf44

080091dc <__pow5mult>:
 80091dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e0:	4615      	mov	r5, r2
 80091e2:	f012 0203 	ands.w	r2, r2, #3
 80091e6:	4607      	mov	r7, r0
 80091e8:	460e      	mov	r6, r1
 80091ea:	d007      	beq.n	80091fc <__pow5mult+0x20>
 80091ec:	4c25      	ldr	r4, [pc, #148]	@ (8009284 <__pow5mult+0xa8>)
 80091ee:	3a01      	subs	r2, #1
 80091f0:	2300      	movs	r3, #0
 80091f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091f6:	f7ff fe55 	bl	8008ea4 <__multadd>
 80091fa:	4606      	mov	r6, r0
 80091fc:	10ad      	asrs	r5, r5, #2
 80091fe:	d03d      	beq.n	800927c <__pow5mult+0xa0>
 8009200:	69fc      	ldr	r4, [r7, #28]
 8009202:	b97c      	cbnz	r4, 8009224 <__pow5mult+0x48>
 8009204:	2010      	movs	r0, #16
 8009206:	f7ff fd35 	bl	8008c74 <malloc>
 800920a:	4602      	mov	r2, r0
 800920c:	61f8      	str	r0, [r7, #28]
 800920e:	b928      	cbnz	r0, 800921c <__pow5mult+0x40>
 8009210:	4b1d      	ldr	r3, [pc, #116]	@ (8009288 <__pow5mult+0xac>)
 8009212:	481e      	ldr	r0, [pc, #120]	@ (800928c <__pow5mult+0xb0>)
 8009214:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009218:	f001 feea 	bl	800aff0 <__assert_func>
 800921c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009220:	6004      	str	r4, [r0, #0]
 8009222:	60c4      	str	r4, [r0, #12]
 8009224:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800922c:	b94c      	cbnz	r4, 8009242 <__pow5mult+0x66>
 800922e:	f240 2171 	movw	r1, #625	@ 0x271
 8009232:	4638      	mov	r0, r7
 8009234:	f7ff ff12 	bl	800905c <__i2b>
 8009238:	2300      	movs	r3, #0
 800923a:	f8c8 0008 	str.w	r0, [r8, #8]
 800923e:	4604      	mov	r4, r0
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	f04f 0900 	mov.w	r9, #0
 8009246:	07eb      	lsls	r3, r5, #31
 8009248:	d50a      	bpl.n	8009260 <__pow5mult+0x84>
 800924a:	4631      	mov	r1, r6
 800924c:	4622      	mov	r2, r4
 800924e:	4638      	mov	r0, r7
 8009250:	f7ff ff1a 	bl	8009088 <__multiply>
 8009254:	4631      	mov	r1, r6
 8009256:	4680      	mov	r8, r0
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff fe01 	bl	8008e60 <_Bfree>
 800925e:	4646      	mov	r6, r8
 8009260:	106d      	asrs	r5, r5, #1
 8009262:	d00b      	beq.n	800927c <__pow5mult+0xa0>
 8009264:	6820      	ldr	r0, [r4, #0]
 8009266:	b938      	cbnz	r0, 8009278 <__pow5mult+0x9c>
 8009268:	4622      	mov	r2, r4
 800926a:	4621      	mov	r1, r4
 800926c:	4638      	mov	r0, r7
 800926e:	f7ff ff0b 	bl	8009088 <__multiply>
 8009272:	6020      	str	r0, [r4, #0]
 8009274:	f8c0 9000 	str.w	r9, [r0]
 8009278:	4604      	mov	r4, r0
 800927a:	e7e4      	b.n	8009246 <__pow5mult+0x6a>
 800927c:	4630      	mov	r0, r6
 800927e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009282:	bf00      	nop
 8009284:	0800bfa0 	.word	0x0800bfa0
 8009288:	0800bec4 	.word	0x0800bec4
 800928c:	0800bf44 	.word	0x0800bf44

08009290 <__lshift>:
 8009290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009294:	460c      	mov	r4, r1
 8009296:	6849      	ldr	r1, [r1, #4]
 8009298:	6923      	ldr	r3, [r4, #16]
 800929a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800929e:	68a3      	ldr	r3, [r4, #8]
 80092a0:	4607      	mov	r7, r0
 80092a2:	4691      	mov	r9, r2
 80092a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092a8:	f108 0601 	add.w	r6, r8, #1
 80092ac:	42b3      	cmp	r3, r6
 80092ae:	db0b      	blt.n	80092c8 <__lshift+0x38>
 80092b0:	4638      	mov	r0, r7
 80092b2:	f7ff fd95 	bl	8008de0 <_Balloc>
 80092b6:	4605      	mov	r5, r0
 80092b8:	b948      	cbnz	r0, 80092ce <__lshift+0x3e>
 80092ba:	4602      	mov	r2, r0
 80092bc:	4b28      	ldr	r3, [pc, #160]	@ (8009360 <__lshift+0xd0>)
 80092be:	4829      	ldr	r0, [pc, #164]	@ (8009364 <__lshift+0xd4>)
 80092c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092c4:	f001 fe94 	bl	800aff0 <__assert_func>
 80092c8:	3101      	adds	r1, #1
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	e7ee      	b.n	80092ac <__lshift+0x1c>
 80092ce:	2300      	movs	r3, #0
 80092d0:	f100 0114 	add.w	r1, r0, #20
 80092d4:	f100 0210 	add.w	r2, r0, #16
 80092d8:	4618      	mov	r0, r3
 80092da:	4553      	cmp	r3, sl
 80092dc:	db33      	blt.n	8009346 <__lshift+0xb6>
 80092de:	6920      	ldr	r0, [r4, #16]
 80092e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092e4:	f104 0314 	add.w	r3, r4, #20
 80092e8:	f019 091f 	ands.w	r9, r9, #31
 80092ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092f4:	d02b      	beq.n	800934e <__lshift+0xbe>
 80092f6:	f1c9 0e20 	rsb	lr, r9, #32
 80092fa:	468a      	mov	sl, r1
 80092fc:	2200      	movs	r2, #0
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	fa00 f009 	lsl.w	r0, r0, r9
 8009304:	4310      	orrs	r0, r2
 8009306:	f84a 0b04 	str.w	r0, [sl], #4
 800930a:	f853 2b04 	ldr.w	r2, [r3], #4
 800930e:	459c      	cmp	ip, r3
 8009310:	fa22 f20e 	lsr.w	r2, r2, lr
 8009314:	d8f3      	bhi.n	80092fe <__lshift+0x6e>
 8009316:	ebac 0304 	sub.w	r3, ip, r4
 800931a:	3b15      	subs	r3, #21
 800931c:	f023 0303 	bic.w	r3, r3, #3
 8009320:	3304      	adds	r3, #4
 8009322:	f104 0015 	add.w	r0, r4, #21
 8009326:	4584      	cmp	ip, r0
 8009328:	bf38      	it	cc
 800932a:	2304      	movcc	r3, #4
 800932c:	50ca      	str	r2, [r1, r3]
 800932e:	b10a      	cbz	r2, 8009334 <__lshift+0xa4>
 8009330:	f108 0602 	add.w	r6, r8, #2
 8009334:	3e01      	subs	r6, #1
 8009336:	4638      	mov	r0, r7
 8009338:	612e      	str	r6, [r5, #16]
 800933a:	4621      	mov	r1, r4
 800933c:	f7ff fd90 	bl	8008e60 <_Bfree>
 8009340:	4628      	mov	r0, r5
 8009342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009346:	f842 0f04 	str.w	r0, [r2, #4]!
 800934a:	3301      	adds	r3, #1
 800934c:	e7c5      	b.n	80092da <__lshift+0x4a>
 800934e:	3904      	subs	r1, #4
 8009350:	f853 2b04 	ldr.w	r2, [r3], #4
 8009354:	f841 2f04 	str.w	r2, [r1, #4]!
 8009358:	459c      	cmp	ip, r3
 800935a:	d8f9      	bhi.n	8009350 <__lshift+0xc0>
 800935c:	e7ea      	b.n	8009334 <__lshift+0xa4>
 800935e:	bf00      	nop
 8009360:	0800bf33 	.word	0x0800bf33
 8009364:	0800bf44 	.word	0x0800bf44

08009368 <__mcmp>:
 8009368:	690a      	ldr	r2, [r1, #16]
 800936a:	4603      	mov	r3, r0
 800936c:	6900      	ldr	r0, [r0, #16]
 800936e:	1a80      	subs	r0, r0, r2
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	d10e      	bne.n	8009392 <__mcmp+0x2a>
 8009374:	3314      	adds	r3, #20
 8009376:	3114      	adds	r1, #20
 8009378:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800937c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009388:	4295      	cmp	r5, r2
 800938a:	d003      	beq.n	8009394 <__mcmp+0x2c>
 800938c:	d205      	bcs.n	800939a <__mcmp+0x32>
 800938e:	f04f 30ff 	mov.w	r0, #4294967295
 8009392:	bd30      	pop	{r4, r5, pc}
 8009394:	42a3      	cmp	r3, r4
 8009396:	d3f3      	bcc.n	8009380 <__mcmp+0x18>
 8009398:	e7fb      	b.n	8009392 <__mcmp+0x2a>
 800939a:	2001      	movs	r0, #1
 800939c:	e7f9      	b.n	8009392 <__mcmp+0x2a>
	...

080093a0 <__mdiff>:
 80093a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4689      	mov	r9, r1
 80093a6:	4606      	mov	r6, r0
 80093a8:	4611      	mov	r1, r2
 80093aa:	4648      	mov	r0, r9
 80093ac:	4614      	mov	r4, r2
 80093ae:	f7ff ffdb 	bl	8009368 <__mcmp>
 80093b2:	1e05      	subs	r5, r0, #0
 80093b4:	d112      	bne.n	80093dc <__mdiff+0x3c>
 80093b6:	4629      	mov	r1, r5
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7ff fd11 	bl	8008de0 <_Balloc>
 80093be:	4602      	mov	r2, r0
 80093c0:	b928      	cbnz	r0, 80093ce <__mdiff+0x2e>
 80093c2:	4b3f      	ldr	r3, [pc, #252]	@ (80094c0 <__mdiff+0x120>)
 80093c4:	f240 2137 	movw	r1, #567	@ 0x237
 80093c8:	483e      	ldr	r0, [pc, #248]	@ (80094c4 <__mdiff+0x124>)
 80093ca:	f001 fe11 	bl	800aff0 <__assert_func>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093d4:	4610      	mov	r0, r2
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093dc:	bfbc      	itt	lt
 80093de:	464b      	movlt	r3, r9
 80093e0:	46a1      	movlt	r9, r4
 80093e2:	4630      	mov	r0, r6
 80093e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093e8:	bfba      	itte	lt
 80093ea:	461c      	movlt	r4, r3
 80093ec:	2501      	movlt	r5, #1
 80093ee:	2500      	movge	r5, #0
 80093f0:	f7ff fcf6 	bl	8008de0 <_Balloc>
 80093f4:	4602      	mov	r2, r0
 80093f6:	b918      	cbnz	r0, 8009400 <__mdiff+0x60>
 80093f8:	4b31      	ldr	r3, [pc, #196]	@ (80094c0 <__mdiff+0x120>)
 80093fa:	f240 2145 	movw	r1, #581	@ 0x245
 80093fe:	e7e3      	b.n	80093c8 <__mdiff+0x28>
 8009400:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009404:	6926      	ldr	r6, [r4, #16]
 8009406:	60c5      	str	r5, [r0, #12]
 8009408:	f109 0310 	add.w	r3, r9, #16
 800940c:	f109 0514 	add.w	r5, r9, #20
 8009410:	f104 0e14 	add.w	lr, r4, #20
 8009414:	f100 0b14 	add.w	fp, r0, #20
 8009418:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800941c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	46d9      	mov	r9, fp
 8009424:	f04f 0c00 	mov.w	ip, #0
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800942e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	fa1f f38a 	uxth.w	r3, sl
 8009438:	4619      	mov	r1, r3
 800943a:	b283      	uxth	r3, r0
 800943c:	1acb      	subs	r3, r1, r3
 800943e:	0c00      	lsrs	r0, r0, #16
 8009440:	4463      	add	r3, ip
 8009442:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009446:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800944a:	b29b      	uxth	r3, r3
 800944c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009450:	4576      	cmp	r6, lr
 8009452:	f849 3b04 	str.w	r3, [r9], #4
 8009456:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800945a:	d8e5      	bhi.n	8009428 <__mdiff+0x88>
 800945c:	1b33      	subs	r3, r6, r4
 800945e:	3b15      	subs	r3, #21
 8009460:	f023 0303 	bic.w	r3, r3, #3
 8009464:	3415      	adds	r4, #21
 8009466:	3304      	adds	r3, #4
 8009468:	42a6      	cmp	r6, r4
 800946a:	bf38      	it	cc
 800946c:	2304      	movcc	r3, #4
 800946e:	441d      	add	r5, r3
 8009470:	445b      	add	r3, fp
 8009472:	461e      	mov	r6, r3
 8009474:	462c      	mov	r4, r5
 8009476:	4544      	cmp	r4, r8
 8009478:	d30e      	bcc.n	8009498 <__mdiff+0xf8>
 800947a:	f108 0103 	add.w	r1, r8, #3
 800947e:	1b49      	subs	r1, r1, r5
 8009480:	f021 0103 	bic.w	r1, r1, #3
 8009484:	3d03      	subs	r5, #3
 8009486:	45a8      	cmp	r8, r5
 8009488:	bf38      	it	cc
 800948a:	2100      	movcc	r1, #0
 800948c:	440b      	add	r3, r1
 800948e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009492:	b191      	cbz	r1, 80094ba <__mdiff+0x11a>
 8009494:	6117      	str	r7, [r2, #16]
 8009496:	e79d      	b.n	80093d4 <__mdiff+0x34>
 8009498:	f854 1b04 	ldr.w	r1, [r4], #4
 800949c:	46e6      	mov	lr, ip
 800949e:	0c08      	lsrs	r0, r1, #16
 80094a0:	fa1c fc81 	uxtah	ip, ip, r1
 80094a4:	4471      	add	r1, lr
 80094a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094aa:	b289      	uxth	r1, r1
 80094ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094b0:	f846 1b04 	str.w	r1, [r6], #4
 80094b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094b8:	e7dd      	b.n	8009476 <__mdiff+0xd6>
 80094ba:	3f01      	subs	r7, #1
 80094bc:	e7e7      	b.n	800948e <__mdiff+0xee>
 80094be:	bf00      	nop
 80094c0:	0800bf33 	.word	0x0800bf33
 80094c4:	0800bf44 	.word	0x0800bf44

080094c8 <__ulp>:
 80094c8:	b082      	sub	sp, #8
 80094ca:	ed8d 0b00 	vstr	d0, [sp]
 80094ce:	9a01      	ldr	r2, [sp, #4]
 80094d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009510 <__ulp+0x48>)
 80094d2:	4013      	ands	r3, r2
 80094d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dc08      	bgt.n	80094ee <__ulp+0x26>
 80094dc:	425b      	negs	r3, r3
 80094de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80094e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094e6:	da04      	bge.n	80094f2 <__ulp+0x2a>
 80094e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80094ec:	4113      	asrs	r3, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	e008      	b.n	8009504 <__ulp+0x3c>
 80094f2:	f1a2 0314 	sub.w	r3, r2, #20
 80094f6:	2b1e      	cmp	r3, #30
 80094f8:	bfda      	itte	le
 80094fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80094fe:	40da      	lsrle	r2, r3
 8009500:	2201      	movgt	r2, #1
 8009502:	2300      	movs	r3, #0
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	ec41 0b10 	vmov	d0, r0, r1
 800950c:	b002      	add	sp, #8
 800950e:	4770      	bx	lr
 8009510:	7ff00000 	.word	0x7ff00000

08009514 <__b2d>:
 8009514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009518:	6906      	ldr	r6, [r0, #16]
 800951a:	f100 0814 	add.w	r8, r0, #20
 800951e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009522:	1f37      	subs	r7, r6, #4
 8009524:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009528:	4610      	mov	r0, r2
 800952a:	f7ff fd4b 	bl	8008fc4 <__hi0bits>
 800952e:	f1c0 0320 	rsb	r3, r0, #32
 8009532:	280a      	cmp	r0, #10
 8009534:	600b      	str	r3, [r1, #0]
 8009536:	491b      	ldr	r1, [pc, #108]	@ (80095a4 <__b2d+0x90>)
 8009538:	dc15      	bgt.n	8009566 <__b2d+0x52>
 800953a:	f1c0 0c0b 	rsb	ip, r0, #11
 800953e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009542:	45b8      	cmp	r8, r7
 8009544:	ea43 0501 	orr.w	r5, r3, r1
 8009548:	bf34      	ite	cc
 800954a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800954e:	2300      	movcs	r3, #0
 8009550:	3015      	adds	r0, #21
 8009552:	fa02 f000 	lsl.w	r0, r2, r0
 8009556:	fa23 f30c 	lsr.w	r3, r3, ip
 800955a:	4303      	orrs	r3, r0
 800955c:	461c      	mov	r4, r3
 800955e:	ec45 4b10 	vmov	d0, r4, r5
 8009562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009566:	45b8      	cmp	r8, r7
 8009568:	bf3a      	itte	cc
 800956a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800956e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009572:	2300      	movcs	r3, #0
 8009574:	380b      	subs	r0, #11
 8009576:	d012      	beq.n	800959e <__b2d+0x8a>
 8009578:	f1c0 0120 	rsb	r1, r0, #32
 800957c:	fa23 f401 	lsr.w	r4, r3, r1
 8009580:	4082      	lsls	r2, r0
 8009582:	4322      	orrs	r2, r4
 8009584:	4547      	cmp	r7, r8
 8009586:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800958a:	bf8c      	ite	hi
 800958c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009590:	2200      	movls	r2, #0
 8009592:	4083      	lsls	r3, r0
 8009594:	40ca      	lsrs	r2, r1
 8009596:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800959a:	4313      	orrs	r3, r2
 800959c:	e7de      	b.n	800955c <__b2d+0x48>
 800959e:	ea42 0501 	orr.w	r5, r2, r1
 80095a2:	e7db      	b.n	800955c <__b2d+0x48>
 80095a4:	3ff00000 	.word	0x3ff00000

080095a8 <__d2b>:
 80095a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095ac:	460f      	mov	r7, r1
 80095ae:	2101      	movs	r1, #1
 80095b0:	ec59 8b10 	vmov	r8, r9, d0
 80095b4:	4616      	mov	r6, r2
 80095b6:	f7ff fc13 	bl	8008de0 <_Balloc>
 80095ba:	4604      	mov	r4, r0
 80095bc:	b930      	cbnz	r0, 80095cc <__d2b+0x24>
 80095be:	4602      	mov	r2, r0
 80095c0:	4b23      	ldr	r3, [pc, #140]	@ (8009650 <__d2b+0xa8>)
 80095c2:	4824      	ldr	r0, [pc, #144]	@ (8009654 <__d2b+0xac>)
 80095c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80095c8:	f001 fd12 	bl	800aff0 <__assert_func>
 80095cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095d4:	b10d      	cbz	r5, 80095da <__d2b+0x32>
 80095d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	f1b8 0300 	subs.w	r3, r8, #0
 80095e0:	d023      	beq.n	800962a <__d2b+0x82>
 80095e2:	4668      	mov	r0, sp
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	f7ff fd0c 	bl	8009002 <__lo0bits>
 80095ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095ee:	b1d0      	cbz	r0, 8009626 <__d2b+0x7e>
 80095f0:	f1c0 0320 	rsb	r3, r0, #32
 80095f4:	fa02 f303 	lsl.w	r3, r2, r3
 80095f8:	430b      	orrs	r3, r1
 80095fa:	40c2      	lsrs	r2, r0
 80095fc:	6163      	str	r3, [r4, #20]
 80095fe:	9201      	str	r2, [sp, #4]
 8009600:	9b01      	ldr	r3, [sp, #4]
 8009602:	61a3      	str	r3, [r4, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	bf0c      	ite	eq
 8009608:	2201      	moveq	r2, #1
 800960a:	2202      	movne	r2, #2
 800960c:	6122      	str	r2, [r4, #16]
 800960e:	b1a5      	cbz	r5, 800963a <__d2b+0x92>
 8009610:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009614:	4405      	add	r5, r0
 8009616:	603d      	str	r5, [r7, #0]
 8009618:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800961c:	6030      	str	r0, [r6, #0]
 800961e:	4620      	mov	r0, r4
 8009620:	b003      	add	sp, #12
 8009622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009626:	6161      	str	r1, [r4, #20]
 8009628:	e7ea      	b.n	8009600 <__d2b+0x58>
 800962a:	a801      	add	r0, sp, #4
 800962c:	f7ff fce9 	bl	8009002 <__lo0bits>
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	6163      	str	r3, [r4, #20]
 8009634:	3020      	adds	r0, #32
 8009636:	2201      	movs	r2, #1
 8009638:	e7e8      	b.n	800960c <__d2b+0x64>
 800963a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800963e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009642:	6038      	str	r0, [r7, #0]
 8009644:	6918      	ldr	r0, [r3, #16]
 8009646:	f7ff fcbd 	bl	8008fc4 <__hi0bits>
 800964a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800964e:	e7e5      	b.n	800961c <__d2b+0x74>
 8009650:	0800bf33 	.word	0x0800bf33
 8009654:	0800bf44 	.word	0x0800bf44

08009658 <__ratio>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	b085      	sub	sp, #20
 800965e:	e9cd 1000 	strd	r1, r0, [sp]
 8009662:	a902      	add	r1, sp, #8
 8009664:	f7ff ff56 	bl	8009514 <__b2d>
 8009668:	9800      	ldr	r0, [sp, #0]
 800966a:	a903      	add	r1, sp, #12
 800966c:	ec55 4b10 	vmov	r4, r5, d0
 8009670:	f7ff ff50 	bl	8009514 <__b2d>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	6919      	ldr	r1, [r3, #16]
 8009678:	9b00      	ldr	r3, [sp, #0]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	1ac9      	subs	r1, r1, r3
 800967e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009682:	1a9b      	subs	r3, r3, r2
 8009684:	ec5b ab10 	vmov	sl, fp, d0
 8009688:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800968c:	2b00      	cmp	r3, #0
 800968e:	bfce      	itee	gt
 8009690:	462a      	movgt	r2, r5
 8009692:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009696:	465a      	movle	r2, fp
 8009698:	462f      	mov	r7, r5
 800969a:	46d9      	mov	r9, fp
 800969c:	bfcc      	ite	gt
 800969e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80096a6:	464b      	mov	r3, r9
 80096a8:	4652      	mov	r2, sl
 80096aa:	4620      	mov	r0, r4
 80096ac:	4639      	mov	r1, r7
 80096ae:	f7f7 f8dd 	bl	800086c <__aeabi_ddiv>
 80096b2:	ec41 0b10 	vmov	d0, r0, r1
 80096b6:	b005      	add	sp, #20
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096bc <__copybits>:
 80096bc:	3901      	subs	r1, #1
 80096be:	b570      	push	{r4, r5, r6, lr}
 80096c0:	1149      	asrs	r1, r1, #5
 80096c2:	6914      	ldr	r4, [r2, #16]
 80096c4:	3101      	adds	r1, #1
 80096c6:	f102 0314 	add.w	r3, r2, #20
 80096ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096d2:	1f05      	subs	r5, r0, #4
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	d30c      	bcc.n	80096f2 <__copybits+0x36>
 80096d8:	1aa3      	subs	r3, r4, r2
 80096da:	3b11      	subs	r3, #17
 80096dc:	f023 0303 	bic.w	r3, r3, #3
 80096e0:	3211      	adds	r2, #17
 80096e2:	42a2      	cmp	r2, r4
 80096e4:	bf88      	it	hi
 80096e6:	2300      	movhi	r3, #0
 80096e8:	4418      	add	r0, r3
 80096ea:	2300      	movs	r3, #0
 80096ec:	4288      	cmp	r0, r1
 80096ee:	d305      	bcc.n	80096fc <__copybits+0x40>
 80096f0:	bd70      	pop	{r4, r5, r6, pc}
 80096f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80096f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80096fa:	e7eb      	b.n	80096d4 <__copybits+0x18>
 80096fc:	f840 3b04 	str.w	r3, [r0], #4
 8009700:	e7f4      	b.n	80096ec <__copybits+0x30>

08009702 <__any_on>:
 8009702:	f100 0214 	add.w	r2, r0, #20
 8009706:	6900      	ldr	r0, [r0, #16]
 8009708:	114b      	asrs	r3, r1, #5
 800970a:	4298      	cmp	r0, r3
 800970c:	b510      	push	{r4, lr}
 800970e:	db11      	blt.n	8009734 <__any_on+0x32>
 8009710:	dd0a      	ble.n	8009728 <__any_on+0x26>
 8009712:	f011 011f 	ands.w	r1, r1, #31
 8009716:	d007      	beq.n	8009728 <__any_on+0x26>
 8009718:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800971c:	fa24 f001 	lsr.w	r0, r4, r1
 8009720:	fa00 f101 	lsl.w	r1, r0, r1
 8009724:	428c      	cmp	r4, r1
 8009726:	d10b      	bne.n	8009740 <__any_on+0x3e>
 8009728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800972c:	4293      	cmp	r3, r2
 800972e:	d803      	bhi.n	8009738 <__any_on+0x36>
 8009730:	2000      	movs	r0, #0
 8009732:	bd10      	pop	{r4, pc}
 8009734:	4603      	mov	r3, r0
 8009736:	e7f7      	b.n	8009728 <__any_on+0x26>
 8009738:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800973c:	2900      	cmp	r1, #0
 800973e:	d0f5      	beq.n	800972c <__any_on+0x2a>
 8009740:	2001      	movs	r0, #1
 8009742:	e7f6      	b.n	8009732 <__any_on+0x30>

08009744 <sulp>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4604      	mov	r4, r0
 8009748:	460d      	mov	r5, r1
 800974a:	ec45 4b10 	vmov	d0, r4, r5
 800974e:	4616      	mov	r6, r2
 8009750:	f7ff feba 	bl	80094c8 <__ulp>
 8009754:	ec51 0b10 	vmov	r0, r1, d0
 8009758:	b17e      	cbz	r6, 800977a <sulp+0x36>
 800975a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800975e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009762:	2b00      	cmp	r3, #0
 8009764:	dd09      	ble.n	800977a <sulp+0x36>
 8009766:	051b      	lsls	r3, r3, #20
 8009768:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800976c:	2400      	movs	r4, #0
 800976e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009772:	4622      	mov	r2, r4
 8009774:	462b      	mov	r3, r5
 8009776:	f7f6 ff4f 	bl	8000618 <__aeabi_dmul>
 800977a:	ec41 0b10 	vmov	d0, r0, r1
 800977e:	bd70      	pop	{r4, r5, r6, pc}

08009780 <_strtod_l>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	b09f      	sub	sp, #124	@ 0x7c
 8009786:	460c      	mov	r4, r1
 8009788:	9217      	str	r2, [sp, #92]	@ 0x5c
 800978a:	2200      	movs	r2, #0
 800978c:	921a      	str	r2, [sp, #104]	@ 0x68
 800978e:	9005      	str	r0, [sp, #20]
 8009790:	f04f 0a00 	mov.w	sl, #0
 8009794:	f04f 0b00 	mov.w	fp, #0
 8009798:	460a      	mov	r2, r1
 800979a:	9219      	str	r2, [sp, #100]	@ 0x64
 800979c:	7811      	ldrb	r1, [r2, #0]
 800979e:	292b      	cmp	r1, #43	@ 0x2b
 80097a0:	d04a      	beq.n	8009838 <_strtod_l+0xb8>
 80097a2:	d838      	bhi.n	8009816 <_strtod_l+0x96>
 80097a4:	290d      	cmp	r1, #13
 80097a6:	d832      	bhi.n	800980e <_strtod_l+0x8e>
 80097a8:	2908      	cmp	r1, #8
 80097aa:	d832      	bhi.n	8009812 <_strtod_l+0x92>
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d03b      	beq.n	8009828 <_strtod_l+0xa8>
 80097b0:	2200      	movs	r2, #0
 80097b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80097b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80097b6:	782a      	ldrb	r2, [r5, #0]
 80097b8:	2a30      	cmp	r2, #48	@ 0x30
 80097ba:	f040 80b3 	bne.w	8009924 <_strtod_l+0x1a4>
 80097be:	786a      	ldrb	r2, [r5, #1]
 80097c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097c4:	2a58      	cmp	r2, #88	@ 0x58
 80097c6:	d16e      	bne.n	80098a6 <_strtod_l+0x126>
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	4a8e      	ldr	r2, [pc, #568]	@ (8009a0c <_strtod_l+0x28c>)
 80097d4:	9805      	ldr	r0, [sp, #20]
 80097d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80097d8:	a919      	add	r1, sp, #100	@ 0x64
 80097da:	f001 fca3 	bl	800b124 <__gethex>
 80097de:	f010 060f 	ands.w	r6, r0, #15
 80097e2:	4604      	mov	r4, r0
 80097e4:	d005      	beq.n	80097f2 <_strtod_l+0x72>
 80097e6:	2e06      	cmp	r6, #6
 80097e8:	d128      	bne.n	800983c <_strtod_l+0xbc>
 80097ea:	3501      	adds	r5, #1
 80097ec:	2300      	movs	r3, #0
 80097ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80097f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f040 858e 	bne.w	800a316 <_strtod_l+0xb96>
 80097fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097fc:	b1cb      	cbz	r3, 8009832 <_strtod_l+0xb2>
 80097fe:	4652      	mov	r2, sl
 8009800:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009804:	ec43 2b10 	vmov	d0, r2, r3
 8009808:	b01f      	add	sp, #124	@ 0x7c
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	2920      	cmp	r1, #32
 8009810:	d1ce      	bne.n	80097b0 <_strtod_l+0x30>
 8009812:	3201      	adds	r2, #1
 8009814:	e7c1      	b.n	800979a <_strtod_l+0x1a>
 8009816:	292d      	cmp	r1, #45	@ 0x2d
 8009818:	d1ca      	bne.n	80097b0 <_strtod_l+0x30>
 800981a:	2101      	movs	r1, #1
 800981c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800981e:	1c51      	adds	r1, r2, #1
 8009820:	9119      	str	r1, [sp, #100]	@ 0x64
 8009822:	7852      	ldrb	r2, [r2, #1]
 8009824:	2a00      	cmp	r2, #0
 8009826:	d1c5      	bne.n	80097b4 <_strtod_l+0x34>
 8009828:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800982a:	9419      	str	r4, [sp, #100]	@ 0x64
 800982c:	2b00      	cmp	r3, #0
 800982e:	f040 8570 	bne.w	800a312 <_strtod_l+0xb92>
 8009832:	4652      	mov	r2, sl
 8009834:	465b      	mov	r3, fp
 8009836:	e7e5      	b.n	8009804 <_strtod_l+0x84>
 8009838:	2100      	movs	r1, #0
 800983a:	e7ef      	b.n	800981c <_strtod_l+0x9c>
 800983c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800983e:	b13a      	cbz	r2, 8009850 <_strtod_l+0xd0>
 8009840:	2135      	movs	r1, #53	@ 0x35
 8009842:	a81c      	add	r0, sp, #112	@ 0x70
 8009844:	f7ff ff3a 	bl	80096bc <__copybits>
 8009848:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800984a:	9805      	ldr	r0, [sp, #20]
 800984c:	f7ff fb08 	bl	8008e60 <_Bfree>
 8009850:	3e01      	subs	r6, #1
 8009852:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009854:	2e04      	cmp	r6, #4
 8009856:	d806      	bhi.n	8009866 <_strtod_l+0xe6>
 8009858:	e8df f006 	tbb	[pc, r6]
 800985c:	201d0314 	.word	0x201d0314
 8009860:	14          	.byte	0x14
 8009861:	00          	.byte	0x00
 8009862:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009866:	05e1      	lsls	r1, r4, #23
 8009868:	bf48      	it	mi
 800986a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800986e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009872:	0d1b      	lsrs	r3, r3, #20
 8009874:	051b      	lsls	r3, r3, #20
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1bb      	bne.n	80097f2 <_strtod_l+0x72>
 800987a:	f7fe fb2f 	bl	8007edc <__errno>
 800987e:	2322      	movs	r3, #34	@ 0x22
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	e7b6      	b.n	80097f2 <_strtod_l+0x72>
 8009884:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009888:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800988c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009890:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009894:	e7e7      	b.n	8009866 <_strtod_l+0xe6>
 8009896:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009a14 <_strtod_l+0x294>
 800989a:	e7e4      	b.n	8009866 <_strtod_l+0xe6>
 800989c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80098a0:	f04f 3aff 	mov.w	sl, #4294967295
 80098a4:	e7df      	b.n	8009866 <_strtod_l+0xe6>
 80098a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80098ac:	785b      	ldrb	r3, [r3, #1]
 80098ae:	2b30      	cmp	r3, #48	@ 0x30
 80098b0:	d0f9      	beq.n	80098a6 <_strtod_l+0x126>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d09d      	beq.n	80097f2 <_strtod_l+0x72>
 80098b6:	2301      	movs	r3, #1
 80098b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80098be:	2300      	movs	r3, #0
 80098c0:	9308      	str	r3, [sp, #32]
 80098c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80098c4:	461f      	mov	r7, r3
 80098c6:	220a      	movs	r2, #10
 80098c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80098ca:	7805      	ldrb	r5, [r0, #0]
 80098cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80098d0:	b2d9      	uxtb	r1, r3
 80098d2:	2909      	cmp	r1, #9
 80098d4:	d928      	bls.n	8009928 <_strtod_l+0x1a8>
 80098d6:	494e      	ldr	r1, [pc, #312]	@ (8009a10 <_strtod_l+0x290>)
 80098d8:	2201      	movs	r2, #1
 80098da:	f7fe faa3 	bl	8007e24 <strncmp>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d032      	beq.n	8009948 <_strtod_l+0x1c8>
 80098e2:	2000      	movs	r0, #0
 80098e4:	462a      	mov	r2, r5
 80098e6:	4681      	mov	r9, r0
 80098e8:	463d      	mov	r5, r7
 80098ea:	4603      	mov	r3, r0
 80098ec:	2a65      	cmp	r2, #101	@ 0x65
 80098ee:	d001      	beq.n	80098f4 <_strtod_l+0x174>
 80098f0:	2a45      	cmp	r2, #69	@ 0x45
 80098f2:	d114      	bne.n	800991e <_strtod_l+0x19e>
 80098f4:	b91d      	cbnz	r5, 80098fe <_strtod_l+0x17e>
 80098f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098f8:	4302      	orrs	r2, r0
 80098fa:	d095      	beq.n	8009828 <_strtod_l+0xa8>
 80098fc:	2500      	movs	r5, #0
 80098fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009900:	1c62      	adds	r2, r4, #1
 8009902:	9219      	str	r2, [sp, #100]	@ 0x64
 8009904:	7862      	ldrb	r2, [r4, #1]
 8009906:	2a2b      	cmp	r2, #43	@ 0x2b
 8009908:	d077      	beq.n	80099fa <_strtod_l+0x27a>
 800990a:	2a2d      	cmp	r2, #45	@ 0x2d
 800990c:	d07b      	beq.n	8009a06 <_strtod_l+0x286>
 800990e:	f04f 0c00 	mov.w	ip, #0
 8009912:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009916:	2909      	cmp	r1, #9
 8009918:	f240 8082 	bls.w	8009a20 <_strtod_l+0x2a0>
 800991c:	9419      	str	r4, [sp, #100]	@ 0x64
 800991e:	f04f 0800 	mov.w	r8, #0
 8009922:	e0a2      	b.n	8009a6a <_strtod_l+0x2ea>
 8009924:	2300      	movs	r3, #0
 8009926:	e7c7      	b.n	80098b8 <_strtod_l+0x138>
 8009928:	2f08      	cmp	r7, #8
 800992a:	bfd5      	itete	le
 800992c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800992e:	9908      	ldrgt	r1, [sp, #32]
 8009930:	fb02 3301 	mlale	r3, r2, r1, r3
 8009934:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009938:	f100 0001 	add.w	r0, r0, #1
 800993c:	bfd4      	ite	le
 800993e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009940:	9308      	strgt	r3, [sp, #32]
 8009942:	3701      	adds	r7, #1
 8009944:	9019      	str	r0, [sp, #100]	@ 0x64
 8009946:	e7bf      	b.n	80098c8 <_strtod_l+0x148>
 8009948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	9219      	str	r2, [sp, #100]	@ 0x64
 800994e:	785a      	ldrb	r2, [r3, #1]
 8009950:	b37f      	cbz	r7, 80099b2 <_strtod_l+0x232>
 8009952:	4681      	mov	r9, r0
 8009954:	463d      	mov	r5, r7
 8009956:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800995a:	2b09      	cmp	r3, #9
 800995c:	d912      	bls.n	8009984 <_strtod_l+0x204>
 800995e:	2301      	movs	r3, #1
 8009960:	e7c4      	b.n	80098ec <_strtod_l+0x16c>
 8009962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	9219      	str	r2, [sp, #100]	@ 0x64
 8009968:	785a      	ldrb	r2, [r3, #1]
 800996a:	3001      	adds	r0, #1
 800996c:	2a30      	cmp	r2, #48	@ 0x30
 800996e:	d0f8      	beq.n	8009962 <_strtod_l+0x1e2>
 8009970:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009974:	2b08      	cmp	r3, #8
 8009976:	f200 84d3 	bhi.w	800a320 <_strtod_l+0xba0>
 800997a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800997c:	930c      	str	r3, [sp, #48]	@ 0x30
 800997e:	4681      	mov	r9, r0
 8009980:	2000      	movs	r0, #0
 8009982:	4605      	mov	r5, r0
 8009984:	3a30      	subs	r2, #48	@ 0x30
 8009986:	f100 0301 	add.w	r3, r0, #1
 800998a:	d02a      	beq.n	80099e2 <_strtod_l+0x262>
 800998c:	4499      	add	r9, r3
 800998e:	eb00 0c05 	add.w	ip, r0, r5
 8009992:	462b      	mov	r3, r5
 8009994:	210a      	movs	r1, #10
 8009996:	4563      	cmp	r3, ip
 8009998:	d10d      	bne.n	80099b6 <_strtod_l+0x236>
 800999a:	1c69      	adds	r1, r5, #1
 800999c:	4401      	add	r1, r0
 800999e:	4428      	add	r0, r5
 80099a0:	2808      	cmp	r0, #8
 80099a2:	dc16      	bgt.n	80099d2 <_strtod_l+0x252>
 80099a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099a6:	230a      	movs	r3, #10
 80099a8:	fb03 2300 	mla	r3, r3, r0, r2
 80099ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80099ae:	2300      	movs	r3, #0
 80099b0:	e018      	b.n	80099e4 <_strtod_l+0x264>
 80099b2:	4638      	mov	r0, r7
 80099b4:	e7da      	b.n	800996c <_strtod_l+0x1ec>
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	f103 0301 	add.w	r3, r3, #1
 80099bc:	dc03      	bgt.n	80099c6 <_strtod_l+0x246>
 80099be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80099c0:	434e      	muls	r6, r1
 80099c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80099c4:	e7e7      	b.n	8009996 <_strtod_l+0x216>
 80099c6:	2b10      	cmp	r3, #16
 80099c8:	bfde      	ittt	le
 80099ca:	9e08      	ldrle	r6, [sp, #32]
 80099cc:	434e      	mulle	r6, r1
 80099ce:	9608      	strle	r6, [sp, #32]
 80099d0:	e7e1      	b.n	8009996 <_strtod_l+0x216>
 80099d2:	280f      	cmp	r0, #15
 80099d4:	dceb      	bgt.n	80099ae <_strtod_l+0x22e>
 80099d6:	9808      	ldr	r0, [sp, #32]
 80099d8:	230a      	movs	r3, #10
 80099da:	fb03 2300 	mla	r3, r3, r0, r2
 80099de:	9308      	str	r3, [sp, #32]
 80099e0:	e7e5      	b.n	80099ae <_strtod_l+0x22e>
 80099e2:	4629      	mov	r1, r5
 80099e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099e6:	1c50      	adds	r0, r2, #1
 80099e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80099ea:	7852      	ldrb	r2, [r2, #1]
 80099ec:	4618      	mov	r0, r3
 80099ee:	460d      	mov	r5, r1
 80099f0:	e7b1      	b.n	8009956 <_strtod_l+0x1d6>
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	2301      	movs	r3, #1
 80099f8:	e77d      	b.n	80098f6 <_strtod_l+0x176>
 80099fa:	f04f 0c00 	mov.w	ip, #0
 80099fe:	1ca2      	adds	r2, r4, #2
 8009a00:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a02:	78a2      	ldrb	r2, [r4, #2]
 8009a04:	e785      	b.n	8009912 <_strtod_l+0x192>
 8009a06:	f04f 0c01 	mov.w	ip, #1
 8009a0a:	e7f8      	b.n	80099fe <_strtod_l+0x27e>
 8009a0c:	0800c0b8 	.word	0x0800c0b8
 8009a10:	0800c0a0 	.word	0x0800c0a0
 8009a14:	7ff00000 	.word	0x7ff00000
 8009a18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a1a:	1c51      	adds	r1, r2, #1
 8009a1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a1e:	7852      	ldrb	r2, [r2, #1]
 8009a20:	2a30      	cmp	r2, #48	@ 0x30
 8009a22:	d0f9      	beq.n	8009a18 <_strtod_l+0x298>
 8009a24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009a28:	2908      	cmp	r1, #8
 8009a2a:	f63f af78 	bhi.w	800991e <_strtod_l+0x19e>
 8009a2e:	3a30      	subs	r2, #48	@ 0x30
 8009a30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a34:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009a36:	f04f 080a 	mov.w	r8, #10
 8009a3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a3c:	1c56      	adds	r6, r2, #1
 8009a3e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009a40:	7852      	ldrb	r2, [r2, #1]
 8009a42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009a46:	f1be 0f09 	cmp.w	lr, #9
 8009a4a:	d939      	bls.n	8009ac0 <_strtod_l+0x340>
 8009a4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a4e:	1a76      	subs	r6, r6, r1
 8009a50:	2e08      	cmp	r6, #8
 8009a52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009a56:	dc03      	bgt.n	8009a60 <_strtod_l+0x2e0>
 8009a58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a5a:	4588      	cmp	r8, r1
 8009a5c:	bfa8      	it	ge
 8009a5e:	4688      	movge	r8, r1
 8009a60:	f1bc 0f00 	cmp.w	ip, #0
 8009a64:	d001      	beq.n	8009a6a <_strtod_l+0x2ea>
 8009a66:	f1c8 0800 	rsb	r8, r8, #0
 8009a6a:	2d00      	cmp	r5, #0
 8009a6c:	d14e      	bne.n	8009b0c <_strtod_l+0x38c>
 8009a6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a70:	4308      	orrs	r0, r1
 8009a72:	f47f aebe 	bne.w	80097f2 <_strtod_l+0x72>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f47f aed6 	bne.w	8009828 <_strtod_l+0xa8>
 8009a7c:	2a69      	cmp	r2, #105	@ 0x69
 8009a7e:	d028      	beq.n	8009ad2 <_strtod_l+0x352>
 8009a80:	dc25      	bgt.n	8009ace <_strtod_l+0x34e>
 8009a82:	2a49      	cmp	r2, #73	@ 0x49
 8009a84:	d025      	beq.n	8009ad2 <_strtod_l+0x352>
 8009a86:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a88:	f47f aece 	bne.w	8009828 <_strtod_l+0xa8>
 8009a8c:	499b      	ldr	r1, [pc, #620]	@ (8009cfc <_strtod_l+0x57c>)
 8009a8e:	a819      	add	r0, sp, #100	@ 0x64
 8009a90:	f001 fd6a 	bl	800b568 <__match>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f43f aec7 	beq.w	8009828 <_strtod_l+0xa8>
 8009a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b28      	cmp	r3, #40	@ 0x28
 8009aa0:	d12e      	bne.n	8009b00 <_strtod_l+0x380>
 8009aa2:	4997      	ldr	r1, [pc, #604]	@ (8009d00 <_strtod_l+0x580>)
 8009aa4:	aa1c      	add	r2, sp, #112	@ 0x70
 8009aa6:	a819      	add	r0, sp, #100	@ 0x64
 8009aa8:	f001 fd72 	bl	800b590 <__hexnan>
 8009aac:	2805      	cmp	r0, #5
 8009aae:	d127      	bne.n	8009b00 <_strtod_l+0x380>
 8009ab0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ab2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009ab6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009aba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009abe:	e698      	b.n	80097f2 <_strtod_l+0x72>
 8009ac0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009ac2:	fb08 2101 	mla	r1, r8, r1, r2
 8009ac6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009aca:	920e      	str	r2, [sp, #56]	@ 0x38
 8009acc:	e7b5      	b.n	8009a3a <_strtod_l+0x2ba>
 8009ace:	2a6e      	cmp	r2, #110	@ 0x6e
 8009ad0:	e7da      	b.n	8009a88 <_strtod_l+0x308>
 8009ad2:	498c      	ldr	r1, [pc, #560]	@ (8009d04 <_strtod_l+0x584>)
 8009ad4:	a819      	add	r0, sp, #100	@ 0x64
 8009ad6:	f001 fd47 	bl	800b568 <__match>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f43f aea4 	beq.w	8009828 <_strtod_l+0xa8>
 8009ae0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ae2:	4989      	ldr	r1, [pc, #548]	@ (8009d08 <_strtod_l+0x588>)
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	a819      	add	r0, sp, #100	@ 0x64
 8009ae8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009aea:	f001 fd3d 	bl	800b568 <__match>
 8009aee:	b910      	cbnz	r0, 8009af6 <_strtod_l+0x376>
 8009af0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009af2:	3301      	adds	r3, #1
 8009af4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009af6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009d18 <_strtod_l+0x598>
 8009afa:	f04f 0a00 	mov.w	sl, #0
 8009afe:	e678      	b.n	80097f2 <_strtod_l+0x72>
 8009b00:	4882      	ldr	r0, [pc, #520]	@ (8009d0c <_strtod_l+0x58c>)
 8009b02:	f001 fa6d 	bl	800afe0 <nan>
 8009b06:	ec5b ab10 	vmov	sl, fp, d0
 8009b0a:	e672      	b.n	80097f2 <_strtod_l+0x72>
 8009b0c:	eba8 0309 	sub.w	r3, r8, r9
 8009b10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b14:	2f00      	cmp	r7, #0
 8009b16:	bf08      	it	eq
 8009b18:	462f      	moveq	r7, r5
 8009b1a:	2d10      	cmp	r5, #16
 8009b1c:	462c      	mov	r4, r5
 8009b1e:	bfa8      	it	ge
 8009b20:	2410      	movge	r4, #16
 8009b22:	f7f6 fcff 	bl	8000524 <__aeabi_ui2d>
 8009b26:	2d09      	cmp	r5, #9
 8009b28:	4682      	mov	sl, r0
 8009b2a:	468b      	mov	fp, r1
 8009b2c:	dc13      	bgt.n	8009b56 <_strtod_l+0x3d6>
 8009b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f43f ae5e 	beq.w	80097f2 <_strtod_l+0x72>
 8009b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b38:	dd78      	ble.n	8009c2c <_strtod_l+0x4ac>
 8009b3a:	2b16      	cmp	r3, #22
 8009b3c:	dc5f      	bgt.n	8009bfe <_strtod_l+0x47e>
 8009b3e:	4974      	ldr	r1, [pc, #464]	@ (8009d10 <_strtod_l+0x590>)
 8009b40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b48:	4652      	mov	r2, sl
 8009b4a:	465b      	mov	r3, fp
 8009b4c:	f7f6 fd64 	bl	8000618 <__aeabi_dmul>
 8009b50:	4682      	mov	sl, r0
 8009b52:	468b      	mov	fp, r1
 8009b54:	e64d      	b.n	80097f2 <_strtod_l+0x72>
 8009b56:	4b6e      	ldr	r3, [pc, #440]	@ (8009d10 <_strtod_l+0x590>)
 8009b58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009b60:	f7f6 fd5a 	bl	8000618 <__aeabi_dmul>
 8009b64:	4682      	mov	sl, r0
 8009b66:	9808      	ldr	r0, [sp, #32]
 8009b68:	468b      	mov	fp, r1
 8009b6a:	f7f6 fcdb 	bl	8000524 <__aeabi_ui2d>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4650      	mov	r0, sl
 8009b74:	4659      	mov	r1, fp
 8009b76:	f7f6 fb99 	bl	80002ac <__adddf3>
 8009b7a:	2d0f      	cmp	r5, #15
 8009b7c:	4682      	mov	sl, r0
 8009b7e:	468b      	mov	fp, r1
 8009b80:	ddd5      	ble.n	8009b2e <_strtod_l+0x3ae>
 8009b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b84:	1b2c      	subs	r4, r5, r4
 8009b86:	441c      	add	r4, r3
 8009b88:	2c00      	cmp	r4, #0
 8009b8a:	f340 8096 	ble.w	8009cba <_strtod_l+0x53a>
 8009b8e:	f014 030f 	ands.w	r3, r4, #15
 8009b92:	d00a      	beq.n	8009baa <_strtod_l+0x42a>
 8009b94:	495e      	ldr	r1, [pc, #376]	@ (8009d10 <_strtod_l+0x590>)
 8009b96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba2:	f7f6 fd39 	bl	8000618 <__aeabi_dmul>
 8009ba6:	4682      	mov	sl, r0
 8009ba8:	468b      	mov	fp, r1
 8009baa:	f034 040f 	bics.w	r4, r4, #15
 8009bae:	d073      	beq.n	8009c98 <_strtod_l+0x518>
 8009bb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009bb4:	dd48      	ble.n	8009c48 <_strtod_l+0x4c8>
 8009bb6:	2400      	movs	r4, #0
 8009bb8:	46a0      	mov	r8, r4
 8009bba:	940a      	str	r4, [sp, #40]	@ 0x28
 8009bbc:	46a1      	mov	r9, r4
 8009bbe:	9a05      	ldr	r2, [sp, #20]
 8009bc0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009d18 <_strtod_l+0x598>
 8009bc4:	2322      	movs	r3, #34	@ 0x22
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	f04f 0a00 	mov.w	sl, #0
 8009bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f43f ae0f 	beq.w	80097f2 <_strtod_l+0x72>
 8009bd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bd6:	9805      	ldr	r0, [sp, #20]
 8009bd8:	f7ff f942 	bl	8008e60 <_Bfree>
 8009bdc:	9805      	ldr	r0, [sp, #20]
 8009bde:	4649      	mov	r1, r9
 8009be0:	f7ff f93e 	bl	8008e60 <_Bfree>
 8009be4:	9805      	ldr	r0, [sp, #20]
 8009be6:	4641      	mov	r1, r8
 8009be8:	f7ff f93a 	bl	8008e60 <_Bfree>
 8009bec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	f7ff f936 	bl	8008e60 <_Bfree>
 8009bf4:	9805      	ldr	r0, [sp, #20]
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	f7ff f932 	bl	8008e60 <_Bfree>
 8009bfc:	e5f9      	b.n	80097f2 <_strtod_l+0x72>
 8009bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009c04:	4293      	cmp	r3, r2
 8009c06:	dbbc      	blt.n	8009b82 <_strtod_l+0x402>
 8009c08:	4c41      	ldr	r4, [pc, #260]	@ (8009d10 <_strtod_l+0x590>)
 8009c0a:	f1c5 050f 	rsb	r5, r5, #15
 8009c0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c12:	4652      	mov	r2, sl
 8009c14:	465b      	mov	r3, fp
 8009c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c1a:	f7f6 fcfd 	bl	8000618 <__aeabi_dmul>
 8009c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c20:	1b5d      	subs	r5, r3, r5
 8009c22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009c26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c2a:	e78f      	b.n	8009b4c <_strtod_l+0x3cc>
 8009c2c:	3316      	adds	r3, #22
 8009c2e:	dba8      	blt.n	8009b82 <_strtod_l+0x402>
 8009c30:	4b37      	ldr	r3, [pc, #220]	@ (8009d10 <_strtod_l+0x590>)
 8009c32:	eba9 0808 	sub.w	r8, r9, r8
 8009c36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009c3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009c3e:	4650      	mov	r0, sl
 8009c40:	4659      	mov	r1, fp
 8009c42:	f7f6 fe13 	bl	800086c <__aeabi_ddiv>
 8009c46:	e783      	b.n	8009b50 <_strtod_l+0x3d0>
 8009c48:	4b32      	ldr	r3, [pc, #200]	@ (8009d14 <_strtod_l+0x594>)
 8009c4a:	9308      	str	r3, [sp, #32]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	1124      	asrs	r4, r4, #4
 8009c50:	4650      	mov	r0, sl
 8009c52:	4659      	mov	r1, fp
 8009c54:	461e      	mov	r6, r3
 8009c56:	2c01      	cmp	r4, #1
 8009c58:	dc21      	bgt.n	8009c9e <_strtod_l+0x51e>
 8009c5a:	b10b      	cbz	r3, 8009c60 <_strtod_l+0x4e0>
 8009c5c:	4682      	mov	sl, r0
 8009c5e:	468b      	mov	fp, r1
 8009c60:	492c      	ldr	r1, [pc, #176]	@ (8009d14 <_strtod_l+0x594>)
 8009c62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009c66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009c6a:	4652      	mov	r2, sl
 8009c6c:	465b      	mov	r3, fp
 8009c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c72:	f7f6 fcd1 	bl	8000618 <__aeabi_dmul>
 8009c76:	4b28      	ldr	r3, [pc, #160]	@ (8009d18 <_strtod_l+0x598>)
 8009c78:	460a      	mov	r2, r1
 8009c7a:	400b      	ands	r3, r1
 8009c7c:	4927      	ldr	r1, [pc, #156]	@ (8009d1c <_strtod_l+0x59c>)
 8009c7e:	428b      	cmp	r3, r1
 8009c80:	4682      	mov	sl, r0
 8009c82:	d898      	bhi.n	8009bb6 <_strtod_l+0x436>
 8009c84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009c88:	428b      	cmp	r3, r1
 8009c8a:	bf86      	itte	hi
 8009c8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009d20 <_strtod_l+0x5a0>
 8009c90:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9308      	str	r3, [sp, #32]
 8009c9c:	e07a      	b.n	8009d94 <_strtod_l+0x614>
 8009c9e:	07e2      	lsls	r2, r4, #31
 8009ca0:	d505      	bpl.n	8009cae <_strtod_l+0x52e>
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f7f6 fcb6 	bl	8000618 <__aeabi_dmul>
 8009cac:	2301      	movs	r3, #1
 8009cae:	9a08      	ldr	r2, [sp, #32]
 8009cb0:	3208      	adds	r2, #8
 8009cb2:	3601      	adds	r6, #1
 8009cb4:	1064      	asrs	r4, r4, #1
 8009cb6:	9208      	str	r2, [sp, #32]
 8009cb8:	e7cd      	b.n	8009c56 <_strtod_l+0x4d6>
 8009cba:	d0ed      	beq.n	8009c98 <_strtod_l+0x518>
 8009cbc:	4264      	negs	r4, r4
 8009cbe:	f014 020f 	ands.w	r2, r4, #15
 8009cc2:	d00a      	beq.n	8009cda <_strtod_l+0x55a>
 8009cc4:	4b12      	ldr	r3, [pc, #72]	@ (8009d10 <_strtod_l+0x590>)
 8009cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cca:	4650      	mov	r0, sl
 8009ccc:	4659      	mov	r1, fp
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fdcb 	bl	800086c <__aeabi_ddiv>
 8009cd6:	4682      	mov	sl, r0
 8009cd8:	468b      	mov	fp, r1
 8009cda:	1124      	asrs	r4, r4, #4
 8009cdc:	d0dc      	beq.n	8009c98 <_strtod_l+0x518>
 8009cde:	2c1f      	cmp	r4, #31
 8009ce0:	dd20      	ble.n	8009d24 <_strtod_l+0x5a4>
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	46a0      	mov	r8, r4
 8009ce6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ce8:	46a1      	mov	r9, r4
 8009cea:	9a05      	ldr	r2, [sp, #20]
 8009cec:	2322      	movs	r3, #34	@ 0x22
 8009cee:	f04f 0a00 	mov.w	sl, #0
 8009cf2:	f04f 0b00 	mov.w	fp, #0
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	e768      	b.n	8009bcc <_strtod_l+0x44c>
 8009cfa:	bf00      	nop
 8009cfc:	0800be8d 	.word	0x0800be8d
 8009d00:	0800c0a4 	.word	0x0800c0a4
 8009d04:	0800be85 	.word	0x0800be85
 8009d08:	0800beba 	.word	0x0800beba
 8009d0c:	0800c268 	.word	0x0800c268
 8009d10:	0800bfd8 	.word	0x0800bfd8
 8009d14:	0800bfb0 	.word	0x0800bfb0
 8009d18:	7ff00000 	.word	0x7ff00000
 8009d1c:	7ca00000 	.word	0x7ca00000
 8009d20:	7fefffff 	.word	0x7fefffff
 8009d24:	f014 0310 	ands.w	r3, r4, #16
 8009d28:	bf18      	it	ne
 8009d2a:	236a      	movne	r3, #106	@ 0x6a
 8009d2c:	4ea9      	ldr	r6, [pc, #676]	@ (8009fd4 <_strtod_l+0x854>)
 8009d2e:	9308      	str	r3, [sp, #32]
 8009d30:	4650      	mov	r0, sl
 8009d32:	4659      	mov	r1, fp
 8009d34:	2300      	movs	r3, #0
 8009d36:	07e2      	lsls	r2, r4, #31
 8009d38:	d504      	bpl.n	8009d44 <_strtod_l+0x5c4>
 8009d3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d3e:	f7f6 fc6b 	bl	8000618 <__aeabi_dmul>
 8009d42:	2301      	movs	r3, #1
 8009d44:	1064      	asrs	r4, r4, #1
 8009d46:	f106 0608 	add.w	r6, r6, #8
 8009d4a:	d1f4      	bne.n	8009d36 <_strtod_l+0x5b6>
 8009d4c:	b10b      	cbz	r3, 8009d52 <_strtod_l+0x5d2>
 8009d4e:	4682      	mov	sl, r0
 8009d50:	468b      	mov	fp, r1
 8009d52:	9b08      	ldr	r3, [sp, #32]
 8009d54:	b1b3      	cbz	r3, 8009d84 <_strtod_l+0x604>
 8009d56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	4659      	mov	r1, fp
 8009d62:	dd0f      	ble.n	8009d84 <_strtod_l+0x604>
 8009d64:	2b1f      	cmp	r3, #31
 8009d66:	dd55      	ble.n	8009e14 <_strtod_l+0x694>
 8009d68:	2b34      	cmp	r3, #52	@ 0x34
 8009d6a:	bfde      	ittt	le
 8009d6c:	f04f 33ff 	movle.w	r3, #4294967295
 8009d70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009d74:	4093      	lslle	r3, r2
 8009d76:	f04f 0a00 	mov.w	sl, #0
 8009d7a:	bfcc      	ite	gt
 8009d7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d80:	ea03 0b01 	andle.w	fp, r3, r1
 8009d84:	2200      	movs	r2, #0
 8009d86:	2300      	movs	r3, #0
 8009d88:	4650      	mov	r0, sl
 8009d8a:	4659      	mov	r1, fp
 8009d8c:	f7f6 feac 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d1a6      	bne.n	8009ce2 <_strtod_l+0x562>
 8009d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d9a:	9805      	ldr	r0, [sp, #20]
 8009d9c:	462b      	mov	r3, r5
 8009d9e:	463a      	mov	r2, r7
 8009da0:	f7ff f8c6 	bl	8008f30 <__s2b>
 8009da4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f43f af05 	beq.w	8009bb6 <_strtod_l+0x436>
 8009dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dae:	2a00      	cmp	r2, #0
 8009db0:	eba9 0308 	sub.w	r3, r9, r8
 8009db4:	bfa8      	it	ge
 8009db6:	2300      	movge	r3, #0
 8009db8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009dba:	2400      	movs	r4, #0
 8009dbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009dc0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009dc2:	46a0      	mov	r8, r4
 8009dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dc6:	9805      	ldr	r0, [sp, #20]
 8009dc8:	6859      	ldr	r1, [r3, #4]
 8009dca:	f7ff f809 	bl	8008de0 <_Balloc>
 8009dce:	4681      	mov	r9, r0
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f43f aef4 	beq.w	8009bbe <_strtod_l+0x43e>
 8009dd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd8:	691a      	ldr	r2, [r3, #16]
 8009dda:	3202      	adds	r2, #2
 8009ddc:	f103 010c 	add.w	r1, r3, #12
 8009de0:	0092      	lsls	r2, r2, #2
 8009de2:	300c      	adds	r0, #12
 8009de4:	f001 f8ee 	bl	800afc4 <memcpy>
 8009de8:	ec4b ab10 	vmov	d0, sl, fp
 8009dec:	9805      	ldr	r0, [sp, #20]
 8009dee:	aa1c      	add	r2, sp, #112	@ 0x70
 8009df0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009df2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009df6:	f7ff fbd7 	bl	80095a8 <__d2b>
 8009dfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f43f aede 	beq.w	8009bbe <_strtod_l+0x43e>
 8009e02:	9805      	ldr	r0, [sp, #20]
 8009e04:	2101      	movs	r1, #1
 8009e06:	f7ff f929 	bl	800905c <__i2b>
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	b948      	cbnz	r0, 8009e22 <_strtod_l+0x6a2>
 8009e0e:	f04f 0800 	mov.w	r8, #0
 8009e12:	e6d4      	b.n	8009bbe <_strtod_l+0x43e>
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295
 8009e18:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1c:	ea03 0a0a 	and.w	sl, r3, sl
 8009e20:	e7b0      	b.n	8009d84 <_strtod_l+0x604>
 8009e22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009e24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	bfab      	itete	ge
 8009e2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009e2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009e2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009e30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009e32:	bfac      	ite	ge
 8009e34:	18ef      	addge	r7, r5, r3
 8009e36:	1b5e      	sublt	r6, r3, r5
 8009e38:	9b08      	ldr	r3, [sp, #32]
 8009e3a:	1aed      	subs	r5, r5, r3
 8009e3c:	4415      	add	r5, r2
 8009e3e:	4b66      	ldr	r3, [pc, #408]	@ (8009fd8 <_strtod_l+0x858>)
 8009e40:	3d01      	subs	r5, #1
 8009e42:	429d      	cmp	r5, r3
 8009e44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e48:	da50      	bge.n	8009eec <_strtod_l+0x76c>
 8009e4a:	1b5b      	subs	r3, r3, r5
 8009e4c:	2b1f      	cmp	r3, #31
 8009e4e:	eba2 0203 	sub.w	r2, r2, r3
 8009e52:	f04f 0101 	mov.w	r1, #1
 8009e56:	dc3d      	bgt.n	8009ed4 <_strtod_l+0x754>
 8009e58:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e5e:	2300      	movs	r3, #0
 8009e60:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e62:	18bd      	adds	r5, r7, r2
 8009e64:	9b08      	ldr	r3, [sp, #32]
 8009e66:	42af      	cmp	r7, r5
 8009e68:	4416      	add	r6, r2
 8009e6a:	441e      	add	r6, r3
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	bfa8      	it	ge
 8009e70:	462b      	movge	r3, r5
 8009e72:	42b3      	cmp	r3, r6
 8009e74:	bfa8      	it	ge
 8009e76:	4633      	movge	r3, r6
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfc2      	ittt	gt
 8009e7c:	1aed      	subgt	r5, r5, r3
 8009e7e:	1af6      	subgt	r6, r6, r3
 8009e80:	1aff      	subgt	r7, r7, r3
 8009e82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	dd16      	ble.n	8009eb6 <_strtod_l+0x736>
 8009e88:	4641      	mov	r1, r8
 8009e8a:	9805      	ldr	r0, [sp, #20]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f7ff f9a5 	bl	80091dc <__pow5mult>
 8009e92:	4680      	mov	r8, r0
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d0ba      	beq.n	8009e0e <_strtod_l+0x68e>
 8009e98:	4601      	mov	r1, r0
 8009e9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e9c:	9805      	ldr	r0, [sp, #20]
 8009e9e:	f7ff f8f3 	bl	8009088 <__multiply>
 8009ea2:	900e      	str	r0, [sp, #56]	@ 0x38
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f43f ae8a 	beq.w	8009bbe <_strtod_l+0x43e>
 8009eaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009eac:	9805      	ldr	r0, [sp, #20]
 8009eae:	f7fe ffd7 	bl	8008e60 <_Bfree>
 8009eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	dc1d      	bgt.n	8009ef6 <_strtod_l+0x776>
 8009eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dd23      	ble.n	8009f08 <_strtod_l+0x788>
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009ec4:	9805      	ldr	r0, [sp, #20]
 8009ec6:	f7ff f989 	bl	80091dc <__pow5mult>
 8009eca:	4681      	mov	r9, r0
 8009ecc:	b9e0      	cbnz	r0, 8009f08 <_strtod_l+0x788>
 8009ece:	f04f 0900 	mov.w	r9, #0
 8009ed2:	e674      	b.n	8009bbe <_strtod_l+0x43e>
 8009ed4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009ed8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009edc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009ee0:	35e2      	adds	r5, #226	@ 0xe2
 8009ee2:	fa01 f305 	lsl.w	r3, r1, r5
 8009ee6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ee8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009eea:	e7ba      	b.n	8009e62 <_strtod_l+0x6e2>
 8009eec:	2300      	movs	r3, #0
 8009eee:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ef4:	e7b5      	b.n	8009e62 <_strtod_l+0x6e2>
 8009ef6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ef8:	9805      	ldr	r0, [sp, #20]
 8009efa:	462a      	mov	r2, r5
 8009efc:	f7ff f9c8 	bl	8009290 <__lshift>
 8009f00:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d1d9      	bne.n	8009eba <_strtod_l+0x73a>
 8009f06:	e65a      	b.n	8009bbe <_strtod_l+0x43e>
 8009f08:	2e00      	cmp	r6, #0
 8009f0a:	dd07      	ble.n	8009f1c <_strtod_l+0x79c>
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	9805      	ldr	r0, [sp, #20]
 8009f10:	4632      	mov	r2, r6
 8009f12:	f7ff f9bd 	bl	8009290 <__lshift>
 8009f16:	4681      	mov	r9, r0
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d0d8      	beq.n	8009ece <_strtod_l+0x74e>
 8009f1c:	2f00      	cmp	r7, #0
 8009f1e:	dd08      	ble.n	8009f32 <_strtod_l+0x7b2>
 8009f20:	4641      	mov	r1, r8
 8009f22:	9805      	ldr	r0, [sp, #20]
 8009f24:	463a      	mov	r2, r7
 8009f26:	f7ff f9b3 	bl	8009290 <__lshift>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f43f ae46 	beq.w	8009bbe <_strtod_l+0x43e>
 8009f32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f34:	9805      	ldr	r0, [sp, #20]
 8009f36:	464a      	mov	r2, r9
 8009f38:	f7ff fa32 	bl	80093a0 <__mdiff>
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f43f ae3d 	beq.w	8009bbe <_strtod_l+0x43e>
 8009f44:	68c3      	ldr	r3, [r0, #12]
 8009f46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60c3      	str	r3, [r0, #12]
 8009f4c:	4641      	mov	r1, r8
 8009f4e:	f7ff fa0b 	bl	8009368 <__mcmp>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	da46      	bge.n	8009fe4 <_strtod_l+0x864>
 8009f56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f58:	ea53 030a 	orrs.w	r3, r3, sl
 8009f5c:	d16c      	bne.n	800a038 <_strtod_l+0x8b8>
 8009f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d168      	bne.n	800a038 <_strtod_l+0x8b8>
 8009f66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f6a:	0d1b      	lsrs	r3, r3, #20
 8009f6c:	051b      	lsls	r3, r3, #20
 8009f6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f72:	d961      	bls.n	800a038 <_strtod_l+0x8b8>
 8009f74:	6963      	ldr	r3, [r4, #20]
 8009f76:	b913      	cbnz	r3, 8009f7e <_strtod_l+0x7fe>
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	dd5c      	ble.n	800a038 <_strtod_l+0x8b8>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	2201      	movs	r2, #1
 8009f82:	9805      	ldr	r0, [sp, #20]
 8009f84:	f7ff f984 	bl	8009290 <__lshift>
 8009f88:	4641      	mov	r1, r8
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	f7ff f9ec 	bl	8009368 <__mcmp>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	dd51      	ble.n	800a038 <_strtod_l+0x8b8>
 8009f94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f98:	9a08      	ldr	r2, [sp, #32]
 8009f9a:	0d1b      	lsrs	r3, r3, #20
 8009f9c:	051b      	lsls	r3, r3, #20
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	d06b      	beq.n	800a07a <_strtod_l+0x8fa>
 8009fa2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009fa6:	d868      	bhi.n	800a07a <_strtod_l+0x8fa>
 8009fa8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009fac:	f67f ae9d 	bls.w	8009cea <_strtod_l+0x56a>
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <_strtod_l+0x85c>)
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	4659      	mov	r1, fp
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f7f6 fb2e 	bl	8000618 <__aeabi_dmul>
 8009fbc:	4b08      	ldr	r3, [pc, #32]	@ (8009fe0 <_strtod_l+0x860>)
 8009fbe:	400b      	ands	r3, r1
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	468b      	mov	fp, r1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f47f ae05 	bne.w	8009bd4 <_strtod_l+0x454>
 8009fca:	9a05      	ldr	r2, [sp, #20]
 8009fcc:	2322      	movs	r3, #34	@ 0x22
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	e600      	b.n	8009bd4 <_strtod_l+0x454>
 8009fd2:	bf00      	nop
 8009fd4:	0800c0d0 	.word	0x0800c0d0
 8009fd8:	fffffc02 	.word	0xfffffc02
 8009fdc:	39500000 	.word	0x39500000
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fe8:	d165      	bne.n	800a0b6 <_strtod_l+0x936>
 8009fea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009fec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ff0:	b35a      	cbz	r2, 800a04a <_strtod_l+0x8ca>
 8009ff2:	4a9f      	ldr	r2, [pc, #636]	@ (800a270 <_strtod_l+0xaf0>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d12b      	bne.n	800a050 <_strtod_l+0x8d0>
 8009ff8:	9b08      	ldr	r3, [sp, #32]
 8009ffa:	4651      	mov	r1, sl
 8009ffc:	b303      	cbz	r3, 800a040 <_strtod_l+0x8c0>
 8009ffe:	4b9d      	ldr	r3, [pc, #628]	@ (800a274 <_strtod_l+0xaf4>)
 800a000:	465a      	mov	r2, fp
 800a002:	4013      	ands	r3, r2
 800a004:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a008:	f04f 32ff 	mov.w	r2, #4294967295
 800a00c:	d81b      	bhi.n	800a046 <_strtod_l+0x8c6>
 800a00e:	0d1b      	lsrs	r3, r3, #20
 800a010:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a014:	fa02 f303 	lsl.w	r3, r2, r3
 800a018:	4299      	cmp	r1, r3
 800a01a:	d119      	bne.n	800a050 <_strtod_l+0x8d0>
 800a01c:	4b96      	ldr	r3, [pc, #600]	@ (800a278 <_strtod_l+0xaf8>)
 800a01e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a020:	429a      	cmp	r2, r3
 800a022:	d102      	bne.n	800a02a <_strtod_l+0x8aa>
 800a024:	3101      	adds	r1, #1
 800a026:	f43f adca 	beq.w	8009bbe <_strtod_l+0x43e>
 800a02a:	4b92      	ldr	r3, [pc, #584]	@ (800a274 <_strtod_l+0xaf4>)
 800a02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a02e:	401a      	ands	r2, r3
 800a030:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a034:	f04f 0a00 	mov.w	sl, #0
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1b8      	bne.n	8009fb0 <_strtod_l+0x830>
 800a03e:	e5c9      	b.n	8009bd4 <_strtod_l+0x454>
 800a040:	f04f 33ff 	mov.w	r3, #4294967295
 800a044:	e7e8      	b.n	800a018 <_strtod_l+0x898>
 800a046:	4613      	mov	r3, r2
 800a048:	e7e6      	b.n	800a018 <_strtod_l+0x898>
 800a04a:	ea53 030a 	orrs.w	r3, r3, sl
 800a04e:	d0a1      	beq.n	8009f94 <_strtod_l+0x814>
 800a050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a052:	b1db      	cbz	r3, 800a08c <_strtod_l+0x90c>
 800a054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a056:	4213      	tst	r3, r2
 800a058:	d0ee      	beq.n	800a038 <_strtod_l+0x8b8>
 800a05a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a05c:	9a08      	ldr	r2, [sp, #32]
 800a05e:	4650      	mov	r0, sl
 800a060:	4659      	mov	r1, fp
 800a062:	b1bb      	cbz	r3, 800a094 <_strtod_l+0x914>
 800a064:	f7ff fb6e 	bl	8009744 <sulp>
 800a068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a06c:	ec53 2b10 	vmov	r2, r3, d0
 800a070:	f7f6 f91c 	bl	80002ac <__adddf3>
 800a074:	4682      	mov	sl, r0
 800a076:	468b      	mov	fp, r1
 800a078:	e7de      	b.n	800a038 <_strtod_l+0x8b8>
 800a07a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a07e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a082:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a086:	f04f 3aff 	mov.w	sl, #4294967295
 800a08a:	e7d5      	b.n	800a038 <_strtod_l+0x8b8>
 800a08c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a08e:	ea13 0f0a 	tst.w	r3, sl
 800a092:	e7e1      	b.n	800a058 <_strtod_l+0x8d8>
 800a094:	f7ff fb56 	bl	8009744 <sulp>
 800a098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a09c:	ec53 2b10 	vmov	r2, r3, d0
 800a0a0:	f7f6 f902 	bl	80002a8 <__aeabi_dsub>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	f7f6 fd1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d0c1      	beq.n	800a038 <_strtod_l+0x8b8>
 800a0b4:	e619      	b.n	8009cea <_strtod_l+0x56a>
 800a0b6:	4641      	mov	r1, r8
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff facd 	bl	8009658 <__ratio>
 800a0be:	ec57 6b10 	vmov	r6, r7, d0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 fd20 	bl	8000b10 <__aeabi_dcmple>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d06f      	beq.n	800a1b4 <_strtod_l+0xa34>
 800a0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d17a      	bne.n	800a1d0 <_strtod_l+0xa50>
 800a0da:	f1ba 0f00 	cmp.w	sl, #0
 800a0de:	d158      	bne.n	800a192 <_strtod_l+0xa12>
 800a0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d15a      	bne.n	800a1a0 <_strtod_l+0xa20>
 800a0ea:	4b64      	ldr	r3, [pc, #400]	@ (800a27c <_strtod_l+0xafc>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	f7f6 fd03 	bl	8000afc <__aeabi_dcmplt>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d159      	bne.n	800a1ae <_strtod_l+0xa2e>
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4b60      	ldr	r3, [pc, #384]	@ (800a280 <_strtod_l+0xb00>)
 800a100:	2200      	movs	r2, #0
 800a102:	f7f6 fa89 	bl	8000618 <__aeabi_dmul>
 800a106:	4606      	mov	r6, r0
 800a108:	460f      	mov	r7, r1
 800a10a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a10e:	9606      	str	r6, [sp, #24]
 800a110:	9307      	str	r3, [sp, #28]
 800a112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a116:	4d57      	ldr	r5, [pc, #348]	@ (800a274 <_strtod_l+0xaf4>)
 800a118:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11e:	401d      	ands	r5, r3
 800a120:	4b58      	ldr	r3, [pc, #352]	@ (800a284 <_strtod_l+0xb04>)
 800a122:	429d      	cmp	r5, r3
 800a124:	f040 80b2 	bne.w	800a28c <_strtod_l+0xb0c>
 800a128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a12a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a12e:	ec4b ab10 	vmov	d0, sl, fp
 800a132:	f7ff f9c9 	bl	80094c8 <__ulp>
 800a136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a13a:	ec51 0b10 	vmov	r0, r1, d0
 800a13e:	f7f6 fa6b 	bl	8000618 <__aeabi_dmul>
 800a142:	4652      	mov	r2, sl
 800a144:	465b      	mov	r3, fp
 800a146:	f7f6 f8b1 	bl	80002ac <__adddf3>
 800a14a:	460b      	mov	r3, r1
 800a14c:	4949      	ldr	r1, [pc, #292]	@ (800a274 <_strtod_l+0xaf4>)
 800a14e:	4a4e      	ldr	r2, [pc, #312]	@ (800a288 <_strtod_l+0xb08>)
 800a150:	4019      	ands	r1, r3
 800a152:	4291      	cmp	r1, r2
 800a154:	4682      	mov	sl, r0
 800a156:	d942      	bls.n	800a1de <_strtod_l+0xa5e>
 800a158:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a15a:	4b47      	ldr	r3, [pc, #284]	@ (800a278 <_strtod_l+0xaf8>)
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d103      	bne.n	800a168 <_strtod_l+0x9e8>
 800a160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a162:	3301      	adds	r3, #1
 800a164:	f43f ad2b 	beq.w	8009bbe <_strtod_l+0x43e>
 800a168:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a278 <_strtod_l+0xaf8>
 800a16c:	f04f 3aff 	mov.w	sl, #4294967295
 800a170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a172:	9805      	ldr	r0, [sp, #20]
 800a174:	f7fe fe74 	bl	8008e60 <_Bfree>
 800a178:	9805      	ldr	r0, [sp, #20]
 800a17a:	4649      	mov	r1, r9
 800a17c:	f7fe fe70 	bl	8008e60 <_Bfree>
 800a180:	9805      	ldr	r0, [sp, #20]
 800a182:	4641      	mov	r1, r8
 800a184:	f7fe fe6c 	bl	8008e60 <_Bfree>
 800a188:	9805      	ldr	r0, [sp, #20]
 800a18a:	4621      	mov	r1, r4
 800a18c:	f7fe fe68 	bl	8008e60 <_Bfree>
 800a190:	e618      	b.n	8009dc4 <_strtod_l+0x644>
 800a192:	f1ba 0f01 	cmp.w	sl, #1
 800a196:	d103      	bne.n	800a1a0 <_strtod_l+0xa20>
 800a198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f43f ada5 	beq.w	8009cea <_strtod_l+0x56a>
 800a1a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a250 <_strtod_l+0xad0>
 800a1a4:	4f35      	ldr	r7, [pc, #212]	@ (800a27c <_strtod_l+0xafc>)
 800a1a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1aa:	2600      	movs	r6, #0
 800a1ac:	e7b1      	b.n	800a112 <_strtod_l+0x992>
 800a1ae:	4f34      	ldr	r7, [pc, #208]	@ (800a280 <_strtod_l+0xb00>)
 800a1b0:	2600      	movs	r6, #0
 800a1b2:	e7aa      	b.n	800a10a <_strtod_l+0x98a>
 800a1b4:	4b32      	ldr	r3, [pc, #200]	@ (800a280 <_strtod_l+0xb00>)
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f7f6 fa2c 	bl	8000618 <__aeabi_dmul>
 800a1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	460f      	mov	r7, r1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d09f      	beq.n	800a10a <_strtod_l+0x98a>
 800a1ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a1ce:	e7a0      	b.n	800a112 <_strtod_l+0x992>
 800a1d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a258 <_strtod_l+0xad8>
 800a1d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1d8:	ec57 6b17 	vmov	r6, r7, d7
 800a1dc:	e799      	b.n	800a112 <_strtod_l+0x992>
 800a1de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a1e2:	9b08      	ldr	r3, [sp, #32]
 800a1e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1c1      	bne.n	800a170 <_strtod_l+0x9f0>
 800a1ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1f0:	0d1b      	lsrs	r3, r3, #20
 800a1f2:	051b      	lsls	r3, r3, #20
 800a1f4:	429d      	cmp	r5, r3
 800a1f6:	d1bb      	bne.n	800a170 <_strtod_l+0x9f0>
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	f7f6 fd6c 	bl	8000cd8 <__aeabi_d2lz>
 800a200:	f7f6 f9dc 	bl	80005bc <__aeabi_l2d>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f6 f84c 	bl	80002a8 <__aeabi_dsub>
 800a210:	460b      	mov	r3, r1
 800a212:	4602      	mov	r2, r0
 800a214:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a218:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a21e:	ea46 060a 	orr.w	r6, r6, sl
 800a222:	431e      	orrs	r6, r3
 800a224:	d06f      	beq.n	800a306 <_strtod_l+0xb86>
 800a226:	a30e      	add	r3, pc, #56	@ (adr r3, 800a260 <_strtod_l+0xae0>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7f6 fc66 	bl	8000afc <__aeabi_dcmplt>
 800a230:	2800      	cmp	r0, #0
 800a232:	f47f accf 	bne.w	8009bd4 <_strtod_l+0x454>
 800a236:	a30c      	add	r3, pc, #48	@ (adr r3, 800a268 <_strtod_l+0xae8>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a240:	f7f6 fc7a 	bl	8000b38 <__aeabi_dcmpgt>
 800a244:	2800      	cmp	r0, #0
 800a246:	d093      	beq.n	800a170 <_strtod_l+0x9f0>
 800a248:	e4c4      	b.n	8009bd4 <_strtod_l+0x454>
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w
 800a250:	00000000 	.word	0x00000000
 800a254:	bff00000 	.word	0xbff00000
 800a258:	00000000 	.word	0x00000000
 800a25c:	3ff00000 	.word	0x3ff00000
 800a260:	94a03595 	.word	0x94a03595
 800a264:	3fdfffff 	.word	0x3fdfffff
 800a268:	35afe535 	.word	0x35afe535
 800a26c:	3fe00000 	.word	0x3fe00000
 800a270:	000fffff 	.word	0x000fffff
 800a274:	7ff00000 	.word	0x7ff00000
 800a278:	7fefffff 	.word	0x7fefffff
 800a27c:	3ff00000 	.word	0x3ff00000
 800a280:	3fe00000 	.word	0x3fe00000
 800a284:	7fe00000 	.word	0x7fe00000
 800a288:	7c9fffff 	.word	0x7c9fffff
 800a28c:	9b08      	ldr	r3, [sp, #32]
 800a28e:	b323      	cbz	r3, 800a2da <_strtod_l+0xb5a>
 800a290:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a294:	d821      	bhi.n	800a2da <_strtod_l+0xb5a>
 800a296:	a328      	add	r3, pc, #160	@ (adr r3, 800a338 <_strtod_l+0xbb8>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	4630      	mov	r0, r6
 800a29e:	4639      	mov	r1, r7
 800a2a0:	f7f6 fc36 	bl	8000b10 <__aeabi_dcmple>
 800a2a4:	b1a0      	cbz	r0, 800a2d0 <_strtod_l+0xb50>
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7f6 fc8d 	bl	8000bc8 <__aeabi_d2uiz>
 800a2ae:	2801      	cmp	r0, #1
 800a2b0:	bf38      	it	cc
 800a2b2:	2001      	movcc	r0, #1
 800a2b4:	f7f6 f936 	bl	8000524 <__aeabi_ui2d>
 800a2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460f      	mov	r7, r1
 800a2be:	b9fb      	cbnz	r3, 800a300 <_strtod_l+0xb80>
 800a2c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a2c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a2cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a2d6:	1b5b      	subs	r3, r3, r5
 800a2d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a2da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a2de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a2e2:	f7ff f8f1 	bl	80094c8 <__ulp>
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	ec53 2b10 	vmov	r2, r3, d0
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	f7f6 f993 	bl	8000618 <__aeabi_dmul>
 800a2f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a2f6:	f7f5 ffd9 	bl	80002ac <__adddf3>
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	e770      	b.n	800a1e2 <_strtod_l+0xa62>
 800a300:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a304:	e7e0      	b.n	800a2c8 <_strtod_l+0xb48>
 800a306:	a30e      	add	r3, pc, #56	@ (adr r3, 800a340 <_strtod_l+0xbc0>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f6 fbf6 	bl	8000afc <__aeabi_dcmplt>
 800a310:	e798      	b.n	800a244 <_strtod_l+0xac4>
 800a312:	2300      	movs	r3, #0
 800a314:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a316:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a318:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	f7ff ba6d 	b.w	80097fa <_strtod_l+0x7a>
 800a320:	2a65      	cmp	r2, #101	@ 0x65
 800a322:	f43f ab66 	beq.w	80099f2 <_strtod_l+0x272>
 800a326:	2a45      	cmp	r2, #69	@ 0x45
 800a328:	f43f ab63 	beq.w	80099f2 <_strtod_l+0x272>
 800a32c:	2301      	movs	r3, #1
 800a32e:	f7ff bb9e 	b.w	8009a6e <_strtod_l+0x2ee>
 800a332:	bf00      	nop
 800a334:	f3af 8000 	nop.w
 800a338:	ffc00000 	.word	0xffc00000
 800a33c:	41dfffff 	.word	0x41dfffff
 800a340:	94a03595 	.word	0x94a03595
 800a344:	3fcfffff 	.word	0x3fcfffff

0800a348 <_strtod_r>:
 800a348:	4b01      	ldr	r3, [pc, #4]	@ (800a350 <_strtod_r+0x8>)
 800a34a:	f7ff ba19 	b.w	8009780 <_strtod_l>
 800a34e:	bf00      	nop
 800a350:	20000870 	.word	0x20000870

0800a354 <_strtol_l.constprop.0>:
 800a354:	2b24      	cmp	r3, #36	@ 0x24
 800a356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35a:	4686      	mov	lr, r0
 800a35c:	4690      	mov	r8, r2
 800a35e:	d801      	bhi.n	800a364 <_strtol_l.constprop.0+0x10>
 800a360:	2b01      	cmp	r3, #1
 800a362:	d106      	bne.n	800a372 <_strtol_l.constprop.0+0x1e>
 800a364:	f7fd fdba 	bl	8007edc <__errno>
 800a368:	2316      	movs	r3, #22
 800a36a:	6003      	str	r3, [r0, #0]
 800a36c:	2000      	movs	r0, #0
 800a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a372:	4834      	ldr	r0, [pc, #208]	@ (800a444 <_strtol_l.constprop.0+0xf0>)
 800a374:	460d      	mov	r5, r1
 800a376:	462a      	mov	r2, r5
 800a378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a37c:	5d06      	ldrb	r6, [r0, r4]
 800a37e:	f016 0608 	ands.w	r6, r6, #8
 800a382:	d1f8      	bne.n	800a376 <_strtol_l.constprop.0+0x22>
 800a384:	2c2d      	cmp	r4, #45	@ 0x2d
 800a386:	d12d      	bne.n	800a3e4 <_strtol_l.constprop.0+0x90>
 800a388:	782c      	ldrb	r4, [r5, #0]
 800a38a:	2601      	movs	r6, #1
 800a38c:	1c95      	adds	r5, r2, #2
 800a38e:	f033 0210 	bics.w	r2, r3, #16
 800a392:	d109      	bne.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a394:	2c30      	cmp	r4, #48	@ 0x30
 800a396:	d12a      	bne.n	800a3ee <_strtol_l.constprop.0+0x9a>
 800a398:	782a      	ldrb	r2, [r5, #0]
 800a39a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a39e:	2a58      	cmp	r2, #88	@ 0x58
 800a3a0:	d125      	bne.n	800a3ee <_strtol_l.constprop.0+0x9a>
 800a3a2:	786c      	ldrb	r4, [r5, #1]
 800a3a4:	2310      	movs	r3, #16
 800a3a6:	3502      	adds	r5, #2
 800a3a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a3ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	fbbc f9f3 	udiv	r9, ip, r3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a3c0:	2f09      	cmp	r7, #9
 800a3c2:	d81b      	bhi.n	800a3fc <_strtol_l.constprop.0+0xa8>
 800a3c4:	463c      	mov	r4, r7
 800a3c6:	42a3      	cmp	r3, r4
 800a3c8:	dd27      	ble.n	800a41a <_strtol_l.constprop.0+0xc6>
 800a3ca:	1c57      	adds	r7, r2, #1
 800a3cc:	d007      	beq.n	800a3de <_strtol_l.constprop.0+0x8a>
 800a3ce:	4581      	cmp	r9, r0
 800a3d0:	d320      	bcc.n	800a414 <_strtol_l.constprop.0+0xc0>
 800a3d2:	d101      	bne.n	800a3d8 <_strtol_l.constprop.0+0x84>
 800a3d4:	45a2      	cmp	sl, r4
 800a3d6:	db1d      	blt.n	800a414 <_strtol_l.constprop.0+0xc0>
 800a3d8:	fb00 4003 	mla	r0, r0, r3, r4
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3e2:	e7eb      	b.n	800a3bc <_strtol_l.constprop.0+0x68>
 800a3e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a3e6:	bf04      	itt	eq
 800a3e8:	782c      	ldrbeq	r4, [r5, #0]
 800a3ea:	1c95      	addeq	r5, r2, #2
 800a3ec:	e7cf      	b.n	800a38e <_strtol_l.constprop.0+0x3a>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1da      	bne.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a3f2:	2c30      	cmp	r4, #48	@ 0x30
 800a3f4:	bf0c      	ite	eq
 800a3f6:	2308      	moveq	r3, #8
 800a3f8:	230a      	movne	r3, #10
 800a3fa:	e7d5      	b.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a3fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a400:	2f19      	cmp	r7, #25
 800a402:	d801      	bhi.n	800a408 <_strtol_l.constprop.0+0xb4>
 800a404:	3c37      	subs	r4, #55	@ 0x37
 800a406:	e7de      	b.n	800a3c6 <_strtol_l.constprop.0+0x72>
 800a408:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a40c:	2f19      	cmp	r7, #25
 800a40e:	d804      	bhi.n	800a41a <_strtol_l.constprop.0+0xc6>
 800a410:	3c57      	subs	r4, #87	@ 0x57
 800a412:	e7d8      	b.n	800a3c6 <_strtol_l.constprop.0+0x72>
 800a414:	f04f 32ff 	mov.w	r2, #4294967295
 800a418:	e7e1      	b.n	800a3de <_strtol_l.constprop.0+0x8a>
 800a41a:	1c53      	adds	r3, r2, #1
 800a41c:	d108      	bne.n	800a430 <_strtol_l.constprop.0+0xdc>
 800a41e:	2322      	movs	r3, #34	@ 0x22
 800a420:	f8ce 3000 	str.w	r3, [lr]
 800a424:	4660      	mov	r0, ip
 800a426:	f1b8 0f00 	cmp.w	r8, #0
 800a42a:	d0a0      	beq.n	800a36e <_strtol_l.constprop.0+0x1a>
 800a42c:	1e69      	subs	r1, r5, #1
 800a42e:	e006      	b.n	800a43e <_strtol_l.constprop.0+0xea>
 800a430:	b106      	cbz	r6, 800a434 <_strtol_l.constprop.0+0xe0>
 800a432:	4240      	negs	r0, r0
 800a434:	f1b8 0f00 	cmp.w	r8, #0
 800a438:	d099      	beq.n	800a36e <_strtol_l.constprop.0+0x1a>
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	d1f6      	bne.n	800a42c <_strtol_l.constprop.0+0xd8>
 800a43e:	f8c8 1000 	str.w	r1, [r8]
 800a442:	e794      	b.n	800a36e <_strtol_l.constprop.0+0x1a>
 800a444:	0800c0f9 	.word	0x0800c0f9

0800a448 <_strtol_r>:
 800a448:	f7ff bf84 	b.w	800a354 <_strtol_l.constprop.0>

0800a44c <__ssputs_r>:
 800a44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a450:	688e      	ldr	r6, [r1, #8]
 800a452:	461f      	mov	r7, r3
 800a454:	42be      	cmp	r6, r7
 800a456:	680b      	ldr	r3, [r1, #0]
 800a458:	4682      	mov	sl, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	4690      	mov	r8, r2
 800a45e:	d82d      	bhi.n	800a4bc <__ssputs_r+0x70>
 800a460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a464:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a468:	d026      	beq.n	800a4b8 <__ssputs_r+0x6c>
 800a46a:	6965      	ldr	r5, [r4, #20]
 800a46c:	6909      	ldr	r1, [r1, #16]
 800a46e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a472:	eba3 0901 	sub.w	r9, r3, r1
 800a476:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a47a:	1c7b      	adds	r3, r7, #1
 800a47c:	444b      	add	r3, r9
 800a47e:	106d      	asrs	r5, r5, #1
 800a480:	429d      	cmp	r5, r3
 800a482:	bf38      	it	cc
 800a484:	461d      	movcc	r5, r3
 800a486:	0553      	lsls	r3, r2, #21
 800a488:	d527      	bpl.n	800a4da <__ssputs_r+0x8e>
 800a48a:	4629      	mov	r1, r5
 800a48c:	f7fe fc1c 	bl	8008cc8 <_malloc_r>
 800a490:	4606      	mov	r6, r0
 800a492:	b360      	cbz	r0, 800a4ee <__ssputs_r+0xa2>
 800a494:	6921      	ldr	r1, [r4, #16]
 800a496:	464a      	mov	r2, r9
 800a498:	f000 fd94 	bl	800afc4 <memcpy>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	6126      	str	r6, [r4, #16]
 800a4aa:	6165      	str	r5, [r4, #20]
 800a4ac:	444e      	add	r6, r9
 800a4ae:	eba5 0509 	sub.w	r5, r5, r9
 800a4b2:	6026      	str	r6, [r4, #0]
 800a4b4:	60a5      	str	r5, [r4, #8]
 800a4b6:	463e      	mov	r6, r7
 800a4b8:	42be      	cmp	r6, r7
 800a4ba:	d900      	bls.n	800a4be <__ssputs_r+0x72>
 800a4bc:	463e      	mov	r6, r7
 800a4be:	6820      	ldr	r0, [r4, #0]
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	4641      	mov	r1, r8
 800a4c4:	f000 fd53 	bl	800af6e <memmove>
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	1b9b      	subs	r3, r3, r6
 800a4cc:	60a3      	str	r3, [r4, #8]
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	4433      	add	r3, r6
 800a4d2:	6023      	str	r3, [r4, #0]
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4da:	462a      	mov	r2, r5
 800a4dc:	f001 f905 	bl	800b6ea <_realloc_r>
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d1e0      	bne.n	800a4a8 <__ssputs_r+0x5c>
 800a4e6:	6921      	ldr	r1, [r4, #16]
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	f7fe fb79 	bl	8008be0 <_free_r>
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	f8ca 3000 	str.w	r3, [sl]
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4fa:	81a3      	strh	r3, [r4, #12]
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a500:	e7e9      	b.n	800a4d6 <__ssputs_r+0x8a>
	...

0800a504 <_svfiprintf_r>:
 800a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a508:	4698      	mov	r8, r3
 800a50a:	898b      	ldrh	r3, [r1, #12]
 800a50c:	061b      	lsls	r3, r3, #24
 800a50e:	b09d      	sub	sp, #116	@ 0x74
 800a510:	4607      	mov	r7, r0
 800a512:	460d      	mov	r5, r1
 800a514:	4614      	mov	r4, r2
 800a516:	d510      	bpl.n	800a53a <_svfiprintf_r+0x36>
 800a518:	690b      	ldr	r3, [r1, #16]
 800a51a:	b973      	cbnz	r3, 800a53a <_svfiprintf_r+0x36>
 800a51c:	2140      	movs	r1, #64	@ 0x40
 800a51e:	f7fe fbd3 	bl	8008cc8 <_malloc_r>
 800a522:	6028      	str	r0, [r5, #0]
 800a524:	6128      	str	r0, [r5, #16]
 800a526:	b930      	cbnz	r0, 800a536 <_svfiprintf_r+0x32>
 800a528:	230c      	movs	r3, #12
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	f04f 30ff 	mov.w	r0, #4294967295
 800a530:	b01d      	add	sp, #116	@ 0x74
 800a532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a536:	2340      	movs	r3, #64	@ 0x40
 800a538:	616b      	str	r3, [r5, #20]
 800a53a:	2300      	movs	r3, #0
 800a53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a53e:	2320      	movs	r3, #32
 800a540:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a544:	f8cd 800c 	str.w	r8, [sp, #12]
 800a548:	2330      	movs	r3, #48	@ 0x30
 800a54a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6e8 <_svfiprintf_r+0x1e4>
 800a54e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a552:	f04f 0901 	mov.w	r9, #1
 800a556:	4623      	mov	r3, r4
 800a558:	469a      	mov	sl, r3
 800a55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a55e:	b10a      	cbz	r2, 800a564 <_svfiprintf_r+0x60>
 800a560:	2a25      	cmp	r2, #37	@ 0x25
 800a562:	d1f9      	bne.n	800a558 <_svfiprintf_r+0x54>
 800a564:	ebba 0b04 	subs.w	fp, sl, r4
 800a568:	d00b      	beq.n	800a582 <_svfiprintf_r+0x7e>
 800a56a:	465b      	mov	r3, fp
 800a56c:	4622      	mov	r2, r4
 800a56e:	4629      	mov	r1, r5
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff ff6b 	bl	800a44c <__ssputs_r>
 800a576:	3001      	adds	r0, #1
 800a578:	f000 80a7 	beq.w	800a6ca <_svfiprintf_r+0x1c6>
 800a57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a57e:	445a      	add	r2, fp
 800a580:	9209      	str	r2, [sp, #36]	@ 0x24
 800a582:	f89a 3000 	ldrb.w	r3, [sl]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 809f 	beq.w	800a6ca <_svfiprintf_r+0x1c6>
 800a58c:	2300      	movs	r3, #0
 800a58e:	f04f 32ff 	mov.w	r2, #4294967295
 800a592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a596:	f10a 0a01 	add.w	sl, sl, #1
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	9307      	str	r3, [sp, #28]
 800a59e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5a4:	4654      	mov	r4, sl
 800a5a6:	2205      	movs	r2, #5
 800a5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ac:	484e      	ldr	r0, [pc, #312]	@ (800a6e8 <_svfiprintf_r+0x1e4>)
 800a5ae:	f7f5 fe1f 	bl	80001f0 <memchr>
 800a5b2:	9a04      	ldr	r2, [sp, #16]
 800a5b4:	b9d8      	cbnz	r0, 800a5ee <_svfiprintf_r+0xea>
 800a5b6:	06d0      	lsls	r0, r2, #27
 800a5b8:	bf44      	itt	mi
 800a5ba:	2320      	movmi	r3, #32
 800a5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5c0:	0711      	lsls	r1, r2, #28
 800a5c2:	bf44      	itt	mi
 800a5c4:	232b      	movmi	r3, #43	@ 0x2b
 800a5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5d0:	d015      	beq.n	800a5fe <_svfiprintf_r+0xfa>
 800a5d2:	9a07      	ldr	r2, [sp, #28]
 800a5d4:	4654      	mov	r4, sl
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	f04f 0c0a 	mov.w	ip, #10
 800a5dc:	4621      	mov	r1, r4
 800a5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5e2:	3b30      	subs	r3, #48	@ 0x30
 800a5e4:	2b09      	cmp	r3, #9
 800a5e6:	d94b      	bls.n	800a680 <_svfiprintf_r+0x17c>
 800a5e8:	b1b0      	cbz	r0, 800a618 <_svfiprintf_r+0x114>
 800a5ea:	9207      	str	r2, [sp, #28]
 800a5ec:	e014      	b.n	800a618 <_svfiprintf_r+0x114>
 800a5ee:	eba0 0308 	sub.w	r3, r0, r8
 800a5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	46a2      	mov	sl, r4
 800a5fc:	e7d2      	b.n	800a5a4 <_svfiprintf_r+0xa0>
 800a5fe:	9b03      	ldr	r3, [sp, #12]
 800a600:	1d19      	adds	r1, r3, #4
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	9103      	str	r1, [sp, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	bfbb      	ittet	lt
 800a60a:	425b      	neglt	r3, r3
 800a60c:	f042 0202 	orrlt.w	r2, r2, #2
 800a610:	9307      	strge	r3, [sp, #28]
 800a612:	9307      	strlt	r3, [sp, #28]
 800a614:	bfb8      	it	lt
 800a616:	9204      	strlt	r2, [sp, #16]
 800a618:	7823      	ldrb	r3, [r4, #0]
 800a61a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a61c:	d10a      	bne.n	800a634 <_svfiprintf_r+0x130>
 800a61e:	7863      	ldrb	r3, [r4, #1]
 800a620:	2b2a      	cmp	r3, #42	@ 0x2a
 800a622:	d132      	bne.n	800a68a <_svfiprintf_r+0x186>
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	9203      	str	r2, [sp, #12]
 800a62c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a630:	3402      	adds	r4, #2
 800a632:	9305      	str	r3, [sp, #20]
 800a634:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6f8 <_svfiprintf_r+0x1f4>
 800a638:	7821      	ldrb	r1, [r4, #0]
 800a63a:	2203      	movs	r2, #3
 800a63c:	4650      	mov	r0, sl
 800a63e:	f7f5 fdd7 	bl	80001f0 <memchr>
 800a642:	b138      	cbz	r0, 800a654 <_svfiprintf_r+0x150>
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	eba0 000a 	sub.w	r0, r0, sl
 800a64a:	2240      	movs	r2, #64	@ 0x40
 800a64c:	4082      	lsls	r2, r0
 800a64e:	4313      	orrs	r3, r2
 800a650:	3401      	adds	r4, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a658:	4824      	ldr	r0, [pc, #144]	@ (800a6ec <_svfiprintf_r+0x1e8>)
 800a65a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a65e:	2206      	movs	r2, #6
 800a660:	f7f5 fdc6 	bl	80001f0 <memchr>
 800a664:	2800      	cmp	r0, #0
 800a666:	d036      	beq.n	800a6d6 <_svfiprintf_r+0x1d2>
 800a668:	4b21      	ldr	r3, [pc, #132]	@ (800a6f0 <_svfiprintf_r+0x1ec>)
 800a66a:	bb1b      	cbnz	r3, 800a6b4 <_svfiprintf_r+0x1b0>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	3307      	adds	r3, #7
 800a670:	f023 0307 	bic.w	r3, r3, #7
 800a674:	3308      	adds	r3, #8
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a67a:	4433      	add	r3, r6
 800a67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a67e:	e76a      	b.n	800a556 <_svfiprintf_r+0x52>
 800a680:	fb0c 3202 	mla	r2, ip, r2, r3
 800a684:	460c      	mov	r4, r1
 800a686:	2001      	movs	r0, #1
 800a688:	e7a8      	b.n	800a5dc <_svfiprintf_r+0xd8>
 800a68a:	2300      	movs	r3, #0
 800a68c:	3401      	adds	r4, #1
 800a68e:	9305      	str	r3, [sp, #20]
 800a690:	4619      	mov	r1, r3
 800a692:	f04f 0c0a 	mov.w	ip, #10
 800a696:	4620      	mov	r0, r4
 800a698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a69c:	3a30      	subs	r2, #48	@ 0x30
 800a69e:	2a09      	cmp	r2, #9
 800a6a0:	d903      	bls.n	800a6aa <_svfiprintf_r+0x1a6>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0c6      	beq.n	800a634 <_svfiprintf_r+0x130>
 800a6a6:	9105      	str	r1, [sp, #20]
 800a6a8:	e7c4      	b.n	800a634 <_svfiprintf_r+0x130>
 800a6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e7f0      	b.n	800a696 <_svfiprintf_r+0x192>
 800a6b4:	ab03      	add	r3, sp, #12
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f4 <_svfiprintf_r+0x1f0>)
 800a6bc:	a904      	add	r1, sp, #16
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f7fc fc6a 	bl	8006f98 <_printf_float>
 800a6c4:	1c42      	adds	r2, r0, #1
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	d1d6      	bne.n	800a678 <_svfiprintf_r+0x174>
 800a6ca:	89ab      	ldrh	r3, [r5, #12]
 800a6cc:	065b      	lsls	r3, r3, #25
 800a6ce:	f53f af2d 	bmi.w	800a52c <_svfiprintf_r+0x28>
 800a6d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6d4:	e72c      	b.n	800a530 <_svfiprintf_r+0x2c>
 800a6d6:	ab03      	add	r3, sp, #12
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	462a      	mov	r2, r5
 800a6dc:	4b05      	ldr	r3, [pc, #20]	@ (800a6f4 <_svfiprintf_r+0x1f0>)
 800a6de:	a904      	add	r1, sp, #16
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f7fc fef1 	bl	80074c8 <_printf_i>
 800a6e6:	e7ed      	b.n	800a6c4 <_svfiprintf_r+0x1c0>
 800a6e8:	0800c1f9 	.word	0x0800c1f9
 800a6ec:	0800c203 	.word	0x0800c203
 800a6f0:	08006f99 	.word	0x08006f99
 800a6f4:	0800a44d 	.word	0x0800a44d
 800a6f8:	0800c1ff 	.word	0x0800c1ff

0800a6fc <_sungetc_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	1c4b      	adds	r3, r1, #1
 800a700:	4614      	mov	r4, r2
 800a702:	d103      	bne.n	800a70c <_sungetc_r+0x10>
 800a704:	f04f 35ff 	mov.w	r5, #4294967295
 800a708:	4628      	mov	r0, r5
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	8993      	ldrh	r3, [r2, #12]
 800a70e:	f023 0320 	bic.w	r3, r3, #32
 800a712:	8193      	strh	r3, [r2, #12]
 800a714:	6853      	ldr	r3, [r2, #4]
 800a716:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a718:	b2cd      	uxtb	r5, r1
 800a71a:	b18a      	cbz	r2, 800a740 <_sungetc_r+0x44>
 800a71c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a71e:	429a      	cmp	r2, r3
 800a720:	dd08      	ble.n	800a734 <_sungetc_r+0x38>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	1e5a      	subs	r2, r3, #1
 800a726:	6022      	str	r2, [r4, #0]
 800a728:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	3301      	adds	r3, #1
 800a730:	6063      	str	r3, [r4, #4]
 800a732:	e7e9      	b.n	800a708 <_sungetc_r+0xc>
 800a734:	4621      	mov	r1, r4
 800a736:	f000 fbe0 	bl	800aefa <__submore>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0f1      	beq.n	800a722 <_sungetc_r+0x26>
 800a73e:	e7e1      	b.n	800a704 <_sungetc_r+0x8>
 800a740:	6921      	ldr	r1, [r4, #16]
 800a742:	6822      	ldr	r2, [r4, #0]
 800a744:	b141      	cbz	r1, 800a758 <_sungetc_r+0x5c>
 800a746:	4291      	cmp	r1, r2
 800a748:	d206      	bcs.n	800a758 <_sungetc_r+0x5c>
 800a74a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a74e:	42a9      	cmp	r1, r5
 800a750:	d102      	bne.n	800a758 <_sungetc_r+0x5c>
 800a752:	3a01      	subs	r2, #1
 800a754:	6022      	str	r2, [r4, #0]
 800a756:	e7ea      	b.n	800a72e <_sungetc_r+0x32>
 800a758:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a75c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a760:	6363      	str	r3, [r4, #52]	@ 0x34
 800a762:	2303      	movs	r3, #3
 800a764:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a766:	4623      	mov	r3, r4
 800a768:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	2301      	movs	r3, #1
 800a770:	e7de      	b.n	800a730 <_sungetc_r+0x34>

0800a772 <__ssrefill_r>:
 800a772:	b510      	push	{r4, lr}
 800a774:	460c      	mov	r4, r1
 800a776:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a778:	b169      	cbz	r1, 800a796 <__ssrefill_r+0x24>
 800a77a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a77e:	4299      	cmp	r1, r3
 800a780:	d001      	beq.n	800a786 <__ssrefill_r+0x14>
 800a782:	f7fe fa2d 	bl	8008be0 <_free_r>
 800a786:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a788:	6063      	str	r3, [r4, #4]
 800a78a:	2000      	movs	r0, #0
 800a78c:	6360      	str	r0, [r4, #52]	@ 0x34
 800a78e:	b113      	cbz	r3, 800a796 <__ssrefill_r+0x24>
 800a790:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	bd10      	pop	{r4, pc}
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	2300      	movs	r3, #0
 800a79c:	6063      	str	r3, [r4, #4]
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f043 0320 	orr.w	r3, r3, #32
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	e7f3      	b.n	800a794 <__ssrefill_r+0x22>

0800a7ac <__ssvfiscanf_r>:
 800a7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a7bc:	49a5      	ldr	r1, [pc, #660]	@ (800aa54 <__ssvfiscanf_r+0x2a8>)
 800a7be:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a7c0:	f10d 0804 	add.w	r8, sp, #4
 800a7c4:	49a4      	ldr	r1, [pc, #656]	@ (800aa58 <__ssvfiscanf_r+0x2ac>)
 800a7c6:	4fa5      	ldr	r7, [pc, #660]	@ (800aa5c <__ssvfiscanf_r+0x2b0>)
 800a7c8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	7813      	ldrb	r3, [r2, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8158 	beq.w	800aa8a <__ssvfiscanf_r+0x2de>
 800a7da:	5cf9      	ldrb	r1, [r7, r3]
 800a7dc:	f011 0108 	ands.w	r1, r1, #8
 800a7e0:	f102 0501 	add.w	r5, r2, #1
 800a7e4:	d019      	beq.n	800a81a <__ssvfiscanf_r+0x6e>
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dd0f      	ble.n	800a80c <__ssvfiscanf_r+0x60>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	781a      	ldrb	r2, [r3, #0]
 800a7f0:	5cba      	ldrb	r2, [r7, r2]
 800a7f2:	0712      	lsls	r2, r2, #28
 800a7f4:	d401      	bmi.n	800a7fa <__ssvfiscanf_r+0x4e>
 800a7f6:	462a      	mov	r2, r5
 800a7f8:	e7eb      	b.n	800a7d2 <__ssvfiscanf_r+0x26>
 800a7fa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7fc:	3201      	adds	r2, #1
 800a7fe:	9245      	str	r2, [sp, #276]	@ 0x114
 800a800:	6862      	ldr	r2, [r4, #4]
 800a802:	3301      	adds	r3, #1
 800a804:	3a01      	subs	r2, #1
 800a806:	6062      	str	r2, [r4, #4]
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	e7ec      	b.n	800a7e6 <__ssvfiscanf_r+0x3a>
 800a80c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a80e:	4621      	mov	r1, r4
 800a810:	4630      	mov	r0, r6
 800a812:	4798      	blx	r3
 800a814:	2800      	cmp	r0, #0
 800a816:	d0e9      	beq.n	800a7ec <__ssvfiscanf_r+0x40>
 800a818:	e7ed      	b.n	800a7f6 <__ssvfiscanf_r+0x4a>
 800a81a:	2b25      	cmp	r3, #37	@ 0x25
 800a81c:	d012      	beq.n	800a844 <__ssvfiscanf_r+0x98>
 800a81e:	4699      	mov	r9, r3
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	f340 8093 	ble.w	800a94e <__ssvfiscanf_r+0x1a2>
 800a828:	6822      	ldr	r2, [r4, #0]
 800a82a:	7813      	ldrb	r3, [r2, #0]
 800a82c:	454b      	cmp	r3, r9
 800a82e:	f040 812c 	bne.w	800aa8a <__ssvfiscanf_r+0x2de>
 800a832:	6863      	ldr	r3, [r4, #4]
 800a834:	3b01      	subs	r3, #1
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a83a:	3201      	adds	r2, #1
 800a83c:	3301      	adds	r3, #1
 800a83e:	6022      	str	r2, [r4, #0]
 800a840:	9345      	str	r3, [sp, #276]	@ 0x114
 800a842:	e7d8      	b.n	800a7f6 <__ssvfiscanf_r+0x4a>
 800a844:	9141      	str	r1, [sp, #260]	@ 0x104
 800a846:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a848:	7853      	ldrb	r3, [r2, #1]
 800a84a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a84c:	bf02      	ittt	eq
 800a84e:	2310      	moveq	r3, #16
 800a850:	1c95      	addeq	r5, r2, #2
 800a852:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a854:	220a      	movs	r2, #10
 800a856:	46a9      	mov	r9, r5
 800a858:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a85c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a860:	2b09      	cmp	r3, #9
 800a862:	d91e      	bls.n	800a8a2 <__ssvfiscanf_r+0xf6>
 800a864:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800aa60 <__ssvfiscanf_r+0x2b4>
 800a868:	2203      	movs	r2, #3
 800a86a:	4650      	mov	r0, sl
 800a86c:	f7f5 fcc0 	bl	80001f0 <memchr>
 800a870:	b138      	cbz	r0, 800a882 <__ssvfiscanf_r+0xd6>
 800a872:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a874:	eba0 000a 	sub.w	r0, r0, sl
 800a878:	2301      	movs	r3, #1
 800a87a:	4083      	lsls	r3, r0
 800a87c:	4313      	orrs	r3, r2
 800a87e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a880:	464d      	mov	r5, r9
 800a882:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a886:	2b78      	cmp	r3, #120	@ 0x78
 800a888:	d806      	bhi.n	800a898 <__ssvfiscanf_r+0xec>
 800a88a:	2b57      	cmp	r3, #87	@ 0x57
 800a88c:	d810      	bhi.n	800a8b0 <__ssvfiscanf_r+0x104>
 800a88e:	2b25      	cmp	r3, #37	@ 0x25
 800a890:	d0c5      	beq.n	800a81e <__ssvfiscanf_r+0x72>
 800a892:	d857      	bhi.n	800a944 <__ssvfiscanf_r+0x198>
 800a894:	2b00      	cmp	r3, #0
 800a896:	d065      	beq.n	800a964 <__ssvfiscanf_r+0x1b8>
 800a898:	2303      	movs	r3, #3
 800a89a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a89c:	230a      	movs	r3, #10
 800a89e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a8a0:	e078      	b.n	800a994 <__ssvfiscanf_r+0x1e8>
 800a8a2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a8a4:	fb02 1103 	mla	r1, r2, r3, r1
 800a8a8:	3930      	subs	r1, #48	@ 0x30
 800a8aa:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a8ac:	464d      	mov	r5, r9
 800a8ae:	e7d2      	b.n	800a856 <__ssvfiscanf_r+0xaa>
 800a8b0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a8b4:	2a20      	cmp	r2, #32
 800a8b6:	d8ef      	bhi.n	800a898 <__ssvfiscanf_r+0xec>
 800a8b8:	a101      	add	r1, pc, #4	@ (adr r1, 800a8c0 <__ssvfiscanf_r+0x114>)
 800a8ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a8be:	bf00      	nop
 800a8c0:	0800a973 	.word	0x0800a973
 800a8c4:	0800a899 	.word	0x0800a899
 800a8c8:	0800a899 	.word	0x0800a899
 800a8cc:	0800a9cd 	.word	0x0800a9cd
 800a8d0:	0800a899 	.word	0x0800a899
 800a8d4:	0800a899 	.word	0x0800a899
 800a8d8:	0800a899 	.word	0x0800a899
 800a8dc:	0800a899 	.word	0x0800a899
 800a8e0:	0800a899 	.word	0x0800a899
 800a8e4:	0800a899 	.word	0x0800a899
 800a8e8:	0800a899 	.word	0x0800a899
 800a8ec:	0800a9e3 	.word	0x0800a9e3
 800a8f0:	0800a9c9 	.word	0x0800a9c9
 800a8f4:	0800a94b 	.word	0x0800a94b
 800a8f8:	0800a94b 	.word	0x0800a94b
 800a8fc:	0800a94b 	.word	0x0800a94b
 800a900:	0800a899 	.word	0x0800a899
 800a904:	0800a985 	.word	0x0800a985
 800a908:	0800a899 	.word	0x0800a899
 800a90c:	0800a899 	.word	0x0800a899
 800a910:	0800a899 	.word	0x0800a899
 800a914:	0800a899 	.word	0x0800a899
 800a918:	0800a9f3 	.word	0x0800a9f3
 800a91c:	0800a98d 	.word	0x0800a98d
 800a920:	0800a96b 	.word	0x0800a96b
 800a924:	0800a899 	.word	0x0800a899
 800a928:	0800a899 	.word	0x0800a899
 800a92c:	0800a9ef 	.word	0x0800a9ef
 800a930:	0800a899 	.word	0x0800a899
 800a934:	0800a9c9 	.word	0x0800a9c9
 800a938:	0800a899 	.word	0x0800a899
 800a93c:	0800a899 	.word	0x0800a899
 800a940:	0800a973 	.word	0x0800a973
 800a944:	3b45      	subs	r3, #69	@ 0x45
 800a946:	2b02      	cmp	r3, #2
 800a948:	d8a6      	bhi.n	800a898 <__ssvfiscanf_r+0xec>
 800a94a:	2305      	movs	r3, #5
 800a94c:	e021      	b.n	800a992 <__ssvfiscanf_r+0x1e6>
 800a94e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a950:	4621      	mov	r1, r4
 800a952:	4630      	mov	r0, r6
 800a954:	4798      	blx	r3
 800a956:	2800      	cmp	r0, #0
 800a958:	f43f af66 	beq.w	800a828 <__ssvfiscanf_r+0x7c>
 800a95c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a95e:	2800      	cmp	r0, #0
 800a960:	f040 808b 	bne.w	800aa7a <__ssvfiscanf_r+0x2ce>
 800a964:	f04f 30ff 	mov.w	r0, #4294967295
 800a968:	e08b      	b.n	800aa82 <__ssvfiscanf_r+0x2d6>
 800a96a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a96c:	f042 0220 	orr.w	r2, r2, #32
 800a970:	9241      	str	r2, [sp, #260]	@ 0x104
 800a972:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a978:	9241      	str	r2, [sp, #260]	@ 0x104
 800a97a:	2210      	movs	r2, #16
 800a97c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a97e:	9242      	str	r2, [sp, #264]	@ 0x108
 800a980:	d902      	bls.n	800a988 <__ssvfiscanf_r+0x1dc>
 800a982:	e005      	b.n	800a990 <__ssvfiscanf_r+0x1e4>
 800a984:	2300      	movs	r3, #0
 800a986:	9342      	str	r3, [sp, #264]	@ 0x108
 800a988:	2303      	movs	r3, #3
 800a98a:	e002      	b.n	800a992 <__ssvfiscanf_r+0x1e6>
 800a98c:	2308      	movs	r3, #8
 800a98e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a990:	2304      	movs	r3, #4
 800a992:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a994:	6863      	ldr	r3, [r4, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	dd39      	ble.n	800aa0e <__ssvfiscanf_r+0x262>
 800a99a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a99c:	0659      	lsls	r1, r3, #25
 800a99e:	d404      	bmi.n	800a9aa <__ssvfiscanf_r+0x1fe>
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	5cba      	ldrb	r2, [r7, r2]
 800a9a6:	0712      	lsls	r2, r2, #28
 800a9a8:	d438      	bmi.n	800aa1c <__ssvfiscanf_r+0x270>
 800a9aa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	dc47      	bgt.n	800aa40 <__ssvfiscanf_r+0x294>
 800a9b0:	466b      	mov	r3, sp
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	a941      	add	r1, sp, #260	@ 0x104
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f000 f86c 	bl	800aa94 <_scanf_chars>
 800a9bc:	2801      	cmp	r0, #1
 800a9be:	d064      	beq.n	800aa8a <__ssvfiscanf_r+0x2de>
 800a9c0:	2802      	cmp	r0, #2
 800a9c2:	f47f af18 	bne.w	800a7f6 <__ssvfiscanf_r+0x4a>
 800a9c6:	e7c9      	b.n	800a95c <__ssvfiscanf_r+0x1b0>
 800a9c8:	220a      	movs	r2, #10
 800a9ca:	e7d7      	b.n	800a97c <__ssvfiscanf_r+0x1d0>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	f000 fa5a 	bl	800ae88 <__sccl>
 800a9d4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a9d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9da:	9341      	str	r3, [sp, #260]	@ 0x104
 800a9dc:	4605      	mov	r5, r0
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e7d7      	b.n	800a992 <__ssvfiscanf_r+0x1e6>
 800a9e2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a9e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9e8:	9341      	str	r3, [sp, #260]	@ 0x104
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e7d1      	b.n	800a992 <__ssvfiscanf_r+0x1e6>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e7cf      	b.n	800a992 <__ssvfiscanf_r+0x1e6>
 800a9f2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a9f4:	06c3      	lsls	r3, r0, #27
 800a9f6:	f53f aefe 	bmi.w	800a7f6 <__ssvfiscanf_r+0x4a>
 800a9fa:	9b00      	ldr	r3, [sp, #0]
 800a9fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a9fe:	1d19      	adds	r1, r3, #4
 800aa00:	9100      	str	r1, [sp, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	07c0      	lsls	r0, r0, #31
 800aa06:	bf4c      	ite	mi
 800aa08:	801a      	strhmi	r2, [r3, #0]
 800aa0a:	601a      	strpl	r2, [r3, #0]
 800aa0c:	e6f3      	b.n	800a7f6 <__ssvfiscanf_r+0x4a>
 800aa0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aa10:	4621      	mov	r1, r4
 800aa12:	4630      	mov	r0, r6
 800aa14:	4798      	blx	r3
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d0bf      	beq.n	800a99a <__ssvfiscanf_r+0x1ee>
 800aa1a:	e79f      	b.n	800a95c <__ssvfiscanf_r+0x1b0>
 800aa1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800aa1e:	3201      	adds	r2, #1
 800aa20:	9245      	str	r2, [sp, #276]	@ 0x114
 800aa22:	6862      	ldr	r2, [r4, #4]
 800aa24:	3a01      	subs	r2, #1
 800aa26:	2a00      	cmp	r2, #0
 800aa28:	6062      	str	r2, [r4, #4]
 800aa2a:	dd02      	ble.n	800aa32 <__ssvfiscanf_r+0x286>
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	e7b6      	b.n	800a9a0 <__ssvfiscanf_r+0x1f4>
 800aa32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aa34:	4621      	mov	r1, r4
 800aa36:	4630      	mov	r0, r6
 800aa38:	4798      	blx	r3
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d0b0      	beq.n	800a9a0 <__ssvfiscanf_r+0x1f4>
 800aa3e:	e78d      	b.n	800a95c <__ssvfiscanf_r+0x1b0>
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	dc0f      	bgt.n	800aa64 <__ssvfiscanf_r+0x2b8>
 800aa44:	466b      	mov	r3, sp
 800aa46:	4622      	mov	r2, r4
 800aa48:	a941      	add	r1, sp, #260	@ 0x104
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f000 f87c 	bl	800ab48 <_scanf_i>
 800aa50:	e7b4      	b.n	800a9bc <__ssvfiscanf_r+0x210>
 800aa52:	bf00      	nop
 800aa54:	0800a6fd 	.word	0x0800a6fd
 800aa58:	0800a773 	.word	0x0800a773
 800aa5c:	0800c0f9 	.word	0x0800c0f9
 800aa60:	0800c1ff 	.word	0x0800c1ff
 800aa64:	4b0a      	ldr	r3, [pc, #40]	@ (800aa90 <__ssvfiscanf_r+0x2e4>)
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f43f aec5 	beq.w	800a7f6 <__ssvfiscanf_r+0x4a>
 800aa6c:	466b      	mov	r3, sp
 800aa6e:	4622      	mov	r2, r4
 800aa70:	a941      	add	r1, sp, #260	@ 0x104
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7fc fe48 	bl	8007708 <_scanf_float>
 800aa78:	e7a0      	b.n	800a9bc <__ssvfiscanf_r+0x210>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	065b      	lsls	r3, r3, #25
 800aa7e:	f53f af71 	bmi.w	800a964 <__ssvfiscanf_r+0x1b8>
 800aa82:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800aa8c:	e7f9      	b.n	800aa82 <__ssvfiscanf_r+0x2d6>
 800aa8e:	bf00      	nop
 800aa90:	08007709 	.word	0x08007709

0800aa94 <_scanf_chars>:
 800aa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa98:	4615      	mov	r5, r2
 800aa9a:	688a      	ldr	r2, [r1, #8]
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	b932      	cbnz	r2, 800aab0 <_scanf_chars+0x1c>
 800aaa2:	698a      	ldr	r2, [r1, #24]
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	bf14      	ite	ne
 800aaa8:	f04f 32ff 	movne.w	r2, #4294967295
 800aaac:	2201      	moveq	r2, #1
 800aaae:	608a      	str	r2, [r1, #8]
 800aab0:	6822      	ldr	r2, [r4, #0]
 800aab2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ab44 <_scanf_chars+0xb0>
 800aab6:	06d1      	lsls	r1, r2, #27
 800aab8:	bf5f      	itttt	pl
 800aaba:	681a      	ldrpl	r2, [r3, #0]
 800aabc:	1d11      	addpl	r1, r2, #4
 800aabe:	6019      	strpl	r1, [r3, #0]
 800aac0:	6816      	ldrpl	r6, [r2, #0]
 800aac2:	2700      	movs	r7, #0
 800aac4:	69a0      	ldr	r0, [r4, #24]
 800aac6:	b188      	cbz	r0, 800aaec <_scanf_chars+0x58>
 800aac8:	2801      	cmp	r0, #1
 800aaca:	d107      	bne.n	800aadc <_scanf_chars+0x48>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	781a      	ldrb	r2, [r3, #0]
 800aad0:	6963      	ldr	r3, [r4, #20]
 800aad2:	5c9b      	ldrb	r3, [r3, r2]
 800aad4:	b953      	cbnz	r3, 800aaec <_scanf_chars+0x58>
 800aad6:	2f00      	cmp	r7, #0
 800aad8:	d031      	beq.n	800ab3e <_scanf_chars+0xaa>
 800aada:	e022      	b.n	800ab22 <_scanf_chars+0x8e>
 800aadc:	2802      	cmp	r0, #2
 800aade:	d120      	bne.n	800ab22 <_scanf_chars+0x8e>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800aae8:	071b      	lsls	r3, r3, #28
 800aaea:	d41a      	bmi.n	800ab22 <_scanf_chars+0x8e>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	06da      	lsls	r2, r3, #27
 800aaf0:	bf5e      	ittt	pl
 800aaf2:	682b      	ldrpl	r3, [r5, #0]
 800aaf4:	781b      	ldrbpl	r3, [r3, #0]
 800aaf6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aafa:	682a      	ldr	r2, [r5, #0]
 800aafc:	686b      	ldr	r3, [r5, #4]
 800aafe:	3201      	adds	r2, #1
 800ab00:	602a      	str	r2, [r5, #0]
 800ab02:	68a2      	ldr	r2, [r4, #8]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	3a01      	subs	r2, #1
 800ab08:	606b      	str	r3, [r5, #4]
 800ab0a:	3701      	adds	r7, #1
 800ab0c:	60a2      	str	r2, [r4, #8]
 800ab0e:	b142      	cbz	r2, 800ab22 <_scanf_chars+0x8e>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dcd7      	bgt.n	800aac4 <_scanf_chars+0x30>
 800ab14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4798      	blx	r3
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d0d0      	beq.n	800aac4 <_scanf_chars+0x30>
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	f013 0310 	ands.w	r3, r3, #16
 800ab28:	d105      	bne.n	800ab36 <_scanf_chars+0xa2>
 800ab2a:	68e2      	ldr	r2, [r4, #12]
 800ab2c:	3201      	adds	r2, #1
 800ab2e:	60e2      	str	r2, [r4, #12]
 800ab30:	69a2      	ldr	r2, [r4, #24]
 800ab32:	b102      	cbz	r2, 800ab36 <_scanf_chars+0xa2>
 800ab34:	7033      	strb	r3, [r6, #0]
 800ab36:	6923      	ldr	r3, [r4, #16]
 800ab38:	443b      	add	r3, r7
 800ab3a:	6123      	str	r3, [r4, #16]
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab42:	bf00      	nop
 800ab44:	0800c0f9 	.word	0x0800c0f9

0800ab48 <_scanf_i>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	4698      	mov	r8, r3
 800ab4e:	4b74      	ldr	r3, [pc, #464]	@ (800ad20 <_scanf_i+0x1d8>)
 800ab50:	460c      	mov	r4, r1
 800ab52:	4682      	mov	sl, r0
 800ab54:	4616      	mov	r6, r2
 800ab56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	ab03      	add	r3, sp, #12
 800ab5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ab62:	4b70      	ldr	r3, [pc, #448]	@ (800ad24 <_scanf_i+0x1dc>)
 800ab64:	69a1      	ldr	r1, [r4, #24]
 800ab66:	4a70      	ldr	r2, [pc, #448]	@ (800ad28 <_scanf_i+0x1e0>)
 800ab68:	2903      	cmp	r1, #3
 800ab6a:	bf08      	it	eq
 800ab6c:	461a      	moveq	r2, r3
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	9201      	str	r2, [sp, #4]
 800ab72:	1e5a      	subs	r2, r3, #1
 800ab74:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ab78:	bf88      	it	hi
 800ab7a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ab7e:	4627      	mov	r7, r4
 800ab80:	bf82      	ittt	hi
 800ab82:	eb03 0905 	addhi.w	r9, r3, r5
 800ab86:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ab8a:	60a3      	strhi	r3, [r4, #8]
 800ab8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ab90:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ab94:	bf98      	it	ls
 800ab96:	f04f 0900 	movls.w	r9, #0
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	463d      	mov	r5, r7
 800ab9e:	f04f 0b00 	mov.w	fp, #0
 800aba2:	6831      	ldr	r1, [r6, #0]
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	7809      	ldrb	r1, [r1, #0]
 800aba8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800abac:	2202      	movs	r2, #2
 800abae:	f7f5 fb1f 	bl	80001f0 <memchr>
 800abb2:	b328      	cbz	r0, 800ac00 <_scanf_i+0xb8>
 800abb4:	f1bb 0f01 	cmp.w	fp, #1
 800abb8:	d159      	bne.n	800ac6e <_scanf_i+0x126>
 800abba:	6862      	ldr	r2, [r4, #4]
 800abbc:	b92a      	cbnz	r2, 800abca <_scanf_i+0x82>
 800abbe:	6822      	ldr	r2, [r4, #0]
 800abc0:	2108      	movs	r1, #8
 800abc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abc6:	6061      	str	r1, [r4, #4]
 800abc8:	6022      	str	r2, [r4, #0]
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800abd0:	6022      	str	r2, [r4, #0]
 800abd2:	68a2      	ldr	r2, [r4, #8]
 800abd4:	1e51      	subs	r1, r2, #1
 800abd6:	60a1      	str	r1, [r4, #8]
 800abd8:	b192      	cbz	r2, 800ac00 <_scanf_i+0xb8>
 800abda:	6832      	ldr	r2, [r6, #0]
 800abdc:	1c51      	adds	r1, r2, #1
 800abde:	6031      	str	r1, [r6, #0]
 800abe0:	7812      	ldrb	r2, [r2, #0]
 800abe2:	f805 2b01 	strb.w	r2, [r5], #1
 800abe6:	6872      	ldr	r2, [r6, #4]
 800abe8:	3a01      	subs	r2, #1
 800abea:	2a00      	cmp	r2, #0
 800abec:	6072      	str	r2, [r6, #4]
 800abee:	dc07      	bgt.n	800ac00 <_scanf_i+0xb8>
 800abf0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800abf4:	4631      	mov	r1, r6
 800abf6:	4650      	mov	r0, sl
 800abf8:	4790      	blx	r2
 800abfa:	2800      	cmp	r0, #0
 800abfc:	f040 8085 	bne.w	800ad0a <_scanf_i+0x1c2>
 800ac00:	f10b 0b01 	add.w	fp, fp, #1
 800ac04:	f1bb 0f03 	cmp.w	fp, #3
 800ac08:	d1cb      	bne.n	800aba2 <_scanf_i+0x5a>
 800ac0a:	6863      	ldr	r3, [r4, #4]
 800ac0c:	b90b      	cbnz	r3, 800ac12 <_scanf_i+0xca>
 800ac0e:	230a      	movs	r3, #10
 800ac10:	6063      	str	r3, [r4, #4]
 800ac12:	6863      	ldr	r3, [r4, #4]
 800ac14:	4945      	ldr	r1, [pc, #276]	@ (800ad2c <_scanf_i+0x1e4>)
 800ac16:	6960      	ldr	r0, [r4, #20]
 800ac18:	1ac9      	subs	r1, r1, r3
 800ac1a:	f000 f935 	bl	800ae88 <__sccl>
 800ac1e:	f04f 0b00 	mov.w	fp, #0
 800ac22:	68a3      	ldr	r3, [r4, #8]
 800ac24:	6822      	ldr	r2, [r4, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d03d      	beq.n	800aca6 <_scanf_i+0x15e>
 800ac2a:	6831      	ldr	r1, [r6, #0]
 800ac2c:	6960      	ldr	r0, [r4, #20]
 800ac2e:	f891 c000 	ldrb.w	ip, [r1]
 800ac32:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d035      	beq.n	800aca6 <_scanf_i+0x15e>
 800ac3a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ac3e:	d124      	bne.n	800ac8a <_scanf_i+0x142>
 800ac40:	0510      	lsls	r0, r2, #20
 800ac42:	d522      	bpl.n	800ac8a <_scanf_i+0x142>
 800ac44:	f10b 0b01 	add.w	fp, fp, #1
 800ac48:	f1b9 0f00 	cmp.w	r9, #0
 800ac4c:	d003      	beq.n	800ac56 <_scanf_i+0x10e>
 800ac4e:	3301      	adds	r3, #1
 800ac50:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac54:	60a3      	str	r3, [r4, #8]
 800ac56:	6873      	ldr	r3, [r6, #4]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	6073      	str	r3, [r6, #4]
 800ac5e:	dd1b      	ble.n	800ac98 <_scanf_i+0x150>
 800ac60:	6833      	ldr	r3, [r6, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	6033      	str	r3, [r6, #0]
 800ac66:	68a3      	ldr	r3, [r4, #8]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	e7d9      	b.n	800ac22 <_scanf_i+0xda>
 800ac6e:	f1bb 0f02 	cmp.w	fp, #2
 800ac72:	d1ae      	bne.n	800abd2 <_scanf_i+0x8a>
 800ac74:	6822      	ldr	r2, [r4, #0]
 800ac76:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ac7a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ac7e:	d1bf      	bne.n	800ac00 <_scanf_i+0xb8>
 800ac80:	2110      	movs	r1, #16
 800ac82:	6061      	str	r1, [r4, #4]
 800ac84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac88:	e7a2      	b.n	800abd0 <_scanf_i+0x88>
 800ac8a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ac8e:	6022      	str	r2, [r4, #0]
 800ac90:	780b      	ldrb	r3, [r1, #0]
 800ac92:	f805 3b01 	strb.w	r3, [r5], #1
 800ac96:	e7de      	b.n	800ac56 <_scanf_i+0x10e>
 800ac98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac9c:	4631      	mov	r1, r6
 800ac9e:	4650      	mov	r0, sl
 800aca0:	4798      	blx	r3
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d0df      	beq.n	800ac66 <_scanf_i+0x11e>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	05d9      	lsls	r1, r3, #23
 800acaa:	d50d      	bpl.n	800acc8 <_scanf_i+0x180>
 800acac:	42bd      	cmp	r5, r7
 800acae:	d909      	bls.n	800acc4 <_scanf_i+0x17c>
 800acb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800acb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acb8:	4632      	mov	r2, r6
 800acba:	4650      	mov	r0, sl
 800acbc:	4798      	blx	r3
 800acbe:	f105 39ff 	add.w	r9, r5, #4294967295
 800acc2:	464d      	mov	r5, r9
 800acc4:	42bd      	cmp	r5, r7
 800acc6:	d028      	beq.n	800ad1a <_scanf_i+0x1d2>
 800acc8:	6822      	ldr	r2, [r4, #0]
 800acca:	f012 0210 	ands.w	r2, r2, #16
 800acce:	d113      	bne.n	800acf8 <_scanf_i+0x1b0>
 800acd0:	702a      	strb	r2, [r5, #0]
 800acd2:	6863      	ldr	r3, [r4, #4]
 800acd4:	9e01      	ldr	r6, [sp, #4]
 800acd6:	4639      	mov	r1, r7
 800acd8:	4650      	mov	r0, sl
 800acda:	47b0      	blx	r6
 800acdc:	f8d8 3000 	ldr.w	r3, [r8]
 800ace0:	6821      	ldr	r1, [r4, #0]
 800ace2:	1d1a      	adds	r2, r3, #4
 800ace4:	f8c8 2000 	str.w	r2, [r8]
 800ace8:	f011 0f20 	tst.w	r1, #32
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	d00f      	beq.n	800ad10 <_scanf_i+0x1c8>
 800acf0:	6018      	str	r0, [r3, #0]
 800acf2:	68e3      	ldr	r3, [r4, #12]
 800acf4:	3301      	adds	r3, #1
 800acf6:	60e3      	str	r3, [r4, #12]
 800acf8:	6923      	ldr	r3, [r4, #16]
 800acfa:	1bed      	subs	r5, r5, r7
 800acfc:	445d      	add	r5, fp
 800acfe:	442b      	add	r3, r5
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	2000      	movs	r0, #0
 800ad04:	b007      	add	sp, #28
 800ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0a:	f04f 0b00 	mov.w	fp, #0
 800ad0e:	e7ca      	b.n	800aca6 <_scanf_i+0x15e>
 800ad10:	07ca      	lsls	r2, r1, #31
 800ad12:	bf4c      	ite	mi
 800ad14:	8018      	strhmi	r0, [r3, #0]
 800ad16:	6018      	strpl	r0, [r3, #0]
 800ad18:	e7eb      	b.n	800acf2 <_scanf_i+0x1aa>
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	e7f2      	b.n	800ad04 <_scanf_i+0x1bc>
 800ad1e:	bf00      	nop
 800ad20:	0800be54 	.word	0x0800be54
 800ad24:	0800a449 	.word	0x0800a449
 800ad28:	0800b825 	.word	0x0800b825
 800ad2c:	0800c21a 	.word	0x0800c21a

0800ad30 <__sflush_r>:
 800ad30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	0716      	lsls	r6, r2, #28
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	d454      	bmi.n	800adea <__sflush_r+0xba>
 800ad40:	684b      	ldr	r3, [r1, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	dc02      	bgt.n	800ad4c <__sflush_r+0x1c>
 800ad46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	dd48      	ble.n	800adde <__sflush_r+0xae>
 800ad4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d045      	beq.n	800adde <__sflush_r+0xae>
 800ad52:	2300      	movs	r3, #0
 800ad54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad58:	682f      	ldr	r7, [r5, #0]
 800ad5a:	6a21      	ldr	r1, [r4, #32]
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	d030      	beq.n	800adc2 <__sflush_r+0x92>
 800ad60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	0759      	lsls	r1, r3, #29
 800ad66:	d505      	bpl.n	800ad74 <__sflush_r+0x44>
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	1ad2      	subs	r2, r2, r3
 800ad6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad6e:	b10b      	cbz	r3, 800ad74 <__sflush_r+0x44>
 800ad70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad72:	1ad2      	subs	r2, r2, r3
 800ad74:	2300      	movs	r3, #0
 800ad76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad78:	6a21      	ldr	r1, [r4, #32]
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	47b0      	blx	r6
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	d106      	bne.n	800ad92 <__sflush_r+0x62>
 800ad84:	6829      	ldr	r1, [r5, #0]
 800ad86:	291d      	cmp	r1, #29
 800ad88:	d82b      	bhi.n	800ade2 <__sflush_r+0xb2>
 800ad8a:	4a2a      	ldr	r2, [pc, #168]	@ (800ae34 <__sflush_r+0x104>)
 800ad8c:	410a      	asrs	r2, r1
 800ad8e:	07d6      	lsls	r6, r2, #31
 800ad90:	d427      	bmi.n	800ade2 <__sflush_r+0xb2>
 800ad92:	2200      	movs	r2, #0
 800ad94:	6062      	str	r2, [r4, #4]
 800ad96:	04d9      	lsls	r1, r3, #19
 800ad98:	6922      	ldr	r2, [r4, #16]
 800ad9a:	6022      	str	r2, [r4, #0]
 800ad9c:	d504      	bpl.n	800ada8 <__sflush_r+0x78>
 800ad9e:	1c42      	adds	r2, r0, #1
 800ada0:	d101      	bne.n	800ada6 <__sflush_r+0x76>
 800ada2:	682b      	ldr	r3, [r5, #0]
 800ada4:	b903      	cbnz	r3, 800ada8 <__sflush_r+0x78>
 800ada6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ada8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adaa:	602f      	str	r7, [r5, #0]
 800adac:	b1b9      	cbz	r1, 800adde <__sflush_r+0xae>
 800adae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adb2:	4299      	cmp	r1, r3
 800adb4:	d002      	beq.n	800adbc <__sflush_r+0x8c>
 800adb6:	4628      	mov	r0, r5
 800adb8:	f7fd ff12 	bl	8008be0 <_free_r>
 800adbc:	2300      	movs	r3, #0
 800adbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800adc0:	e00d      	b.n	800adde <__sflush_r+0xae>
 800adc2:	2301      	movs	r3, #1
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b0      	blx	r6
 800adc8:	4602      	mov	r2, r0
 800adca:	1c50      	adds	r0, r2, #1
 800adcc:	d1c9      	bne.n	800ad62 <__sflush_r+0x32>
 800adce:	682b      	ldr	r3, [r5, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0c6      	beq.n	800ad62 <__sflush_r+0x32>
 800add4:	2b1d      	cmp	r3, #29
 800add6:	d001      	beq.n	800addc <__sflush_r+0xac>
 800add8:	2b16      	cmp	r3, #22
 800adda:	d11e      	bne.n	800ae1a <__sflush_r+0xea>
 800addc:	602f      	str	r7, [r5, #0]
 800adde:	2000      	movs	r0, #0
 800ade0:	e022      	b.n	800ae28 <__sflush_r+0xf8>
 800ade2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade6:	b21b      	sxth	r3, r3
 800ade8:	e01b      	b.n	800ae22 <__sflush_r+0xf2>
 800adea:	690f      	ldr	r7, [r1, #16]
 800adec:	2f00      	cmp	r7, #0
 800adee:	d0f6      	beq.n	800adde <__sflush_r+0xae>
 800adf0:	0793      	lsls	r3, r2, #30
 800adf2:	680e      	ldr	r6, [r1, #0]
 800adf4:	bf08      	it	eq
 800adf6:	694b      	ldreq	r3, [r1, #20]
 800adf8:	600f      	str	r7, [r1, #0]
 800adfa:	bf18      	it	ne
 800adfc:	2300      	movne	r3, #0
 800adfe:	eba6 0807 	sub.w	r8, r6, r7
 800ae02:	608b      	str	r3, [r1, #8]
 800ae04:	f1b8 0f00 	cmp.w	r8, #0
 800ae08:	dde9      	ble.n	800adde <__sflush_r+0xae>
 800ae0a:	6a21      	ldr	r1, [r4, #32]
 800ae0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae0e:	4643      	mov	r3, r8
 800ae10:	463a      	mov	r2, r7
 800ae12:	4628      	mov	r0, r5
 800ae14:	47b0      	blx	r6
 800ae16:	2800      	cmp	r0, #0
 800ae18:	dc08      	bgt.n	800ae2c <__sflush_r+0xfc>
 800ae1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	4407      	add	r7, r0
 800ae2e:	eba8 0800 	sub.w	r8, r8, r0
 800ae32:	e7e7      	b.n	800ae04 <__sflush_r+0xd4>
 800ae34:	dfbffffe 	.word	0xdfbffffe

0800ae38 <_fflush_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	690b      	ldr	r3, [r1, #16]
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	b913      	cbnz	r3, 800ae48 <_fflush_r+0x10>
 800ae42:	2500      	movs	r5, #0
 800ae44:	4628      	mov	r0, r5
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	b118      	cbz	r0, 800ae52 <_fflush_r+0x1a>
 800ae4a:	6a03      	ldr	r3, [r0, #32]
 800ae4c:	b90b      	cbnz	r3, 800ae52 <_fflush_r+0x1a>
 800ae4e:	f7fc fefb 	bl	8007c48 <__sinit>
 800ae52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d0f3      	beq.n	800ae42 <_fflush_r+0xa>
 800ae5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae5c:	07d0      	lsls	r0, r2, #31
 800ae5e:	d404      	bmi.n	800ae6a <_fflush_r+0x32>
 800ae60:	0599      	lsls	r1, r3, #22
 800ae62:	d402      	bmi.n	800ae6a <_fflush_r+0x32>
 800ae64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae66:	f7fd f864 	bl	8007f32 <__retarget_lock_acquire_recursive>
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	f7ff ff5f 	bl	800ad30 <__sflush_r>
 800ae72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae74:	07da      	lsls	r2, r3, #31
 800ae76:	4605      	mov	r5, r0
 800ae78:	d4e4      	bmi.n	800ae44 <_fflush_r+0xc>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	059b      	lsls	r3, r3, #22
 800ae7e:	d4e1      	bmi.n	800ae44 <_fflush_r+0xc>
 800ae80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae82:	f7fd f857 	bl	8007f34 <__retarget_lock_release_recursive>
 800ae86:	e7dd      	b.n	800ae44 <_fflush_r+0xc>

0800ae88 <__sccl>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	780b      	ldrb	r3, [r1, #0]
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	2b5e      	cmp	r3, #94	@ 0x5e
 800ae90:	bf0b      	itete	eq
 800ae92:	784b      	ldrbeq	r3, [r1, #1]
 800ae94:	1c4a      	addne	r2, r1, #1
 800ae96:	1c8a      	addeq	r2, r1, #2
 800ae98:	2100      	movne	r1, #0
 800ae9a:	bf08      	it	eq
 800ae9c:	2101      	moveq	r1, #1
 800ae9e:	3801      	subs	r0, #1
 800aea0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800aea4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aea8:	42a8      	cmp	r0, r5
 800aeaa:	d1fb      	bne.n	800aea4 <__sccl+0x1c>
 800aeac:	b90b      	cbnz	r3, 800aeb2 <__sccl+0x2a>
 800aeae:	1e50      	subs	r0, r2, #1
 800aeb0:	bd70      	pop	{r4, r5, r6, pc}
 800aeb2:	f081 0101 	eor.w	r1, r1, #1
 800aeb6:	54e1      	strb	r1, [r4, r3]
 800aeb8:	4610      	mov	r0, r2
 800aeba:	4602      	mov	r2, r0
 800aebc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aec0:	2d2d      	cmp	r5, #45	@ 0x2d
 800aec2:	d005      	beq.n	800aed0 <__sccl+0x48>
 800aec4:	2d5d      	cmp	r5, #93	@ 0x5d
 800aec6:	d016      	beq.n	800aef6 <__sccl+0x6e>
 800aec8:	2d00      	cmp	r5, #0
 800aeca:	d0f1      	beq.n	800aeb0 <__sccl+0x28>
 800aecc:	462b      	mov	r3, r5
 800aece:	e7f2      	b.n	800aeb6 <__sccl+0x2e>
 800aed0:	7846      	ldrb	r6, [r0, #1]
 800aed2:	2e5d      	cmp	r6, #93	@ 0x5d
 800aed4:	d0fa      	beq.n	800aecc <__sccl+0x44>
 800aed6:	42b3      	cmp	r3, r6
 800aed8:	dcf8      	bgt.n	800aecc <__sccl+0x44>
 800aeda:	3002      	adds	r0, #2
 800aedc:	461a      	mov	r2, r3
 800aede:	3201      	adds	r2, #1
 800aee0:	4296      	cmp	r6, r2
 800aee2:	54a1      	strb	r1, [r4, r2]
 800aee4:	dcfb      	bgt.n	800aede <__sccl+0x56>
 800aee6:	1af2      	subs	r2, r6, r3
 800aee8:	3a01      	subs	r2, #1
 800aeea:	1c5d      	adds	r5, r3, #1
 800aeec:	42b3      	cmp	r3, r6
 800aeee:	bfa8      	it	ge
 800aef0:	2200      	movge	r2, #0
 800aef2:	18ab      	adds	r3, r5, r2
 800aef4:	e7e1      	b.n	800aeba <__sccl+0x32>
 800aef6:	4610      	mov	r0, r2
 800aef8:	e7da      	b.n	800aeb0 <__sccl+0x28>

0800aefa <__submore>:
 800aefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aefe:	460c      	mov	r4, r1
 800af00:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800af02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af06:	4299      	cmp	r1, r3
 800af08:	d11d      	bne.n	800af46 <__submore+0x4c>
 800af0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800af0e:	f7fd fedb 	bl	8008cc8 <_malloc_r>
 800af12:	b918      	cbnz	r0, 800af1c <__submore+0x22>
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
 800af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af20:	63a3      	str	r3, [r4, #56]	@ 0x38
 800af22:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800af26:	6360      	str	r0, [r4, #52]	@ 0x34
 800af28:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800af2c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800af30:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800af34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800af38:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800af3c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800af40:	6020      	str	r0, [r4, #0]
 800af42:	2000      	movs	r0, #0
 800af44:	e7e8      	b.n	800af18 <__submore+0x1e>
 800af46:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800af48:	0077      	lsls	r7, r6, #1
 800af4a:	463a      	mov	r2, r7
 800af4c:	f000 fbcd 	bl	800b6ea <_realloc_r>
 800af50:	4605      	mov	r5, r0
 800af52:	2800      	cmp	r0, #0
 800af54:	d0de      	beq.n	800af14 <__submore+0x1a>
 800af56:	eb00 0806 	add.w	r8, r0, r6
 800af5a:	4601      	mov	r1, r0
 800af5c:	4632      	mov	r2, r6
 800af5e:	4640      	mov	r0, r8
 800af60:	f000 f830 	bl	800afc4 <memcpy>
 800af64:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800af68:	f8c4 8000 	str.w	r8, [r4]
 800af6c:	e7e9      	b.n	800af42 <__submore+0x48>

0800af6e <memmove>:
 800af6e:	4288      	cmp	r0, r1
 800af70:	b510      	push	{r4, lr}
 800af72:	eb01 0402 	add.w	r4, r1, r2
 800af76:	d902      	bls.n	800af7e <memmove+0x10>
 800af78:	4284      	cmp	r4, r0
 800af7a:	4623      	mov	r3, r4
 800af7c:	d807      	bhi.n	800af8e <memmove+0x20>
 800af7e:	1e43      	subs	r3, r0, #1
 800af80:	42a1      	cmp	r1, r4
 800af82:	d008      	beq.n	800af96 <memmove+0x28>
 800af84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af88:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af8c:	e7f8      	b.n	800af80 <memmove+0x12>
 800af8e:	4402      	add	r2, r0
 800af90:	4601      	mov	r1, r0
 800af92:	428a      	cmp	r2, r1
 800af94:	d100      	bne.n	800af98 <memmove+0x2a>
 800af96:	bd10      	pop	{r4, pc}
 800af98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afa0:	e7f7      	b.n	800af92 <memmove+0x24>
	...

0800afa4 <_sbrk_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d06      	ldr	r5, [pc, #24]	@ (800afc0 <_sbrk_r+0x1c>)
 800afa8:	2300      	movs	r3, #0
 800afaa:	4604      	mov	r4, r0
 800afac:	4608      	mov	r0, r1
 800afae:	602b      	str	r3, [r5, #0]
 800afb0:	f7f7 fe9e 	bl	8002cf0 <_sbrk>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_sbrk_r+0x1a>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_sbrk_r+0x1a>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	200011ec 	.word	0x200011ec

0800afc4 <memcpy>:
 800afc4:	440a      	add	r2, r1
 800afc6:	4291      	cmp	r1, r2
 800afc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800afcc:	d100      	bne.n	800afd0 <memcpy+0xc>
 800afce:	4770      	bx	lr
 800afd0:	b510      	push	{r4, lr}
 800afd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afda:	4291      	cmp	r1, r2
 800afdc:	d1f9      	bne.n	800afd2 <memcpy+0xe>
 800afde:	bd10      	pop	{r4, pc}

0800afe0 <nan>:
 800afe0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800afe8 <nan+0x8>
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	00000000 	.word	0x00000000
 800afec:	7ff80000 	.word	0x7ff80000

0800aff0 <__assert_func>:
 800aff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff2:	4614      	mov	r4, r2
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b09      	ldr	r3, [pc, #36]	@ (800b01c <__assert_func+0x2c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4605      	mov	r5, r0
 800affc:	68d8      	ldr	r0, [r3, #12]
 800affe:	b954      	cbnz	r4, 800b016 <__assert_func+0x26>
 800b000:	4b07      	ldr	r3, [pc, #28]	@ (800b020 <__assert_func+0x30>)
 800b002:	461c      	mov	r4, r3
 800b004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b008:	9100      	str	r1, [sp, #0]
 800b00a:	462b      	mov	r3, r5
 800b00c:	4905      	ldr	r1, [pc, #20]	@ (800b024 <__assert_func+0x34>)
 800b00e:	f000 fc19 	bl	800b844 <fiprintf>
 800b012:	f000 fc29 	bl	800b868 <abort>
 800b016:	4b04      	ldr	r3, [pc, #16]	@ (800b028 <__assert_func+0x38>)
 800b018:	e7f4      	b.n	800b004 <__assert_func+0x14>
 800b01a:	bf00      	nop
 800b01c:	20000820 	.word	0x20000820
 800b020:	0800c268 	.word	0x0800c268
 800b024:	0800c23a 	.word	0x0800c23a
 800b028:	0800c22d 	.word	0x0800c22d

0800b02c <_calloc_r>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	fba1 5402 	umull	r5, r4, r1, r2
 800b032:	b93c      	cbnz	r4, 800b044 <_calloc_r+0x18>
 800b034:	4629      	mov	r1, r5
 800b036:	f7fd fe47 	bl	8008cc8 <_malloc_r>
 800b03a:	4606      	mov	r6, r0
 800b03c:	b928      	cbnz	r0, 800b04a <_calloc_r+0x1e>
 800b03e:	2600      	movs	r6, #0
 800b040:	4630      	mov	r0, r6
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	220c      	movs	r2, #12
 800b046:	6002      	str	r2, [r0, #0]
 800b048:	e7f9      	b.n	800b03e <_calloc_r+0x12>
 800b04a:	462a      	mov	r2, r5
 800b04c:	4621      	mov	r1, r4
 800b04e:	f7fc fee1 	bl	8007e14 <memset>
 800b052:	e7f5      	b.n	800b040 <_calloc_r+0x14>

0800b054 <rshift>:
 800b054:	6903      	ldr	r3, [r0, #16]
 800b056:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b05a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b05e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b062:	f100 0414 	add.w	r4, r0, #20
 800b066:	dd45      	ble.n	800b0f4 <rshift+0xa0>
 800b068:	f011 011f 	ands.w	r1, r1, #31
 800b06c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b070:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b074:	d10c      	bne.n	800b090 <rshift+0x3c>
 800b076:	f100 0710 	add.w	r7, r0, #16
 800b07a:	4629      	mov	r1, r5
 800b07c:	42b1      	cmp	r1, r6
 800b07e:	d334      	bcc.n	800b0ea <rshift+0x96>
 800b080:	1a9b      	subs	r3, r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	1eea      	subs	r2, r5, #3
 800b086:	4296      	cmp	r6, r2
 800b088:	bf38      	it	cc
 800b08a:	2300      	movcc	r3, #0
 800b08c:	4423      	add	r3, r4
 800b08e:	e015      	b.n	800b0bc <rshift+0x68>
 800b090:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b094:	f1c1 0820 	rsb	r8, r1, #32
 800b098:	40cf      	lsrs	r7, r1
 800b09a:	f105 0e04 	add.w	lr, r5, #4
 800b09e:	46a1      	mov	r9, r4
 800b0a0:	4576      	cmp	r6, lr
 800b0a2:	46f4      	mov	ip, lr
 800b0a4:	d815      	bhi.n	800b0d2 <rshift+0x7e>
 800b0a6:	1a9a      	subs	r2, r3, r2
 800b0a8:	0092      	lsls	r2, r2, #2
 800b0aa:	3a04      	subs	r2, #4
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	42ae      	cmp	r6, r5
 800b0b0:	bf38      	it	cc
 800b0b2:	2200      	movcc	r2, #0
 800b0b4:	18a3      	adds	r3, r4, r2
 800b0b6:	50a7      	str	r7, [r4, r2]
 800b0b8:	b107      	cbz	r7, 800b0bc <rshift+0x68>
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	1b1a      	subs	r2, r3, r4
 800b0be:	42a3      	cmp	r3, r4
 800b0c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0c4:	bf08      	it	eq
 800b0c6:	2300      	moveq	r3, #0
 800b0c8:	6102      	str	r2, [r0, #16]
 800b0ca:	bf08      	it	eq
 800b0cc:	6143      	streq	r3, [r0, #20]
 800b0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d2:	f8dc c000 	ldr.w	ip, [ip]
 800b0d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0da:	ea4c 0707 	orr.w	r7, ip, r7
 800b0de:	f849 7b04 	str.w	r7, [r9], #4
 800b0e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0e6:	40cf      	lsrs	r7, r1
 800b0e8:	e7da      	b.n	800b0a0 <rshift+0x4c>
 800b0ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0f2:	e7c3      	b.n	800b07c <rshift+0x28>
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	e7e1      	b.n	800b0bc <rshift+0x68>

0800b0f8 <__hexdig_fun>:
 800b0f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b0fc:	2b09      	cmp	r3, #9
 800b0fe:	d802      	bhi.n	800b106 <__hexdig_fun+0xe>
 800b100:	3820      	subs	r0, #32
 800b102:	b2c0      	uxtb	r0, r0
 800b104:	4770      	bx	lr
 800b106:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	d801      	bhi.n	800b112 <__hexdig_fun+0x1a>
 800b10e:	3847      	subs	r0, #71	@ 0x47
 800b110:	e7f7      	b.n	800b102 <__hexdig_fun+0xa>
 800b112:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b116:	2b05      	cmp	r3, #5
 800b118:	d801      	bhi.n	800b11e <__hexdig_fun+0x26>
 800b11a:	3827      	subs	r0, #39	@ 0x27
 800b11c:	e7f1      	b.n	800b102 <__hexdig_fun+0xa>
 800b11e:	2000      	movs	r0, #0
 800b120:	4770      	bx	lr
	...

0800b124 <__gethex>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	b085      	sub	sp, #20
 800b12a:	468a      	mov	sl, r1
 800b12c:	9302      	str	r3, [sp, #8]
 800b12e:	680b      	ldr	r3, [r1, #0]
 800b130:	9001      	str	r0, [sp, #4]
 800b132:	4690      	mov	r8, r2
 800b134:	1c9c      	adds	r4, r3, #2
 800b136:	46a1      	mov	r9, r4
 800b138:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b13c:	2830      	cmp	r0, #48	@ 0x30
 800b13e:	d0fa      	beq.n	800b136 <__gethex+0x12>
 800b140:	eba9 0303 	sub.w	r3, r9, r3
 800b144:	f1a3 0b02 	sub.w	fp, r3, #2
 800b148:	f7ff ffd6 	bl	800b0f8 <__hexdig_fun>
 800b14c:	4605      	mov	r5, r0
 800b14e:	2800      	cmp	r0, #0
 800b150:	d168      	bne.n	800b224 <__gethex+0x100>
 800b152:	49a0      	ldr	r1, [pc, #640]	@ (800b3d4 <__gethex+0x2b0>)
 800b154:	2201      	movs	r2, #1
 800b156:	4648      	mov	r0, r9
 800b158:	f7fc fe64 	bl	8007e24 <strncmp>
 800b15c:	4607      	mov	r7, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	d167      	bne.n	800b232 <__gethex+0x10e>
 800b162:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b166:	4626      	mov	r6, r4
 800b168:	f7ff ffc6 	bl	800b0f8 <__hexdig_fun>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d062      	beq.n	800b236 <__gethex+0x112>
 800b170:	4623      	mov	r3, r4
 800b172:	7818      	ldrb	r0, [r3, #0]
 800b174:	2830      	cmp	r0, #48	@ 0x30
 800b176:	4699      	mov	r9, r3
 800b178:	f103 0301 	add.w	r3, r3, #1
 800b17c:	d0f9      	beq.n	800b172 <__gethex+0x4e>
 800b17e:	f7ff ffbb 	bl	800b0f8 <__hexdig_fun>
 800b182:	fab0 f580 	clz	r5, r0
 800b186:	096d      	lsrs	r5, r5, #5
 800b188:	f04f 0b01 	mov.w	fp, #1
 800b18c:	464a      	mov	r2, r9
 800b18e:	4616      	mov	r6, r2
 800b190:	3201      	adds	r2, #1
 800b192:	7830      	ldrb	r0, [r6, #0]
 800b194:	f7ff ffb0 	bl	800b0f8 <__hexdig_fun>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d1f8      	bne.n	800b18e <__gethex+0x6a>
 800b19c:	498d      	ldr	r1, [pc, #564]	@ (800b3d4 <__gethex+0x2b0>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7fc fe3f 	bl	8007e24 <strncmp>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d13f      	bne.n	800b22a <__gethex+0x106>
 800b1aa:	b944      	cbnz	r4, 800b1be <__gethex+0x9a>
 800b1ac:	1c74      	adds	r4, r6, #1
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	3201      	adds	r2, #1
 800b1b4:	7830      	ldrb	r0, [r6, #0]
 800b1b6:	f7ff ff9f 	bl	800b0f8 <__hexdig_fun>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d1f8      	bne.n	800b1b0 <__gethex+0x8c>
 800b1be:	1ba4      	subs	r4, r4, r6
 800b1c0:	00a7      	lsls	r7, r4, #2
 800b1c2:	7833      	ldrb	r3, [r6, #0]
 800b1c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b1c8:	2b50      	cmp	r3, #80	@ 0x50
 800b1ca:	d13e      	bne.n	800b24a <__gethex+0x126>
 800b1cc:	7873      	ldrb	r3, [r6, #1]
 800b1ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800b1d0:	d033      	beq.n	800b23a <__gethex+0x116>
 800b1d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b1d4:	d034      	beq.n	800b240 <__gethex+0x11c>
 800b1d6:	1c71      	adds	r1, r6, #1
 800b1d8:	2400      	movs	r4, #0
 800b1da:	7808      	ldrb	r0, [r1, #0]
 800b1dc:	f7ff ff8c 	bl	800b0f8 <__hexdig_fun>
 800b1e0:	1e43      	subs	r3, r0, #1
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b18      	cmp	r3, #24
 800b1e6:	d830      	bhi.n	800b24a <__gethex+0x126>
 800b1e8:	f1a0 0210 	sub.w	r2, r0, #16
 800b1ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1f0:	f7ff ff82 	bl	800b0f8 <__hexdig_fun>
 800b1f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b1f8:	fa5f fc8c 	uxtb.w	ip, ip
 800b1fc:	f1bc 0f18 	cmp.w	ip, #24
 800b200:	f04f 030a 	mov.w	r3, #10
 800b204:	d91e      	bls.n	800b244 <__gethex+0x120>
 800b206:	b104      	cbz	r4, 800b20a <__gethex+0xe6>
 800b208:	4252      	negs	r2, r2
 800b20a:	4417      	add	r7, r2
 800b20c:	f8ca 1000 	str.w	r1, [sl]
 800b210:	b1ed      	cbz	r5, 800b24e <__gethex+0x12a>
 800b212:	f1bb 0f00 	cmp.w	fp, #0
 800b216:	bf0c      	ite	eq
 800b218:	2506      	moveq	r5, #6
 800b21a:	2500      	movne	r5, #0
 800b21c:	4628      	mov	r0, r5
 800b21e:	b005      	add	sp, #20
 800b220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b224:	2500      	movs	r5, #0
 800b226:	462c      	mov	r4, r5
 800b228:	e7b0      	b.n	800b18c <__gethex+0x68>
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d1c7      	bne.n	800b1be <__gethex+0x9a>
 800b22e:	4627      	mov	r7, r4
 800b230:	e7c7      	b.n	800b1c2 <__gethex+0x9e>
 800b232:	464e      	mov	r6, r9
 800b234:	462f      	mov	r7, r5
 800b236:	2501      	movs	r5, #1
 800b238:	e7c3      	b.n	800b1c2 <__gethex+0x9e>
 800b23a:	2400      	movs	r4, #0
 800b23c:	1cb1      	adds	r1, r6, #2
 800b23e:	e7cc      	b.n	800b1da <__gethex+0xb6>
 800b240:	2401      	movs	r4, #1
 800b242:	e7fb      	b.n	800b23c <__gethex+0x118>
 800b244:	fb03 0002 	mla	r0, r3, r2, r0
 800b248:	e7ce      	b.n	800b1e8 <__gethex+0xc4>
 800b24a:	4631      	mov	r1, r6
 800b24c:	e7de      	b.n	800b20c <__gethex+0xe8>
 800b24e:	eba6 0309 	sub.w	r3, r6, r9
 800b252:	3b01      	subs	r3, #1
 800b254:	4629      	mov	r1, r5
 800b256:	2b07      	cmp	r3, #7
 800b258:	dc0a      	bgt.n	800b270 <__gethex+0x14c>
 800b25a:	9801      	ldr	r0, [sp, #4]
 800b25c:	f7fd fdc0 	bl	8008de0 <_Balloc>
 800b260:	4604      	mov	r4, r0
 800b262:	b940      	cbnz	r0, 800b276 <__gethex+0x152>
 800b264:	4b5c      	ldr	r3, [pc, #368]	@ (800b3d8 <__gethex+0x2b4>)
 800b266:	4602      	mov	r2, r0
 800b268:	21e4      	movs	r1, #228	@ 0xe4
 800b26a:	485c      	ldr	r0, [pc, #368]	@ (800b3dc <__gethex+0x2b8>)
 800b26c:	f7ff fec0 	bl	800aff0 <__assert_func>
 800b270:	3101      	adds	r1, #1
 800b272:	105b      	asrs	r3, r3, #1
 800b274:	e7ef      	b.n	800b256 <__gethex+0x132>
 800b276:	f100 0a14 	add.w	sl, r0, #20
 800b27a:	2300      	movs	r3, #0
 800b27c:	4655      	mov	r5, sl
 800b27e:	469b      	mov	fp, r3
 800b280:	45b1      	cmp	r9, r6
 800b282:	d337      	bcc.n	800b2f4 <__gethex+0x1d0>
 800b284:	f845 bb04 	str.w	fp, [r5], #4
 800b288:	eba5 050a 	sub.w	r5, r5, sl
 800b28c:	10ad      	asrs	r5, r5, #2
 800b28e:	6125      	str	r5, [r4, #16]
 800b290:	4658      	mov	r0, fp
 800b292:	f7fd fe97 	bl	8008fc4 <__hi0bits>
 800b296:	016d      	lsls	r5, r5, #5
 800b298:	f8d8 6000 	ldr.w	r6, [r8]
 800b29c:	1a2d      	subs	r5, r5, r0
 800b29e:	42b5      	cmp	r5, r6
 800b2a0:	dd54      	ble.n	800b34c <__gethex+0x228>
 800b2a2:	1bad      	subs	r5, r5, r6
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7fe fa2b 	bl	8009702 <__any_on>
 800b2ac:	4681      	mov	r9, r0
 800b2ae:	b178      	cbz	r0, 800b2d0 <__gethex+0x1ac>
 800b2b0:	1e6b      	subs	r3, r5, #1
 800b2b2:	1159      	asrs	r1, r3, #5
 800b2b4:	f003 021f 	and.w	r2, r3, #31
 800b2b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b2bc:	f04f 0901 	mov.w	r9, #1
 800b2c0:	fa09 f202 	lsl.w	r2, r9, r2
 800b2c4:	420a      	tst	r2, r1
 800b2c6:	d003      	beq.n	800b2d0 <__gethex+0x1ac>
 800b2c8:	454b      	cmp	r3, r9
 800b2ca:	dc36      	bgt.n	800b33a <__gethex+0x216>
 800b2cc:	f04f 0902 	mov.w	r9, #2
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7ff febe 	bl	800b054 <rshift>
 800b2d8:	442f      	add	r7, r5
 800b2da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2de:	42bb      	cmp	r3, r7
 800b2e0:	da42      	bge.n	800b368 <__gethex+0x244>
 800b2e2:	9801      	ldr	r0, [sp, #4]
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f7fd fdbb 	bl	8008e60 <_Bfree>
 800b2ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	25a3      	movs	r5, #163	@ 0xa3
 800b2f2:	e793      	b.n	800b21c <__gethex+0xf8>
 800b2f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b2f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b2fa:	d012      	beq.n	800b322 <__gethex+0x1fe>
 800b2fc:	2b20      	cmp	r3, #32
 800b2fe:	d104      	bne.n	800b30a <__gethex+0x1e6>
 800b300:	f845 bb04 	str.w	fp, [r5], #4
 800b304:	f04f 0b00 	mov.w	fp, #0
 800b308:	465b      	mov	r3, fp
 800b30a:	7830      	ldrb	r0, [r6, #0]
 800b30c:	9303      	str	r3, [sp, #12]
 800b30e:	f7ff fef3 	bl	800b0f8 <__hexdig_fun>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	f000 000f 	and.w	r0, r0, #15
 800b318:	4098      	lsls	r0, r3
 800b31a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b31e:	3304      	adds	r3, #4
 800b320:	e7ae      	b.n	800b280 <__gethex+0x15c>
 800b322:	45b1      	cmp	r9, r6
 800b324:	d8ea      	bhi.n	800b2fc <__gethex+0x1d8>
 800b326:	492b      	ldr	r1, [pc, #172]	@ (800b3d4 <__gethex+0x2b0>)
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	2201      	movs	r2, #1
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7fc fd79 	bl	8007e24 <strncmp>
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	2800      	cmp	r0, #0
 800b336:	d1e1      	bne.n	800b2fc <__gethex+0x1d8>
 800b338:	e7a2      	b.n	800b280 <__gethex+0x15c>
 800b33a:	1ea9      	subs	r1, r5, #2
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7fe f9e0 	bl	8009702 <__any_on>
 800b342:	2800      	cmp	r0, #0
 800b344:	d0c2      	beq.n	800b2cc <__gethex+0x1a8>
 800b346:	f04f 0903 	mov.w	r9, #3
 800b34a:	e7c1      	b.n	800b2d0 <__gethex+0x1ac>
 800b34c:	da09      	bge.n	800b362 <__gethex+0x23e>
 800b34e:	1b75      	subs	r5, r6, r5
 800b350:	4621      	mov	r1, r4
 800b352:	9801      	ldr	r0, [sp, #4]
 800b354:	462a      	mov	r2, r5
 800b356:	f7fd ff9b 	bl	8009290 <__lshift>
 800b35a:	1b7f      	subs	r7, r7, r5
 800b35c:	4604      	mov	r4, r0
 800b35e:	f100 0a14 	add.w	sl, r0, #20
 800b362:	f04f 0900 	mov.w	r9, #0
 800b366:	e7b8      	b.n	800b2da <__gethex+0x1b6>
 800b368:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b36c:	42bd      	cmp	r5, r7
 800b36e:	dd6f      	ble.n	800b450 <__gethex+0x32c>
 800b370:	1bed      	subs	r5, r5, r7
 800b372:	42ae      	cmp	r6, r5
 800b374:	dc34      	bgt.n	800b3e0 <__gethex+0x2bc>
 800b376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d022      	beq.n	800b3c4 <__gethex+0x2a0>
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d024      	beq.n	800b3cc <__gethex+0x2a8>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d115      	bne.n	800b3b2 <__gethex+0x28e>
 800b386:	42ae      	cmp	r6, r5
 800b388:	d113      	bne.n	800b3b2 <__gethex+0x28e>
 800b38a:	2e01      	cmp	r6, #1
 800b38c:	d10b      	bne.n	800b3a6 <__gethex+0x282>
 800b38e:	9a02      	ldr	r2, [sp, #8]
 800b390:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	2301      	movs	r3, #1
 800b398:	6123      	str	r3, [r4, #16]
 800b39a:	f8ca 3000 	str.w	r3, [sl]
 800b39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3a0:	2562      	movs	r5, #98	@ 0x62
 800b3a2:	601c      	str	r4, [r3, #0]
 800b3a4:	e73a      	b.n	800b21c <__gethex+0xf8>
 800b3a6:	1e71      	subs	r1, r6, #1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7fe f9aa 	bl	8009702 <__any_on>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d1ed      	bne.n	800b38e <__gethex+0x26a>
 800b3b2:	9801      	ldr	r0, [sp, #4]
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	f7fd fd53 	bl	8008e60 <_Bfree>
 800b3ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3bc:	2300      	movs	r3, #0
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	2550      	movs	r5, #80	@ 0x50
 800b3c2:	e72b      	b.n	800b21c <__gethex+0xf8>
 800b3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1f3      	bne.n	800b3b2 <__gethex+0x28e>
 800b3ca:	e7e0      	b.n	800b38e <__gethex+0x26a>
 800b3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1dd      	bne.n	800b38e <__gethex+0x26a>
 800b3d2:	e7ee      	b.n	800b3b2 <__gethex+0x28e>
 800b3d4:	0800c0a0 	.word	0x0800c0a0
 800b3d8:	0800bf33 	.word	0x0800bf33
 800b3dc:	0800c269 	.word	0x0800c269
 800b3e0:	1e6f      	subs	r7, r5, #1
 800b3e2:	f1b9 0f00 	cmp.w	r9, #0
 800b3e6:	d130      	bne.n	800b44a <__gethex+0x326>
 800b3e8:	b127      	cbz	r7, 800b3f4 <__gethex+0x2d0>
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7fe f988 	bl	8009702 <__any_on>
 800b3f2:	4681      	mov	r9, r0
 800b3f4:	117a      	asrs	r2, r7, #5
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b3fc:	f007 071f 	and.w	r7, r7, #31
 800b400:	40bb      	lsls	r3, r7
 800b402:	4213      	tst	r3, r2
 800b404:	4629      	mov	r1, r5
 800b406:	4620      	mov	r0, r4
 800b408:	bf18      	it	ne
 800b40a:	f049 0902 	orrne.w	r9, r9, #2
 800b40e:	f7ff fe21 	bl	800b054 <rshift>
 800b412:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b416:	1b76      	subs	r6, r6, r5
 800b418:	2502      	movs	r5, #2
 800b41a:	f1b9 0f00 	cmp.w	r9, #0
 800b41e:	d047      	beq.n	800b4b0 <__gethex+0x38c>
 800b420:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b424:	2b02      	cmp	r3, #2
 800b426:	d015      	beq.n	800b454 <__gethex+0x330>
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d017      	beq.n	800b45c <__gethex+0x338>
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d109      	bne.n	800b444 <__gethex+0x320>
 800b430:	f019 0f02 	tst.w	r9, #2
 800b434:	d006      	beq.n	800b444 <__gethex+0x320>
 800b436:	f8da 3000 	ldr.w	r3, [sl]
 800b43a:	ea49 0903 	orr.w	r9, r9, r3
 800b43e:	f019 0f01 	tst.w	r9, #1
 800b442:	d10e      	bne.n	800b462 <__gethex+0x33e>
 800b444:	f045 0510 	orr.w	r5, r5, #16
 800b448:	e032      	b.n	800b4b0 <__gethex+0x38c>
 800b44a:	f04f 0901 	mov.w	r9, #1
 800b44e:	e7d1      	b.n	800b3f4 <__gethex+0x2d0>
 800b450:	2501      	movs	r5, #1
 800b452:	e7e2      	b.n	800b41a <__gethex+0x2f6>
 800b454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b456:	f1c3 0301 	rsb	r3, r3, #1
 800b45a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d0f0      	beq.n	800b444 <__gethex+0x320>
 800b462:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b466:	f104 0314 	add.w	r3, r4, #20
 800b46a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b46e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b472:	f04f 0c00 	mov.w	ip, #0
 800b476:	4618      	mov	r0, r3
 800b478:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b480:	d01b      	beq.n	800b4ba <__gethex+0x396>
 800b482:	3201      	adds	r2, #1
 800b484:	6002      	str	r2, [r0, #0]
 800b486:	2d02      	cmp	r5, #2
 800b488:	f104 0314 	add.w	r3, r4, #20
 800b48c:	d13c      	bne.n	800b508 <__gethex+0x3e4>
 800b48e:	f8d8 2000 	ldr.w	r2, [r8]
 800b492:	3a01      	subs	r2, #1
 800b494:	42b2      	cmp	r2, r6
 800b496:	d109      	bne.n	800b4ac <__gethex+0x388>
 800b498:	1171      	asrs	r1, r6, #5
 800b49a:	2201      	movs	r2, #1
 800b49c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4a0:	f006 061f 	and.w	r6, r6, #31
 800b4a4:	fa02 f606 	lsl.w	r6, r2, r6
 800b4a8:	421e      	tst	r6, r3
 800b4aa:	d13a      	bne.n	800b522 <__gethex+0x3fe>
 800b4ac:	f045 0520 	orr.w	r5, r5, #32
 800b4b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4b2:	601c      	str	r4, [r3, #0]
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	601f      	str	r7, [r3, #0]
 800b4b8:	e6b0      	b.n	800b21c <__gethex+0xf8>
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4c0:	d8d9      	bhi.n	800b476 <__gethex+0x352>
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	459b      	cmp	fp, r3
 800b4c6:	db17      	blt.n	800b4f8 <__gethex+0x3d4>
 800b4c8:	6861      	ldr	r1, [r4, #4]
 800b4ca:	9801      	ldr	r0, [sp, #4]
 800b4cc:	3101      	adds	r1, #1
 800b4ce:	f7fd fc87 	bl	8008de0 <_Balloc>
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	b918      	cbnz	r0, 800b4de <__gethex+0x3ba>
 800b4d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b540 <__gethex+0x41c>)
 800b4d8:	4602      	mov	r2, r0
 800b4da:	2184      	movs	r1, #132	@ 0x84
 800b4dc:	e6c5      	b.n	800b26a <__gethex+0x146>
 800b4de:	6922      	ldr	r2, [r4, #16]
 800b4e0:	3202      	adds	r2, #2
 800b4e2:	f104 010c 	add.w	r1, r4, #12
 800b4e6:	0092      	lsls	r2, r2, #2
 800b4e8:	300c      	adds	r0, #12
 800b4ea:	f7ff fd6b 	bl	800afc4 <memcpy>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	9801      	ldr	r0, [sp, #4]
 800b4f2:	f7fd fcb5 	bl	8008e60 <_Bfree>
 800b4f6:	464c      	mov	r4, r9
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b500:	6122      	str	r2, [r4, #16]
 800b502:	2201      	movs	r2, #1
 800b504:	615a      	str	r2, [r3, #20]
 800b506:	e7be      	b.n	800b486 <__gethex+0x362>
 800b508:	6922      	ldr	r2, [r4, #16]
 800b50a:	455a      	cmp	r2, fp
 800b50c:	dd0b      	ble.n	800b526 <__gethex+0x402>
 800b50e:	2101      	movs	r1, #1
 800b510:	4620      	mov	r0, r4
 800b512:	f7ff fd9f 	bl	800b054 <rshift>
 800b516:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b51a:	3701      	adds	r7, #1
 800b51c:	42bb      	cmp	r3, r7
 800b51e:	f6ff aee0 	blt.w	800b2e2 <__gethex+0x1be>
 800b522:	2501      	movs	r5, #1
 800b524:	e7c2      	b.n	800b4ac <__gethex+0x388>
 800b526:	f016 061f 	ands.w	r6, r6, #31
 800b52a:	d0fa      	beq.n	800b522 <__gethex+0x3fe>
 800b52c:	4453      	add	r3, sl
 800b52e:	f1c6 0620 	rsb	r6, r6, #32
 800b532:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b536:	f7fd fd45 	bl	8008fc4 <__hi0bits>
 800b53a:	42b0      	cmp	r0, r6
 800b53c:	dbe7      	blt.n	800b50e <__gethex+0x3ea>
 800b53e:	e7f0      	b.n	800b522 <__gethex+0x3fe>
 800b540:	0800bf33 	.word	0x0800bf33

0800b544 <L_shift>:
 800b544:	f1c2 0208 	rsb	r2, r2, #8
 800b548:	0092      	lsls	r2, r2, #2
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	f1c2 0620 	rsb	r6, r2, #32
 800b550:	6843      	ldr	r3, [r0, #4]
 800b552:	6804      	ldr	r4, [r0, #0]
 800b554:	fa03 f506 	lsl.w	r5, r3, r6
 800b558:	432c      	orrs	r4, r5
 800b55a:	40d3      	lsrs	r3, r2
 800b55c:	6004      	str	r4, [r0, #0]
 800b55e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b562:	4288      	cmp	r0, r1
 800b564:	d3f4      	bcc.n	800b550 <L_shift+0xc>
 800b566:	bd70      	pop	{r4, r5, r6, pc}

0800b568 <__match>:
 800b568:	b530      	push	{r4, r5, lr}
 800b56a:	6803      	ldr	r3, [r0, #0]
 800b56c:	3301      	adds	r3, #1
 800b56e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b572:	b914      	cbnz	r4, 800b57a <__match+0x12>
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	2001      	movs	r0, #1
 800b578:	bd30      	pop	{r4, r5, pc}
 800b57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b57e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b582:	2d19      	cmp	r5, #25
 800b584:	bf98      	it	ls
 800b586:	3220      	addls	r2, #32
 800b588:	42a2      	cmp	r2, r4
 800b58a:	d0f0      	beq.n	800b56e <__match+0x6>
 800b58c:	2000      	movs	r0, #0
 800b58e:	e7f3      	b.n	800b578 <__match+0x10>

0800b590 <__hexnan>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	680b      	ldr	r3, [r1, #0]
 800b596:	6801      	ldr	r1, [r0, #0]
 800b598:	115e      	asrs	r6, r3, #5
 800b59a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b59e:	f013 031f 	ands.w	r3, r3, #31
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	bf18      	it	ne
 800b5a6:	3604      	addne	r6, #4
 800b5a8:	2500      	movs	r5, #0
 800b5aa:	1f37      	subs	r7, r6, #4
 800b5ac:	4682      	mov	sl, r0
 800b5ae:	4690      	mov	r8, r2
 800b5b0:	9301      	str	r3, [sp, #4]
 800b5b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5b6:	46b9      	mov	r9, r7
 800b5b8:	463c      	mov	r4, r7
 800b5ba:	9502      	str	r5, [sp, #8]
 800b5bc:	46ab      	mov	fp, r5
 800b5be:	784a      	ldrb	r2, [r1, #1]
 800b5c0:	1c4b      	adds	r3, r1, #1
 800b5c2:	9303      	str	r3, [sp, #12]
 800b5c4:	b342      	cbz	r2, 800b618 <__hexnan+0x88>
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	9105      	str	r1, [sp, #20]
 800b5ca:	9204      	str	r2, [sp, #16]
 800b5cc:	f7ff fd94 	bl	800b0f8 <__hexdig_fun>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d151      	bne.n	800b678 <__hexnan+0xe8>
 800b5d4:	9a04      	ldr	r2, [sp, #16]
 800b5d6:	9905      	ldr	r1, [sp, #20]
 800b5d8:	2a20      	cmp	r2, #32
 800b5da:	d818      	bhi.n	800b60e <__hexnan+0x7e>
 800b5dc:	9b02      	ldr	r3, [sp, #8]
 800b5de:	459b      	cmp	fp, r3
 800b5e0:	dd13      	ble.n	800b60a <__hexnan+0x7a>
 800b5e2:	454c      	cmp	r4, r9
 800b5e4:	d206      	bcs.n	800b5f4 <__hexnan+0x64>
 800b5e6:	2d07      	cmp	r5, #7
 800b5e8:	dc04      	bgt.n	800b5f4 <__hexnan+0x64>
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7ff ffa8 	bl	800b544 <L_shift>
 800b5f4:	4544      	cmp	r4, r8
 800b5f6:	d952      	bls.n	800b69e <__hexnan+0x10e>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b5fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b602:	f8cd b008 	str.w	fp, [sp, #8]
 800b606:	464c      	mov	r4, r9
 800b608:	461d      	mov	r5, r3
 800b60a:	9903      	ldr	r1, [sp, #12]
 800b60c:	e7d7      	b.n	800b5be <__hexnan+0x2e>
 800b60e:	2a29      	cmp	r2, #41	@ 0x29
 800b610:	d157      	bne.n	800b6c2 <__hexnan+0x132>
 800b612:	3102      	adds	r1, #2
 800b614:	f8ca 1000 	str.w	r1, [sl]
 800b618:	f1bb 0f00 	cmp.w	fp, #0
 800b61c:	d051      	beq.n	800b6c2 <__hexnan+0x132>
 800b61e:	454c      	cmp	r4, r9
 800b620:	d206      	bcs.n	800b630 <__hexnan+0xa0>
 800b622:	2d07      	cmp	r5, #7
 800b624:	dc04      	bgt.n	800b630 <__hexnan+0xa0>
 800b626:	462a      	mov	r2, r5
 800b628:	4649      	mov	r1, r9
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff ff8a 	bl	800b544 <L_shift>
 800b630:	4544      	cmp	r4, r8
 800b632:	d936      	bls.n	800b6a2 <__hexnan+0x112>
 800b634:	f1a8 0204 	sub.w	r2, r8, #4
 800b638:	4623      	mov	r3, r4
 800b63a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b63e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b642:	429f      	cmp	r7, r3
 800b644:	d2f9      	bcs.n	800b63a <__hexnan+0xaa>
 800b646:	1b3b      	subs	r3, r7, r4
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	3304      	adds	r3, #4
 800b64e:	3401      	adds	r4, #1
 800b650:	3e03      	subs	r6, #3
 800b652:	42b4      	cmp	r4, r6
 800b654:	bf88      	it	hi
 800b656:	2304      	movhi	r3, #4
 800b658:	4443      	add	r3, r8
 800b65a:	2200      	movs	r2, #0
 800b65c:	f843 2b04 	str.w	r2, [r3], #4
 800b660:	429f      	cmp	r7, r3
 800b662:	d2fb      	bcs.n	800b65c <__hexnan+0xcc>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	b91b      	cbnz	r3, 800b670 <__hexnan+0xe0>
 800b668:	4547      	cmp	r7, r8
 800b66a:	d128      	bne.n	800b6be <__hexnan+0x12e>
 800b66c:	2301      	movs	r3, #1
 800b66e:	603b      	str	r3, [r7, #0]
 800b670:	2005      	movs	r0, #5
 800b672:	b007      	add	sp, #28
 800b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b678:	3501      	adds	r5, #1
 800b67a:	2d08      	cmp	r5, #8
 800b67c:	f10b 0b01 	add.w	fp, fp, #1
 800b680:	dd06      	ble.n	800b690 <__hexnan+0x100>
 800b682:	4544      	cmp	r4, r8
 800b684:	d9c1      	bls.n	800b60a <__hexnan+0x7a>
 800b686:	2300      	movs	r3, #0
 800b688:	f844 3c04 	str.w	r3, [r4, #-4]
 800b68c:	2501      	movs	r5, #1
 800b68e:	3c04      	subs	r4, #4
 800b690:	6822      	ldr	r2, [r4, #0]
 800b692:	f000 000f 	and.w	r0, r0, #15
 800b696:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b69a:	6020      	str	r0, [r4, #0]
 800b69c:	e7b5      	b.n	800b60a <__hexnan+0x7a>
 800b69e:	2508      	movs	r5, #8
 800b6a0:	e7b3      	b.n	800b60a <__hexnan+0x7a>
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0dd      	beq.n	800b664 <__hexnan+0xd4>
 800b6a8:	f1c3 0320 	rsb	r3, r3, #32
 800b6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b0:	40da      	lsrs	r2, r3
 800b6b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b6bc:	e7d2      	b.n	800b664 <__hexnan+0xd4>
 800b6be:	3f04      	subs	r7, #4
 800b6c0:	e7d0      	b.n	800b664 <__hexnan+0xd4>
 800b6c2:	2004      	movs	r0, #4
 800b6c4:	e7d5      	b.n	800b672 <__hexnan+0xe2>

0800b6c6 <__ascii_mbtowc>:
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	b901      	cbnz	r1, 800b6cc <__ascii_mbtowc+0x6>
 800b6ca:	a901      	add	r1, sp, #4
 800b6cc:	b142      	cbz	r2, 800b6e0 <__ascii_mbtowc+0x1a>
 800b6ce:	b14b      	cbz	r3, 800b6e4 <__ascii_mbtowc+0x1e>
 800b6d0:	7813      	ldrb	r3, [r2, #0]
 800b6d2:	600b      	str	r3, [r1, #0]
 800b6d4:	7812      	ldrb	r2, [r2, #0]
 800b6d6:	1e10      	subs	r0, r2, #0
 800b6d8:	bf18      	it	ne
 800b6da:	2001      	movne	r0, #1
 800b6dc:	b002      	add	sp, #8
 800b6de:	4770      	bx	lr
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	e7fb      	b.n	800b6dc <__ascii_mbtowc+0x16>
 800b6e4:	f06f 0001 	mvn.w	r0, #1
 800b6e8:	e7f8      	b.n	800b6dc <__ascii_mbtowc+0x16>

0800b6ea <_realloc_r>:
 800b6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	4680      	mov	r8, r0
 800b6f0:	4615      	mov	r5, r2
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	b921      	cbnz	r1, 800b700 <_realloc_r+0x16>
 800b6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	f7fd bae4 	b.w	8008cc8 <_malloc_r>
 800b700:	b92a      	cbnz	r2, 800b70e <_realloc_r+0x24>
 800b702:	f7fd fa6d 	bl	8008be0 <_free_r>
 800b706:	2400      	movs	r4, #0
 800b708:	4620      	mov	r0, r4
 800b70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70e:	f000 f8b2 	bl	800b876 <_malloc_usable_size_r>
 800b712:	4285      	cmp	r5, r0
 800b714:	4606      	mov	r6, r0
 800b716:	d802      	bhi.n	800b71e <_realloc_r+0x34>
 800b718:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b71c:	d8f4      	bhi.n	800b708 <_realloc_r+0x1e>
 800b71e:	4629      	mov	r1, r5
 800b720:	4640      	mov	r0, r8
 800b722:	f7fd fad1 	bl	8008cc8 <_malloc_r>
 800b726:	4607      	mov	r7, r0
 800b728:	2800      	cmp	r0, #0
 800b72a:	d0ec      	beq.n	800b706 <_realloc_r+0x1c>
 800b72c:	42b5      	cmp	r5, r6
 800b72e:	462a      	mov	r2, r5
 800b730:	4621      	mov	r1, r4
 800b732:	bf28      	it	cs
 800b734:	4632      	movcs	r2, r6
 800b736:	f7ff fc45 	bl	800afc4 <memcpy>
 800b73a:	4621      	mov	r1, r4
 800b73c:	4640      	mov	r0, r8
 800b73e:	f7fd fa4f 	bl	8008be0 <_free_r>
 800b742:	463c      	mov	r4, r7
 800b744:	e7e0      	b.n	800b708 <_realloc_r+0x1e>
	...

0800b748 <_strtoul_l.constprop.0>:
 800b748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b74c:	4e34      	ldr	r6, [pc, #208]	@ (800b820 <_strtoul_l.constprop.0+0xd8>)
 800b74e:	4686      	mov	lr, r0
 800b750:	460d      	mov	r5, r1
 800b752:	4628      	mov	r0, r5
 800b754:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b758:	5d37      	ldrb	r7, [r6, r4]
 800b75a:	f017 0708 	ands.w	r7, r7, #8
 800b75e:	d1f8      	bne.n	800b752 <_strtoul_l.constprop.0+0xa>
 800b760:	2c2d      	cmp	r4, #45	@ 0x2d
 800b762:	d12f      	bne.n	800b7c4 <_strtoul_l.constprop.0+0x7c>
 800b764:	782c      	ldrb	r4, [r5, #0]
 800b766:	2701      	movs	r7, #1
 800b768:	1c85      	adds	r5, r0, #2
 800b76a:	f033 0010 	bics.w	r0, r3, #16
 800b76e:	d109      	bne.n	800b784 <_strtoul_l.constprop.0+0x3c>
 800b770:	2c30      	cmp	r4, #48	@ 0x30
 800b772:	d12c      	bne.n	800b7ce <_strtoul_l.constprop.0+0x86>
 800b774:	7828      	ldrb	r0, [r5, #0]
 800b776:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b77a:	2858      	cmp	r0, #88	@ 0x58
 800b77c:	d127      	bne.n	800b7ce <_strtoul_l.constprop.0+0x86>
 800b77e:	786c      	ldrb	r4, [r5, #1]
 800b780:	2310      	movs	r3, #16
 800b782:	3502      	adds	r5, #2
 800b784:	f04f 38ff 	mov.w	r8, #4294967295
 800b788:	2600      	movs	r6, #0
 800b78a:	fbb8 f8f3 	udiv	r8, r8, r3
 800b78e:	fb03 f908 	mul.w	r9, r3, r8
 800b792:	ea6f 0909 	mvn.w	r9, r9
 800b796:	4630      	mov	r0, r6
 800b798:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b79c:	f1bc 0f09 	cmp.w	ip, #9
 800b7a0:	d81c      	bhi.n	800b7dc <_strtoul_l.constprop.0+0x94>
 800b7a2:	4664      	mov	r4, ip
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	dd2a      	ble.n	800b7fe <_strtoul_l.constprop.0+0xb6>
 800b7a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b7ac:	d007      	beq.n	800b7be <_strtoul_l.constprop.0+0x76>
 800b7ae:	4580      	cmp	r8, r0
 800b7b0:	d322      	bcc.n	800b7f8 <_strtoul_l.constprop.0+0xb0>
 800b7b2:	d101      	bne.n	800b7b8 <_strtoul_l.constprop.0+0x70>
 800b7b4:	45a1      	cmp	r9, r4
 800b7b6:	db1f      	blt.n	800b7f8 <_strtoul_l.constprop.0+0xb0>
 800b7b8:	fb00 4003 	mla	r0, r0, r3, r4
 800b7bc:	2601      	movs	r6, #1
 800b7be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7c2:	e7e9      	b.n	800b798 <_strtoul_l.constprop.0+0x50>
 800b7c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7c6:	bf04      	itt	eq
 800b7c8:	782c      	ldrbeq	r4, [r5, #0]
 800b7ca:	1c85      	addeq	r5, r0, #2
 800b7cc:	e7cd      	b.n	800b76a <_strtoul_l.constprop.0+0x22>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1d8      	bne.n	800b784 <_strtoul_l.constprop.0+0x3c>
 800b7d2:	2c30      	cmp	r4, #48	@ 0x30
 800b7d4:	bf0c      	ite	eq
 800b7d6:	2308      	moveq	r3, #8
 800b7d8:	230a      	movne	r3, #10
 800b7da:	e7d3      	b.n	800b784 <_strtoul_l.constprop.0+0x3c>
 800b7dc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b7e0:	f1bc 0f19 	cmp.w	ip, #25
 800b7e4:	d801      	bhi.n	800b7ea <_strtoul_l.constprop.0+0xa2>
 800b7e6:	3c37      	subs	r4, #55	@ 0x37
 800b7e8:	e7dc      	b.n	800b7a4 <_strtoul_l.constprop.0+0x5c>
 800b7ea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b7ee:	f1bc 0f19 	cmp.w	ip, #25
 800b7f2:	d804      	bhi.n	800b7fe <_strtoul_l.constprop.0+0xb6>
 800b7f4:	3c57      	subs	r4, #87	@ 0x57
 800b7f6:	e7d5      	b.n	800b7a4 <_strtoul_l.constprop.0+0x5c>
 800b7f8:	f04f 36ff 	mov.w	r6, #4294967295
 800b7fc:	e7df      	b.n	800b7be <_strtoul_l.constprop.0+0x76>
 800b7fe:	1c73      	adds	r3, r6, #1
 800b800:	d106      	bne.n	800b810 <_strtoul_l.constprop.0+0xc8>
 800b802:	2322      	movs	r3, #34	@ 0x22
 800b804:	f8ce 3000 	str.w	r3, [lr]
 800b808:	4630      	mov	r0, r6
 800b80a:	b932      	cbnz	r2, 800b81a <_strtoul_l.constprop.0+0xd2>
 800b80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b810:	b107      	cbz	r7, 800b814 <_strtoul_l.constprop.0+0xcc>
 800b812:	4240      	negs	r0, r0
 800b814:	2a00      	cmp	r2, #0
 800b816:	d0f9      	beq.n	800b80c <_strtoul_l.constprop.0+0xc4>
 800b818:	b106      	cbz	r6, 800b81c <_strtoul_l.constprop.0+0xd4>
 800b81a:	1e69      	subs	r1, r5, #1
 800b81c:	6011      	str	r1, [r2, #0]
 800b81e:	e7f5      	b.n	800b80c <_strtoul_l.constprop.0+0xc4>
 800b820:	0800c0f9 	.word	0x0800c0f9

0800b824 <_strtoul_r>:
 800b824:	f7ff bf90 	b.w	800b748 <_strtoul_l.constprop.0>

0800b828 <__ascii_wctomb>:
 800b828:	4603      	mov	r3, r0
 800b82a:	4608      	mov	r0, r1
 800b82c:	b141      	cbz	r1, 800b840 <__ascii_wctomb+0x18>
 800b82e:	2aff      	cmp	r2, #255	@ 0xff
 800b830:	d904      	bls.n	800b83c <__ascii_wctomb+0x14>
 800b832:	228a      	movs	r2, #138	@ 0x8a
 800b834:	601a      	str	r2, [r3, #0]
 800b836:	f04f 30ff 	mov.w	r0, #4294967295
 800b83a:	4770      	bx	lr
 800b83c:	700a      	strb	r2, [r1, #0]
 800b83e:	2001      	movs	r0, #1
 800b840:	4770      	bx	lr
	...

0800b844 <fiprintf>:
 800b844:	b40e      	push	{r1, r2, r3}
 800b846:	b503      	push	{r0, r1, lr}
 800b848:	4601      	mov	r1, r0
 800b84a:	ab03      	add	r3, sp, #12
 800b84c:	4805      	ldr	r0, [pc, #20]	@ (800b864 <fiprintf+0x20>)
 800b84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b852:	6800      	ldr	r0, [r0, #0]
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	f000 f83f 	bl	800b8d8 <_vfiprintf_r>
 800b85a:	b002      	add	sp, #8
 800b85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b860:	b003      	add	sp, #12
 800b862:	4770      	bx	lr
 800b864:	20000820 	.word	0x20000820

0800b868 <abort>:
 800b868:	b508      	push	{r3, lr}
 800b86a:	2006      	movs	r0, #6
 800b86c:	f000 fa08 	bl	800bc80 <raise>
 800b870:	2001      	movs	r0, #1
 800b872:	f7f7 f9c5 	bl	8002c00 <_exit>

0800b876 <_malloc_usable_size_r>:
 800b876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87a:	1f18      	subs	r0, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bfbc      	itt	lt
 800b880:	580b      	ldrlt	r3, [r1, r0]
 800b882:	18c0      	addlt	r0, r0, r3
 800b884:	4770      	bx	lr

0800b886 <__sfputc_r>:
 800b886:	6893      	ldr	r3, [r2, #8]
 800b888:	3b01      	subs	r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	b410      	push	{r4}
 800b88e:	6093      	str	r3, [r2, #8]
 800b890:	da08      	bge.n	800b8a4 <__sfputc_r+0x1e>
 800b892:	6994      	ldr	r4, [r2, #24]
 800b894:	42a3      	cmp	r3, r4
 800b896:	db01      	blt.n	800b89c <__sfputc_r+0x16>
 800b898:	290a      	cmp	r1, #10
 800b89a:	d103      	bne.n	800b8a4 <__sfputc_r+0x1e>
 800b89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8a0:	f000 b932 	b.w	800bb08 <__swbuf_r>
 800b8a4:	6813      	ldr	r3, [r2, #0]
 800b8a6:	1c58      	adds	r0, r3, #1
 800b8a8:	6010      	str	r0, [r2, #0]
 800b8aa:	7019      	strb	r1, [r3, #0]
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <__sfputs_r>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	4614      	mov	r4, r2
 800b8bc:	18d5      	adds	r5, r2, r3
 800b8be:	42ac      	cmp	r4, r5
 800b8c0:	d101      	bne.n	800b8c6 <__sfputs_r+0x12>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e007      	b.n	800b8d6 <__sfputs_r+0x22>
 800b8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ca:	463a      	mov	r2, r7
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7ff ffda 	bl	800b886 <__sfputc_r>
 800b8d2:	1c43      	adds	r3, r0, #1
 800b8d4:	d1f3      	bne.n	800b8be <__sfputs_r+0xa>
 800b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8d8 <_vfiprintf_r>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	460d      	mov	r5, r1
 800b8de:	b09d      	sub	sp, #116	@ 0x74
 800b8e0:	4614      	mov	r4, r2
 800b8e2:	4698      	mov	r8, r3
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	b118      	cbz	r0, 800b8f0 <_vfiprintf_r+0x18>
 800b8e8:	6a03      	ldr	r3, [r0, #32]
 800b8ea:	b90b      	cbnz	r3, 800b8f0 <_vfiprintf_r+0x18>
 800b8ec:	f7fc f9ac 	bl	8007c48 <__sinit>
 800b8f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8f2:	07d9      	lsls	r1, r3, #31
 800b8f4:	d405      	bmi.n	800b902 <_vfiprintf_r+0x2a>
 800b8f6:	89ab      	ldrh	r3, [r5, #12]
 800b8f8:	059a      	lsls	r2, r3, #22
 800b8fa:	d402      	bmi.n	800b902 <_vfiprintf_r+0x2a>
 800b8fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8fe:	f7fc fb18 	bl	8007f32 <__retarget_lock_acquire_recursive>
 800b902:	89ab      	ldrh	r3, [r5, #12]
 800b904:	071b      	lsls	r3, r3, #28
 800b906:	d501      	bpl.n	800b90c <_vfiprintf_r+0x34>
 800b908:	692b      	ldr	r3, [r5, #16]
 800b90a:	b99b      	cbnz	r3, 800b934 <_vfiprintf_r+0x5c>
 800b90c:	4629      	mov	r1, r5
 800b90e:	4630      	mov	r0, r6
 800b910:	f000 f938 	bl	800bb84 <__swsetup_r>
 800b914:	b170      	cbz	r0, 800b934 <_vfiprintf_r+0x5c>
 800b916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b918:	07dc      	lsls	r4, r3, #31
 800b91a:	d504      	bpl.n	800b926 <_vfiprintf_r+0x4e>
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	b01d      	add	sp, #116	@ 0x74
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	0598      	lsls	r0, r3, #22
 800b92a:	d4f7      	bmi.n	800b91c <_vfiprintf_r+0x44>
 800b92c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b92e:	f7fc fb01 	bl	8007f34 <__retarget_lock_release_recursive>
 800b932:	e7f3      	b.n	800b91c <_vfiprintf_r+0x44>
 800b934:	2300      	movs	r3, #0
 800b936:	9309      	str	r3, [sp, #36]	@ 0x24
 800b938:	2320      	movs	r3, #32
 800b93a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b93e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b942:	2330      	movs	r3, #48	@ 0x30
 800b944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800baf4 <_vfiprintf_r+0x21c>
 800b948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b94c:	f04f 0901 	mov.w	r9, #1
 800b950:	4623      	mov	r3, r4
 800b952:	469a      	mov	sl, r3
 800b954:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b958:	b10a      	cbz	r2, 800b95e <_vfiprintf_r+0x86>
 800b95a:	2a25      	cmp	r2, #37	@ 0x25
 800b95c:	d1f9      	bne.n	800b952 <_vfiprintf_r+0x7a>
 800b95e:	ebba 0b04 	subs.w	fp, sl, r4
 800b962:	d00b      	beq.n	800b97c <_vfiprintf_r+0xa4>
 800b964:	465b      	mov	r3, fp
 800b966:	4622      	mov	r2, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ffa2 	bl	800b8b4 <__sfputs_r>
 800b970:	3001      	adds	r0, #1
 800b972:	f000 80a7 	beq.w	800bac4 <_vfiprintf_r+0x1ec>
 800b976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b978:	445a      	add	r2, fp
 800b97a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b97c:	f89a 3000 	ldrb.w	r3, [sl]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 809f 	beq.w	800bac4 <_vfiprintf_r+0x1ec>
 800b986:	2300      	movs	r3, #0
 800b988:	f04f 32ff 	mov.w	r2, #4294967295
 800b98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b990:	f10a 0a01 	add.w	sl, sl, #1
 800b994:	9304      	str	r3, [sp, #16]
 800b996:	9307      	str	r3, [sp, #28]
 800b998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b99c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b99e:	4654      	mov	r4, sl
 800b9a0:	2205      	movs	r2, #5
 800b9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a6:	4853      	ldr	r0, [pc, #332]	@ (800baf4 <_vfiprintf_r+0x21c>)
 800b9a8:	f7f4 fc22 	bl	80001f0 <memchr>
 800b9ac:	9a04      	ldr	r2, [sp, #16]
 800b9ae:	b9d8      	cbnz	r0, 800b9e8 <_vfiprintf_r+0x110>
 800b9b0:	06d1      	lsls	r1, r2, #27
 800b9b2:	bf44      	itt	mi
 800b9b4:	2320      	movmi	r3, #32
 800b9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ba:	0713      	lsls	r3, r2, #28
 800b9bc:	bf44      	itt	mi
 800b9be:	232b      	movmi	r3, #43	@ 0x2b
 800b9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9ca:	d015      	beq.n	800b9f8 <_vfiprintf_r+0x120>
 800b9cc:	9a07      	ldr	r2, [sp, #28]
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	f04f 0c0a 	mov.w	ip, #10
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9dc:	3b30      	subs	r3, #48	@ 0x30
 800b9de:	2b09      	cmp	r3, #9
 800b9e0:	d94b      	bls.n	800ba7a <_vfiprintf_r+0x1a2>
 800b9e2:	b1b0      	cbz	r0, 800ba12 <_vfiprintf_r+0x13a>
 800b9e4:	9207      	str	r2, [sp, #28]
 800b9e6:	e014      	b.n	800ba12 <_vfiprintf_r+0x13a>
 800b9e8:	eba0 0308 	sub.w	r3, r0, r8
 800b9ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	46a2      	mov	sl, r4
 800b9f6:	e7d2      	b.n	800b99e <_vfiprintf_r+0xc6>
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	1d19      	adds	r1, r3, #4
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	9103      	str	r1, [sp, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bfbb      	ittet	lt
 800ba04:	425b      	neglt	r3, r3
 800ba06:	f042 0202 	orrlt.w	r2, r2, #2
 800ba0a:	9307      	strge	r3, [sp, #28]
 800ba0c:	9307      	strlt	r3, [sp, #28]
 800ba0e:	bfb8      	it	lt
 800ba10:	9204      	strlt	r2, [sp, #16]
 800ba12:	7823      	ldrb	r3, [r4, #0]
 800ba14:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba16:	d10a      	bne.n	800ba2e <_vfiprintf_r+0x156>
 800ba18:	7863      	ldrb	r3, [r4, #1]
 800ba1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba1c:	d132      	bne.n	800ba84 <_vfiprintf_r+0x1ac>
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	1d1a      	adds	r2, r3, #4
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	9203      	str	r2, [sp, #12]
 800ba26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba2a:	3402      	adds	r4, #2
 800ba2c:	9305      	str	r3, [sp, #20]
 800ba2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb04 <_vfiprintf_r+0x22c>
 800ba32:	7821      	ldrb	r1, [r4, #0]
 800ba34:	2203      	movs	r2, #3
 800ba36:	4650      	mov	r0, sl
 800ba38:	f7f4 fbda 	bl	80001f0 <memchr>
 800ba3c:	b138      	cbz	r0, 800ba4e <_vfiprintf_r+0x176>
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	eba0 000a 	sub.w	r0, r0, sl
 800ba44:	2240      	movs	r2, #64	@ 0x40
 800ba46:	4082      	lsls	r2, r0
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	3401      	adds	r4, #1
 800ba4c:	9304      	str	r3, [sp, #16]
 800ba4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba52:	4829      	ldr	r0, [pc, #164]	@ (800baf8 <_vfiprintf_r+0x220>)
 800ba54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba58:	2206      	movs	r2, #6
 800ba5a:	f7f4 fbc9 	bl	80001f0 <memchr>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d03f      	beq.n	800bae2 <_vfiprintf_r+0x20a>
 800ba62:	4b26      	ldr	r3, [pc, #152]	@ (800bafc <_vfiprintf_r+0x224>)
 800ba64:	bb1b      	cbnz	r3, 800baae <_vfiprintf_r+0x1d6>
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	3307      	adds	r3, #7
 800ba6a:	f023 0307 	bic.w	r3, r3, #7
 800ba6e:	3308      	adds	r3, #8
 800ba70:	9303      	str	r3, [sp, #12]
 800ba72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba74:	443b      	add	r3, r7
 800ba76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba78:	e76a      	b.n	800b950 <_vfiprintf_r+0x78>
 800ba7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba7e:	460c      	mov	r4, r1
 800ba80:	2001      	movs	r0, #1
 800ba82:	e7a8      	b.n	800b9d6 <_vfiprintf_r+0xfe>
 800ba84:	2300      	movs	r3, #0
 800ba86:	3401      	adds	r4, #1
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	f04f 0c0a 	mov.w	ip, #10
 800ba90:	4620      	mov	r0, r4
 800ba92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba96:	3a30      	subs	r2, #48	@ 0x30
 800ba98:	2a09      	cmp	r2, #9
 800ba9a:	d903      	bls.n	800baa4 <_vfiprintf_r+0x1cc>
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0c6      	beq.n	800ba2e <_vfiprintf_r+0x156>
 800baa0:	9105      	str	r1, [sp, #20]
 800baa2:	e7c4      	b.n	800ba2e <_vfiprintf_r+0x156>
 800baa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800baa8:	4604      	mov	r4, r0
 800baaa:	2301      	movs	r3, #1
 800baac:	e7f0      	b.n	800ba90 <_vfiprintf_r+0x1b8>
 800baae:	ab03      	add	r3, sp, #12
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	462a      	mov	r2, r5
 800bab4:	4b12      	ldr	r3, [pc, #72]	@ (800bb00 <_vfiprintf_r+0x228>)
 800bab6:	a904      	add	r1, sp, #16
 800bab8:	4630      	mov	r0, r6
 800baba:	f7fb fa6d 	bl	8006f98 <_printf_float>
 800babe:	4607      	mov	r7, r0
 800bac0:	1c78      	adds	r0, r7, #1
 800bac2:	d1d6      	bne.n	800ba72 <_vfiprintf_r+0x19a>
 800bac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bac6:	07d9      	lsls	r1, r3, #31
 800bac8:	d405      	bmi.n	800bad6 <_vfiprintf_r+0x1fe>
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	059a      	lsls	r2, r3, #22
 800bace:	d402      	bmi.n	800bad6 <_vfiprintf_r+0x1fe>
 800bad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bad2:	f7fc fa2f 	bl	8007f34 <__retarget_lock_release_recursive>
 800bad6:	89ab      	ldrh	r3, [r5, #12]
 800bad8:	065b      	lsls	r3, r3, #25
 800bada:	f53f af1f 	bmi.w	800b91c <_vfiprintf_r+0x44>
 800bade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bae0:	e71e      	b.n	800b920 <_vfiprintf_r+0x48>
 800bae2:	ab03      	add	r3, sp, #12
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	462a      	mov	r2, r5
 800bae8:	4b05      	ldr	r3, [pc, #20]	@ (800bb00 <_vfiprintf_r+0x228>)
 800baea:	a904      	add	r1, sp, #16
 800baec:	4630      	mov	r0, r6
 800baee:	f7fb fceb 	bl	80074c8 <_printf_i>
 800baf2:	e7e4      	b.n	800babe <_vfiprintf_r+0x1e6>
 800baf4:	0800c1f9 	.word	0x0800c1f9
 800baf8:	0800c203 	.word	0x0800c203
 800bafc:	08006f99 	.word	0x08006f99
 800bb00:	0800b8b5 	.word	0x0800b8b5
 800bb04:	0800c1ff 	.word	0x0800c1ff

0800bb08 <__swbuf_r>:
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0a:	460e      	mov	r6, r1
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	4605      	mov	r5, r0
 800bb10:	b118      	cbz	r0, 800bb1a <__swbuf_r+0x12>
 800bb12:	6a03      	ldr	r3, [r0, #32]
 800bb14:	b90b      	cbnz	r3, 800bb1a <__swbuf_r+0x12>
 800bb16:	f7fc f897 	bl	8007c48 <__sinit>
 800bb1a:	69a3      	ldr	r3, [r4, #24]
 800bb1c:	60a3      	str	r3, [r4, #8]
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	071a      	lsls	r2, r3, #28
 800bb22:	d501      	bpl.n	800bb28 <__swbuf_r+0x20>
 800bb24:	6923      	ldr	r3, [r4, #16]
 800bb26:	b943      	cbnz	r3, 800bb3a <__swbuf_r+0x32>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f000 f82a 	bl	800bb84 <__swsetup_r>
 800bb30:	b118      	cbz	r0, 800bb3a <__swbuf_r+0x32>
 800bb32:	f04f 37ff 	mov.w	r7, #4294967295
 800bb36:	4638      	mov	r0, r7
 800bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	6922      	ldr	r2, [r4, #16]
 800bb3e:	1a98      	subs	r0, r3, r2
 800bb40:	6963      	ldr	r3, [r4, #20]
 800bb42:	b2f6      	uxtb	r6, r6
 800bb44:	4283      	cmp	r3, r0
 800bb46:	4637      	mov	r7, r6
 800bb48:	dc05      	bgt.n	800bb56 <__swbuf_r+0x4e>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	f7ff f973 	bl	800ae38 <_fflush_r>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1ed      	bne.n	800bb32 <__swbuf_r+0x2a>
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	60a3      	str	r3, [r4, #8]
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	6022      	str	r2, [r4, #0]
 800bb62:	701e      	strb	r6, [r3, #0]
 800bb64:	6962      	ldr	r2, [r4, #20]
 800bb66:	1c43      	adds	r3, r0, #1
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d004      	beq.n	800bb76 <__swbuf_r+0x6e>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	07db      	lsls	r3, r3, #31
 800bb70:	d5e1      	bpl.n	800bb36 <__swbuf_r+0x2e>
 800bb72:	2e0a      	cmp	r6, #10
 800bb74:	d1df      	bne.n	800bb36 <__swbuf_r+0x2e>
 800bb76:	4621      	mov	r1, r4
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7ff f95d 	bl	800ae38 <_fflush_r>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0d9      	beq.n	800bb36 <__swbuf_r+0x2e>
 800bb82:	e7d6      	b.n	800bb32 <__swbuf_r+0x2a>

0800bb84 <__swsetup_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4b29      	ldr	r3, [pc, #164]	@ (800bc2c <__swsetup_r+0xa8>)
 800bb88:	4605      	mov	r5, r0
 800bb8a:	6818      	ldr	r0, [r3, #0]
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	b118      	cbz	r0, 800bb98 <__swsetup_r+0x14>
 800bb90:	6a03      	ldr	r3, [r0, #32]
 800bb92:	b90b      	cbnz	r3, 800bb98 <__swsetup_r+0x14>
 800bb94:	f7fc f858 	bl	8007c48 <__sinit>
 800bb98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb9c:	0719      	lsls	r1, r3, #28
 800bb9e:	d422      	bmi.n	800bbe6 <__swsetup_r+0x62>
 800bba0:	06da      	lsls	r2, r3, #27
 800bba2:	d407      	bmi.n	800bbb4 <__swsetup_r+0x30>
 800bba4:	2209      	movs	r2, #9
 800bba6:	602a      	str	r2, [r5, #0]
 800bba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbac:	81a3      	strh	r3, [r4, #12]
 800bbae:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb2:	e033      	b.n	800bc1c <__swsetup_r+0x98>
 800bbb4:	0758      	lsls	r0, r3, #29
 800bbb6:	d512      	bpl.n	800bbde <__swsetup_r+0x5a>
 800bbb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbba:	b141      	cbz	r1, 800bbce <__swsetup_r+0x4a>
 800bbbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbc0:	4299      	cmp	r1, r3
 800bbc2:	d002      	beq.n	800bbca <__swsetup_r+0x46>
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f7fd f80b 	bl	8008be0 <_free_r>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	6063      	str	r3, [r4, #4]
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	f043 0308 	orr.w	r3, r3, #8
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	b94b      	cbnz	r3, 800bbfe <__swsetup_r+0x7a>
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbf4:	d003      	beq.n	800bbfe <__swsetup_r+0x7a>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f000 f883 	bl	800bd04 <__smakebuf_r>
 800bbfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc02:	f013 0201 	ands.w	r2, r3, #1
 800bc06:	d00a      	beq.n	800bc1e <__swsetup_r+0x9a>
 800bc08:	2200      	movs	r2, #0
 800bc0a:	60a2      	str	r2, [r4, #8]
 800bc0c:	6962      	ldr	r2, [r4, #20]
 800bc0e:	4252      	negs	r2, r2
 800bc10:	61a2      	str	r2, [r4, #24]
 800bc12:	6922      	ldr	r2, [r4, #16]
 800bc14:	b942      	cbnz	r2, 800bc28 <__swsetup_r+0xa4>
 800bc16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc1a:	d1c5      	bne.n	800bba8 <__swsetup_r+0x24>
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	0799      	lsls	r1, r3, #30
 800bc20:	bf58      	it	pl
 800bc22:	6962      	ldrpl	r2, [r4, #20]
 800bc24:	60a2      	str	r2, [r4, #8]
 800bc26:	e7f4      	b.n	800bc12 <__swsetup_r+0x8e>
 800bc28:	2000      	movs	r0, #0
 800bc2a:	e7f7      	b.n	800bc1c <__swsetup_r+0x98>
 800bc2c:	20000820 	.word	0x20000820

0800bc30 <_raise_r>:
 800bc30:	291f      	cmp	r1, #31
 800bc32:	b538      	push	{r3, r4, r5, lr}
 800bc34:	4605      	mov	r5, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	d904      	bls.n	800bc44 <_raise_r+0x14>
 800bc3a:	2316      	movs	r3, #22
 800bc3c:	6003      	str	r3, [r0, #0]
 800bc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc46:	b112      	cbz	r2, 800bc4e <_raise_r+0x1e>
 800bc48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc4c:	b94b      	cbnz	r3, 800bc62 <_raise_r+0x32>
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f000 f830 	bl	800bcb4 <_getpid_r>
 800bc54:	4622      	mov	r2, r4
 800bc56:	4601      	mov	r1, r0
 800bc58:	4628      	mov	r0, r5
 800bc5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc5e:	f000 b817 	b.w	800bc90 <_kill_r>
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d00a      	beq.n	800bc7c <_raise_r+0x4c>
 800bc66:	1c59      	adds	r1, r3, #1
 800bc68:	d103      	bne.n	800bc72 <_raise_r+0x42>
 800bc6a:	2316      	movs	r3, #22
 800bc6c:	6003      	str	r3, [r0, #0]
 800bc6e:	2001      	movs	r0, #1
 800bc70:	e7e7      	b.n	800bc42 <_raise_r+0x12>
 800bc72:	2100      	movs	r1, #0
 800bc74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc78:	4620      	mov	r0, r4
 800bc7a:	4798      	blx	r3
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	e7e0      	b.n	800bc42 <_raise_r+0x12>

0800bc80 <raise>:
 800bc80:	4b02      	ldr	r3, [pc, #8]	@ (800bc8c <raise+0xc>)
 800bc82:	4601      	mov	r1, r0
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	f7ff bfd3 	b.w	800bc30 <_raise_r>
 800bc8a:	bf00      	nop
 800bc8c:	20000820 	.word	0x20000820

0800bc90 <_kill_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d07      	ldr	r5, [pc, #28]	@ (800bcb0 <_kill_r+0x20>)
 800bc94:	2300      	movs	r3, #0
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	602b      	str	r3, [r5, #0]
 800bc9e:	f7f6 ff9f 	bl	8002be0 <_kill>
 800bca2:	1c43      	adds	r3, r0, #1
 800bca4:	d102      	bne.n	800bcac <_kill_r+0x1c>
 800bca6:	682b      	ldr	r3, [r5, #0]
 800bca8:	b103      	cbz	r3, 800bcac <_kill_r+0x1c>
 800bcaa:	6023      	str	r3, [r4, #0]
 800bcac:	bd38      	pop	{r3, r4, r5, pc}
 800bcae:	bf00      	nop
 800bcb0:	200011ec 	.word	0x200011ec

0800bcb4 <_getpid_r>:
 800bcb4:	f7f6 bf8c 	b.w	8002bd0 <_getpid>

0800bcb8 <__swhatbuf_r>:
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	460c      	mov	r4, r1
 800bcbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	b096      	sub	sp, #88	@ 0x58
 800bcc4:	4615      	mov	r5, r2
 800bcc6:	461e      	mov	r6, r3
 800bcc8:	da0d      	bge.n	800bce6 <__swhatbuf_r+0x2e>
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcd0:	f04f 0100 	mov.w	r1, #0
 800bcd4:	bf14      	ite	ne
 800bcd6:	2340      	movne	r3, #64	@ 0x40
 800bcd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcdc:	2000      	movs	r0, #0
 800bcde:	6031      	str	r1, [r6, #0]
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	b016      	add	sp, #88	@ 0x58
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	466a      	mov	r2, sp
 800bce8:	f000 f848 	bl	800bd7c <_fstat_r>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	dbec      	blt.n	800bcca <__swhatbuf_r+0x12>
 800bcf0:	9901      	ldr	r1, [sp, #4]
 800bcf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcfa:	4259      	negs	r1, r3
 800bcfc:	4159      	adcs	r1, r3
 800bcfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd02:	e7eb      	b.n	800bcdc <__swhatbuf_r+0x24>

0800bd04 <__smakebuf_r>:
 800bd04:	898b      	ldrh	r3, [r1, #12]
 800bd06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd08:	079d      	lsls	r5, r3, #30
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	d507      	bpl.n	800bd20 <__smakebuf_r+0x1c>
 800bd10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	6123      	str	r3, [r4, #16]
 800bd18:	2301      	movs	r3, #1
 800bd1a:	6163      	str	r3, [r4, #20]
 800bd1c:	b003      	add	sp, #12
 800bd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd20:	ab01      	add	r3, sp, #4
 800bd22:	466a      	mov	r2, sp
 800bd24:	f7ff ffc8 	bl	800bcb8 <__swhatbuf_r>
 800bd28:	9f00      	ldr	r7, [sp, #0]
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7fc ffca 	bl	8008cc8 <_malloc_r>
 800bd34:	b948      	cbnz	r0, 800bd4a <__smakebuf_r+0x46>
 800bd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3a:	059a      	lsls	r2, r3, #22
 800bd3c:	d4ee      	bmi.n	800bd1c <__smakebuf_r+0x18>
 800bd3e:	f023 0303 	bic.w	r3, r3, #3
 800bd42:	f043 0302 	orr.w	r3, r3, #2
 800bd46:	81a3      	strh	r3, [r4, #12]
 800bd48:	e7e2      	b.n	800bd10 <__smakebuf_r+0xc>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	6020      	str	r0, [r4, #0]
 800bd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd52:	81a3      	strh	r3, [r4, #12]
 800bd54:	9b01      	ldr	r3, [sp, #4]
 800bd56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd5a:	b15b      	cbz	r3, 800bd74 <__smakebuf_r+0x70>
 800bd5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd60:	4630      	mov	r0, r6
 800bd62:	f000 f81d 	bl	800bda0 <_isatty_r>
 800bd66:	b128      	cbz	r0, 800bd74 <__smakebuf_r+0x70>
 800bd68:	89a3      	ldrh	r3, [r4, #12]
 800bd6a:	f023 0303 	bic.w	r3, r3, #3
 800bd6e:	f043 0301 	orr.w	r3, r3, #1
 800bd72:	81a3      	strh	r3, [r4, #12]
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	431d      	orrs	r5, r3
 800bd78:	81a5      	strh	r5, [r4, #12]
 800bd7a:	e7cf      	b.n	800bd1c <__smakebuf_r+0x18>

0800bd7c <_fstat_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d07      	ldr	r5, [pc, #28]	@ (800bd9c <_fstat_r+0x20>)
 800bd80:	2300      	movs	r3, #0
 800bd82:	4604      	mov	r4, r0
 800bd84:	4608      	mov	r0, r1
 800bd86:	4611      	mov	r1, r2
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	f7f6 ff89 	bl	8002ca0 <_fstat>
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	d102      	bne.n	800bd98 <_fstat_r+0x1c>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	b103      	cbz	r3, 800bd98 <_fstat_r+0x1c>
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200011ec 	.word	0x200011ec

0800bda0 <_isatty_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4d06      	ldr	r5, [pc, #24]	@ (800bdbc <_isatty_r+0x1c>)
 800bda4:	2300      	movs	r3, #0
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	602b      	str	r3, [r5, #0]
 800bdac:	f7f6 ff88 	bl	8002cc0 <_isatty>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_isatty_r+0x1a>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_isatty_r+0x1a>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	200011ec 	.word	0x200011ec

0800bdc0 <_init>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	bf00      	nop
 800bdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc6:	bc08      	pop	{r3}
 800bdc8:	469e      	mov	lr, r3
 800bdca:	4770      	bx	lr

0800bdcc <_fini>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	bf00      	nop
 800bdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd2:	bc08      	pop	{r3}
 800bdd4:	469e      	mov	lr, r3
 800bdd6:	4770      	bx	lr
