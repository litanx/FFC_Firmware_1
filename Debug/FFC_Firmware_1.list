
FFC_Firmware_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800c148  0800c148  0001c148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6ac  0800c6ac  000209e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6ac  0800c6ac  0001c6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6b4  0800c6b4  000209e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6b4  0800c6b4  0001c6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6b8  0800c6b8  0001c6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e8  20000000  0800c6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000209e8  2**0
                  CONTENTS
 10 .bss          000006e8  200009e8  200009e8  000209e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200010d0  200010d0  000209e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dc6  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd0  00000000  00000000  000347de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  000373b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  000384a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bb1  00000000  00000000  00039480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ce8  00000000  00000000  0005f031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deb4f  00000000  00000000  00072d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00151868  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e6c  00000000  00000000  001518b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200009e8 	.word	0x200009e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c12c 	.word	0x0800c12c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200009ec 	.word	0x200009ec
 80001ec:	0800c12c 	.word	0x0800c12c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <ADS1220_writeRegister>:
 */

#include "ADS1220.h"
#include "main.h"
void ADS1220_writeRegister(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t value)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
	uint8_t arr[2] =
	{ ADS1220_WREG | (address << 2), value };
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	b25b      	sxtb	r3, r3
 800102e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2db      	uxtb	r3, r3
	uint8_t arr[2] =
 8001036:	733b      	strb	r3, [r7, #12]
 8001038:	78bb      	ldrb	r3, [r7, #2]
 800103a:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(hspi, arr, 2, 100);
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2202      	movs	r2, #2
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f003 fc00 	bl	800484a <HAL_SPI_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <ADS1220_readRegister>:

uint8_t ADS1220_readRegister(SPI_HandleTypeDef *hspi, uint8_t address)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af02      	add	r7, sp, #8
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] =
 800105e:	2300      	movs	r3, #0
 8001060:	81bb      	strh	r3, [r7, #12]
	{ 0, 0 };

	uint8_t txd[2] =
	{ (ADS1220_RREG | (address << 2)), 0xFF };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	b25b      	sxtb	r3, r3
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2db      	uxtb	r3, r3
	uint8_t txd[2] =
 8001070:	723b      	strb	r3, [r7, #8]
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	727b      	strb	r3, [r7, #9]

	HAL_SPI_TransmitReceive(hspi, txd, data, 2, 1000); // When doing bidirectional, transmit a dummy byte(0xFF), 2 in total, received register is in [1]
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	f107 0108 	add.w	r1, r7, #8
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2302      	movs	r3, #2
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f003 fe2c 	bl	8004ce4 <HAL_SPI_TransmitReceive>
	return data[1];
 800108c:	7b7b      	ldrb	r3, [r7, #13]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <ADS1220_reset>:

void ADS1220_reset(SPI_HandleTypeDef *hspi)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_RESET;
 800109e:	2306      	movs	r3, #6
 80010a0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 80010a2:	f107 010f 	add.w	r1, r7, #15
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f003 fbcd 	bl	800484a <HAL_SPI_Transmit>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <ADS1220_init>:

uint8_t ADS1220_init(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	ADS1220_reset(hspi);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffe7 	bl	8001096 <ADS1220_reset>
	HAL_Delay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f001 ff35 	bl	8002f38 <HAL_Delay>

	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS, r->cfg_reg0);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	2100      	movs	r1, #0
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff9e 	bl	8001018 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	461a      	mov	r2, r3
 80010e2:	2101      	movs	r1, #1
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff97 	bl	8001018 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS, r->cfg_reg2);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	461a      	mov	r2, r3
 80010f0:	2102      	movs	r1, #2
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff90 	bl	8001018 <ADS1220_writeRegister>
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS, r->cfg_reg3);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	78db      	ldrb	r3, [r3, #3]
 80010fc:	461a      	mov	r2, r3
 80010fe:	2103      	movs	r1, #3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff89 	bl	8001018 <ADS1220_writeRegister>

	uint8_t CR0 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG0_ADDRESS);
 8001106:	2100      	movs	r1, #0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ffa2 	bl	8001052 <ADS1220_readRegister>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
	uint8_t CR1 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS);
 8001112:	2101      	movs	r1, #1
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff9c 	bl	8001052 <ADS1220_readRegister>
 800111a:	4603      	mov	r3, r0
 800111c:	73bb      	strb	r3, [r7, #14]
	uint8_t CR2 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG2_ADDRESS);
 800111e:	2102      	movs	r1, #2
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff96 	bl	8001052 <ADS1220_readRegister>
 8001126:	4603      	mov	r3, r0
 8001128:	737b      	strb	r3, [r7, #13]
	uint8_t CR3 = ADS1220_readRegister(hspi, ADS1220_CONFIG_REG3_ADDRESS);
 800112a:	2103      	movs	r1, #3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff90 	bl	8001052 <ADS1220_readRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	733b      	strb	r3, [r7, #12]

	return (CR0 == r->cfg_reg0 && CR1 == r->cfg_reg1 && CR2 == r->cfg_reg2 && CR3 == r->cfg_reg3);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	429a      	cmp	r2, r3
 800113e:	d110      	bne.n	8001162 <ADS1220_init+0xaa>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	7bba      	ldrb	r2, [r7, #14]
 8001146:	429a      	cmp	r2, r3
 8001148:	d10b      	bne.n	8001162 <ADS1220_init+0xaa>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	7b7a      	ldrb	r2, [r7, #13]
 8001150:	429a      	cmp	r2, r3
 8001152:	d106      	bne.n	8001162 <ADS1220_init+0xaa>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	78db      	ldrb	r3, [r3, #3]
 8001158:	7b3a      	ldrb	r2, [r7, #12]
 800115a:	429a      	cmp	r2, r3
 800115c:	d101      	bne.n	8001162 <ADS1220_init+0xaa>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <ADS1220_init+0xac>
 8001162:	2300      	movs	r3, #0
 8001164:	b2db      	uxtb	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <ADS1220_start_conversion>:

void ADS1220_start_conversion(SPI_HandleTypeDef *hspi)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	const uint8_t cmd = ADS1220_START;
 8001176:	2308      	movs	r3, #8
 8001178:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, 100);
 800117a:	f107 010f 	add.w	r1, r7, #15
 800117e:	2364      	movs	r3, #100	; 0x64
 8001180:	2201      	movs	r2, #1
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f003 fb61 	bl	800484a <HAL_SPI_Transmit>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <ADS1220_set_conv_mode_single_shot>:
	r->cfg_reg1 |= _BV(2);
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
}

void ADS1220_set_conv_mode_single_shot(SPI_HandleTypeDef *hspi, ADS1220_regs *r)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	r->cfg_reg1 &= ~_BV(2);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	f023 0304 	bic.w	r3, r3, #4
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	705a      	strb	r2, [r3, #1]
	ADS1220_writeRegister(hspi, ADS1220_CONFIG_REG1_ADDRESS, r->cfg_reg1);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2101      	movs	r1, #1
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff31 	bl	8001018 <ADS1220_writeRegister>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ADS1220_read_nblocking>:
//
//	return result32;
//}


uint8_t ADS1220_read_nblocking(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, int32_t* pData){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80fb      	strh	r3, [r7, #6]
	uint8_t SPIbuf[3] = {0};
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <ADS1220_read_nblocking+0x74>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	82bb      	strh	r3, [r7, #20]
 80011d6:	2300      	movs	r3, #0
 80011d8:	75bb      	strb	r3, [r7, #22]
	int32_t result32 = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
	long int bit24;

	if(HAL_GPIO_ReadPin(DRDY_PORT, DRDY_PIN) == GPIO_PIN_SET)	return 0;
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	4619      	mov	r1, r3
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f002 fd5c 	bl	8003ca0 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <ADS1220_read_nblocking+0x32>
 80011ee:	2300      	movs	r3, #0
 80011f0:	e01c      	b.n	800122c <ADS1220_read_nblocking+0x6c>

	HAL_SPI_Receive(hspi, SPIbuf, 3, 100);
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	2203      	movs	r2, #3
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f003 fc61 	bl	8004ac2 <HAL_SPI_Receive>

	bit24 = SPIbuf[0];
 8001200:	7d3b      	ldrb	r3, [r7, #20]
 8001202:	61bb      	str	r3, [r7, #24]
	bit24 = (bit24 << 8) | SPIbuf[1];
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	7d7a      	ldrb	r2, [r7, #21]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
	bit24 = (bit24 << 8) | SPIbuf[2]; //Converting 3 bytes to a 24 bit int
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	7dba      	ldrb	r2, [r7, #22]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]

	bit24 = (bit24 << 8);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	61bb      	str	r3, [r7, #24]
	result32 = (bit24 >> 8); //Converting 24 bit two's complement to 32 bit two's complement
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	121b      	asrs	r3, r3, #8
 8001222:	61fb      	str	r3, [r7, #28]

	*pData = result32;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	601a      	str	r2, [r3, #0]
	return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	0800c148 	.word	0x0800c148

08001238 <ADS1220_read_singleshot>:


uint8_t ADS1220_read_singleshot(SPI_HandleTypeDef *hspi, GPIO_TypeDef *DRDY_PORT, uint16_t DRDY_PIN, int32_t* pData, uint32_t timeout){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4613      	mov	r3, r2
 8001246:	80fb      	strh	r3, [r7, #6]

	static uint8_t status = 1;
	static uint32_t timeStamp = 0;

	switch(status){
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <ADS1220_read_singleshot+0x8c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <ADS1220_read_singleshot+0x1e>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d020      	beq.n	8001296 <ADS1220_read_singleshot+0x5e>
 8001254:	e02b      	b.n	80012ae <ADS1220_read_singleshot+0x76>

	case 0:
		if( !ADS1220_read_nblocking(hspi, DRDY_PORT, DRDY_PIN, pData) ){
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff ffaf 	bl	80011c0 <ADS1220_read_nblocking>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10c      	bne.n	8001282 <ADS1220_read_singleshot+0x4a>
			if (HAL_GetTick() > (timeStamp + timeout)) 	status = 1; // Timeout, reTry
 8001268:	f001 fe5a 	bl	8002f20 <HAL_GetTick>
 800126c:	4601      	mov	r1, r0
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <ADS1220_read_singleshot+0x90>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4413      	add	r3, r2
 8001276:	4299      	cmp	r1, r3
 8001278:	d91d      	bls.n	80012b6 <ADS1220_read_singleshot+0x7e>
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <ADS1220_read_singleshot+0x8c>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e009      	b.n	8001296 <ADS1220_read_singleshot+0x5e>
			else 			break;									// Still waiting
		}else{														// Data ready
			timeStamp = HAL_GetTick();
 8001282:	f001 fe4d 	bl	8002f20 <HAL_GetTick>
 8001286:	4603      	mov	r3, r0
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <ADS1220_read_singleshot+0x90>)
 800128a:	6013      	str	r3, [r2, #0]
			ADS1220_start_conversion(hspi);
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff ff6e 	bl	800116e <ADS1220_start_conversion>
			return 1;
 8001292:	2301      	movs	r3, #1
 8001294:	e011      	b.n	80012ba <ADS1220_read_singleshot+0x82>
		}

	case 1:
		timeStamp = HAL_GetTick();
 8001296:	f001 fe43 	bl	8002f20 <HAL_GetTick>
 800129a:	4603      	mov	r3, r0
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <ADS1220_read_singleshot+0x90>)
 800129e:	6013      	str	r3, [r2, #0]
		ADS1220_start_conversion(hspi);
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f7ff ff64 	bl	800116e <ADS1220_start_conversion>
		status = 0;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <ADS1220_read_singleshot+0x8c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
		break;
 80012ac:	e004      	b.n	80012b8 <ADS1220_read_singleshot+0x80>

	default:
		status = 1;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <ADS1220_read_singleshot+0x8c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
		break;
 80012b4:	e000      	b.n	80012b8 <ADS1220_read_singleshot+0x80>
			else 			break;									// Still waiting
 80012b6:	bf00      	nop
	}

	return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000a04 	.word	0x20000a04

080012cc <Compute_PI>:
 *
 * */


//https://uk.mathworks.com/help/sps/ref/discretepicontroller.html
float Compute_PI(piCon_t *con, float setpoint, float input){
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80012d8:	edc7 0a01 	vstr	s1, [r7, #4]

	float dt = (float)con->dt / 1000000;	// Convert dt to (s)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80013a8 <Compute_PI+0xdc>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Calculate the error term
    float error = setpoint - input;
 80012f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	edc7 7a08 	vstr	s15, [r7, #32]

    // Calculate the integral term
    float temp_iTerm = con->iTerm + (con->ki * dt * error);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	ed93 7a05 	vldr	s14, [r3, #20]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001310:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001314:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001318:	edd7 7a08 	vldr	s15, [r7, #32]
 800131c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001324:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate the output
    float u = (con->kp * error) + con->iTerm;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	ed93 7a01 	vldr	s14, [r3, #4]
 800132e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	edd3 7a05 	vldr	s15, [r3, #20]
 800133c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001340:	edc7 7a06 	vstr	s15, [r7, #24]

    // Saturate the output
    float u_sat = CONSTRAIN( u, con->outMin, con->outMax );
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	edd3 7a04 	vldr	s15, [r3, #16]
 800134a:	ed97 7a06 	vldr	s14, [r7, #24]
 800134e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	d502      	bpl.n	800135e <Compute_PI+0x92>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	e00d      	b.n	800137a <Compute_PI+0xae>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	edd3 7a03 	vldr	s15, [r3, #12]
 8001364:	ed97 7a06 	vldr	s14, [r7, #24]
 8001368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	dd02      	ble.n	8001378 <Compute_PI+0xac>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	e000      	b.n	800137a <Compute_PI+0xae>
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	617b      	str	r3, [r7, #20]

    if(u_sat == u) con->iTerm = temp_iTerm; 	// If output clipping, do not update controller iTerm
 800137c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001380:	edd7 7a06 	vldr	s15, [r7, #24]
 8001384:	eeb4 7a67 	vcmp.f32	s14, s15
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	d102      	bne.n	8001394 <Compute_PI+0xc8>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	615a      	str	r2, [r3, #20]

    return u_sat;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	ee07 3a90 	vmov	s15, r3

}
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	372c      	adds	r7, #44	; 0x2c
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	49742400 	.word	0x49742400
 80013ac:	00000000 	.word	0x00000000

080013b0 <refModel_Tick>:
/*
 * Mass-spring-damper model with stick/slip friction
 * Compute system status for a given input force and position
 */

void refModel_Tick(rMod_t *mod, double iForce, double iPosition){
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b094      	sub	sp, #80	; 0x50
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6178      	str	r0, [r7, #20]
 80013b8:	ed87 0b02 	vstr	d0, [r7, #8]
 80013bc:	ed87 1b00 	vstr	d1, [r7]

	double frictionForce = 0;
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint8_t stuck = 0;			/* = 1 when velocity is under dynamic friction velocity threshold (dfv) */
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	double dt = (double)mod->dt / 1000000;	// Convert dt to (s)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8a4 	bl	8000524 <__aeabi_ui2d>
 80013dc:	a3fa      	add	r3, pc, #1000	; (adr r3, 80017c8 <refModel_Tick+0x418>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff fa43 	bl	800086c <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Compute ref Velocity
	mod->vel = mod->vel_1 + (dt * mod->acc_1);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80013fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013fe:	f7ff f90b 	bl	8000618 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	f7fe ff4f 	bl	80002ac <__adddf3>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	6979      	ldr	r1, [r7, #20]
 8001414:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	// Limit Velocity Hard Stops
	mod->vSaturated = 0;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	if(mod->vel > mod->velMaxLim){
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f89c 	bl	8000568 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4620      	mov	r0, r4
 8001436:	4629      	mov	r1, r5
 8001438:	f7ff fb7e 	bl	8000b38 <__aeabi_dcmpgt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00d      	beq.n	800145e <refModel_Tick+0xae>

		mod->vel = mod->velMaxLim;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f88e 	bl	8000568 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	6979      	ldr	r1, [r7, #20]
 8001452:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->vSaturated = 1;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}

	if(mod->vel < mod->velMinLim){
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f87d 	bl	8000568 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7ff fb41 	bl	8000afc <__aeabi_dcmplt>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00d      	beq.n	800149c <refModel_Tick+0xec>

		mod->vel = mod->velMinLim;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f86f 	bl	8000568 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	6979      	ldr	r1, [r7, #20]
 8001490:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->vSaturated = 1;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}

	// Compute ref Position
	mod->pos = mod->pos_1 + (dt * mod->vel);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014ac:	f7ff f8b4 	bl	8000618 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe fef8 	bl	80002ac <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	6979      	ldr	r1, [r7, #20]
 80014c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	// Limit position Hard Stops
	mod->pSaturated = 0;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	
	if(mod->pos >= mod->posMaxLim){
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f845 	bl	8000568 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7ff fb1d 	bl	8000b24 <__aeabi_dcmpge>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d014      	beq.n	800151a <refModel_Tick+0x16a>

		mod->pos = mod->posMaxLim;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f837 	bl	8000568 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		mod->vel = 0;
 8001504:	6979      	ldr	r1, [r7, #20]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->pSaturated = 1;		
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	if(mod->pos <= mod->posMinLim){
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f81f 	bl	8000568 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f7ff faed 	bl	8000b10 <__aeabi_dcmple>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d014      	beq.n	8001566 <refModel_Tick+0x1b6>

		mod->pos = mod->posMinLim;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f811 	bl	8000568 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		mod->vel = 0;
 8001550:	6979      	ldr	r1, [r7, #20]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mod->pSaturated = 1;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	/* Calculate forces relative to the position of the system */
	double springForce = interpolate_force(mod, mod->pos);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800156c:	eeb0 0a47 	vmov.f32	s0, s14
 8001570:	eef0 0a67 	vmov.f32	s1, s15
 8001574:	6978      	ldr	r0, [r7, #20]
 8001576:	f000 f92b 	bl	80017d0 <interpolate_force>
 800157a:	ee10 3a10 	vmov	r3, s0
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fff2 	bl	8000568 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
//	double springForce = (mod->k * mod->pos);

	/* Calculate damping force */
	double dampingForce = (mod->c * mod->vel);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffe9 	bl	8000568 <__aeabi_f2d>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800159c:	f7ff f83c 	bl	8000618 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	/* Friction Model --------------------------------------------------------------------------------*/
	// F = u * N -> where N is the Normal force between the moving object and the sliding surface.

	/* Velocity - Hit crossing (threshold) */
	if( mod->vel < mod->dfv && mod->vel > (-mod->dfv)) stuck = 1;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffd8 	bl	8000568 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7ff fa9c 	bl	8000afc <__aeabi_dcmplt>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d018      	beq.n	80015fc <refModel_Tick+0x24c>
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015d6:	eef1 7a67 	vneg.f32	s15, s15
 80015da:	ee17 3a90 	vmov	r3, s15
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffc2 	bl	8000568 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff faa4 	bl	8000b38 <__aeabi_dcmpgt>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <refModel_Tick+0x24c>
 80015f6:	2301      	movs	r3, #1
 80015f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if(stuck){
 80015fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05f      	beq.n	80016c4 <refModel_Tick+0x314>

		int8_t sign = ((iForce - springForce) > 0) ? 1 : -1; 	// Get the sign of the applied force (input-spring)
 8001604:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001608:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800160c:	f7fe fe4c 	bl	80002a8 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	f7ff fa8a 	bl	8000b38 <__aeabi_dcmpgt>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <refModel_Tick+0x27e>
 800162a:	2301      	movs	r3, #1
 800162c:	e001      	b.n	8001632 <refModel_Tick+0x282>
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		double modForce = fabs(iForce - springForce);			// Get the module of the applied force
 8001636:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800163a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800163e:	f7fe fe33 	bl	80002a8 <__aeabi_dsub>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4611      	mov	r1, r2
 8001648:	61b9      	str	r1, [r7, #24]
 800164a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800164e:	61fb      	str	r3, [r7, #28]

		/* Choose the smallest force: [applied force] Vs [Static Friction] */
		frictionForce = (modForce < (mod->us * mod->N)) ? (sign) * modForce : (sign) * (mod->us * mod->N);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	ed93 7a06 	vldr	s14, [r3, #24]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	edd3 7a08 	vldr	s15, [r3, #32]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	ee17 0a90 	vmov	r0, s15
 8001664:	f7fe ff80 	bl	8000568 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001670:	f7ff fa44 	bl	8000afc <__aeabi_dcmplt>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <refModel_Tick+0x2e2>
 800167a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff60 	bl	8000544 <__aeabi_i2d>
 8001684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001688:	f7fe ffc6 	bl	8000618 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	e015      	b.n	80016be <refModel_Tick+0x30e>
 8001692:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7fe ff57 	bl	8000568 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80016c2:	e029      	b.n	8001718 <refModel_Tick+0x368>

	}else{

		int8_t sign = (mod->vel > 0) ? 1 : -1;					// Get the sign of the velocity
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	f7ff fa31 	bl	8000b38 <__aeabi_dcmpgt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <refModel_Tick+0x330>
 80016dc:	2301      	movs	r3, #1
 80016de:	e001      	b.n	80016e4 <refModel_Tick+0x334>
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		frictionForce = (sign) * (mod->ud * mod->N);			// Calculate dynamic friction
 80016e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	edd3 6a07 	vldr	s13, [r3, #28]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	ee17 0a90 	vmov	r0, s15
 800170c:	f7fe ff2c 	bl	8000568 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	/*------------------------------------------------------------------------------------------------*/

	 if(mod->pos > mod->posMaxLim){ /* Just for debugging - Remove if not used */
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff20 	bl	8000568 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7ff fa02 	bl	8000b38 <__aeabi_dcmpgt>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d000      	beq.n	800173c <refModel_Tick+0x38c>
		 asm("NOP");
 800173a:	bf00      	nop
	/* Do I want to have mass dependent to the position? for instance I could emulate backslash */
	/* Do I want to have damping and friction dependent to the position? emulate different surfaces? */
	/* In a two axis controller the forces relatives to position will depend on a 2 dimensional array */

	// Compute ref Acceleration ->  ∑F = m * a
	mod->acc = ((1 / (mod->m)) * (iForce - dampingForce - frictionForce - springForce ));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001746:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800174a:	ee16 0a90 	vmov	r0, s13
 800174e:	f7fe ff0b 	bl	8000568 <__aeabi_f2d>
 8001752:	4604      	mov	r4, r0
 8001754:	460d      	mov	r5, r1
 8001756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800175a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800175e:	f7fe fda3 	bl	80002a8 <__aeabi_dsub>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800176e:	f7fe fd9b 	bl	80002a8 <__aeabi_dsub>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800177e:	f7fe fd93 	bl	80002a8 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe ff45 	bl	8000618 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	6979      	ldr	r1, [r7, #20]
 8001794:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Store previous values
	mod->pos_1 = mod->pos;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800179e:	6979      	ldr	r1, [r7, #20]
 80017a0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	mod->vel_1 = mod->vel;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	mod->acc_1 = mod->acc;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017b6:	6979      	ldr	r1, [r7, #20]
 80017b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

}
 80017bc:	bf00      	nop
 80017be:	3750      	adds	r7, #80	; 0x50
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bdb0      	pop	{r4, r5, r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	00000000 	.word	0x00000000
 80017cc:	412e8480 	.word	0x412e8480

080017d0 <interpolate_force>:
 * Linear Interpolation (y) = y1 + [(x-x1) × (y2-y1)]/ (x2-x1)
 * Where (x1,y1) & (x2,y2) are coordinates
 * x is the point to perform interpolation
 * y is the interpolated value.
 * */
static float interpolate_force(rMod_t *mod, double x){
 80017d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	ed87 0b00 	vstr	d0, [r7]

	if(!mod->cMap_size) 	return 0; // Empty vector
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <interpolate_force+0x1c>
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e0c5      	b.n	8001978 <interpolate_force+0x1a8>
	if(mod->cMap == NULL) 	return 0; // No vector defined
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <interpolate_force+0x2a>
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e0be      	b.n	8001978 <interpolate_force+0x1a8>

	cMap_1d_t* cMap = (cMap_1d_t*)mod->cMap;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
	uint8_t last = mod->cMap_size - 1;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	3b01      	subs	r3, #1
 8001806:	75fb      	strb	r3, [r7, #23]

	/* if pos < min known value > saturate */
	if(x < cMap[0].x)				return cMap[0].f;
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe feab 	bl	8000568 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800181a:	f7ff f96f 	bl	8000afc <__aeabi_dcmplt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <interpolate_force+0x5a>
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	e0a6      	b.n	8001978 <interpolate_force+0x1a8>

	/* if pos > max known value > saturate */
	else if(x > cMap[last].x)		return cMap[last].f;
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4413      	add	r3, r2
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe97 	bl	8000568 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001842:	f7ff f979 	bl	8000b38 <__aeabi_dcmpgt>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <interpolate_force+0x88>
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4413      	add	r3, r2
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	e08f      	b.n	8001978 <interpolate_force+0x1a8>

	/* otherwise find the adjacent upper and lower points in the array to interpolate */
	for(int i=0; i<last; i++){
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	e085      	b.n	800196a <interpolate_force+0x19a>

		if( cMap[i].x <= x && cMap[i+1].x >= x)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4413      	add	r3, r2
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe7d 	bl	8000568 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001876:	f7ff f955 	bl	8000b24 <__aeabi_dcmpge>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d071      	beq.n	8001964 <interpolate_force+0x194>
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3301      	adds	r3, #1
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe6b 	bl	8000568 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800189a:	f7ff f939 	bl	8000b10 <__aeabi_dcmple>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05f      	beq.n	8001964 <interpolate_force+0x194>
			return  cMap[i].f + ((x - cMap[i].x) * (cMap[i+1].f - cMap[i].f)) / (cMap[i+1].x - cMap[i].x);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4413      	add	r3, r2
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe5a 	bl	8000568 <__aeabi_f2d>
 80018b4:	4604      	mov	r4, r0
 80018b6:	460d      	mov	r5, r1
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4413      	add	r3, r2
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe50 	bl	8000568 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d0:	f7fe fcea 	bl	80002a8 <__aeabi_dsub>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4690      	mov	r8, r2
 80018da:	4699      	mov	r9, r3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4413      	add	r3, r2
 80018e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4413      	add	r3, r2
 80018f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fa:	ee17 0a90 	vmov	r0, s15
 80018fe:	f7fe fe33 	bl	8000568 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4640      	mov	r0, r8
 8001908:	4649      	mov	r1, r9
 800190a:	f7fe fe85 	bl	8000618 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4690      	mov	r8, r2
 8001914:	4699      	mov	r9, r3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4413      	add	r3, r2
 8001920:	ed93 7a00 	vldr	s14, [r3]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4413      	add	r3, r2
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	ee17 0a90 	vmov	r0, s15
 8001938:	f7fe fe16 	bl	8000568 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4640      	mov	r0, r8
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe ff92 	bl	800086c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fcac 	bl	80002ac <__adddf3>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f954 	bl	8000c08 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	e009      	b.n	8001978 <interpolate_force+0x1a8>
	for(int i=0; i<last; i++){
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	429a      	cmp	r2, r3
 8001970:	f6ff af75 	blt.w	800185e <interpolate_force+0x8e>

	}

	return 0; /* The program should never reach this line */
 8001974:	f04f 0300 	mov.w	r3, #0
}
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb0 0a67 	vmov.f32	s0, s15
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001988 <StepCon_GetPosition>:

static uint16_t stepLimit = 0; // anti-stall, prevents the motor running if the refModel is not ticking.


/* Returns actuator position in mm */
float StepCon_GetPosition(){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	return MotorPos;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <StepCon_GetPosition+0x20>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff f937 	bl	8000c08 <__aeabi_d2f>
 800199a:	4603      	mov	r3, r0
 800199c:	ee07 3a90 	vmov	s15, r3
}
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000a18 	.word	0x20000a18

080019ac <StepCon_Speed>:

// set linear actuator to a speed of speed mm/s
void StepCon_Speed(float speed){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	ed87 0a01 	vstr	s0, [r7, #4]

	if (speed < sDeadBand && speed > -sDeadBand) mStop = 1; // Dead band
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <StepCon_Speed+0xdc>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d50f      	bpl.n	80019ea <StepCon_Speed+0x3e>
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <StepCon_Speed+0xdc>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	eef1 7a67 	vneg.f32	s15, s15
 80019d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	dd03      	ble.n	80019ea <StepCon_Speed+0x3e>
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <StepCon_Speed+0xe0>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e047      	b.n	8001a7a <StepCon_Speed+0xce>

	else if(speed < 0){
 80019ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	d520      	bpl.n	8001a3a <StepCon_Speed+0x8e>
		mStop = 0;
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <StepCon_Speed+0xe0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
		dir = 0;
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <StepCon_Speed+0xe4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
		StepCon_CCW; 			// CCW Direction
 8001a04:	2200      	movs	r2, #0
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	4822      	ldr	r0, [pc, #136]	; (8001a94 <StepCon_Speed+0xe8>)
 8001a0a:	f002 f961 	bl	8003cd0 <HAL_GPIO_WritePin>
		pulseTime = -1000000/((speed/MM_PER_REV)* MICROSTEP);
 8001a0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a12:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001a98 <StepCon_Speed+0xec>
 8001a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001a9c <StepCon_Speed+0xf0>
 8001a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a22:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001aa0 <StepCon_Speed+0xf4>
 8001a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <StepCon_Speed+0xf8>)
 8001a36:	801a      	strh	r2, [r3, #0]
 8001a38:	e01f      	b.n	8001a7a <StepCon_Speed+0xce>
	}
	else{
		mStop = 0;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <StepCon_Speed+0xe0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		dir = 1;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <StepCon_Speed+0xe4>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
		StepCon_CW; 			// CW Direction
 8001a46:	2201      	movs	r2, #1
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	4812      	ldr	r0, [pc, #72]	; (8001a94 <StepCon_Speed+0xe8>)
 8001a4c:	f002 f940 	bl	8003cd0 <HAL_GPIO_WritePin>
		pulseTime = 1000000/((speed/MM_PER_REV)* MICROSTEP);
 8001a50:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a54:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a98 <StepCon_Speed+0xec>
 8001a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a9c <StepCon_Speed+0xf0>
 8001a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a64:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001aa8 <StepCon_Speed+0xfc>
 8001a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <StepCon_Speed+0xf8>)
 8001a78:	801a      	strh	r2, [r3, #0]
	}

	stepLimit = 0;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <StepCon_Speed+0x100>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	801a      	strh	r2, [r3, #0]

}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000a10 	.word	0x20000a10
 8001a8c:	20000001 	.word	0x20000001
 8001a90:	20000a08 	.word	0x20000a08
 8001a94:	40021800 	.word	0x40021800
 8001a98:	42200000 	.word	0x42200000
 8001a9c:	461c4000 	.word	0x461c4000
 8001aa0:	c9742400 	.word	0xc9742400
 8001aa4:	20000002 	.word	0x20000002
 8001aa8:	49742400 	.word	0x49742400
 8001aac:	20000a20 	.word	0x20000a20

08001ab0 <StepCon_pulseTick>:


/*
 * Timer callback routine
 **/
void StepCon_pulseTick(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0

	if(mStop || pulseTime < MIN_PULSE_TIME){
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <StepCon_pulseTick+0x108>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <StepCon_pulseTick+0x14>
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <StepCon_pulseTick+0x10c>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d805      	bhi.n	8001ad0 <StepCon_pulseTick+0x20>
		__HAL_TIM_SET_COUNTER(&htim2, MIN_PULSE_TIME);
 8001ac4:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <StepCon_pulseTick+0x110>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2205      	movs	r2, #5
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
		asm("NOP");
 8001acc:	bf00      	nop
		return;
 8001ace:	e06b      	b.n	8001ba8 <StepCon_pulseTick+0xf8>
	}

	__HAL_TIM_SET_COUNTER(&htim2, pulseTime);
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <StepCon_pulseTick+0x10c>)
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <StepCon_pulseTick+0x110>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24

	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <StepCon_pulseTick+0x114>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <StepCon_pulseTick+0x48>
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <StepCon_pulseTick+0x118>)
 8001ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <StepCon_pulseTick+0x11c>)
 8001aee:	f7ff f823 	bl	8000b38 <__aeabi_dcmpgt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d152      	bne.n	8001b9e <StepCon_pulseTick+0xee>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <StepCon_pulseTick+0x114>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10a      	bne.n	8001b16 <StepCon_pulseTick+0x66>
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <StepCon_pulseTick+0x118>)
 8001b02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <StepCon_pulseTick+0x120>)
 8001b0c:	f7fe fff6 	bl	8000afc <__aeabi_dcmplt>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d145      	bne.n	8001ba2 <StepCon_pulseTick+0xf2>

	if(stepLimit > 240) return;
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <StepCon_pulseTick+0x124>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	2bf0      	cmp	r3, #240	; 0xf0
 8001b1c:	d843      	bhi.n	8001ba6 <StepCon_pulseTick+0xf6>
	stepLimit++;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <StepCon_pulseTick+0x124>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <StepCon_pulseTick+0x124>)
 8001b28:	801a      	strh	r2, [r3, #0]

	/*Send pulse */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2120      	movs	r1, #32
 8001b2e:	482a      	ldr	r0, [pc, #168]	; (8001bd8 <StepCon_pulseTick+0x128>)
 8001b30:	f002 f8ce 	bl	8003cd0 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim2) > (pulseTime));
 8001b34:	bf00      	nop
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <StepCon_pulseTick+0x110>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <StepCon_pulseTick+0x10c>)
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d8f8      	bhi.n	8001b36 <StepCon_pulseTick+0x86>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2120      	movs	r1, #32
 8001b48:	4823      	ldr	r0, [pc, #140]	; (8001bd8 <StepCon_pulseTick+0x128>)
 8001b4a:	f002 f8c1 	bl	8003cd0 <HAL_GPIO_WritePin>

	if(dir) stepCount++;		/* Track how many pulses have been sent to the stepper */
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <StepCon_pulseTick+0x114>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <StepCon_pulseTick+0xb2>
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <StepCon_pulseTick+0x12c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <StepCon_pulseTick+0x12c>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e004      	b.n	8001b6c <StepCon_pulseTick+0xbc>
	else 	stepCount--;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <StepCon_pulseTick+0x12c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <StepCon_pulseTick+0x12c>)
 8001b6a:	6013      	str	r3, [r2, #0]

	MotorPos = ((double)stepCount / MICROSTEP) * MM_PER_REV;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <StepCon_pulseTick+0x12c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fce7 	bl	8000544 <__aeabi_i2d>
 8001b76:	a30e      	add	r3, pc, #56	; (adr r3, 8001bb0 <StepCon_pulseTick+0x100>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fe76 	bl	800086c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <StepCon_pulseTick+0x130>)
 8001b8e:	f7fe fd43 	bl	8000618 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <StepCon_pulseTick+0x118>)
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]
 8001b9c:	e004      	b.n	8001ba8 <StepCon_pulseTick+0xf8>
	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001b9e:	bf00      	nop
 8001ba0:	e002      	b.n	8001ba8 <StepCon_pulseTick+0xf8>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001ba2:	bf00      	nop
 8001ba4:	e000      	b.n	8001ba8 <StepCon_pulseTick+0xf8>
	if(stepLimit > 240) return;
 8001ba6:	bf00      	nop

}
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40c38800 	.word	0x40c38800
 8001bb8:	20000001 	.word	0x20000001
 8001bbc:	20000002 	.word	0x20000002
 8001bc0:	20000ea4 	.word	0x20000ea4
 8001bc4:	20000a08 	.word	0x20000a08
 8001bc8:	20000a18 	.word	0x20000a18
 8001bcc:	405b8000 	.word	0x405b8000
 8001bd0:	c05b8000 	.word	0xc05b8000
 8001bd4:	20000a20 	.word	0x20000a20
 8001bd8:	40021800 	.word	0x40021800
 8001bdc:	20000a0c 	.word	0x20000a0c
 8001be0:	40440000 	.word	0x40440000

08001be4 <UART1_Init>:

	/*----------------------------*/
}


void UART1_Init(){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0

  HAL_UART_Receive_DMA(&huart1, (uint8_t *)UART1_Rx_Buf, UART1_BUF_LEN);  // Initializes DMA for UART1
 8001be8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bec:	4902      	ldr	r1, [pc, #8]	; (8001bf8 <UART1_Init+0x14>)
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <UART1_Init+0x18>)
 8001bf0:	f004 f8ee 	bl	8005dd0 <HAL_UART_Receive_DMA>

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000a24 	.word	0x20000a24
 8001bfc:	20000f34 	.word	0x20000f34

08001c00 <UART1_Handler>:

/*@Brief Gets Commands from UART1 RingBuffer
 *
 */
void UART1_Handler(){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0

	static uint8_t UART1_CMD_Buff[300];	/* Command Handler Buffer */
	static uint16_t UART1_cmdPtr = 0;

	while(UART1_DataAvailable()){
 8001c06:	e02a      	b.n	8001c5e <UART1_Handler+0x5e>

		uint8_t aux = UART1_getChar();
 8001c08:	f000 f8b4 	bl	8001d74 <UART1_getChar>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]

		if(aux == '\n' || aux == '\r' ) { // End Command
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d002      	beq.n	8001c1c <UART1_Handler+0x1c>
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b0d      	cmp	r3, #13
 8001c1a:	d10f      	bne.n	8001c3c <UART1_Handler+0x3c>

				UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <UART1_Handler+0x74>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <UART1_Handler+0x78>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	5453      	strb	r3, [r2, r1]
				UART1_Cmd_Callback(UART1_CMD_Buff, UART1_cmdPtr);
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <UART1_Handler+0x74>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <UART1_Handler+0x78>)
 8001c30:	f000 fcdc 	bl	80025ec <UART1_Cmd_Callback>
				UART1_cmdPtr=0;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <UART1_Handler+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	e010      	b.n	8001c5e <UART1_Handler+0x5e>

		}else{             				// Command body

		UART1_CMD_Buff[UART1_cmdPtr] = aux;
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <UART1_Handler+0x74>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <UART1_Handler+0x78>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	5453      	strb	r3, [r2, r1]
		if (UART1_cmdPtr < 299) UART1_cmdPtr++;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <UART1_Handler+0x74>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001c50:	d805      	bhi.n	8001c5e <UART1_Handler+0x5e>
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <UART1_Handler+0x74>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <UART1_Handler+0x74>)
 8001c5c:	801a      	strh	r2, [r3, #0]
	while(UART1_DataAvailable()){
 8001c5e:	f000 f84b 	bl	8001cf8 <UART1_DataAvailable>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1cf      	bne.n	8001c08 <UART1_Handler+0x8>

		}
	}
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000c1c 	.word	0x20000c1c
 8001c78:	20000c20 	.word	0x20000c20

08001c7c <UART1_printf>:

void UART1_printf(const char *fmt, ...){
 8001c7c:	b40f      	push	{r0, r1, r2, r3}
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0

	static char tempBuff[256];

	memset(tempBuff, 0, 256);
 8001c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c88:	2100      	movs	r1, #0
 8001c8a:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <UART1_printf+0x48>)
 8001c8c:	f005 f97e 	bl	8006f8c <memset>
	va_list arg;

	va_start (arg, fmt);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	607b      	str	r3, [r7, #4]
	vsprintf(tempBuff,fmt, arg);
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6939      	ldr	r1, [r7, #16]
 8001c9a:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <UART1_printf+0x48>)
 8001c9c:	f006 ff66 	bl	8008b6c <vsiprintf>
	va_end (arg);

	//HAL_UART_Transmit(&huart1, (const uint8_t*)tempBuff, strlen(tempBuff), 0xff); /* Transmit over uart */
	HAL_UART_Transmit_IT(&huart1, (const uint8_t*)tempBuff, strlen(tempBuff)); /* Transmit over uart */
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <UART1_printf+0x48>)
 8001ca2:	f7fe faa5 	bl	80001f0 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	4905      	ldr	r1, [pc, #20]	; (8001cc4 <UART1_printf+0x48>)
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <UART1_printf+0x4c>)
 8001cb0:	f004 f849 	bl	8005d46 <HAL_UART_Transmit_IT>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cbe:	b004      	add	sp, #16
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000d4c 	.word	0x20000d4c
 8001cc8:	20000f34 	.word	0x20000f34

08001ccc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

    if(huart == &huart1){
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <HAL_UART_RxCpltCallback+0x24>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d102      	bne.n	8001ce2 <HAL_UART_RxCpltCallback+0x16>
      UART1_DMA_Ovrn = 1;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_UART_RxCpltCallback+0x28>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000f34 	.word	0x20000f34
 8001cf4:	20000c18 	.word	0x20000c18

08001cf8 <UART1_DataAvailable>:

static uint8_t UART1_DataAvailable() {
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  if (((UART1_oPtr < UART1_iPtr) && !UART1_DMA_Ovrn) || ((UART1_oPtr > UART1_iPtr) && UART1_DMA_Ovrn)) {
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <UART1_DataAvailable+0x70>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <UART1_DataAvailable+0x74>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d203      	bcs.n	8001d18 <UART1_DataAvailable+0x20>
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <UART1_DataAvailable+0x78>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <UART1_DataAvailable+0x3c>
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <UART1_DataAvailable+0x70>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <UART1_DataAvailable+0x74>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d905      	bls.n	8001d38 <UART1_DataAvailable+0x40>
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <UART1_DataAvailable+0x78>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <UART1_DataAvailable+0x40>
    return 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e012      	b.n	8001d5e <UART1_DataAvailable+0x66>
  } else if (UART1_DMA_Ovrn){
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <UART1_DataAvailable+0x78>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00d      	beq.n	8001d5c <UART1_DataAvailable+0x64>
    UART1_oPtr = UART1_iPtr;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <UART1_DataAvailable+0x74>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <UART1_DataAvailable+0x70>)
 8001d50:	801a      	strh	r2, [r3, #0]
    UART1_DMA_Ovrn = 0;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <UART1_DataAvailable+0x78>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <UART1_DataAvailable+0x66>
  }
  return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	20000c1a 	.word	0x20000c1a
 8001d6c:	20000f78 	.word	0x20000f78
 8001d70:	20000c18 	.word	0x20000c18

08001d74 <UART1_getChar>:

static uint8_t UART1_getChar() {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if (UART1_DataAvailable()) {
 8001d7e:	f7ff ffbb 	bl	8001cf8 <UART1_DataAvailable>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d014      	beq.n	8001db2 <UART1_getChar+0x3e>
    ch = UART1_Rx_Buf[UART1_oPtr++];
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <UART1_getChar+0x48>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	b291      	uxth	r1, r2
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <UART1_getChar+0x48>)
 8001d92:	8011      	strh	r1, [r2, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <UART1_getChar+0x4c>)
 8001d98:	5c9b      	ldrb	r3, [r3, r2]
 8001d9a:	71fb      	strb	r3, [r7, #7]
    if (UART1_oPtr >= UART1_BUF_LEN) {
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <UART1_getChar+0x48>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001da4:	d305      	bcc.n	8001db2 <UART1_getChar+0x3e>
      UART1_oPtr = 0;
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <UART1_getChar+0x48>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]
      UART1_DMA_Ovrn = 0;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <UART1_getChar+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
    }
  }
  return ch;
 8001db2:	79fb      	ldrb	r3, [r7, #7]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000c1a 	.word	0x20000c1a
 8001dc0:	20000a24 	.word	0x20000a24
 8001dc4:	20000c18 	.word	0x20000c18

08001dc8 <checkModelTimeout>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t checkModelTimeout(uint32_t dt){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

	  if(__HAL_TIM_GET_COUNTER(&htim3) > dt){
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <checkModelTimeout+0x30>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d208      	bcs.n	8001dee <checkModelTimeout+0x26>
		  HAL_TIM_Base_Stop(&htim3);
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <checkModelTimeout+0x30>)
 8001dde:	f003 fb0b 	bl	80053f8 <HAL_TIM_Base_Stop>
		  asm("NOP");
 8001de2:	bf00      	nop
		  HAL_TIM_Base_Start(&htim3);
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <checkModelTimeout+0x30>)
 8001de6:	f003 fa9f 	bl	8005328 <HAL_TIM_Base_Start>
		  return 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <checkModelTimeout+0x28>
	  }
	  return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000eec 	.word	0x20000eec

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	b5b0      	push	{r4, r5, r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e02:	f001 f857 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e06:	f000 f983 	bl	8002110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0a:	f000 fb0b 	bl	8002424 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0e:	f000 fae9 	bl	80023e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e12:	f000 fabd 	bl	8002390 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001e16:	f000 fa21 	bl	800225c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e1a:	f000 fa6b 	bl	80022f4 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001e1e:	f000 f9e7 	bl	80021f0 <MX_SPI1_Init>
////HAL_Delay(10);
////		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
////
////  HAL_Delay(10);
////  }
  HAL_TIM_Base_Start(&htim3);
 8001e22:	48a0      	ldr	r0, [pc, #640]	; (80020a4 <main+0x2a8>)
 8001e24:	f003 fa80 	bl	8005328 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e28:	489f      	ldr	r0, [pc, #636]	; (80020a8 <main+0x2ac>)
 8001e2a:	f003 fb0d 	bl	8005448 <HAL_TIM_Base_Start_IT>
  UART1_Init();
 8001e2e:	f7ff fed9 	bl	8001be4 <UART1_Init>
//  ADS1220_set_conv_mode_continuous(&hspi1, &regs);
//  ADS1220_set_voltage_ref(&hspi1, ADS1220_VREF_EXT_REF_1, &regs);
//  ADS1220_enable_PSW(&hspi1, &regs);
//  ADS1220_get_config(&hspi1, &regs);

  ADS1220_regs regs = { 0x3E, 0xD4, 0x88, 0x00 };
 8001e32:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <main+0x2b0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60bb      	str	r3, [r7, #8]
  ADS1220_init(&hspi1, &regs); // Optionally check for failure
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	489c      	ldr	r0, [pc, #624]	; (80020b0 <main+0x2b4>)
 8001e40:	f7ff f93a 	bl	80010b8 <ADS1220_init>
  ADS1220_set_conv_mode_single_shot(&hspi1, &regs);
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4899      	ldr	r0, [pc, #612]	; (80020b0 <main+0x2b4>)
 8001e4c:	f7ff f9a0 	bl	8001190 <ADS1220_set_conv_mode_single_shot>
  //ADS1220_start_conversion(&hspi1);


  	uint32_t timeStamp = 0; /* Timer for UART tx */
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]

  	//force emulation
	int32_t fOffset = 137;
 8001e54:	2389      	movs	r3, #137	; 0x89
 8001e56:	61bb      	str	r3, [r7, #24]
	float scalingFactor_N = 84.5;  // bits per Newton
 8001e58:	4b96      	ldr	r3, [pc, #600]	; (80020b4 <main+0x2b8>)
 8001e5a:	617b      	str	r3, [r7, #20]

	hmod1.dt = 500; 	// us /* This can go lower than 500us due ADC timing limitations */
 8001e5c:	4b96      	ldr	r3, [pc, #600]	; (80020b8 <main+0x2bc>)
 8001e5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e62:	601a      	str	r2, [r3, #0]

	hmod1.m = 1.5;
 8001e64:	4b94      	ldr	r3, [pc, #592]	; (80020b8 <main+0x2bc>)
 8001e66:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001e6a:	60da      	str	r2, [r3, #12]
	hmod1.c = 30; 		// N.s/m
 8001e6c:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <main+0x2bc>)
 8001e6e:	4a93      	ldr	r2, [pc, #588]	; (80020bc <main+0x2c0>)
 8001e70:	611a      	str	r2, [r3, #16]
	//hmod1.k = 50; 		// N/m

	hmod1.cMap = &curve;
 8001e72:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <main+0x2bc>)
 8001e74:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <main+0x2c4>)
 8001e76:	609a      	str	r2, [r3, #8]
	hmod1.cMap_size = nPoints;
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <main+0x2c8>)
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <main+0x2bc>)
 8001e7e:	711a      	strb	r2, [r3, #4]

	hmod1.us = 0.2; 		// Dynamic friction coefficient
 8001e80:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <main+0x2bc>)
 8001e82:	4a91      	ldr	r2, [pc, #580]	; (80020c8 <main+0x2cc>)
 8001e84:	619a      	str	r2, [r3, #24]
	hmod1.ud = 0.2; 		// Static friction coefficient
 8001e86:	4b8c      	ldr	r3, [pc, #560]	; (80020b8 <main+0x2bc>)
 8001e88:	4a8f      	ldr	r2, [pc, #572]	; (80020c8 <main+0x2cc>)
 8001e8a:	61da      	str	r2, [r3, #28]
	hmod1.N = 3; 			// Normal Force (Weight)
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <main+0x2bc>)
 8001e8e:	4a8f      	ldr	r2, [pc, #572]	; (80020cc <main+0x2d0>)
 8001e90:	621a      	str	r2, [r3, #32]
	hmod1.dfv = 0.00001;	// m/s
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <main+0x2bc>)
 8001e94:	4a8e      	ldr	r2, [pc, #568]	; (80020d0 <main+0x2d4>)
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

	hmod1.posMaxLim = 0.12; // Model Hard Stops
 8001e98:	4b87      	ldr	r3, [pc, #540]	; (80020b8 <main+0x2bc>)
 8001e9a:	4a8e      	ldr	r2, [pc, #568]	; (80020d4 <main+0x2d8>)
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
	hmod1.posMinLim = -0.12;
 8001e9e:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <main+0x2bc>)
 8001ea0:	4a8d      	ldr	r2, [pc, #564]	; (80020d8 <main+0x2dc>)
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c

	hmod1.velMaxLim = 1;	// Hardware max reachable speed.
 8001ea4:	4b84      	ldr	r3, [pc, #528]	; (80020b8 <main+0x2bc>)
 8001ea6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
	hmod1.velMinLim = -1;
 8001eac:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <main+0x2bc>)
 8001eae:	4a8b      	ldr	r2, [pc, #556]	; (80020dc <main+0x2e0>)
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34

	hcon1.dt = hmod1.dt;
 8001eb2:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <main+0x2bc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a8a      	ldr	r2, [pc, #552]	; (80020e0 <main+0x2e4>)
 8001eb8:	6013      	str	r3, [r2, #0]
	hcon1.kp = 50;
 8001eba:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <main+0x2e4>)
 8001ebc:	4a89      	ldr	r2, [pc, #548]	; (80020e4 <main+0x2e8>)
 8001ebe:	605a      	str	r2, [r3, #4]
	hcon1.ki = 0.5;
 8001ec0:	4b87      	ldr	r3, [pc, #540]	; (80020e0 <main+0x2e4>)
 8001ec2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ec6:	609a      	str	r2, [r3, #8]
	hcon1.outMax = hmod1.velMaxLim;
 8001ec8:	4b7b      	ldr	r3, [pc, #492]	; (80020b8 <main+0x2bc>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a84      	ldr	r2, [pc, #528]	; (80020e0 <main+0x2e4>)
 8001ece:	60d3      	str	r3, [r2, #12]
	hcon1.outMin = hmod1.velMinLim;
 8001ed0:	4b79      	ldr	r3, [pc, #484]	; (80020b8 <main+0x2bc>)
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	4a82      	ldr	r2, [pc, #520]	; (80020e0 <main+0x2e4>)
 8001ed6:	6113      	str	r3, [r2, #16]

  while (1)
  {

	  __HAL_TIM_SET_COUNTER(&htim3, 0); // re-start monitoring timer
 8001ed8:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <main+0x2a8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

	  UART1_Handler();
 8001ee0:	f7ff fe8e 	bl	8001c00 <UART1_Handler>
	  //checkModelTimeout(hmod1.dt);

	  int32_t sAux = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
	  if( ADS1220_read_singleshot(&hspi1, GPIOC, GPIO_PIN_4, &sAux, 10) ){
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	220a      	movs	r2, #10
 8001eec:	9200      	str	r2, [sp, #0]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	497d      	ldr	r1, [pc, #500]	; (80020e8 <main+0x2ec>)
 8001ef2:	486f      	ldr	r0, [pc, #444]	; (80020b0 <main+0x2b4>)
 8001ef4:	f7ff f9a0 	bl	8001238 <ADS1220_read_singleshot>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d014      	beq.n	8001f28 <main+0x12c>
		  int16_t raw = ((sAux & 0x00FFFF00)>>8) + fOffset;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	121b      	asrs	r3, r3, #8
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	827b      	strh	r3, [r7, #18]
		  force = (float)raw / scalingFactor_N;
 8001f0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <main+0x2f0>)
 8001f24:	edc3 7a00 	vstr	s15, [r3]
	  }
	  //checkModelTimeout(hmod1.dt);

	// Filter 1 Force
	  static float smoothForce = 0;
	  smoothForce = smoothForce - (LPF1_Beta * (smoothForce - force));
 8001f28:	4b71      	ldr	r3, [pc, #452]	; (80020f0 <main+0x2f4>)
 8001f2a:	ed93 7a00 	vldr	s14, [r3]
 8001f2e:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <main+0x2f4>)
 8001f30:	edd3 6a00 	vldr	s13, [r3]
 8001f34:	4b6d      	ldr	r3, [pc, #436]	; (80020ec <main+0x2f0>)
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <main+0x2f8>)
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4c:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <main+0x2f4>)
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
	  //checkModelTimeout(hmod1.dt);

	// Reference model
	//------------------------------------------//
	 refModel_Tick(&hmod1, smoothForce, (StepCon_GetPosition()/1000));
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <main+0x2f4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fb06 	bl	8000568 <__aeabi_f2d>
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	460d      	mov	r5, r1
 8001f60:	f7ff fd12 	bl	8001988 <StepCon_GetPosition>
 8001f64:	eef0 7a40 	vmov.f32	s15, s0
 8001f68:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80020f8 <main+0x2fc>
 8001f6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f70:	ee16 0a90 	vmov	r0, s13
 8001f74:	f7fe faf8 	bl	8000568 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	ec43 2b11 	vmov	d1, r2, r3
 8001f80:	ec45 4b10 	vmov	d0, r4, r5
 8001f84:	484c      	ldr	r0, [pc, #304]	; (80020b8 <main+0x2bc>)
 8001f86:	f7ff fa13 	bl	80013b0 <refModel_Tick>
	//------------------------------------------//
	//checkModelTimeout(hmod1.dt);

	// Position Controller
	//------------------------------------------//
	hcon1.dt = hmod1.dt;
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <main+0x2bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a54      	ldr	r2, [pc, #336]	; (80020e0 <main+0x2e4>)
 8001f90:	6013      	str	r3, [r2, #0]
	float refSpeed = Compute_PI(&hcon1, hmod1.pos, (StepCon_GetPosition()/1000));
 8001f92:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <main+0x2bc>)
 8001f94:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fe34 	bl	8000c08 <__aeabi_d2f>
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	f7ff fcf1 	bl	8001988 <StepCon_GetPosition>
 8001fa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001faa:	eddf 6a53 	vldr	s13, [pc, #332]	; 80020f8 <main+0x2fc>
 8001fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb2:	eef0 0a67 	vmov.f32	s1, s15
 8001fb6:	ee00 4a10 	vmov	s0, r4
 8001fba:	4849      	ldr	r0, [pc, #292]	; (80020e0 <main+0x2e4>)
 8001fbc:	f7ff f986 	bl	80012cc <Compute_PI>
 8001fc0:	ed87 0a03 	vstr	s0, [r7, #12]
	//checkModelTimeout(hmod1.dt);

	//------------------------------------------//

	 /* Drive motor Speed with corrected ref velocity */
	 speed = (hmod1.vel + refSpeed) * 1000; // to mm/s
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <main+0x2bc>)
 8001fc6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7fe facc 	bl	8000568 <__aeabi_f2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	f7fe f968 	bl	80002ac <__adddf3>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4b44      	ldr	r3, [pc, #272]	; (80020fc <main+0x300>)
 8001fea:	f7fe fb15 	bl	8000618 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fe07 	bl	8000c08 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <main+0x304>)
 8001ffe:	6013      	str	r3, [r2, #0]

	 static float smoothVel = 0;
	 smoothVel = smoothVel - (LPF2_Beta * (smoothVel - speed));
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <main+0x308>)
 8002002:	ed93 7a00 	vldr	s14, [r3]
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <main+0x308>)
 8002008:	edd3 6a00 	vldr	s13, [r3]
 800200c:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <main+0x304>)
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <main+0x30c>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002024:	4b37      	ldr	r3, [pc, #220]	; (8002104 <main+0x308>)
 8002026:	edc3 7a00 	vstr	s15, [r3]
	 //checkModelTimeout(hmod1.dt);

	 StepCon_Speed(smoothVel);
 800202a:	4b36      	ldr	r3, [pc, #216]	; (8002104 <main+0x308>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	eeb0 0a67 	vmov.f32	s0, s15
 8002034:	f7ff fcba 	bl	80019ac <StepCon_Speed>
	 //checkModelTimeout(hmod1.dt);

	 // Console logs
	 if(timeStamp + 50 < HAL_GetTick()){
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800203e:	f000 ff6f 	bl	8002f20 <HAL_GetTick>
 8002042:	4603      	mov	r3, r0
 8002044:	429c      	cmp	r4, r3
 8002046:	d21e      	bcs.n	8002086 <main+0x28a>
		 UART1_printf("cmd=%.4f, %.4f\r\n", (float)(StepCon_GetPosition()/1000), smoothForce);
 8002048:	f7ff fc9e 	bl	8001988 <StepCon_GetPosition>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80020f8 <main+0x2fc>
 8002054:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002058:	ee16 0a90 	vmov	r0, s13
 800205c:	f7fe fa84 	bl	8000568 <__aeabi_f2d>
 8002060:	4604      	mov	r4, r0
 8002062:	460d      	mov	r5, r1
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <main+0x2f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa7d 	bl	8000568 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	e9cd 2300 	strd	r2, r3, [sp]
 8002076:	4622      	mov	r2, r4
 8002078:	462b      	mov	r3, r5
 800207a:	4824      	ldr	r0, [pc, #144]	; (800210c <main+0x310>)
 800207c:	f7ff fdfe 	bl	8001c7c <UART1_printf>
		 timeStamp = HAL_GetTick();
 8002080:	f000 ff4e 	bl	8002f20 <HAL_GetTick>
 8002084:	61f8      	str	r0, [r7, #28]
//	//	 * You can compare the timer counter and trigger an alarm
//	//	 * if the time was already gone by the time the program
//	//	 * reached this point
//	//	 **/

	 checkModelTimeout(hmod1.dt);
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <main+0x2bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe9c 	bl	8001dc8 <checkModelTimeout>
	 while(__HAL_TIM_GET_COUNTER(&htim3) < hmod1.dt);
 8002090:	bf00      	nop
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <main+0x2a8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <main+0x2bc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d3f8      	bcc.n	8002092 <main+0x296>
  {
 80020a0:	e71a      	b.n	8001ed8 <main+0xdc>
 80020a2:	bf00      	nop
 80020a4:	20000eec 	.word	0x20000eec
 80020a8:	20000ea4 	.word	0x20000ea4
 80020ac:	0800c160 	.word	0x0800c160
 80020b0:	20000e4c 	.word	0x20000e4c
 80020b4:	42a90000 	.word	0x42a90000
 80020b8:	20000fe0 	.word	0x20000fe0
 80020bc:	41f00000 	.word	0x41f00000
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	20000804 	.word	0x20000804
 80020c8:	3e4ccccd 	.word	0x3e4ccccd
 80020cc:	40400000 	.word	0x40400000
 80020d0:	3727c5ac 	.word	0x3727c5ac
 80020d4:	3df5c28f 	.word	0x3df5c28f
 80020d8:	bdf5c28f 	.word	0xbdf5c28f
 80020dc:	bf800000 	.word	0xbf800000
 80020e0:	20001050 	.word	0x20001050
 80020e4:	42480000 	.word	0x42480000
 80020e8:	40020800 	.word	0x40020800
 80020ec:	20000fdc 	.word	0x20000fdc
 80020f0:	20001068 	.word	0x20001068
 80020f4:	20000004 	.word	0x20000004
 80020f8:	447a0000 	.word	0x447a0000
 80020fc:	408f4000 	.word	0x408f4000
 8002100:	20000fd8 	.word	0x20000fd8
 8002104:	2000106c 	.word	0x2000106c
 8002108:	20000008 	.word	0x20000008
 800210c:	0800c14c 	.word	0x0800c14c

08002110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b094      	sub	sp, #80	; 0x50
 8002114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	2230      	movs	r2, #48	; 0x30
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f004 ff34 	bl	8006f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <SystemClock_Config+0xd8>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <SystemClock_Config+0xd8>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002142:	6413      	str	r3, [r2, #64]	; 0x40
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <SystemClock_Config+0xd8>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <SystemClock_Config+0xdc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a24      	ldr	r2, [pc, #144]	; (80021ec <SystemClock_Config+0xdc>)
 800215a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <SystemClock_Config+0xdc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800216c:	2301      	movs	r3, #1
 800216e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	2302      	movs	r3, #2
 8002178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002180:	2304      	movs	r3, #4
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002184:	23b4      	movs	r3, #180	; 0xb4
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002188:	2302      	movs	r3, #2
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800218c:	2303      	movs	r3, #3
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fe05 	bl	8003da4 <HAL_RCC_OscConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021a0:	f000 fb80 	bl	80028a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021a4:	f001 fdae 	bl	8003d04 <HAL_PWREx_EnableOverDrive>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80021ae:	f000 fb79 	bl	80028a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b2:	230f      	movs	r3, #15
 80021b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80021c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	2105      	movs	r1, #5
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 f85f 	bl	8004294 <HAL_RCC_ClockConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80021dc:	f000 fb62 	bl	80028a4 <Error_Handler>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3750      	adds	r7, #80	; 0x50
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000

080021f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_SPI1_Init+0x64>)
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <MX_SPI1_Init+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_SPI1_Init+0x64>)
 80021fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_SPI1_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_SPI1_Init+0x64>)
 8002216:	2201      	movs	r2, #1
 8002218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_SPI1_Init+0x64>)
 800221c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_SPI1_Init+0x64>)
 8002224:	2220      	movs	r2, #32
 8002226:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <MX_SPI1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_SPI1_Init+0x64>)
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <MX_SPI1_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_SPI1_Init+0x64>)
 800223c:	220a      	movs	r2, #10
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <MX_SPI1_Init+0x64>)
 8002242:	f002 fa79 	bl	8004738 <HAL_SPI_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800224c:	f000 fb2a 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000e4c 	.word	0x20000e4c
 8002258:	40013000 	.word	0x40013000

0800225c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <MX_TIM2_Init+0x94>)
 800227a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800227e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <MX_TIM2_Init+0x94>)
 8002282:	2259      	movs	r2, #89	; 0x59
 8002284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002286:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MX_TIM2_Init+0x94>)
 8002288:	2210      	movs	r2, #16
 800228a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <MX_TIM2_Init+0x94>)
 800228e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <MX_TIM2_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MX_TIM2_Init+0x94>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a0:	4813      	ldr	r0, [pc, #76]	; (80022f0 <MX_TIM2_Init+0x94>)
 80022a2:	f002 fff1 	bl	8005288 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022ac:	f000 fafa 	bl	80028a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <MX_TIM2_Init+0x94>)
 80022be:	f003 fa3b 	bl	8005738 <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022c8:	f000 faec 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_TIM2_Init+0x94>)
 80022da:	f003 fc57 	bl	8005b8c <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022e4:	f000 fade 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000ea4 	.word	0x20000ea4

080022f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002308:	463b      	mov	r3, r7
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <MX_TIM3_Init+0x94>)
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <MX_TIM3_Init+0x98>)
 8002314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <MX_TIM3_Init+0x94>)
 8002318:	2259      	movs	r2, #89	; 0x59
 800231a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <MX_TIM3_Init+0x94>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <MX_TIM3_Init+0x94>)
 8002324:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002328:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <MX_TIM3_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <MX_TIM3_Init+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002336:	4814      	ldr	r0, [pc, #80]	; (8002388 <MX_TIM3_Init+0x94>)
 8002338:	f002 ffa6 	bl	8005288 <HAL_TIM_Base_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002342:	f000 faaf 	bl	80028a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4619      	mov	r1, r3
 8002352:	480d      	ldr	r0, [pc, #52]	; (8002388 <MX_TIM3_Init+0x94>)
 8002354:	f003 f9f0 	bl	8005738 <HAL_TIM_ConfigClockSource>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800235e:	f000 faa1 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800236a:	463b      	mov	r3, r7
 800236c:	4619      	mov	r1, r3
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <MX_TIM3_Init+0x94>)
 8002370:	f003 fc0c 	bl	8005b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800237a:	f000 fa93 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000eec 	.word	0x20000eec
 800238c:	40000400 	.word	0x40000400

08002390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <MX_USART1_UART_Init+0x50>)
 8002398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 800239c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023b6:	220c      	movs	r2, #12
 80023b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023c8:	f003 fc70 	bl	8005cac <HAL_UART_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023d2:	f000 fa67 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000f34 	.word	0x20000f34
 80023e0:	40011000 	.word	0x40011000

080023e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_DMA_Init+0x3c>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <MX_DMA_Init+0x3c>)
 80023f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_DMA_Init+0x3c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	203a      	movs	r0, #58	; 0x3a
 800240c:	f000 fe70 	bl	80030f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002410:	203a      	movs	r0, #58	; 0x3a
 8002412:	f000 fe89 	bl	8003128 <HAL_NVIC_EnableIRQ>

}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800

08002424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a65      	ldr	r2, [pc, #404]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b5f      	ldr	r3, [pc, #380]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a5e      	ldr	r2, [pc, #376]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b5c      	ldr	r3, [pc, #368]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a50      	ldr	r2, [pc, #320]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 80024b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <MX_GPIO_Init+0x1b4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2110      	movs	r1, #16
 80024ca:	4844      	ldr	r0, [pc, #272]	; (80025dc <MX_GPIO_Init+0x1b8>)
 80024cc:	f001 fc00 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80024d0:	2200      	movs	r2, #0
 80024d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d6:	4842      	ldr	r0, [pc, #264]	; (80025e0 <MX_GPIO_Init+0x1bc>)
 80024d8:	f001 fbfa 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_7|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80024dc:	2200      	movs	r2, #0
 80024de:	f246 01a0 	movw	r1, #24736	; 0x60a0
 80024e2:	4840      	ldr	r0, [pc, #256]	; (80025e4 <MX_GPIO_Init+0x1c0>)
 80024e4:	f001 fbf4 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	483e      	ldr	r0, [pc, #248]	; (80025e8 <MX_GPIO_Init+0x1c4>)
 80024ee:	f001 fbef 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80024fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4835      	ldr	r0, [pc, #212]	; (80025dc <MX_GPIO_Init+0x1b8>)
 8002508:	f001 fa1e 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800250c:	2310      	movs	r3, #16
 800250e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	482e      	ldr	r0, [pc, #184]	; (80025dc <MX_GPIO_Init+0x1b8>)
 8002524:	f001 fa10 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002528:	2310      	movs	r3, #16
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	482b      	ldr	r0, [pc, #172]	; (80025e8 <MX_GPIO_Init+0x1c4>)
 800253c:	f001 fa04 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	4822      	ldr	r0, [pc, #136]	; (80025e0 <MX_GPIO_Init+0x1bc>)
 8002556:	f001 f9f7 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800255a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	481b      	ldr	r0, [pc, #108]	; (80025e0 <MX_GPIO_Init+0x1bc>)
 8002574:	f001 f9e8 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002578:	2320      	movs	r3, #32
 800257a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4815      	ldr	r0, [pc, #84]	; (80025e4 <MX_GPIO_Init+0x1c0>)
 8002590:	f001 f9da 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LD3_Pin|LD4_Pin;
 8002594:	f44f 43c1 	mov.w	r3, #24704	; 0x6080
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <MX_GPIO_Init+0x1c0>)
 80025ae:	f001 f9cb 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025b2:	2340      	movs	r3, #64	; 0x40
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4807      	ldr	r0, [pc, #28]	; (80025e8 <MX_GPIO_Init+0x1c4>)
 80025ca:	f001 f9bd 	bl	8003948 <HAL_GPIO_Init>

}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40020800 	.word	0x40020800

080025ec <UART1_Cmd_Callback>:

/* USER CODE BEGIN 4 */


void UART1_Cmd_Callback(uint8_t* cmd, uint16_t len){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b092      	sub	sp, #72	; 0x48
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]

	/* Process your commands here */
	float aux = 0;
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]

	if(!len) return; /* Ignore empty commands */
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8115 	beq.w	8002830 <UART1_Cmd_Callback+0x244>


	if( isCmd("cmap=") ) {
 8002606:	2205      	movs	r2, #5
 8002608:	498c      	ldr	r1, [pc, #560]	; (800283c <UART1_Cmd_Callback+0x250>)
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f005 fbd7 	bl	8007dbe <strncmp>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 8099 	bne.w	800274a <UART1_Cmd_Callback+0x15e>

		cMap_1d_t* points = (cMap_1d_t*) hmod1.cMap;
 8002618:	4b89      	ldr	r3, [pc, #548]	; (8002840 <UART1_Cmd_Callback+0x254>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	623b      	str	r3, [r7, #32]

		// Skip the "cmap=" prefix
		const char* data_start = (const char*)cmd + 5;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3305      	adds	r3, #5
 8002622:	61fb      	str	r3, [r7, #28]

		// Determine the number of pairs by counting commas
		uint16_t num_pairs = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		const char* ptr = data_start;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	643b      	str	r3, [r7, #64]	; 0x40
		//while (*ptr) {
		for (int i=0;i<(len-5);i++){
 800262e:	2300      	movs	r3, #0
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002632:	e00e      	b.n	8002652 <UART1_Cmd_Callback+0x66>
			if (*ptr == ',') {
 8002634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b2c      	cmp	r3, #44	; 0x2c
 800263a:	d104      	bne.n	8002646 <UART1_Cmd_Callback+0x5a>
				num_pairs++;
 800263c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002640:	3301      	adds	r3, #1
 8002642:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}
			ptr++;
 8002646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002648:	3301      	adds	r3, #1
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i=0;i<(len-5);i++){
 800264c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264e:	3301      	adds	r3, #1
 8002650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	3b05      	subs	r3, #5
 8002656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002658:	429a      	cmp	r2, r3
 800265a:	dbeb      	blt.n	8002634 <UART1_Cmd_Callback+0x48>
		}

		// Each pair has two values, so number of pairs is half the commas
		num_pairs = (num_pairs + 1) / 2;
 800265c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002660:	3301      	adds	r3, #1
 8002662:	0fda      	lsrs	r2, r3, #31
 8002664:	4413      	add	r3, r2
 8002666:	105b      	asrs	r3, r3, #1
 8002668:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if (num_pairs > 255) return;
 800266c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002670:	2bff      	cmp	r3, #255	; 0xff
 8002672:	f200 80df 	bhi.w	8002834 <UART1_Cmd_Callback+0x248>

		// Parse the data points using sscanf
		size_t index = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
		ptr = data_start;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	643b      	str	r3, [r7, #64]	; 0x40
		while (index < num_pairs && *ptr) {
 800267e:	e046      	b.n	800270e <UART1_Cmd_Callback+0x122>
			float x, y;
			int scanned = sscanf(ptr, "%f,%f", &x, &y);
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	f107 0210 	add.w	r2, r7, #16
 8002688:	496e      	ldr	r1, [pc, #440]	; (8002844 <UART1_Cmd_Callback+0x258>)
 800268a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800268c:	f005 fb26 	bl	8007cdc <siscanf>
 8002690:	61b8      	str	r0, [r7, #24]
			if (scanned == 2) {
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d118      	bne.n	80026ca <UART1_Cmd_Callback+0xde>
				points[index].x = x / 1000;
 8002698:	ed97 7a04 	vldr	s14, [r7, #16]
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	4413      	add	r3, r2
 80026a4:	eddf 6a68 	vldr	s13, [pc, #416]	; 8002848 <UART1_Cmd_Callback+0x25c>
 80026a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ac:	edc3 7a00 	vstr	s15, [r3]
				points[index].f = y;
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	4413      	add	r3, r2
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
				index++;
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	3301      	adds	r3, #1
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			// Move pointer to the next pair
			while (*ptr && *ptr != ',') ptr++;
 80026c2:	e002      	b.n	80026ca <UART1_Cmd_Callback+0xde>
 80026c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c6:	3301      	adds	r3, #1
 80026c8:	643b      	str	r3, [r7, #64]	; 0x40
 80026ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <UART1_Cmd_Callback+0xee>
 80026d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b2c      	cmp	r3, #44	; 0x2c
 80026d8:	d1f4      	bne.n	80026c4 <UART1_Cmd_Callback+0xd8>
			if (*ptr == ',') ptr++;
 80026da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b2c      	cmp	r3, #44	; 0x2c
 80026e0:	d106      	bne.n	80026f0 <UART1_Cmd_Callback+0x104>
 80026e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e4:	3301      	adds	r3, #1
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
			while (*ptr && *ptr != ',') ptr++;
 80026e8:	e002      	b.n	80026f0 <UART1_Cmd_Callback+0x104>
 80026ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ec:	3301      	adds	r3, #1
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
 80026f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <UART1_Cmd_Callback+0x114>
 80026f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b2c      	cmp	r3, #44	; 0x2c
 80026fe:	d1f4      	bne.n	80026ea <UART1_Cmd_Callback+0xfe>
			if (*ptr == ',') ptr++;
 8002700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b2c      	cmp	r3, #44	; 0x2c
 8002706:	d102      	bne.n	800270e <UART1_Cmd_Callback+0x122>
 8002708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270a:	3301      	adds	r3, #1
 800270c:	643b      	str	r3, [r7, #64]	; 0x40
		while (index < num_pairs && *ptr) {
 800270e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002714:	429a      	cmp	r2, r3
 8002716:	d203      	bcs.n	8002720 <UART1_Cmd_Callback+0x134>
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1af      	bne.n	8002680 <UART1_Cmd_Callback+0x94>
		}

		hmod1.cMap_size = num_pairs;
 8002720:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <UART1_Cmd_Callback+0x254>)
 8002728:	711a      	strb	r2, [r3, #4]

		hmod1.posMinLim = points[0].x;
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a44      	ldr	r2, [pc, #272]	; (8002840 <UART1_Cmd_Callback+0x254>)
 8002730:	62d3      	str	r3, [r2, #44]	; 0x2c
		hmod1.posMaxLim = points[num_pairs-1].x;
 8002732:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002736:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800273a:	3b01      	subs	r3, #1
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	6a3a      	ldr	r2, [r7, #32]
 8002740:	4413      	add	r3, r2
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3e      	ldr	r2, [pc, #248]	; (8002840 <UART1_Cmd_Callback+0x254>)
 8002746:	6293      	str	r3, [r2, #40]	; 0x28
 8002748:	e075      	b.n	8002836 <UART1_Cmd_Callback+0x24a>

	}else if( isCmd("mass=") ) {
 800274a:	2205      	movs	r2, #5
 800274c:	493f      	ldr	r1, [pc, #252]	; (800284c <UART1_Cmd_Callback+0x260>)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f005 fb35 	bl	8007dbe <strncmp>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10e      	bne.n	8002778 <UART1_Cmd_Callback+0x18c>

		int res = sscanf((const char*)cmd,"mass=%f", &aux);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	461a      	mov	r2, r3
 8002760:	493b      	ldr	r1, [pc, #236]	; (8002850 <UART1_Cmd_Callback+0x264>)
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f005 faba 	bl	8007cdc <siscanf>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24
		if(res) {
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d062      	beq.n	8002836 <UART1_Cmd_Callback+0x24a>
			hmod1.m = aux;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4a33      	ldr	r2, [pc, #204]	; (8002840 <UART1_Cmd_Callback+0x254>)
 8002774:	60d3      	str	r3, [r2, #12]
 8002776:	e05e      	b.n	8002836 <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("damp=") ) {
 8002778:	2205      	movs	r2, #5
 800277a:	4936      	ldr	r1, [pc, #216]	; (8002854 <UART1_Cmd_Callback+0x268>)
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f005 fb1e 	bl	8007dbe <strncmp>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10e      	bne.n	80027a6 <UART1_Cmd_Callback+0x1ba>
		int res = sscanf((const char*)cmd,"damp=%f", &aux);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	461a      	mov	r2, r3
 800278e:	4932      	ldr	r1, [pc, #200]	; (8002858 <UART1_Cmd_Callback+0x26c>)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f005 faa3 	bl	8007cdc <siscanf>
 8002796:	62b8      	str	r0, [r7, #40]	; 0x28
		if(res) {
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04b      	beq.n	8002836 <UART1_Cmd_Callback+0x24a>
			hmod1.c = aux;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <UART1_Cmd_Callback+0x254>)
 80027a2:	6113      	str	r3, [r2, #16]
 80027a4:	e047      	b.n	8002836 <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("frcn=") ) {
 80027a6:	2205      	movs	r2, #5
 80027a8:	492c      	ldr	r1, [pc, #176]	; (800285c <UART1_Cmd_Callback+0x270>)
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f005 fb07 	bl	8007dbe <strncmp>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10e      	bne.n	80027d4 <UART1_Cmd_Callback+0x1e8>
		int res = sscanf((const char*)cmd,"frcn=%f", &aux);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	461a      	mov	r2, r3
 80027bc:	4928      	ldr	r1, [pc, #160]	; (8002860 <UART1_Cmd_Callback+0x274>)
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f005 fa8c 	bl	8007cdc <siscanf>
 80027c4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(res) {
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d034      	beq.n	8002836 <UART1_Cmd_Callback+0x24a>
			hmod1.N = aux;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <UART1_Cmd_Callback+0x254>)
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	e030      	b.n	8002836 <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("vmax=") ) {
 80027d4:	2205      	movs	r2, #5
 80027d6:	4923      	ldr	r1, [pc, #140]	; (8002864 <UART1_Cmd_Callback+0x278>)
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f005 faf0 	bl	8007dbe <strncmp>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10e      	bne.n	8002802 <UART1_Cmd_Callback+0x216>
		int res = sscanf((const char*)cmd,"vmax=%f", &aux);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	461a      	mov	r2, r3
 80027ea:	491f      	ldr	r1, [pc, #124]	; (8002868 <UART1_Cmd_Callback+0x27c>)
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f005 fa75 	bl	8007cdc <siscanf>
 80027f2:	6338      	str	r0, [r7, #48]	; 0x30
		if(res) {
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01d      	beq.n	8002836 <UART1_Cmd_Callback+0x24a>
			hmod1.velMaxLim = aux;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a10      	ldr	r2, [pc, #64]	; (8002840 <UART1_Cmd_Callback+0x254>)
 80027fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002800:	e019      	b.n	8002836 <UART1_Cmd_Callback+0x24a>
		}

	}else if( isCmd("vmin=") ) {
 8002802:	2205      	movs	r2, #5
 8002804:	4919      	ldr	r1, [pc, #100]	; (800286c <UART1_Cmd_Callback+0x280>)
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f005 fad9 	bl	8007dbe <strncmp>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d111      	bne.n	8002836 <UART1_Cmd_Callback+0x24a>
		int res = sscanf((const char*)cmd,"vmin=%f", &aux);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	461a      	mov	r2, r3
 8002818:	4915      	ldr	r1, [pc, #84]	; (8002870 <UART1_Cmd_Callback+0x284>)
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f005 fa5e 	bl	8007cdc <siscanf>
 8002820:	6378      	str	r0, [r7, #52]	; 0x34
		if(res) {
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <UART1_Cmd_Callback+0x24a>
			hmod1.velMinLim = aux;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <UART1_Cmd_Callback+0x254>)
 800282c:	6353      	str	r3, [r2, #52]	; 0x34
 800282e:	e002      	b.n	8002836 <UART1_Cmd_Callback+0x24a>
	if(!len) return; /* Ignore empty commands */
 8002830:	bf00      	nop
 8002832:	e000      	b.n	8002836 <UART1_Cmd_Callback+0x24a>
		if (num_pairs > 255) return;
 8002834:	bf00      	nop
		}
	}


	/*----------------------------*/
}
 8002836:	3748      	adds	r7, #72	; 0x48
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	0800c164 	.word	0x0800c164
 8002840:	20000fe0 	.word	0x20000fe0
 8002844:	0800c16c 	.word	0x0800c16c
 8002848:	447a0000 	.word	0x447a0000
 800284c:	0800c174 	.word	0x0800c174
 8002850:	0800c17c 	.word	0x0800c17c
 8002854:	0800c184 	.word	0x0800c184
 8002858:	0800c18c 	.word	0x0800c18c
 800285c:	0800c194 	.word	0x0800c194
 8002860:	0800c19c 	.word	0x0800c19c
 8002864:	0800c1a4 	.word	0x0800c1a4
 8002868:	0800c1ac 	.word	0x0800c1ac
 800286c:	0800c1b4 	.word	0x0800c1b4
 8002870:	0800c1bc 	.word	0x0800c1bc

08002874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d101      	bne.n	800288a <HAL_TIM_PeriodElapsedCallback+0x16>
		StepCon_pulseTick();
 8002886:	f7ff f913 	bl	8001ab0 <StepCon_pulseTick>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8002894:	f000 fb30 	bl	8002ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40001000 	.word	0x40001000

080028a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a8:	b672      	cpsid	i
}
 80028aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ac:	e7fe      	b.n	80028ac <Error_Handler+0x8>
	...

080028b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_MspInit+0x4c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_MspInit+0x4c>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_MspInit+0x4c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_MspInit+0x4c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <HAL_MspInit+0x4c>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_MspInit+0x4c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_SPI_MspInit+0x84>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12c      	bne.n	800297c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_SPI_MspInit+0x88>)
 800292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800295a:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800296c:	2305      	movs	r3, #5
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_SPI_MspInit+0x8c>)
 8002978:	f000 ffe6 	bl	8003948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800297c:	bf00      	nop
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40013000 	.word	0x40013000
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000

08002990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d116      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_TIM_Base_MspInit+0x70>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_TIM_Base_MspInit+0x70>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_TIM_Base_MspInit+0x70>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	201c      	movs	r0, #28
 80029c4:	f000 fb94 	bl	80030f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029c8:	201c      	movs	r0, #28
 80029ca:	f000 fbad 	bl	8003128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029ce:	e012      	b.n	80029f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <HAL_TIM_Base_MspInit+0x74>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10d      	bne.n	80029f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_TIM_Base_MspInit+0x70>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_TIM_Base_MspInit+0x70>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_TIM_Base_MspInit+0x70>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <HAL_UART_MspInit+0xf4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d163      	bne.n	8002af2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <HAL_UART_MspInit+0xf8>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a33      	ldr	r2, [pc, #204]	; (8002b00 <HAL_UART_MspInit+0xf8>)
 8002a34:	f043 0310 	orr.w	r3, r3, #16
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <HAL_UART_MspInit+0xf8>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_UART_MspInit+0xf8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <HAL_UART_MspInit+0xf8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_UART_MspInit+0xf8>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a74:	2307      	movs	r3, #7
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4821      	ldr	r0, [pc, #132]	; (8002b04 <HAL_UART_MspInit+0xfc>)
 8002a80:	f000 ff62 	bl	8003948 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <HAL_UART_MspInit+0x104>)
 8002a88:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002a8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ac6:	4810      	ldr	r0, [pc, #64]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002ac8:	f000 fb3c 	bl	8003144 <HAL_DMA_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002ad2:	f7ff fee7 	bl	80028a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_UART_MspInit+0x100>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2025      	movs	r0, #37	; 0x25
 8002ae8:	f000 fb02 	bl	80030f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aec:	2025      	movs	r0, #37	; 0x25
 8002aee:	f000 fb1b 	bl	8003128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3728      	adds	r7, #40	; 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020000 	.word	0x40020000
 8002b08:	20000f78 	.word	0x20000f78
 8002b0c:	40026440 	.word	0x40026440

08002b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	; 0x38
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_InitTick+0xe4>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	4a32      	ldr	r2, [pc, #200]	; (8002bf4 <HAL_InitTick+0xe4>)
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_InitTick+0xe4>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b3c:	f107 0210 	add.w	r2, r7, #16
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fdc4 	bl	80046d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b56:	f001 fd95 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8002b5a:	6378      	str	r0, [r7, #52]	; 0x34
 8002b5c:	e004      	b.n	8002b68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b5e:	f001 fd91 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8002b62:	4603      	mov	r3, r0
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6a:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_InitTick+0xe8>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	3b01      	subs	r3, #1
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_InitTick+0xec>)
 8002b78:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <HAL_InitTick+0xf0>)
 8002b7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_InitTick+0xec>)
 8002b7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_InitTick+0xec>)
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_InitTick+0xec>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_InitTick+0xec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_InitTick+0xec>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002b9c:	4817      	ldr	r0, [pc, #92]	; (8002bfc <HAL_InitTick+0xec>)
 8002b9e:	f002 fb73 	bl	8005288 <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d11b      	bne.n	8002be8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002bb0:	4812      	ldr	r0, [pc, #72]	; (8002bfc <HAL_InitTick+0xec>)
 8002bb2:	f002 fc49 	bl	8005448 <HAL_TIM_Base_Start_IT>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bc4:	2036      	movs	r0, #54	; 0x36
 8002bc6:	f000 faaf 	bl	8003128 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d808      	bhi.n	8002be2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	2036      	movs	r0, #54	; 0x36
 8002bd6:	f000 fa8b 	bl	80030f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_InitTick+0xf4>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e002      	b.n	8002be8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002be8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3738      	adds	r7, #56	; 0x38
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	431bde83 	.word	0x431bde83
 8002bfc:	20001070 	.word	0x20001070
 8002c00:	40001000 	.word	0x40001000
 8002c04:	2000080c 	.word	0x2000080c

08002c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <NMI_Handler+0x4>

08002c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c12:	e7fe      	b.n	8002c12 <HardFault_Handler+0x4>

08002c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <MemManage_Handler+0x4>

08002c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <BusFault_Handler+0x4>

08002c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <UsageFault_Handler+0x4>

08002c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <TIM2_IRQHandler+0x10>)
 8002c66:	f002 fc5f 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000ea4 	.word	0x20000ea4

08002c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <USART1_IRQHandler+0x10>)
 8002c7a:	f003 f8d9 	bl	8005e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000f34 	.word	0x20000f34

08002c88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <TIM6_DAC_IRQHandler+0x10>)
 8002c8e:	f002 fc4b 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20001070 	.word	0x20001070

08002c9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA2_Stream2_IRQHandler+0x10>)
 8002ca2:	f000 fbe7 	bl	8003474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000f78 	.word	0x20000f78

08002cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return 1;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_kill>:

int _kill(int pid, int sig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cca:	f004 f935 	bl	8006f38 <__errno>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2216      	movs	r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_exit>:

void _exit (int status)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cf2:	e7fe      	b.n	8002cf2 <_exit+0x12>

08002cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d06:	f3af 8000 	nop.w
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf0      	blt.n	8002d06 <_read+0x12>
  }

  return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e009      	b.n	8002d54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf1      	blt.n	8002d40 <_write+0x12>
  }
  return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_close>:

int _close(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_isatty>:

int _isatty(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002da6:	2301      	movs	r3, #1
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <_sbrk+0x5c>)
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <_sbrk+0x60>)
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <_sbrk+0x64>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <_sbrk+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d207      	bcs.n	8002e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e00:	f004 f89a 	bl	8006f38 <__errno>
 8002e04:	4603      	mov	r3, r0
 8002e06:	220c      	movs	r2, #12
 8002e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e009      	b.n	8002e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <_sbrk+0x64>)
 8002e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20030000 	.word	0x20030000
 8002e30:	00000400 	.word	0x00000400
 8002e34:	200010b8 	.word	0x200010b8
 8002e38:	200010d0 	.word	0x200010d0

08002e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <SystemInit+0x20>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <SystemInit+0x20>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e64:	480d      	ldr	r0, [pc, #52]	; (8002e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e66:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e7c:	4c0b      	ldr	r4, [pc, #44]	; (8002eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e8a:	f7ff ffd7 	bl	8002e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e8e:	f004 f859 	bl	8006f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e92:	f7fe ffb3 	bl	8001dfc <main>
  bx  lr    
 8002e96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	200009e8 	.word	0x200009e8
  ldr r2, =_sidata
 8002ea4:	0800c6bc 	.word	0x0800c6bc
  ldr r2, =_sbss
 8002ea8:	200009e8 	.word	0x200009e8
  ldr r4, =_ebss
 8002eac:	200010d0 	.word	0x200010d0

08002eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_Init+0x40>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_Init+0x40>)
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x40>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f8fc 	bl	80030da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f7ff fe14 	bl	8002b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7ff fce2 	bl	80028b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000810 	.word	0x20000810
 8002f1c:	200010bc 	.word	0x200010bc

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	200010bc 	.word	0x200010bc

08002f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7ff ffee 	bl	8002f20 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d005      	beq.n	8002f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_Delay+0x44>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5e:	bf00      	nop
 8002f60:	f7ff ffde 	bl	8002f20 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d8f7      	bhi.n	8002f60 <HAL_Delay+0x28>
  {
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000810 	.word	0x20000810

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0b      	blt.n	800300e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4907      	ldr	r1, [pc, #28]	; (800301c <__NVIC_EnableIRQ+0x38>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	; (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff4c 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003102:	f7ff ff61 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 8003106:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f7ff ffb1 	bl	8003074 <NVIC_EncodePriority>
 8003112:	4602      	mov	r2, r0
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff80 	bl	8003020 <__NVIC_SetPriority>
}
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff54 	bl	8002fe4 <__NVIC_EnableIRQ>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff fee6 	bl	8002f20 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e099      	b.n	8003294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003180:	e00f      	b.n	80031a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003182:	f7ff fecd 	bl	8002f20 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b05      	cmp	r3, #5
 800318e:	d908      	bls.n	80031a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e078      	b.n	8003294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e8      	bne.n	8003182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4b38      	ldr	r3, [pc, #224]	; (800329c <HAL_DMA_Init+0x158>)
 80031bc:	4013      	ands	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d107      	bne.n	800320c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	4313      	orrs	r3, r2
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0307 	bic.w	r3, r3, #7
 8003222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b04      	cmp	r3, #4
 8003234:	d117      	bne.n	8003266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fb01 	bl	8003850 <DMA_CheckFifoParam>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2240      	movs	r2, #64	; 0x40
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003262:	2301      	movs	r3, #1
 8003264:	e016      	b.n	8003294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fab8 	bl	80037e4 <DMA_CalcBaseAndBitshift>
 8003274:	4603      	mov	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	223f      	movs	r2, #63	; 0x3f
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	f010803f 	.word	0xf010803f

080032a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Start_IT+0x26>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e040      	b.n	8003348 <HAL_DMA_Start_IT+0xa8>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d12f      	bne.n	800333a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2202      	movs	r2, #2
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fa4a 	bl	8003788 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	223f      	movs	r2, #63	; 0x3f
 80032fa:	409a      	lsls	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0216 	orr.w	r2, r2, #22
 800330e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e005      	b.n	8003346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800335e:	f7ff fddf 	bl	8002f20 <HAL_GetTick>
 8003362:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d008      	beq.n	8003382 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e052      	b.n	8003428 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0216 	bic.w	r2, r2, #22
 8003390:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <HAL_DMA_Abort+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0208 	bic.w	r2, r2, #8
 80033c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d2:	e013      	b.n	80033fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033d4:	f7ff fda4 	bl	8002f20 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d90c      	bls.n	80033fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2203      	movs	r2, #3
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e015      	b.n	8003428 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e4      	bne.n	80033d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	223f      	movs	r2, #63	; 0x3f
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d004      	beq.n	800344e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00c      	b.n	8003468 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2205      	movs	r2, #5
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003480:	4b8e      	ldr	r3, [pc, #568]	; (80036bc <HAL_DMA_IRQHandler+0x248>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a8e      	ldr	r2, [pc, #568]	; (80036c0 <HAL_DMA_IRQHandler+0x24c>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0a9b      	lsrs	r3, r3, #10
 800348c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	2208      	movs	r2, #8
 80034a0:	409a      	lsls	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01a      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0204 	bic.w	r2, r2, #4
 80034c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2208      	movs	r2, #8
 80034ce:	409a      	lsls	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f043 0201 	orr.w	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	2201      	movs	r2, #1
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d012      	beq.n	8003516 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2201      	movs	r2, #1
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0202 	orr.w	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	2204      	movs	r2, #4
 800351c:	409a      	lsls	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d012      	beq.n	800354c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	2204      	movs	r2, #4
 800353a:	409a      	lsls	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	2210      	movs	r2, #16
 8003552:	409a      	lsls	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d043      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03c      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2210      	movs	r2, #16
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d018      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d024      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
 80035a2:	e01f      	b.n	80035e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
 80035b4:	e016      	b.n	80035e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0208 	bic.w	r2, r2, #8
 80035d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	2220      	movs	r2, #32
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 808f 	beq.w	8003714 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8087 	beq.w	8003714 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2220      	movs	r2, #32
 800360c:	409a      	lsls	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b05      	cmp	r3, #5
 800361c:	d136      	bne.n	800368c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0216 	bic.w	r2, r2, #22
 800362c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800363c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <HAL_DMA_IRQHandler+0x1da>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0208 	bic.w	r2, r2, #8
 800365c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	223f      	movs	r2, #63	; 0x3f
 8003664:	409a      	lsls	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367e:	2b00      	cmp	r3, #0
 8003680:	d07e      	beq.n	8003780 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	4798      	blx	r3
        }
        return;
 800368a:	e079      	b.n	8003780 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01d      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d031      	beq.n	8003714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
 80036b8:	e02c      	b.n	8003714 <HAL_DMA_IRQHandler+0x2a0>
 80036ba:	bf00      	nop
 80036bc:	20000808 	.word	0x20000808
 80036c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d023      	beq.n	8003714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
 80036d4:	e01e      	b.n	8003714 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0210 	bic.w	r2, r2, #16
 80036f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b00      	cmp	r3, #0
 800371a:	d032      	beq.n	8003782 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d022      	beq.n	800376e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2205      	movs	r2, #5
 800372c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3301      	adds	r3, #1
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	d307      	bcc.n	800375c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f2      	bne.n	8003740 <HAL_DMA_IRQHandler+0x2cc>
 800375a:	e000      	b.n	800375e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800375c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
 800377e:	e000      	b.n	8003782 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003780:	bf00      	nop
    }
  }
}
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d108      	bne.n	80037c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037c6:	e007      	b.n	80037d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	3b10      	subs	r3, #16
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <DMA_CalcBaseAndBitshift+0x64>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <DMA_CalcBaseAndBitshift+0x68>)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d909      	bls.n	8003826 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	659a      	str	r2, [r3, #88]	; 0x58
 8003824:	e007      	b.n	8003836 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	aaaaaaab 	.word	0xaaaaaaab
 800384c:	0800c1e8 	.word	0x0800c1e8

08003850 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11f      	bne.n	80038aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d856      	bhi.n	800391e <DMA_CheckFifoParam+0xce>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <DMA_CheckFifoParam+0x28>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	0800389b 	.word	0x0800389b
 8003880:	08003889 	.word	0x08003889
 8003884:	0800391f 	.word	0x0800391f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d046      	beq.n	8003922 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003898:	e043      	b.n	8003922 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a2:	d140      	bne.n	8003926 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e03d      	b.n	8003926 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b2:	d121      	bne.n	80038f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d837      	bhi.n	800392a <DMA_CheckFifoParam+0xda>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <DMA_CheckFifoParam+0x70>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038d7 	.word	0x080038d7
 80038c8:	080038d1 	.word	0x080038d1
 80038cc:	080038e9 	.word	0x080038e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e030      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d025      	beq.n	800392e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e6:	e022      	b.n	800392e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f0:	d11f      	bne.n	8003932 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038f6:	e01c      	b.n	8003932 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d903      	bls.n	8003906 <DMA_CheckFifoParam+0xb6>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d003      	beq.n	800390c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003904:	e018      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      break;
 800390a:	e015      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e00b      	b.n	8003936 <DMA_CheckFifoParam+0xe6>
      break;
 800391e:	bf00      	nop
 8003920:	e00a      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
 8003924:	e008      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003926:	bf00      	nop
 8003928:	e006      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
 800392c:	e004      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;   
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
    }
  } 
  
  return status; 
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop

08003948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e177      	b.n	8003c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003964:	2201      	movs	r2, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	f040 8166 	bne.w	8003c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d005      	beq.n	800399a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003996:	2b02      	cmp	r3, #2
 8003998:	d130      	bne.n	80039fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d0:	2201      	movs	r2, #1
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 0201 	and.w	r2, r3, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d017      	beq.n	8003a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	2203      	movs	r2, #3
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d123      	bne.n	8003a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	08da      	lsrs	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3208      	adds	r2, #8
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3208      	adds	r2, #8
 8003a86:	69b9      	ldr	r1, [r7, #24]
 8003a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80c0 	beq.w	8003c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003adc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ade:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aea:	4a61      	ldr	r2, [pc, #388]	; (8003c70 <HAL_GPIO_Init+0x328>)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	3302      	adds	r3, #2
 8003af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <HAL_GPIO_Init+0x32c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d037      	beq.n	8003b86 <HAL_GPIO_Init+0x23e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a57      	ldr	r2, [pc, #348]	; (8003c78 <HAL_GPIO_Init+0x330>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_GPIO_Init+0x23a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a56      	ldr	r2, [pc, #344]	; (8003c7c <HAL_GPIO_Init+0x334>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02b      	beq.n	8003b7e <HAL_GPIO_Init+0x236>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a55      	ldr	r2, [pc, #340]	; (8003c80 <HAL_GPIO_Init+0x338>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d025      	beq.n	8003b7a <HAL_GPIO_Init+0x232>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a54      	ldr	r2, [pc, #336]	; (8003c84 <HAL_GPIO_Init+0x33c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01f      	beq.n	8003b76 <HAL_GPIO_Init+0x22e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a53      	ldr	r2, [pc, #332]	; (8003c88 <HAL_GPIO_Init+0x340>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_Init+0x22a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_GPIO_Init+0x344>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x226>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a51      	ldr	r2, [pc, #324]	; (8003c90 <HAL_GPIO_Init+0x348>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_Init+0x222>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <HAL_GPIO_Init+0x34c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_Init+0x21e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4f      	ldr	r2, [pc, #316]	; (8003c98 <HAL_GPIO_Init+0x350>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_Init+0x21a>
 8003b5e:	2309      	movs	r3, #9
 8003b60:	e012      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b62:	230a      	movs	r3, #10
 8003b64:	e010      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b66:	2308      	movs	r3, #8
 8003b68:	e00e      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b6a:	2307      	movs	r3, #7
 8003b6c:	e00c      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b6e:	2306      	movs	r3, #6
 8003b70:	e00a      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b72:	2305      	movs	r3, #5
 8003b74:	e008      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b76:	2304      	movs	r3, #4
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e004      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e002      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b86:	2300      	movs	r3, #0
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f002 0203 	and.w	r2, r2, #3
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	4093      	lsls	r3, r2
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b98:	4935      	ldr	r1, [pc, #212]	; (8003c70 <HAL_GPIO_Init+0x328>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bca:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf4:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c1e:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	f67f ae84 	bls.w	8003964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40020000 	.word	0x40020000
 8003c78:	40020400 	.word	0x40020400
 8003c7c:	40020800 	.word	0x40020800
 8003c80:	40020c00 	.word	0x40020c00
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40021400 	.word	0x40021400
 8003c8c:	40021800 	.word	0x40021800
 8003c90:	40021c00 	.word	0x40021c00
 8003c94:	40022000 	.word	0x40022000
 8003c98:	40022400 	.word	0x40022400
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e001      	b.n	8003cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce0:	787b      	ldrb	r3, [r7, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cec:	e003      	b.n	8003cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	041a      	lsls	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	619a      	str	r2, [r3, #24]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_PWREx_EnableOverDrive+0x94>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d30:	f7ff f8f6 	bl	8002f20 <HAL_GetTick>
 8003d34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d36:	e009      	b.n	8003d4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d38:	f7ff f8f2 	bl	8002f20 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d46:	d901      	bls.n	8003d4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e01f      	b.n	8003d8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d1ee      	bne.n	8003d38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d60:	f7ff f8de 	bl	8002f20 <HAL_GetTick>
 8003d64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d66:	e009      	b.n	8003d7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d68:	f7ff f8da 	bl	8002f20 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d76:	d901      	bls.n	8003d7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e007      	b.n	8003d8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d7c:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d88:	d1ee      	bne.n	8003d68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	420e0040 	.word	0x420e0040
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	420e0044 	.word	0x420e0044

08003da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e267      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d075      	beq.n	8003eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d00c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dce:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d112      	bne.n	8003e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4b82      	ldr	r3, [pc, #520]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	4b7e      	ldr	r3, [pc, #504]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d05b      	beq.n	8003eac <HAL_RCC_OscConfig+0x108>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d157      	bne.n	8003eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e242      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d106      	bne.n	8003e18 <HAL_RCC_OscConfig+0x74>
 8003e0a:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a75      	ldr	r2, [pc, #468]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e01d      	b.n	8003e54 <HAL_RCC_OscConfig+0xb0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x98>
 8003e22:	4b70      	ldr	r3, [pc, #448]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6f      	ldr	r2, [pc, #444]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b6d      	ldr	r3, [pc, #436]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a6c      	ldr	r2, [pc, #432]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCC_OscConfig+0xb0>
 8003e3c:	4b69      	ldr	r3, [pc, #420]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a68      	ldr	r2, [pc, #416]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b66      	ldr	r3, [pc, #408]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a65      	ldr	r2, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7ff f860 	bl	8002f20 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7ff f85c 	bl	8002f20 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e207      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b5b      	ldr	r3, [pc, #364]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0xc0>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7ff f84c 	bl	8002f20 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7ff f848 	bl	8002f20 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e1f3      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0xe8>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d063      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eba:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec6:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d11c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b44      	ldr	r3, [pc, #272]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d116      	bne.n	8003f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x152>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e1c7      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4937      	ldr	r1, [pc, #220]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	e03a      	b.n	8003f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d020      	beq.n	8003f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f14:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <HAL_RCC_OscConfig+0x244>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7ff f801 	bl	8002f20 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f22:	f7fe fffd 	bl	8002f20 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e1a8      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f40:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4925      	ldr	r1, [pc, #148]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	600b      	str	r3, [r1, #0]
 8003f54:	e015      	b.n	8003f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <HAL_RCC_OscConfig+0x244>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe ffe0 	bl	8002f20 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f64:	f7fe ffdc 	bl	8002f20 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e187      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d036      	beq.n	8003ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_RCC_OscConfig+0x248>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fe ffc0 	bl	8002f20 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fe ffbc 	bl	8002f20 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e167      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x200>
 8003fc2:	e01b      	b.n	8003ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_OscConfig+0x248>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fe ffa9 	bl	8002f20 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	e00e      	b.n	8003ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fe ffa5 	bl	8002f20 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d907      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e150      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	42470000 	.word	0x42470000
 8003fec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ea      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8097 	beq.w	8004138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b81      	ldr	r3, [pc, #516]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	4b7d      	ldr	r3, [pc, #500]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	4a7c      	ldr	r2, [pc, #496]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
 800402a:	4b7a      	ldr	r3, [pc, #488]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	4b77      	ldr	r3, [pc, #476]	; (8004218 <HAL_RCC_OscConfig+0x474>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d118      	bne.n	8004078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004046:	4b74      	ldr	r3, [pc, #464]	; (8004218 <HAL_RCC_OscConfig+0x474>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a73      	ldr	r2, [pc, #460]	; (8004218 <HAL_RCC_OscConfig+0x474>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004052:	f7fe ff65 	bl	8002f20 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405a:	f7fe ff61 	bl	8002f20 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e10c      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <HAL_RCC_OscConfig+0x474>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d106      	bne.n	800408e <HAL_RCC_OscConfig+0x2ea>
 8004080:	4b64      	ldr	r3, [pc, #400]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a63      	ldr	r2, [pc, #396]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
 800408c:	e01c      	b.n	80040c8 <HAL_RCC_OscConfig+0x324>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b05      	cmp	r3, #5
 8004094:	d10c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x30c>
 8004096:	4b5f      	ldr	r3, [pc, #380]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	4a5e      	ldr	r2, [pc, #376]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	6713      	str	r3, [r2, #112]	; 0x70
 80040a2:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a5b      	ldr	r2, [pc, #364]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
 80040ae:	e00b      	b.n	80040c8 <HAL_RCC_OscConfig+0x324>
 80040b0:	4b58      	ldr	r3, [pc, #352]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a57      	ldr	r2, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
 80040bc:	4b55      	ldr	r3, [pc, #340]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a54      	ldr	r2, [pc, #336]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f023 0304 	bic.w	r3, r3, #4
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fe ff26 	bl	8002f20 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d8:	f7fe ff22 	bl	8002f20 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0cb      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ee:	4b49      	ldr	r3, [pc, #292]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0ee      	beq.n	80040d8 <HAL_RCC_OscConfig+0x334>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fc:	f7fe ff10 	bl	8002f20 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004102:	e00a      	b.n	800411a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fe ff0c 	bl	8002f20 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0b5      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411a:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1ee      	bne.n	8004104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412c:	4b39      	ldr	r3, [pc, #228]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	4a38      	ldr	r2, [pc, #224]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004136:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a1 	beq.w	8004284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004142:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b08      	cmp	r3, #8
 800414c:	d05c      	beq.n	8004208 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d141      	bne.n	80041da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_RCC_OscConfig+0x478>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe fee0 	bl	8002f20 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004164:	f7fe fedc 	bl	8002f20 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e087      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	4b27      	ldr	r3, [pc, #156]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	019b      	lsls	r3, r3, #6
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	3b01      	subs	r3, #1
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	061b      	lsls	r3, r3, #24
 80041a6:	491b      	ldr	r1, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HAL_RCC_OscConfig+0x478>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe feb5 	bl	8002f20 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fe feb1 	bl	8002f20 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e05c      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x416>
 80041d8:	e054      	b.n	8004284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCC_OscConfig+0x478>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fe fe9e 	bl	8002f20 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe fe9a 	bl	8002f20 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e045      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_OscConfig+0x470>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x444>
 8004206:	e03d      	b.n	8004284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e038      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
 8004214:	40023800 	.word	0x40023800
 8004218:	40007000 	.word	0x40007000
 800421c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <HAL_RCC_OscConfig+0x4ec>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d028      	beq.n	8004280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d121      	bne.n	8004280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d11a      	bne.n	8004280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004258:	4293      	cmp	r3, r2
 800425a:	d111      	bne.n	8004280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	3b01      	subs	r3, #1
 800426a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d107      	bne.n	8004280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800

08004294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0cc      	b.n	8004442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a8:	4b68      	ldr	r3, [pc, #416]	; (800444c <HAL_RCC_ClockConfig+0x1b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d90c      	bls.n	80042d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b63      	ldr	r3, [pc, #396]	; (800444c <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0b8      	b.n	8004442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e8:	4b59      	ldr	r3, [pc, #356]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a58      	ldr	r2, [pc, #352]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004300:	4b53      	ldr	r3, [pc, #332]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a52      	ldr	r2, [pc, #328]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800430a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800430c:	4b50      	ldr	r3, [pc, #320]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	494d      	ldr	r1, [pc, #308]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d044      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	4b47      	ldr	r3, [pc, #284]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d119      	bne.n	8004372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e07f      	b.n	8004442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d003      	beq.n	8004352 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434e:	2b03      	cmp	r3, #3
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004352:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e06f      	b.n	8004442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004362:	4b3b      	ldr	r3, [pc, #236]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e067      	b.n	8004442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004372:	4b37      	ldr	r3, [pc, #220]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4934      	ldr	r1, [pc, #208]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004384:	f7fe fdcc 	bl	8002f20 <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7fe fdc8 	bl	8002f20 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e04f      	b.n	8004442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1eb      	bne.n	800438c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <HAL_RCC_ClockConfig+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d20c      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b22      	ldr	r3, [pc, #136]	; (800444c <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e032      	b.n	8004442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4916      	ldr	r1, [pc, #88]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	490e      	ldr	r1, [pc, #56]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800441a:	f000 f821 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800441e:	4602      	mov	r2, r0
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	490a      	ldr	r1, [pc, #40]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 800442c:	5ccb      	ldrb	r3, [r1, r3]
 800442e:	fa22 f303 	lsr.w	r3, r2, r3
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x1c8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fb68 	bl	8002b10 <HAL_InitTick>

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023c00 	.word	0x40023c00
 8004450:	40023800 	.word	0x40023800
 8004454:	0800c1d0 	.word	0x0800c1d0
 8004458:	20000808 	.word	0x20000808
 800445c:	2000080c 	.word	0x2000080c

08004460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004464:	b094      	sub	sp, #80	; 0x50
 8004466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	647b      	str	r3, [r7, #68]	; 0x44
 800446c:	2300      	movs	r3, #0
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004470:	2300      	movs	r3, #0
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004478:	4b79      	ldr	r3, [pc, #484]	; (8004660 <HAL_RCC_GetSysClockFreq+0x200>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	d00d      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004484:	2b08      	cmp	r3, #8
 8004486:	f200 80e1 	bhi.w	800464c <HAL_RCC_GetSysClockFreq+0x1ec>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x34>
 800448e:	2b04      	cmp	r3, #4
 8004490:	d003      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x3a>
 8004492:	e0db      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004494:	4b73      	ldr	r3, [pc, #460]	; (8004664 <HAL_RCC_GetSysClockFreq+0x204>)
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004498:	e0db      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800449a:	4b73      	ldr	r3, [pc, #460]	; (8004668 <HAL_RCC_GetSysClockFreq+0x208>)
 800449c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800449e:	e0d8      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044aa:	4b6d      	ldr	r3, [pc, #436]	; (8004660 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d063      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	2200      	movs	r2, #0
 80044be:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ca:	2300      	movs	r3, #0
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044d2:	4622      	mov	r2, r4
 80044d4:	462b      	mov	r3, r5
 80044d6:	f04f 0000 	mov.w	r0, #0
 80044da:	f04f 0100 	mov.w	r1, #0
 80044de:	0159      	lsls	r1, r3, #5
 80044e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e4:	0150      	lsls	r0, r2, #5
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4621      	mov	r1, r4
 80044ec:	1a51      	subs	r1, r2, r1
 80044ee:	6139      	str	r1, [r7, #16]
 80044f0:	4629      	mov	r1, r5
 80044f2:	eb63 0301 	sbc.w	r3, r3, r1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004504:	4659      	mov	r1, fp
 8004506:	018b      	lsls	r3, r1, #6
 8004508:	4651      	mov	r1, sl
 800450a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800450e:	4651      	mov	r1, sl
 8004510:	018a      	lsls	r2, r1, #6
 8004512:	4651      	mov	r1, sl
 8004514:	ebb2 0801 	subs.w	r8, r2, r1
 8004518:	4659      	mov	r1, fp
 800451a:	eb63 0901 	sbc.w	r9, r3, r1
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800452a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800452e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004532:	4690      	mov	r8, r2
 8004534:	4699      	mov	r9, r3
 8004536:	4623      	mov	r3, r4
 8004538:	eb18 0303 	adds.w	r3, r8, r3
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	462b      	mov	r3, r5
 8004540:	eb49 0303 	adc.w	r3, r9, r3
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004552:	4629      	mov	r1, r5
 8004554:	024b      	lsls	r3, r1, #9
 8004556:	4621      	mov	r1, r4
 8004558:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800455c:	4621      	mov	r1, r4
 800455e:	024a      	lsls	r2, r1, #9
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004566:	2200      	movs	r2, #0
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
 800456a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800456c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004570:	f7fc fb9a 	bl	8000ca8 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4613      	mov	r3, r2
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	e058      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457e:	4b38      	ldr	r3, [pc, #224]	; (8004660 <HAL_RCC_GetSysClockFreq+0x200>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	099b      	lsrs	r3, r3, #6
 8004584:	2200      	movs	r2, #0
 8004586:	4618      	mov	r0, r3
 8004588:	4611      	mov	r1, r2
 800458a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800458e:	623b      	str	r3, [r7, #32]
 8004590:	2300      	movs	r3, #0
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
 8004594:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	f04f 0000 	mov.w	r0, #0
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	0159      	lsls	r1, r3, #5
 80045a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045aa:	0150      	lsls	r0, r2, #5
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4641      	mov	r1, r8
 80045b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80045b6:	4649      	mov	r1, r9
 80045b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045d0:	ebb2 040a 	subs.w	r4, r2, sl
 80045d4:	eb63 050b 	sbc.w	r5, r3, fp
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	00eb      	lsls	r3, r5, #3
 80045e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e6:	00e2      	lsls	r2, r4, #3
 80045e8:	4614      	mov	r4, r2
 80045ea:	461d      	mov	r5, r3
 80045ec:	4643      	mov	r3, r8
 80045ee:	18e3      	adds	r3, r4, r3
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	464b      	mov	r3, r9
 80045f4:	eb45 0303 	adc.w	r3, r5, r3
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004606:	4629      	mov	r1, r5
 8004608:	028b      	lsls	r3, r1, #10
 800460a:	4621      	mov	r1, r4
 800460c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004610:	4621      	mov	r1, r4
 8004612:	028a      	lsls	r2, r1, #10
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461a:	2200      	movs	r2, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	61fa      	str	r2, [r7, #28]
 8004620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004624:	f7fc fb40 	bl	8000ca8 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4613      	mov	r3, r2
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetSysClockFreq+0x200>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	3301      	adds	r3, #1
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800464a:	e002      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetSysClockFreq+0x204>)
 800464e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004654:	4618      	mov	r0, r3
 8004656:	3750      	adds	r7, #80	; 0x50
 8004658:	46bd      	mov	sp, r7
 800465a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
 8004664:	00f42400 	.word	0x00f42400
 8004668:	007a1200 	.word	0x007a1200

0800466c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCC_GetHCLKFreq+0x14>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000808 	.word	0x20000808

08004684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004688:	f7ff fff0 	bl	800466c <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	0a9b      	lsrs	r3, r3, #10
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0800c1e0 	.word	0x0800c1e0

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046b0:	f7ff ffdc 	bl	800466c <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0b5b      	lsrs	r3, r3, #13
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4903      	ldr	r1, [pc, #12]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40023800 	.word	0x40023800
 80046d0:	0800c1e0 	.word	0x0800c1e0

080046d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	220f      	movs	r2, #15
 80046e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_GetClockConfig+0x5c>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <HAL_RCC_GetClockConfig+0x60>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800
 8004734:	40023c00 	.word	0x40023c00

08004738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07b      	b.n	8004842 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475a:	d009      	beq.n	8004770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	61da      	str	r2, [r3, #28]
 8004762:	e005      	b.n	8004770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fe f8b8 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	ea42 0103 	orr.w	r1, r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0104 	and.w	r1, r3, #4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0210 	and.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b088      	sub	sp, #32
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_SPI_Transmit+0x22>
 8004868:	2302      	movs	r3, #2
 800486a:	e126      	b.n	8004aba <HAL_SPI_Transmit+0x270>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004874:	f7fe fb54 	bl	8002f20 <HAL_GetTick>
 8004878:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d002      	beq.n	8004890 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800488a:	2302      	movs	r3, #2
 800488c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800488e:	e10b      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_SPI_Transmit+0x52>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048a0:	e102      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e8:	d10f      	bne.n	800490a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d007      	beq.n	8004928 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004930:	d14b      	bne.n	80049ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_Transmit+0xf6>
 800493a:	8afb      	ldrh	r3, [r7, #22]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d13e      	bne.n	80049be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004964:	e02b      	b.n	80049be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d112      	bne.n	800499a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	1c9a      	adds	r2, r3, #2
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	86da      	strh	r2, [r3, #54]	; 0x36
 8004998:	e011      	b.n	80049be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800499a:	f7fe fac1 	bl	8002f20 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d803      	bhi.n	80049b2 <HAL_SPI_Transmit+0x168>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d102      	bne.n	80049b8 <HAL_SPI_Transmit+0x16e>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049bc:	e074      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1ce      	bne.n	8004966 <HAL_SPI_Transmit+0x11c>
 80049c8:	e04c      	b.n	8004a64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_Transmit+0x18e>
 80049d2:	8afb      	ldrh	r3, [r7, #22]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d140      	bne.n	8004a5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049fe:	e02c      	b.n	8004a5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d113      	bne.n	8004a36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a34:	e011      	b.n	8004a5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a36:	f7fe fa73 	bl	8002f20 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d803      	bhi.n	8004a4e <HAL_SPI_Transmit+0x204>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d102      	bne.n	8004a54 <HAL_SPI_Transmit+0x20a>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a58:	e026      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1cd      	bne.n	8004a00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fbcb 	bl	8005204 <SPI_EndRxTxTransaction>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a82:	2300      	movs	r3, #0
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e000      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004aa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	af02      	add	r7, sp, #8
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ade:	d112      	bne.n	8004b06 <HAL_SPI_Receive+0x44>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10e      	bne.n	8004b06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2204      	movs	r2, #4
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f8f1 	bl	8004ce4 <HAL_SPI_TransmitReceive>
 8004b02:	4603      	mov	r3, r0
 8004b04:	e0ea      	b.n	8004cdc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_SPI_Receive+0x52>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0e3      	b.n	8004cdc <HAL_SPI_Receive+0x21a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b1c:	f7fe fa00 	bl	8002f20 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b32:	e0ca      	b.n	8004cca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_Receive+0x7e>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b44:	e0c1      	b.n	8004cca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d10f      	bne.n	8004bae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d007      	beq.n	8004bcc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d162      	bne.n	8004c9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bd4:	e02e      	b.n	8004c34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d115      	bne.n	8004c10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f103 020c 	add.w	r2, r3, #12
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c0e:	e011      	b.n	8004c34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c10:	f7fe f986 	bl	8002f20 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d803      	bhi.n	8004c28 <HAL_SPI_Receive+0x166>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Receive+0x16c>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c32:	e04a      	b.n	8004cca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1cb      	bne.n	8004bd6 <HAL_SPI_Receive+0x114>
 8004c3e:	e031      	b.n	8004ca4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d113      	bne.n	8004c76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fe f953 	bl	8002f20 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Receive+0x1cc>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Receive+0x1d2>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c98:	e017      	b.n	8004cca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1cd      	bne.n	8004c40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fa45 	bl	8005138 <SPI_EndRxTransaction>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
 8004cc6:	e000      	b.n	8004cca <HAL_SPI_Receive+0x208>
  }

error :
 8004cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x26>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e18a      	b.n	8005020 <HAL_SPI_TransmitReceive+0x33c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d12:	f7fe f905 	bl	8002f20 <HAL_GetTick>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d00f      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x70>
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3a:	d107      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x68>
 8004d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d003      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d52:	e15b      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x82>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x82>
 8004d60:	887b      	ldrh	r3, [r7, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d6c:	e14e      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d003      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	887a      	ldrh	r2, [r7, #2]
 8004d92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	887a      	ldrh	r2, [r7, #2]
 8004daa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d007      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dde:	d178      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x10a>
 8004de8:	8b7b      	ldrh	r3, [r7, #26]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d166      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	1c9a      	adds	r2, r3, #2
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e12:	e053      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d11b      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x176>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d016      	beq.n	8004e5a <HAL_SPI_TransmitReceive+0x176>
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d113      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	881a      	ldrh	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d119      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x1b8>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d014      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e9c:	f7fe f840 	bl	8002f20 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d807      	bhi.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d003      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004eba:	e0a7      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1a6      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x130>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1a1      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x130>
 8004ed0:	e07c      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x1fc>
 8004eda:	8b7b      	ldrh	r3, [r7, #26]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d16b      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f06:	e057      	b.n	8004fb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d11c      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x26c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d017      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x26c>
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d114      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d119      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x2ae>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d014      	beq.n	8004f92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f92:	f7fd ffc5 	bl	8002f20 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d803      	bhi.n	8004faa <HAL_SPI_TransmitReceive+0x2c6>
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d102      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x2cc>
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fb6:	e029      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1a2      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x224>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d19d      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f917 	bl	8005204 <SPI_EndRxTxTransaction>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fe8:	e010      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	e000      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800500a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800501c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005020:	4618      	mov	r0, r3
 8005022:	3730      	adds	r7, #48	; 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005038:	f7fd ff72 	bl	8002f20 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	4413      	add	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005048:	f7fd ff6a 	bl	8002f20 <HAL_GetTick>
 800504c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	015b      	lsls	r3, r3, #5
 8005054:	0d1b      	lsrs	r3, r3, #20
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	e054      	b.n	800510a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d050      	beq.n	800510a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005068:	f7fd ff5a 	bl	8002f20 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d902      	bls.n	800507e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d13d      	bne.n	80050fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800508c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005096:	d111      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a0:	d004      	beq.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d107      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c4:	d10f      	bne.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e017      	b.n	800512a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3b01      	subs	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	429a      	cmp	r2, r3
 8005126:	d19b      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000808 	.word	0x20000808

08005138 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514c:	d111      	bne.n	8005172 <SPI_EndRxTransaction+0x3a>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005156:	d004      	beq.n	8005162 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d107      	bne.n	8005172 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005170:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517a:	d12a      	bne.n	80051d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	d012      	beq.n	80051ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff ff49 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02d      	beq.n	80051f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e026      	b.n	80051fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2101      	movs	r1, #1
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff ff36 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01a      	beq.n	80051f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e013      	b.n	80051fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	2101      	movs	r1, #1
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff ff23 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e000      	b.n	80051fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <SPI_EndRxTxTransaction+0x7c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <SPI_EndRxTxTransaction+0x80>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0d5b      	lsrs	r3, r3, #21
 800521c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005220:	fb02 f303 	mul.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522e:	d112      	bne.n	8005256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff fef4 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e00f      	b.n	8005276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3b01      	subs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d0f2      	beq.n	8005256 <SPI_EndRxTxTransaction+0x52>
 8005270:	e000      	b.n	8005274 <SPI_EndRxTxTransaction+0x70>
        break;
 8005272:	bf00      	nop
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000808 	.word	0x20000808
 8005284:	165e9f81 	.word	0x165e9f81

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e041      	b.n	800531e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fd fb6e 	bl	8002990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 fb26 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e046      	b.n	80053ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a23      	ldr	r2, [pc, #140]	; (80053dc <HAL_TIM_Base_Start+0xb4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535a:	d01d      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_TIM_Base_Start+0xb8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_TIM_Base_Start+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_TIM_Base_Start+0xc0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_TIM_Base_Start+0xc4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_TIM_Base_Start+0xc8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <HAL_TIM_Base_Start+0xcc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d111      	bne.n	80053bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d010      	beq.n	80053cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	e007      	b.n	80053cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40010400 	.word	0x40010400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40001800 	.word	0x40001800

080053f8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	f241 1311 	movw	r3, #4369	; 0x1111
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10f      	bne.n	8005430 <HAL_TIM_Base_Stop+0x38>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	f240 4344 	movw	r3, #1092	; 0x444
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d107      	bne.n	8005430 <HAL_TIM_Base_Stop+0x38>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04e      	b.n	80054fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a23      	ldr	r2, [pc, #140]	; (800550c <HAL_TIM_Base_Start_IT+0xc4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d022      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d01d      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_TIM_Base_Start_IT+0xc8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d018      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <HAL_TIM_Base_Start_IT+0xcc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <HAL_TIM_Base_Start_IT+0xd0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_TIM_Base_Start_IT+0xd4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a19      	ldr	r2, [pc, #100]	; (8005520 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_TIM_Base_Start_IT+0xdc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d111      	bne.n	80054ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d010      	beq.n	80054fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	e007      	b.n	80054fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40010000 	.word	0x40010000
 8005510:	40000400 	.word	0x40000400
 8005514:	40000800 	.word	0x40000800
 8005518:	40000c00 	.word	0x40000c00
 800551c:	40010400 	.word	0x40010400
 8005520:	40014000 	.word	0x40014000
 8005524:	40001800 	.word	0x40001800

08005528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0202 	mvn.w	r2, #2
 8005554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9b5 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9a7 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f9b8 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b04      	cmp	r3, #4
 8005590:	d122      	bne.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d11b      	bne.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0204 	mvn.w	r2, #4
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f98b 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f97d 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f98e 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0208 	mvn.w	r2, #8
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2204      	movs	r2, #4
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f961 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f953 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f964 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b10      	cmp	r3, #16
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b10      	cmp	r3, #16
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0210 	mvn.w	r2, #16
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2208      	movs	r2, #8
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f937 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f929 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f93a 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10e      	bne.n	80056ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d107      	bne.n	80056ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0201 	mvn.w	r2, #1
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fd f8e4 	bl	8002874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b80      	cmp	r3, #128	; 0x80
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fae0 	bl	8005c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8ff 	bl	8005902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b20      	cmp	r3, #32
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b20      	cmp	r3, #32
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0220 	mvn.w	r2, #32
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 faaa 	bl	8005c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_TIM_ConfigClockSource+0x1c>
 8005750:	2302      	movs	r3, #2
 8005752:	e0b4      	b.n	80058be <HAL_TIM_ConfigClockSource+0x186>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578c:	d03e      	beq.n	800580c <HAL_TIM_ConfigClockSource+0xd4>
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005792:	f200 8087 	bhi.w	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	f000 8086 	beq.w	80058aa <HAL_TIM_ConfigClockSource+0x172>
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d87f      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b70      	cmp	r3, #112	; 0x70
 80057a6:	d01a      	beq.n	80057de <HAL_TIM_ConfigClockSource+0xa6>
 80057a8:	2b70      	cmp	r3, #112	; 0x70
 80057aa:	d87b      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b60      	cmp	r3, #96	; 0x60
 80057ae:	d050      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x11a>
 80057b0:	2b60      	cmp	r3, #96	; 0x60
 80057b2:	d877      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b50      	cmp	r3, #80	; 0x50
 80057b6:	d03c      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0xfa>
 80057b8:	2b50      	cmp	r3, #80	; 0x50
 80057ba:	d873      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d058      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x13a>
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d86f      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b30      	cmp	r3, #48	; 0x30
 80057c6:	d064      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057c8:	2b30      	cmp	r3, #48	; 0x30
 80057ca:	d86b      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d060      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d867      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d05c      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d05a      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057dc:	e062      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6899      	ldr	r1, [r3, #8]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f000 f9ad 	bl	8005b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	609a      	str	r2, [r3, #8]
      break;
 800580a:	e04f      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6899      	ldr	r1, [r3, #8]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f000 f996 	bl	8005b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800582e:	609a      	str	r2, [r3, #8]
      break;
 8005830:	e03c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	461a      	mov	r2, r3
 8005840:	f000 f90a 	bl	8005a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2150      	movs	r1, #80	; 0x50
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f963 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 8005850:	e02c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	461a      	mov	r2, r3
 8005860:	f000 f929 	bl	8005ab6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2160      	movs	r1, #96	; 0x60
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f953 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 8005870:	e01c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	461a      	mov	r2, r3
 8005880:	f000 f8ea 	bl	8005a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2140      	movs	r1, #64	; 0x40
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f943 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 8005890:	e00c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f000 f93a 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 80058a2:	e003      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
      break;
 80058a8:	e000      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a40      	ldr	r2, [pc, #256]	; (8005a2c <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d00f      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3d      	ldr	r2, [pc, #244]	; (8005a30 <TIM_Base_SetConfig+0x118>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3c      	ldr	r2, [pc, #240]	; (8005a34 <TIM_Base_SetConfig+0x11c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3b      	ldr	r2, [pc, #236]	; (8005a38 <TIM_Base_SetConfig+0x120>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3a      	ldr	r2, [pc, #232]	; (8005a3c <TIM_Base_SetConfig+0x124>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d108      	bne.n	800596a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <TIM_Base_SetConfig+0x114>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d02b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d027      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2c      	ldr	r2, [pc, #176]	; (8005a30 <TIM_Base_SetConfig+0x118>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d023      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2b      	ldr	r2, [pc, #172]	; (8005a34 <TIM_Base_SetConfig+0x11c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01f      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <TIM_Base_SetConfig+0x120>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <TIM_Base_SetConfig+0x124>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d017      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <TIM_Base_SetConfig+0x128>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a27      	ldr	r2, [pc, #156]	; (8005a44 <TIM_Base_SetConfig+0x12c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a26      	ldr	r2, [pc, #152]	; (8005a48 <TIM_Base_SetConfig+0x130>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a25      	ldr	r2, [pc, #148]	; (8005a4c <TIM_Base_SetConfig+0x134>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a24      	ldr	r2, [pc, #144]	; (8005a50 <TIM_Base_SetConfig+0x138>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <TIM_Base_SetConfig+0x13c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0xf8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0c      	ldr	r2, [pc, #48]	; (8005a3c <TIM_Base_SetConfig+0x124>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d103      	bne.n	8005a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	615a      	str	r2, [r3, #20]
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800
 8005a4c:	40001800 	.word	0x40001800
 8005a50:	40001c00 	.word	0x40001c00
 8005a54:	40002000 	.word	0x40002000

08005a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f023 030a 	bic.w	r3, r3, #10
 8005a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b087      	sub	sp, #28
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0210 	bic.w	r2, r3, #16
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	031b      	lsls	r3, r3, #12
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f043 0307 	orr.w	r3, r3, #7
 8005b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	bf00      	nop
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e05a      	b.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a21      	ldr	r2, [pc, #132]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d022      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf0:	d01d      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d018      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1b      	ldr	r2, [pc, #108]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00e      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10c      	bne.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40000c00 	.word	0x40000c00
 8005c78:	40010400 	.word	0x40010400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40001800 	.word	0x40001800

08005c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e03f      	b.n	8005d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fc fe98 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	; 0x24
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fead 	bl	8006a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	4613      	mov	r3, r2
 8005d52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d130      	bne.n	8005dc2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_UART_Transmit_IT+0x26>
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e029      	b.n	8005dc4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Transmit_IT+0x38>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e022      	b.n	8005dc4 <HAL_UART_Transmit_IT+0x7e>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	88fa      	ldrh	r2, [r7, #6]
 8005d96:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2221      	movs	r2, #33	; 0x21
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dbc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
  }
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d11d      	bne.n	8005e26 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_UART_Receive_DMA+0x26>
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e016      	b.n	8005e28 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Receive_DMA+0x38>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e00f      	b.n	8005e28 <HAL_UART_Receive_DMA+0x58>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fbb7 	bl	8006590 <UART_Start_Receive_DMA>
 8005e22:	4603      	mov	r3, r0
 8005e24:	e000      	b.n	8005e28 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e26:	2302      	movs	r3, #2
  }
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b0ba      	sub	sp, #232	; 0xe8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10f      	bne.n	8005e96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <HAL_UART_IRQHandler+0x66>
 8005e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fd23 	bl	80068da <UART_Receive_IT>
      return;
 8005e94:	e256      	b.n	8006344 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80de 	beq.w	800605c <HAL_UART_IRQHandler+0x22c>
 8005ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d106      	bne.n	8005eba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80d1 	beq.w	800605c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00b      	beq.n	8005ede <HAL_UART_IRQHandler+0xae>
 8005ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f043 0201 	orr.w	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_UART_IRQHandler+0xd2>
 8005eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f043 0202 	orr.w	r2, r3, #2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_UART_IRQHandler+0xf6>
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f043 0204 	orr.w	r2, r3, #4
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d011      	beq.n	8005f56 <HAL_UART_IRQHandler+0x126>
 8005f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d105      	bne.n	8005f4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f043 0208 	orr.w	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 81ed 	beq.w	800633a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_UART_IRQHandler+0x14e>
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fcae 	bl	80068da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <HAL_UART_IRQHandler+0x17a>
 8005fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d04f      	beq.n	800604a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fbb6 	bl	800671c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	d141      	bne.n	8006042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3314      	adds	r3, #20
 8005fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1d9      	bne.n	8005fbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	2b00      	cmp	r3, #0
 8006010:	d013      	beq.n	800603a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	4a7d      	ldr	r2, [pc, #500]	; (800620c <HAL_UART_IRQHandler+0x3dc>)
 8006018:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	4618      	mov	r0, r3
 8006020:	f7fd fa06 	bl	8003430 <HAL_DMA_Abort_IT>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d016      	beq.n	8006058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006034:	4610      	mov	r0, r2
 8006036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	e00e      	b.n	8006058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f99a 	bl	8006374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e00a      	b.n	8006058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f996 	bl	8006374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	e006      	b.n	8006058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f992 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006056:	e170      	b.n	800633a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	bf00      	nop
    return;
 800605a:	e16e      	b.n	800633a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	2b01      	cmp	r3, #1
 8006062:	f040 814a 	bne.w	80062fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8143 	beq.w	80062fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 813c 	beq.w	80062fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	f040 80b4 	bne.w	8006210 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8140 	beq.w	800633e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060c6:	429a      	cmp	r2, r3
 80060c8:	f080 8139 	bcs.w	800633e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060de:	f000 8088 	beq.w	80061f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800610e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800611a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1d9      	bne.n	80060e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800613e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3314      	adds	r3, #20
 800614e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006156:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800615a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e1      	bne.n	800612e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3314      	adds	r3, #20
 8006170:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800617a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800617c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3314      	adds	r3, #20
 800618a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800618e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800619c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e3      	bne.n	800616a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c2:	f023 0310 	bic.w	r3, r3, #16
 80061c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80061d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e3      	bne.n	80061b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fd f8af 	bl	8003350 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f8c0 	bl	8006388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006208:	e099      	b.n	800633e <HAL_UART_IRQHandler+0x50e>
 800620a:	bf00      	nop
 800620c:	080067e3 	.word	0x080067e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006218:	b29b      	uxth	r3, r3
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 808b 	beq.w	8006342 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800622c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8086 	beq.w	8006342 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800625a:	647a      	str	r2, [r7, #68]	; 0x44
 800625c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e3      	bne.n	8006236 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3314      	adds	r3, #20
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	623b      	str	r3, [r7, #32]
   return(result);
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3314      	adds	r3, #20
 800628e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006292:	633a      	str	r2, [r7, #48]	; 0x30
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e3      	bne.n	800626e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062d8:	61fa      	str	r2, [r7, #28]
 80062da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	617b      	str	r3, [r7, #20]
   return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e3      	bne.n	80062b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f848 	bl	8006388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062f8:	e023      	b.n	8006342 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_UART_IRQHandler+0x4ea>
 8006306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fa79 	bl	800680a <UART_Transmit_IT>
    return;
 8006318:	e014      	b.n	8006344 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00e      	beq.n	8006344 <HAL_UART_IRQHandler+0x514>
 8006326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fab9 	bl	80068aa <UART_EndTransmit_IT>
    return;
 8006338:	e004      	b.n	8006344 <HAL_UART_IRQHandler+0x514>
    return;
 800633a:	bf00      	nop
 800633c:	e002      	b.n	8006344 <HAL_UART_IRQHandler+0x514>
      return;
 800633e:	bf00      	nop
 8006340:	e000      	b.n	8006344 <HAL_UART_IRQHandler+0x514>
      return;
 8006342:	bf00      	nop
  }
}
 8006344:	37e8      	adds	r7, #232	; 0xe8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop

0800634c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b09c      	sub	sp, #112	; 0x70
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d172      	bne.n	80064a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	2200      	movs	r2, #0
 80063c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80063da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80063e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e5      	bne.n	80063c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	667b      	str	r3, [r7, #100]	; 0x64
 800640e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006416:	647a      	str	r2, [r7, #68]	; 0x44
 8006418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800641c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3314      	adds	r3, #20
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	623b      	str	r3, [r7, #32]
   return(result);
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006440:	663b      	str	r3, [r7, #96]	; 0x60
 8006442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800644a:	633a      	str	r2, [r7, #48]	; 0x30
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e5      	bne.n	800642a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800645e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	2b01      	cmp	r3, #1
 800646c:	d119      	bne.n	80064a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	60fb      	str	r3, [r7, #12]
   return(result);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f023 0310 	bic.w	r3, r3, #16
 8006484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	330c      	adds	r3, #12
 800648c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800648e:	61fa      	str	r2, [r7, #28]
 8006490:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	69b9      	ldr	r1, [r7, #24]
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	617b      	str	r3, [r7, #20]
   return(result);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e5      	bne.n	800646e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d106      	bne.n	80064b8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ae:	4619      	mov	r1, r3
 80064b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064b2:	f7ff ff69 	bl	8006388 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064b6:	e002      	b.n	80064be <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80064b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064ba:	f7fb fc07 	bl	8001ccc <HAL_UART_RxCpltCallback>
}
 80064be:	bf00      	nop
 80064c0:	3770      	adds	r7, #112	; 0x70
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d108      	bne.n	80064ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff ff4e 	bl	8006388 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064ec:	e002      	b.n	80064f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff ff36 	bl	8006360 <HAL_UART_RxHalfCpltCallback>
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b21      	cmp	r3, #33	; 0x21
 800652e:	d108      	bne.n	8006542 <UART_DMAError+0x46>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2200      	movs	r2, #0
 800653a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800653c:	68b8      	ldr	r0, [r7, #8]
 800653e:	f000 f8c5 	bl	80066cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	bf0c      	ite	eq
 8006550:	2301      	moveq	r3, #1
 8006552:	2300      	movne	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b22      	cmp	r3, #34	; 0x22
 8006562:	d108      	bne.n	8006576 <UART_DMAError+0x7a>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006570:	68b8      	ldr	r0, [r7, #8]
 8006572:	f000 f8d3 	bl	800671c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0210 	orr.w	r2, r3, #16
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f7ff fef6 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b098      	sub	sp, #96	; 0x60
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2222      	movs	r2, #34	; 0x22
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	4a40      	ldr	r2, [pc, #256]	; (80066c0 <UART_Start_Receive_DMA+0x130>)
 80065be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	4a3f      	ldr	r2, [pc, #252]	; (80066c4 <UART_Start_Receive_DMA+0x134>)
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	4a3e      	ldr	r2, [pc, #248]	; (80066c8 <UART_Start_Receive_DMA+0x138>)
 80065ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	2200      	movs	r2, #0
 80065d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065d8:	f107 0308 	add.w	r3, r7, #8
 80065dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	f7fc fe56 	bl	80032a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d019      	beq.n	800664e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006630:	65bb      	str	r3, [r7, #88]	; 0x58
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800663a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800663c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e5      	bne.n	800661a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	657b      	str	r3, [r7, #84]	; 0x54
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800666e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	617b      	str	r3, [r7, #20]
   return(result);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006698:	653b      	str	r3, [r7, #80]	; 0x50
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066a2:	627a      	str	r2, [r7, #36]	; 0x24
 80066a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6a39      	ldr	r1, [r7, #32]
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e5      	bne.n	8006682 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3760      	adds	r7, #96	; 0x60
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	080063a1 	.word	0x080063a1
 80066c4:	080064c7 	.word	0x080064c7
 80066c8:	080064fd 	.word	0x080064fd

080066cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	; 0x24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	61ba      	str	r2, [r7, #24]
 80066f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6979      	ldr	r1, [r7, #20]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	613b      	str	r3, [r7, #16]
   return(result);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006710:	bf00      	nop
 8006712:	3724      	adds	r7, #36	; 0x24
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b095      	sub	sp, #84	; 0x54
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800673a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006744:	643a      	str	r2, [r7, #64]	; 0x40
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800674a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e5      	bne.n	8006724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3314      	adds	r3, #20
 800675e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	61fb      	str	r3, [r7, #28]
   return(result);
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3314      	adds	r3, #20
 8006776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006778:	62fa      	str	r2, [r7, #44]	; 0x2c
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800677e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e5      	bne.n	8006758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	2b01      	cmp	r3, #1
 8006792:	d119      	bne.n	80067c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	330c      	adds	r3, #12
 80067b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067b4:	61ba      	str	r2, [r7, #24]
 80067b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	613b      	str	r3, [r7, #16]
   return(result);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e5      	bne.n	8006794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067d6:	bf00      	nop
 80067d8:	3754      	adds	r7, #84	; 0x54
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff fdb9 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b21      	cmp	r3, #33	; 0x21
 800681c:	d13e      	bne.n	800689c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006826:	d114      	bne.n	8006852 <UART_Transmit_IT+0x48>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d110      	bne.n	8006852 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006844:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	1c9a      	adds	r2, r3, #2
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	621a      	str	r2, [r3, #32]
 8006850:	e008      	b.n	8006864 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	1c59      	adds	r1, r3, #1
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6211      	str	r1, [r2, #32]
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29b      	uxth	r3, r3
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4619      	mov	r1, r3
 8006872:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10f      	bne.n	8006898 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006886:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006896:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fd3e 	bl	800634c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b08c      	sub	sp, #48	; 0x30
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b22      	cmp	r3, #34	; 0x22
 80068ec:	f040 80ab 	bne.w	8006a46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f8:	d117      	bne.n	800692a <UART_Receive_IT+0x50>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d113      	bne.n	800692a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006918:	b29a      	uxth	r2, r3
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	1c9a      	adds	r2, r3, #2
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28
 8006928:	e026      	b.n	8006978 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693c:	d007      	beq.n	800694e <UART_Receive_IT+0x74>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10a      	bne.n	800695c <UART_Receive_IT+0x82>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	e008      	b.n	800696e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006968:	b2da      	uxtb	r2, r3
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29b      	uxth	r3, r3
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	4619      	mov	r1, r3
 8006986:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006988:	2b00      	cmp	r3, #0
 800698a:	d15a      	bne.n	8006a42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0220 	bic.w	r2, r2, #32
 800699a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d135      	bne.n	8006a38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	330c      	adds	r3, #12
 80069d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	613b      	str	r3, [r7, #16]
   return(result);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f023 0310 	bic.w	r3, r3, #16
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	623a      	str	r2, [r7, #32]
 80069f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	69f9      	ldr	r1, [r7, #28]
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e5      	bne.n	80069d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d10a      	bne.n	8006a2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff fca9 	bl	8006388 <HAL_UARTEx_RxEventCallback>
 8006a36:	e002      	b.n	8006a3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fb f947 	bl	8001ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e002      	b.n	8006a48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e000      	b.n	8006a48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3730      	adds	r7, #48	; 0x30
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a54:	b0c0      	sub	sp, #256	; 0x100
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	68d9      	ldr	r1, [r3, #12]
 8006a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	ea40 0301 	orr.w	r3, r0, r1
 8006a78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006aa8:	f021 010c 	bic.w	r1, r1, #12
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	6999      	ldr	r1, [r3, #24]
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	ea40 0301 	orr.w	r3, r0, r1
 8006ad6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b8f      	ldr	r3, [pc, #572]	; (8006d1c <UART_SetConfig+0x2cc>)
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d005      	beq.n	8006af0 <UART_SetConfig+0xa0>
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b8d      	ldr	r3, [pc, #564]	; (8006d20 <UART_SetConfig+0x2d0>)
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d104      	bne.n	8006afa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7fd fddc 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8006af4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006af8:	e003      	b.n	8006b02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006afa:	f7fd fdc3 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8006afe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0c:	f040 810c 	bne.w	8006d28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b22:	4622      	mov	r2, r4
 8006b24:	462b      	mov	r3, r5
 8006b26:	1891      	adds	r1, r2, r2
 8006b28:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b2a:	415b      	adcs	r3, r3
 8006b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b32:	4621      	mov	r1, r4
 8006b34:	eb12 0801 	adds.w	r8, r2, r1
 8006b38:	4629      	mov	r1, r5
 8006b3a:	eb43 0901 	adc.w	r9, r3, r1
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	f04f 0300 	mov.w	r3, #0
 8006b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b52:	4690      	mov	r8, r2
 8006b54:	4699      	mov	r9, r3
 8006b56:	4623      	mov	r3, r4
 8006b58:	eb18 0303 	adds.w	r3, r8, r3
 8006b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b60:	462b      	mov	r3, r5
 8006b62:	eb49 0303 	adc.w	r3, r9, r3
 8006b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b7e:	460b      	mov	r3, r1
 8006b80:	18db      	adds	r3, r3, r3
 8006b82:	653b      	str	r3, [r7, #80]	; 0x50
 8006b84:	4613      	mov	r3, r2
 8006b86:	eb42 0303 	adc.w	r3, r2, r3
 8006b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b94:	f7fa f888 	bl	8000ca8 <__aeabi_uldivmod>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4b61      	ldr	r3, [pc, #388]	; (8006d24 <UART_SetConfig+0x2d4>)
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	011c      	lsls	r4, r3, #4
 8006ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	1891      	adds	r1, r2, r2
 8006bbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bc8:	4641      	mov	r1, r8
 8006bca:	eb12 0a01 	adds.w	sl, r2, r1
 8006bce:	4649      	mov	r1, r9
 8006bd0:	eb43 0b01 	adc.w	fp, r3, r1
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006be0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006be8:	4692      	mov	sl, r2
 8006bea:	469b      	mov	fp, r3
 8006bec:	4643      	mov	r3, r8
 8006bee:	eb1a 0303 	adds.w	r3, sl, r3
 8006bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	eb4b 0303 	adc.w	r3, fp, r3
 8006bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c14:	460b      	mov	r3, r1
 8006c16:	18db      	adds	r3, r3, r3
 8006c18:	643b      	str	r3, [r7, #64]	; 0x40
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	eb42 0303 	adc.w	r3, r2, r3
 8006c20:	647b      	str	r3, [r7, #68]	; 0x44
 8006c22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c2a:	f7fa f83d 	bl	8000ca8 <__aeabi_uldivmod>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <UART_SetConfig+0x2d4>)
 8006c36:	fba3 2301 	umull	r2, r3, r3, r1
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	2264      	movs	r2, #100	; 0x64
 8006c3e:	fb02 f303 	mul.w	r3, r2, r3
 8006c42:	1acb      	subs	r3, r1, r3
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c4a:	4b36      	ldr	r3, [pc, #216]	; (8006d24 <UART_SetConfig+0x2d4>)
 8006c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c58:	441c      	add	r4, r3
 8006c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	1891      	adds	r1, r2, r2
 8006c72:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c74:	415b      	adcs	r3, r3
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	1851      	adds	r1, r2, r1
 8006c80:	6339      	str	r1, [r7, #48]	; 0x30
 8006c82:	4649      	mov	r1, r9
 8006c84:	414b      	adcs	r3, r1
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c94:	4659      	mov	r1, fp
 8006c96:	00cb      	lsls	r3, r1, #3
 8006c98:	4651      	mov	r1, sl
 8006c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9e:	4651      	mov	r1, sl
 8006ca0:	00ca      	lsls	r2, r1, #3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4642      	mov	r2, r8
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	460a      	mov	r2, r1
 8006cb4:	eb42 0303 	adc.w	r3, r2, r3
 8006cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ccc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	18db      	adds	r3, r3, r3
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	eb42 0303 	adc.w	r3, r2, r3
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ce2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ce6:	f7f9 ffdf 	bl	8000ca8 <__aeabi_uldivmod>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <UART_SetConfig+0x2d4>)
 8006cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	2164      	movs	r1, #100	; 0x64
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	3332      	adds	r3, #50	; 0x32
 8006d02:	4a08      	ldr	r2, [pc, #32]	; (8006d24 <UART_SetConfig+0x2d4>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f003 0207 	and.w	r2, r3, #7
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4422      	add	r2, r4
 8006d16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d18:	e105      	b.n	8006f26 <UART_SetConfig+0x4d6>
 8006d1a:	bf00      	nop
 8006d1c:	40011000 	.word	0x40011000
 8006d20:	40011400 	.word	0x40011400
 8006d24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	1891      	adds	r1, r2, r2
 8006d40:	6239      	str	r1, [r7, #32]
 8006d42:	415b      	adcs	r3, r3
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
 8006d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	1854      	adds	r4, r2, r1
 8006d4e:	4649      	mov	r1, r9
 8006d50:	eb43 0501 	adc.w	r5, r3, r1
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	00eb      	lsls	r3, r5, #3
 8006d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d62:	00e2      	lsls	r2, r4, #3
 8006d64:	4614      	mov	r4, r2
 8006d66:	461d      	mov	r5, r3
 8006d68:	4643      	mov	r3, r8
 8006d6a:	18e3      	adds	r3, r4, r3
 8006d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d70:	464b      	mov	r3, r9
 8006d72:	eb45 0303 	adc.w	r3, r5, r3
 8006d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d96:	4629      	mov	r1, r5
 8006d98:	008b      	lsls	r3, r1, #2
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da0:	4621      	mov	r1, r4
 8006da2:	008a      	lsls	r2, r1, #2
 8006da4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006da8:	f7f9 ff7e 	bl	8000ca8 <__aeabi_uldivmod>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4b60      	ldr	r3, [pc, #384]	; (8006f34 <UART_SetConfig+0x4e4>)
 8006db2:	fba3 2302 	umull	r2, r3, r3, r2
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	011c      	lsls	r4, r3, #4
 8006dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006dc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	1891      	adds	r1, r2, r2
 8006dd2:	61b9      	str	r1, [r7, #24]
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	61fb      	str	r3, [r7, #28]
 8006dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ddc:	4641      	mov	r1, r8
 8006dde:	1851      	adds	r1, r2, r1
 8006de0:	6139      	str	r1, [r7, #16]
 8006de2:	4649      	mov	r1, r9
 8006de4:	414b      	adcs	r3, r1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006df4:	4659      	mov	r1, fp
 8006df6:	00cb      	lsls	r3, r1, #3
 8006df8:	4651      	mov	r1, sl
 8006dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfe:	4651      	mov	r1, sl
 8006e00:	00ca      	lsls	r2, r1, #3
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	4642      	mov	r2, r8
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e10:	464b      	mov	r3, r9
 8006e12:	460a      	mov	r2, r1
 8006e14:	eb42 0303 	adc.w	r3, r2, r3
 8006e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e34:	4649      	mov	r1, r9
 8006e36:	008b      	lsls	r3, r1, #2
 8006e38:	4641      	mov	r1, r8
 8006e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e3e:	4641      	mov	r1, r8
 8006e40:	008a      	lsls	r2, r1, #2
 8006e42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e46:	f7f9 ff2f 	bl	8000ca8 <__aeabi_uldivmod>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4b39      	ldr	r3, [pc, #228]	; (8006f34 <UART_SetConfig+0x4e4>)
 8006e50:	fba3 1302 	umull	r1, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	2164      	movs	r1, #100	; 0x64
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	3332      	adds	r3, #50	; 0x32
 8006e62:	4a34      	ldr	r2, [pc, #208]	; (8006f34 <UART_SetConfig+0x4e4>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e6e:	441c      	add	r4, r3
 8006e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e74:	2200      	movs	r2, #0
 8006e76:	673b      	str	r3, [r7, #112]	; 0x70
 8006e78:	677a      	str	r2, [r7, #116]	; 0x74
 8006e7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	1891      	adds	r1, r2, r2
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	415b      	adcs	r3, r3
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e8e:	4641      	mov	r1, r8
 8006e90:	1851      	adds	r1, r2, r1
 8006e92:	6039      	str	r1, [r7, #0]
 8006e94:	4649      	mov	r1, r9
 8006e96:	414b      	adcs	r3, r1
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	00cb      	lsls	r3, r1, #3
 8006eaa:	4651      	mov	r1, sl
 8006eac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	00ca      	lsls	r2, r1, #3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4642      	mov	r2, r8
 8006ebc:	189b      	adds	r3, r3, r2
 8006ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	eb42 0303 	adc.w	r3, r2, r3
 8006ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ed4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	008b      	lsls	r3, r1, #2
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eec:	4641      	mov	r1, r8
 8006eee:	008a      	lsls	r2, r1, #2
 8006ef0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ef4:	f7f9 fed8 	bl	8000ca8 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <UART_SetConfig+0x4e4>)
 8006efe:	fba3 1302 	umull	r1, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	2164      	movs	r1, #100	; 0x64
 8006f06:	fb01 f303 	mul.w	r3, r1, r3
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	3332      	adds	r3, #50	; 0x32
 8006f10:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <UART_SetConfig+0x4e4>)
 8006f12:	fba2 2303 	umull	r2, r3, r2, r3
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4422      	add	r2, r4
 8006f24:	609a      	str	r2, [r3, #8]
}
 8006f26:	bf00      	nop
 8006f28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f32:	bf00      	nop
 8006f34:	51eb851f 	.word	0x51eb851f

08006f38 <__errno>:
 8006f38:	4b01      	ldr	r3, [pc, #4]	; (8006f40 <__errno+0x8>)
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000814 	.word	0x20000814

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	; (8006f7c <__libc_init_array+0x38>)
 8006f48:	4c0d      	ldr	r4, [pc, #52]	; (8006f80 <__libc_init_array+0x3c>)
 8006f4a:	1b64      	subs	r4, r4, r5
 8006f4c:	10a4      	asrs	r4, r4, #2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	; (8006f84 <__libc_init_array+0x40>)
 8006f56:	4c0c      	ldr	r4, [pc, #48]	; (8006f88 <__libc_init_array+0x44>)
 8006f58:	f005 f8e8 	bl	800c12c <_init>
 8006f5c:	1b64      	subs	r4, r4, r5
 8006f5e:	10a4      	asrs	r4, r4, #2
 8006f60:	2600      	movs	r6, #0
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	4798      	blx	r3
 8006f6e:	3601      	adds	r6, #1
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	4798      	blx	r3
 8006f78:	3601      	adds	r6, #1
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	0800c6b4 	.word	0x0800c6b4
 8006f80:	0800c6b4 	.word	0x0800c6b4
 8006f84:	0800c6b4 	.word	0x0800c6b4
 8006f88:	0800c6b8 	.word	0x0800c6b8

08006f8c <memset>:
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d100      	bne.n	8006f96 <memset+0xa>
 8006f94:	4770      	bx	lr
 8006f96:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9a:	e7f9      	b.n	8006f90 <memset+0x4>

08006f9c <__cvt>:
 8006f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	ec55 4b10 	vmov	r4, r5, d0
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	460e      	mov	r6, r1
 8006fa8:	4619      	mov	r1, r3
 8006faa:	462b      	mov	r3, r5
 8006fac:	bfbb      	ittet	lt
 8006fae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fb2:	461d      	movlt	r5, r3
 8006fb4:	2300      	movge	r3, #0
 8006fb6:	232d      	movlt	r3, #45	; 0x2d
 8006fb8:	700b      	strb	r3, [r1, #0]
 8006fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fc0:	4691      	mov	r9, r2
 8006fc2:	f023 0820 	bic.w	r8, r3, #32
 8006fc6:	bfbc      	itt	lt
 8006fc8:	4622      	movlt	r2, r4
 8006fca:	4614      	movlt	r4, r2
 8006fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fd0:	d005      	beq.n	8006fde <__cvt+0x42>
 8006fd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fd6:	d100      	bne.n	8006fda <__cvt+0x3e>
 8006fd8:	3601      	adds	r6, #1
 8006fda:	2102      	movs	r1, #2
 8006fdc:	e000      	b.n	8006fe0 <__cvt+0x44>
 8006fde:	2103      	movs	r1, #3
 8006fe0:	ab03      	add	r3, sp, #12
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	ab02      	add	r3, sp, #8
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	ec45 4b10 	vmov	d0, r4, r5
 8006fec:	4653      	mov	r3, sl
 8006fee:	4632      	mov	r2, r6
 8006ff0:	f001 fe76 	bl	8008ce0 <_dtoa_r>
 8006ff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	d102      	bne.n	8007002 <__cvt+0x66>
 8006ffc:	f019 0f01 	tst.w	r9, #1
 8007000:	d022      	beq.n	8007048 <__cvt+0xac>
 8007002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007006:	eb07 0906 	add.w	r9, r7, r6
 800700a:	d110      	bne.n	800702e <__cvt+0x92>
 800700c:	783b      	ldrb	r3, [r7, #0]
 800700e:	2b30      	cmp	r3, #48	; 0x30
 8007010:	d10a      	bne.n	8007028 <__cvt+0x8c>
 8007012:	2200      	movs	r2, #0
 8007014:	2300      	movs	r3, #0
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f7f9 fd65 	bl	8000ae8 <__aeabi_dcmpeq>
 800701e:	b918      	cbnz	r0, 8007028 <__cvt+0x8c>
 8007020:	f1c6 0601 	rsb	r6, r6, #1
 8007024:	f8ca 6000 	str.w	r6, [sl]
 8007028:	f8da 3000 	ldr.w	r3, [sl]
 800702c:	4499      	add	r9, r3
 800702e:	2200      	movs	r2, #0
 8007030:	2300      	movs	r3, #0
 8007032:	4620      	mov	r0, r4
 8007034:	4629      	mov	r1, r5
 8007036:	f7f9 fd57 	bl	8000ae8 <__aeabi_dcmpeq>
 800703a:	b108      	cbz	r0, 8007040 <__cvt+0xa4>
 800703c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007040:	2230      	movs	r2, #48	; 0x30
 8007042:	9b03      	ldr	r3, [sp, #12]
 8007044:	454b      	cmp	r3, r9
 8007046:	d307      	bcc.n	8007058 <__cvt+0xbc>
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800704c:	1bdb      	subs	r3, r3, r7
 800704e:	4638      	mov	r0, r7
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	b004      	add	sp, #16
 8007054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007058:	1c59      	adds	r1, r3, #1
 800705a:	9103      	str	r1, [sp, #12]
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e7f0      	b.n	8007042 <__cvt+0xa6>

08007060 <__exponent>:
 8007060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007062:	4603      	mov	r3, r0
 8007064:	2900      	cmp	r1, #0
 8007066:	bfb8      	it	lt
 8007068:	4249      	neglt	r1, r1
 800706a:	f803 2b02 	strb.w	r2, [r3], #2
 800706e:	bfb4      	ite	lt
 8007070:	222d      	movlt	r2, #45	; 0x2d
 8007072:	222b      	movge	r2, #43	; 0x2b
 8007074:	2909      	cmp	r1, #9
 8007076:	7042      	strb	r2, [r0, #1]
 8007078:	dd2a      	ble.n	80070d0 <__exponent+0x70>
 800707a:	f10d 0407 	add.w	r4, sp, #7
 800707e:	46a4      	mov	ip, r4
 8007080:	270a      	movs	r7, #10
 8007082:	46a6      	mov	lr, r4
 8007084:	460a      	mov	r2, r1
 8007086:	fb91 f6f7 	sdiv	r6, r1, r7
 800708a:	fb07 1516 	mls	r5, r7, r6, r1
 800708e:	3530      	adds	r5, #48	; 0x30
 8007090:	2a63      	cmp	r2, #99	; 0x63
 8007092:	f104 34ff 	add.w	r4, r4, #4294967295
 8007096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800709a:	4631      	mov	r1, r6
 800709c:	dcf1      	bgt.n	8007082 <__exponent+0x22>
 800709e:	3130      	adds	r1, #48	; 0x30
 80070a0:	f1ae 0502 	sub.w	r5, lr, #2
 80070a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070a8:	1c44      	adds	r4, r0, #1
 80070aa:	4629      	mov	r1, r5
 80070ac:	4561      	cmp	r1, ip
 80070ae:	d30a      	bcc.n	80070c6 <__exponent+0x66>
 80070b0:	f10d 0209 	add.w	r2, sp, #9
 80070b4:	eba2 020e 	sub.w	r2, r2, lr
 80070b8:	4565      	cmp	r5, ip
 80070ba:	bf88      	it	hi
 80070bc:	2200      	movhi	r2, #0
 80070be:	4413      	add	r3, r2
 80070c0:	1a18      	subs	r0, r3, r0
 80070c2:	b003      	add	sp, #12
 80070c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070ce:	e7ed      	b.n	80070ac <__exponent+0x4c>
 80070d0:	2330      	movs	r3, #48	; 0x30
 80070d2:	3130      	adds	r1, #48	; 0x30
 80070d4:	7083      	strb	r3, [r0, #2]
 80070d6:	70c1      	strb	r1, [r0, #3]
 80070d8:	1d03      	adds	r3, r0, #4
 80070da:	e7f1      	b.n	80070c0 <__exponent+0x60>

080070dc <_printf_float>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	ed2d 8b02 	vpush	{d8}
 80070e4:	b08d      	sub	sp, #52	; 0x34
 80070e6:	460c      	mov	r4, r1
 80070e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070ec:	4616      	mov	r6, r2
 80070ee:	461f      	mov	r7, r3
 80070f0:	4605      	mov	r5, r0
 80070f2:	f002 ff53 	bl	8009f9c <_localeconv_r>
 80070f6:	f8d0 a000 	ldr.w	sl, [r0]
 80070fa:	4650      	mov	r0, sl
 80070fc:	f7f9 f878 	bl	80001f0 <strlen>
 8007100:	2300      	movs	r3, #0
 8007102:	930a      	str	r3, [sp, #40]	; 0x28
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	f8d8 3000 	ldr.w	r3, [r8]
 800710c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007110:	3307      	adds	r3, #7
 8007112:	f023 0307 	bic.w	r3, r3, #7
 8007116:	f103 0208 	add.w	r2, r3, #8
 800711a:	f8c8 2000 	str.w	r2, [r8]
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800712a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	f8cd 8018 	str.w	r8, [sp, #24]
 8007134:	ee08 0a10 	vmov	s16, r0
 8007138:	4b9f      	ldr	r3, [pc, #636]	; (80073b8 <_printf_float+0x2dc>)
 800713a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800713e:	f04f 32ff 	mov.w	r2, #4294967295
 8007142:	f7f9 fd03 	bl	8000b4c <__aeabi_dcmpun>
 8007146:	bb88      	cbnz	r0, 80071ac <_printf_float+0xd0>
 8007148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800714c:	4b9a      	ldr	r3, [pc, #616]	; (80073b8 <_printf_float+0x2dc>)
 800714e:	f04f 32ff 	mov.w	r2, #4294967295
 8007152:	f7f9 fcdd 	bl	8000b10 <__aeabi_dcmple>
 8007156:	bb48      	cbnz	r0, 80071ac <_printf_float+0xd0>
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	4640      	mov	r0, r8
 800715e:	4649      	mov	r1, r9
 8007160:	f7f9 fccc 	bl	8000afc <__aeabi_dcmplt>
 8007164:	b110      	cbz	r0, 800716c <_printf_float+0x90>
 8007166:	232d      	movs	r3, #45	; 0x2d
 8007168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800716c:	4b93      	ldr	r3, [pc, #588]	; (80073bc <_printf_float+0x2e0>)
 800716e:	4894      	ldr	r0, [pc, #592]	; (80073c0 <_printf_float+0x2e4>)
 8007170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007174:	bf94      	ite	ls
 8007176:	4698      	movls	r8, r3
 8007178:	4680      	movhi	r8, r0
 800717a:	2303      	movs	r3, #3
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	9b05      	ldr	r3, [sp, #20]
 8007180:	f023 0204 	bic.w	r2, r3, #4
 8007184:	6022      	str	r2, [r4, #0]
 8007186:	f04f 0900 	mov.w	r9, #0
 800718a:	9700      	str	r7, [sp, #0]
 800718c:	4633      	mov	r3, r6
 800718e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007190:	4621      	mov	r1, r4
 8007192:	4628      	mov	r0, r5
 8007194:	f000 f9d8 	bl	8007548 <_printf_common>
 8007198:	3001      	adds	r0, #1
 800719a:	f040 8090 	bne.w	80072be <_printf_float+0x1e2>
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	b00d      	add	sp, #52	; 0x34
 80071a4:	ecbd 8b02 	vpop	{d8}
 80071a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ac:	4642      	mov	r2, r8
 80071ae:	464b      	mov	r3, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 fcca 	bl	8000b4c <__aeabi_dcmpun>
 80071b8:	b140      	cbz	r0, 80071cc <_printf_float+0xf0>
 80071ba:	464b      	mov	r3, r9
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfbc      	itt	lt
 80071c0:	232d      	movlt	r3, #45	; 0x2d
 80071c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071c6:	487f      	ldr	r0, [pc, #508]	; (80073c4 <_printf_float+0x2e8>)
 80071c8:	4b7f      	ldr	r3, [pc, #508]	; (80073c8 <_printf_float+0x2ec>)
 80071ca:	e7d1      	b.n	8007170 <_printf_float+0x94>
 80071cc:	6863      	ldr	r3, [r4, #4]
 80071ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071d2:	9206      	str	r2, [sp, #24]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	d13f      	bne.n	8007258 <_printf_float+0x17c>
 80071d8:	2306      	movs	r3, #6
 80071da:	6063      	str	r3, [r4, #4]
 80071dc:	9b05      	ldr	r3, [sp, #20]
 80071de:	6861      	ldr	r1, [r4, #4]
 80071e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071e4:	2300      	movs	r3, #0
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	ab0a      	add	r3, sp, #40	; 0x28
 80071ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071ee:	ab09      	add	r3, sp, #36	; 0x24
 80071f0:	ec49 8b10 	vmov	d0, r8, r9
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071fc:	4628      	mov	r0, r5
 80071fe:	f7ff fecd 	bl	8006f9c <__cvt>
 8007202:	9b06      	ldr	r3, [sp, #24]
 8007204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007206:	2b47      	cmp	r3, #71	; 0x47
 8007208:	4680      	mov	r8, r0
 800720a:	d108      	bne.n	800721e <_printf_float+0x142>
 800720c:	1cc8      	adds	r0, r1, #3
 800720e:	db02      	blt.n	8007216 <_printf_float+0x13a>
 8007210:	6863      	ldr	r3, [r4, #4]
 8007212:	4299      	cmp	r1, r3
 8007214:	dd41      	ble.n	800729a <_printf_float+0x1be>
 8007216:	f1ab 0b02 	sub.w	fp, fp, #2
 800721a:	fa5f fb8b 	uxtb.w	fp, fp
 800721e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007222:	d820      	bhi.n	8007266 <_printf_float+0x18a>
 8007224:	3901      	subs	r1, #1
 8007226:	465a      	mov	r2, fp
 8007228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800722c:	9109      	str	r1, [sp, #36]	; 0x24
 800722e:	f7ff ff17 	bl	8007060 <__exponent>
 8007232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007234:	1813      	adds	r3, r2, r0
 8007236:	2a01      	cmp	r2, #1
 8007238:	4681      	mov	r9, r0
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	dc02      	bgt.n	8007244 <_printf_float+0x168>
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	07d2      	lsls	r2, r2, #31
 8007242:	d501      	bpl.n	8007248 <_printf_float+0x16c>
 8007244:	3301      	adds	r3, #1
 8007246:	6123      	str	r3, [r4, #16]
 8007248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800724c:	2b00      	cmp	r3, #0
 800724e:	d09c      	beq.n	800718a <_printf_float+0xae>
 8007250:	232d      	movs	r3, #45	; 0x2d
 8007252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007256:	e798      	b.n	800718a <_printf_float+0xae>
 8007258:	9a06      	ldr	r2, [sp, #24]
 800725a:	2a47      	cmp	r2, #71	; 0x47
 800725c:	d1be      	bne.n	80071dc <_printf_float+0x100>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1bc      	bne.n	80071dc <_printf_float+0x100>
 8007262:	2301      	movs	r3, #1
 8007264:	e7b9      	b.n	80071da <_printf_float+0xfe>
 8007266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800726a:	d118      	bne.n	800729e <_printf_float+0x1c2>
 800726c:	2900      	cmp	r1, #0
 800726e:	6863      	ldr	r3, [r4, #4]
 8007270:	dd0b      	ble.n	800728a <_printf_float+0x1ae>
 8007272:	6121      	str	r1, [r4, #16]
 8007274:	b913      	cbnz	r3, 800727c <_printf_float+0x1a0>
 8007276:	6822      	ldr	r2, [r4, #0]
 8007278:	07d0      	lsls	r0, r2, #31
 800727a:	d502      	bpl.n	8007282 <_printf_float+0x1a6>
 800727c:	3301      	adds	r3, #1
 800727e:	440b      	add	r3, r1
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	65a1      	str	r1, [r4, #88]	; 0x58
 8007284:	f04f 0900 	mov.w	r9, #0
 8007288:	e7de      	b.n	8007248 <_printf_float+0x16c>
 800728a:	b913      	cbnz	r3, 8007292 <_printf_float+0x1b6>
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	07d2      	lsls	r2, r2, #31
 8007290:	d501      	bpl.n	8007296 <_printf_float+0x1ba>
 8007292:	3302      	adds	r3, #2
 8007294:	e7f4      	b.n	8007280 <_printf_float+0x1a4>
 8007296:	2301      	movs	r3, #1
 8007298:	e7f2      	b.n	8007280 <_printf_float+0x1a4>
 800729a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a0:	4299      	cmp	r1, r3
 80072a2:	db05      	blt.n	80072b0 <_printf_float+0x1d4>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	6121      	str	r1, [r4, #16]
 80072a8:	07d8      	lsls	r0, r3, #31
 80072aa:	d5ea      	bpl.n	8007282 <_printf_float+0x1a6>
 80072ac:	1c4b      	adds	r3, r1, #1
 80072ae:	e7e7      	b.n	8007280 <_printf_float+0x1a4>
 80072b0:	2900      	cmp	r1, #0
 80072b2:	bfd4      	ite	le
 80072b4:	f1c1 0202 	rsble	r2, r1, #2
 80072b8:	2201      	movgt	r2, #1
 80072ba:	4413      	add	r3, r2
 80072bc:	e7e0      	b.n	8007280 <_printf_float+0x1a4>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	055a      	lsls	r2, r3, #21
 80072c2:	d407      	bmi.n	80072d4 <_printf_float+0x1f8>
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	4642      	mov	r2, r8
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	d12c      	bne.n	800732c <_printf_float+0x250>
 80072d2:	e764      	b.n	800719e <_printf_float+0xc2>
 80072d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072d8:	f240 80e0 	bls.w	800749c <_printf_float+0x3c0>
 80072dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	f7f9 fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d034      	beq.n	8007356 <_printf_float+0x27a>
 80072ec:	4a37      	ldr	r2, [pc, #220]	; (80073cc <_printf_float+0x2f0>)
 80072ee:	2301      	movs	r3, #1
 80072f0:	4631      	mov	r1, r6
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b8      	blx	r7
 80072f6:	3001      	adds	r0, #1
 80072f8:	f43f af51 	beq.w	800719e <_printf_float+0xc2>
 80072fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007300:	429a      	cmp	r2, r3
 8007302:	db02      	blt.n	800730a <_printf_float+0x22e>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	07d8      	lsls	r0, r3, #31
 8007308:	d510      	bpl.n	800732c <_printf_float+0x250>
 800730a:	ee18 3a10 	vmov	r3, s16
 800730e:	4652      	mov	r2, sl
 8007310:	4631      	mov	r1, r6
 8007312:	4628      	mov	r0, r5
 8007314:	47b8      	blx	r7
 8007316:	3001      	adds	r0, #1
 8007318:	f43f af41 	beq.w	800719e <_printf_float+0xc2>
 800731c:	f04f 0800 	mov.w	r8, #0
 8007320:	f104 091a 	add.w	r9, r4, #26
 8007324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007326:	3b01      	subs	r3, #1
 8007328:	4543      	cmp	r3, r8
 800732a:	dc09      	bgt.n	8007340 <_printf_float+0x264>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	079b      	lsls	r3, r3, #30
 8007330:	f100 8105 	bmi.w	800753e <_printf_float+0x462>
 8007334:	68e0      	ldr	r0, [r4, #12]
 8007336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007338:	4298      	cmp	r0, r3
 800733a:	bfb8      	it	lt
 800733c:	4618      	movlt	r0, r3
 800733e:	e730      	b.n	80071a2 <_printf_float+0xc6>
 8007340:	2301      	movs	r3, #1
 8007342:	464a      	mov	r2, r9
 8007344:	4631      	mov	r1, r6
 8007346:	4628      	mov	r0, r5
 8007348:	47b8      	blx	r7
 800734a:	3001      	adds	r0, #1
 800734c:	f43f af27 	beq.w	800719e <_printf_float+0xc2>
 8007350:	f108 0801 	add.w	r8, r8, #1
 8007354:	e7e6      	b.n	8007324 <_printf_float+0x248>
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	dc39      	bgt.n	80073d0 <_printf_float+0x2f4>
 800735c:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <_printf_float+0x2f0>)
 800735e:	2301      	movs	r3, #1
 8007360:	4631      	mov	r1, r6
 8007362:	4628      	mov	r0, r5
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	f43f af19 	beq.w	800719e <_printf_float+0xc2>
 800736c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007370:	4313      	orrs	r3, r2
 8007372:	d102      	bne.n	800737a <_printf_float+0x29e>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	07d9      	lsls	r1, r3, #31
 8007378:	d5d8      	bpl.n	800732c <_printf_float+0x250>
 800737a:	ee18 3a10 	vmov	r3, s16
 800737e:	4652      	mov	r2, sl
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	f43f af09 	beq.w	800719e <_printf_float+0xc2>
 800738c:	f04f 0900 	mov.w	r9, #0
 8007390:	f104 0a1a 	add.w	sl, r4, #26
 8007394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007396:	425b      	negs	r3, r3
 8007398:	454b      	cmp	r3, r9
 800739a:	dc01      	bgt.n	80073a0 <_printf_float+0x2c4>
 800739c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800739e:	e792      	b.n	80072c6 <_printf_float+0x1ea>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4652      	mov	r2, sl
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b8      	blx	r7
 80073aa:	3001      	adds	r0, #1
 80073ac:	f43f aef7 	beq.w	800719e <_printf_float+0xc2>
 80073b0:	f109 0901 	add.w	r9, r9, #1
 80073b4:	e7ee      	b.n	8007394 <_printf_float+0x2b8>
 80073b6:	bf00      	nop
 80073b8:	7fefffff 	.word	0x7fefffff
 80073bc:	0800c1f4 	.word	0x0800c1f4
 80073c0:	0800c1f8 	.word	0x0800c1f8
 80073c4:	0800c200 	.word	0x0800c200
 80073c8:	0800c1fc 	.word	0x0800c1fc
 80073cc:	0800c5f9 	.word	0x0800c5f9
 80073d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073d4:	429a      	cmp	r2, r3
 80073d6:	bfa8      	it	ge
 80073d8:	461a      	movge	r2, r3
 80073da:	2a00      	cmp	r2, #0
 80073dc:	4691      	mov	r9, r2
 80073de:	dc37      	bgt.n	8007450 <_printf_float+0x374>
 80073e0:	f04f 0b00 	mov.w	fp, #0
 80073e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073e8:	f104 021a 	add.w	r2, r4, #26
 80073ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ee:	9305      	str	r3, [sp, #20]
 80073f0:	eba3 0309 	sub.w	r3, r3, r9
 80073f4:	455b      	cmp	r3, fp
 80073f6:	dc33      	bgt.n	8007460 <_printf_float+0x384>
 80073f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073fc:	429a      	cmp	r2, r3
 80073fe:	db3b      	blt.n	8007478 <_printf_float+0x39c>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	07da      	lsls	r2, r3, #31
 8007404:	d438      	bmi.n	8007478 <_printf_float+0x39c>
 8007406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007408:	9a05      	ldr	r2, [sp, #20]
 800740a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800740c:	1a9a      	subs	r2, r3, r2
 800740e:	eba3 0901 	sub.w	r9, r3, r1
 8007412:	4591      	cmp	r9, r2
 8007414:	bfa8      	it	ge
 8007416:	4691      	movge	r9, r2
 8007418:	f1b9 0f00 	cmp.w	r9, #0
 800741c:	dc35      	bgt.n	800748a <_printf_float+0x3ae>
 800741e:	f04f 0800 	mov.w	r8, #0
 8007422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007426:	f104 0a1a 	add.w	sl, r4, #26
 800742a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800742e:	1a9b      	subs	r3, r3, r2
 8007430:	eba3 0309 	sub.w	r3, r3, r9
 8007434:	4543      	cmp	r3, r8
 8007436:	f77f af79 	ble.w	800732c <_printf_float+0x250>
 800743a:	2301      	movs	r3, #1
 800743c:	4652      	mov	r2, sl
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f aeaa 	beq.w	800719e <_printf_float+0xc2>
 800744a:	f108 0801 	add.w	r8, r8, #1
 800744e:	e7ec      	b.n	800742a <_printf_float+0x34e>
 8007450:	4613      	mov	r3, r2
 8007452:	4631      	mov	r1, r6
 8007454:	4642      	mov	r2, r8
 8007456:	4628      	mov	r0, r5
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	d1c0      	bne.n	80073e0 <_printf_float+0x304>
 800745e:	e69e      	b.n	800719e <_printf_float+0xc2>
 8007460:	2301      	movs	r3, #1
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	9205      	str	r2, [sp, #20]
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	f43f ae97 	beq.w	800719e <_printf_float+0xc2>
 8007470:	9a05      	ldr	r2, [sp, #20]
 8007472:	f10b 0b01 	add.w	fp, fp, #1
 8007476:	e7b9      	b.n	80073ec <_printf_float+0x310>
 8007478:	ee18 3a10 	vmov	r3, s16
 800747c:	4652      	mov	r2, sl
 800747e:	4631      	mov	r1, r6
 8007480:	4628      	mov	r0, r5
 8007482:	47b8      	blx	r7
 8007484:	3001      	adds	r0, #1
 8007486:	d1be      	bne.n	8007406 <_printf_float+0x32a>
 8007488:	e689      	b.n	800719e <_printf_float+0xc2>
 800748a:	9a05      	ldr	r2, [sp, #20]
 800748c:	464b      	mov	r3, r9
 800748e:	4442      	add	r2, r8
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	d1c1      	bne.n	800741e <_printf_float+0x342>
 800749a:	e680      	b.n	800719e <_printf_float+0xc2>
 800749c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800749e:	2a01      	cmp	r2, #1
 80074a0:	dc01      	bgt.n	80074a6 <_printf_float+0x3ca>
 80074a2:	07db      	lsls	r3, r3, #31
 80074a4:	d538      	bpl.n	8007518 <_printf_float+0x43c>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4642      	mov	r2, r8
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	f43f ae74 	beq.w	800719e <_printf_float+0xc2>
 80074b6:	ee18 3a10 	vmov	r3, s16
 80074ba:	4652      	mov	r2, sl
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	47b8      	blx	r7
 80074c2:	3001      	adds	r0, #1
 80074c4:	f43f ae6b 	beq.w	800719e <_printf_float+0xc2>
 80074c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074cc:	2200      	movs	r2, #0
 80074ce:	2300      	movs	r3, #0
 80074d0:	f7f9 fb0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80074d4:	b9d8      	cbnz	r0, 800750e <_printf_float+0x432>
 80074d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d8:	f108 0201 	add.w	r2, r8, #1
 80074dc:	3b01      	subs	r3, #1
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	d10e      	bne.n	8007506 <_printf_float+0x42a>
 80074e8:	e659      	b.n	800719e <_printf_float+0xc2>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4652      	mov	r2, sl
 80074ee:	4631      	mov	r1, r6
 80074f0:	4628      	mov	r0, r5
 80074f2:	47b8      	blx	r7
 80074f4:	3001      	adds	r0, #1
 80074f6:	f43f ae52 	beq.w	800719e <_printf_float+0xc2>
 80074fa:	f108 0801 	add.w	r8, r8, #1
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	3b01      	subs	r3, #1
 8007502:	4543      	cmp	r3, r8
 8007504:	dcf1      	bgt.n	80074ea <_printf_float+0x40e>
 8007506:	464b      	mov	r3, r9
 8007508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800750c:	e6dc      	b.n	80072c8 <_printf_float+0x1ec>
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	f104 0a1a 	add.w	sl, r4, #26
 8007516:	e7f2      	b.n	80074fe <_printf_float+0x422>
 8007518:	2301      	movs	r3, #1
 800751a:	4642      	mov	r2, r8
 800751c:	e7df      	b.n	80074de <_printf_float+0x402>
 800751e:	2301      	movs	r3, #1
 8007520:	464a      	mov	r2, r9
 8007522:	4631      	mov	r1, r6
 8007524:	4628      	mov	r0, r5
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	f43f ae38 	beq.w	800719e <_printf_float+0xc2>
 800752e:	f108 0801 	add.w	r8, r8, #1
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007536:	1a5b      	subs	r3, r3, r1
 8007538:	4543      	cmp	r3, r8
 800753a:	dcf0      	bgt.n	800751e <_printf_float+0x442>
 800753c:	e6fa      	b.n	8007334 <_printf_float+0x258>
 800753e:	f04f 0800 	mov.w	r8, #0
 8007542:	f104 0919 	add.w	r9, r4, #25
 8007546:	e7f4      	b.n	8007532 <_printf_float+0x456>

08007548 <_printf_common>:
 8007548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800754c:	4616      	mov	r6, r2
 800754e:	4699      	mov	r9, r3
 8007550:	688a      	ldr	r2, [r1, #8]
 8007552:	690b      	ldr	r3, [r1, #16]
 8007554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007558:	4293      	cmp	r3, r2
 800755a:	bfb8      	it	lt
 800755c:	4613      	movlt	r3, r2
 800755e:	6033      	str	r3, [r6, #0]
 8007560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007564:	4607      	mov	r7, r0
 8007566:	460c      	mov	r4, r1
 8007568:	b10a      	cbz	r2, 800756e <_printf_common+0x26>
 800756a:	3301      	adds	r3, #1
 800756c:	6033      	str	r3, [r6, #0]
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	0699      	lsls	r1, r3, #26
 8007572:	bf42      	ittt	mi
 8007574:	6833      	ldrmi	r3, [r6, #0]
 8007576:	3302      	addmi	r3, #2
 8007578:	6033      	strmi	r3, [r6, #0]
 800757a:	6825      	ldr	r5, [r4, #0]
 800757c:	f015 0506 	ands.w	r5, r5, #6
 8007580:	d106      	bne.n	8007590 <_printf_common+0x48>
 8007582:	f104 0a19 	add.w	sl, r4, #25
 8007586:	68e3      	ldr	r3, [r4, #12]
 8007588:	6832      	ldr	r2, [r6, #0]
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	42ab      	cmp	r3, r5
 800758e:	dc26      	bgt.n	80075de <_printf_common+0x96>
 8007590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007594:	1e13      	subs	r3, r2, #0
 8007596:	6822      	ldr	r2, [r4, #0]
 8007598:	bf18      	it	ne
 800759a:	2301      	movne	r3, #1
 800759c:	0692      	lsls	r2, r2, #26
 800759e:	d42b      	bmi.n	80075f8 <_printf_common+0xb0>
 80075a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a4:	4649      	mov	r1, r9
 80075a6:	4638      	mov	r0, r7
 80075a8:	47c0      	blx	r8
 80075aa:	3001      	adds	r0, #1
 80075ac:	d01e      	beq.n	80075ec <_printf_common+0xa4>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	68e5      	ldr	r5, [r4, #12]
 80075b2:	6832      	ldr	r2, [r6, #0]
 80075b4:	f003 0306 	and.w	r3, r3, #6
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	bf08      	it	eq
 80075bc:	1aad      	subeq	r5, r5, r2
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	6922      	ldr	r2, [r4, #16]
 80075c2:	bf0c      	ite	eq
 80075c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c8:	2500      	movne	r5, #0
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bfc4      	itt	gt
 80075ce:	1a9b      	subgt	r3, r3, r2
 80075d0:	18ed      	addgt	r5, r5, r3
 80075d2:	2600      	movs	r6, #0
 80075d4:	341a      	adds	r4, #26
 80075d6:	42b5      	cmp	r5, r6
 80075d8:	d11a      	bne.n	8007610 <_printf_common+0xc8>
 80075da:	2000      	movs	r0, #0
 80075dc:	e008      	b.n	80075f0 <_printf_common+0xa8>
 80075de:	2301      	movs	r3, #1
 80075e0:	4652      	mov	r2, sl
 80075e2:	4649      	mov	r1, r9
 80075e4:	4638      	mov	r0, r7
 80075e6:	47c0      	blx	r8
 80075e8:	3001      	adds	r0, #1
 80075ea:	d103      	bne.n	80075f4 <_printf_common+0xac>
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f4:	3501      	adds	r5, #1
 80075f6:	e7c6      	b.n	8007586 <_printf_common+0x3e>
 80075f8:	18e1      	adds	r1, r4, r3
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	2030      	movs	r0, #48	; 0x30
 80075fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007602:	4422      	add	r2, r4
 8007604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800760c:	3302      	adds	r3, #2
 800760e:	e7c7      	b.n	80075a0 <_printf_common+0x58>
 8007610:	2301      	movs	r3, #1
 8007612:	4622      	mov	r2, r4
 8007614:	4649      	mov	r1, r9
 8007616:	4638      	mov	r0, r7
 8007618:	47c0      	blx	r8
 800761a:	3001      	adds	r0, #1
 800761c:	d0e6      	beq.n	80075ec <_printf_common+0xa4>
 800761e:	3601      	adds	r6, #1
 8007620:	e7d9      	b.n	80075d6 <_printf_common+0x8e>
	...

08007624 <_printf_i>:
 8007624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	7e0f      	ldrb	r7, [r1, #24]
 800762a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800762c:	2f78      	cmp	r7, #120	; 0x78
 800762e:	4691      	mov	r9, r2
 8007630:	4680      	mov	r8, r0
 8007632:	460c      	mov	r4, r1
 8007634:	469a      	mov	sl, r3
 8007636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800763a:	d807      	bhi.n	800764c <_printf_i+0x28>
 800763c:	2f62      	cmp	r7, #98	; 0x62
 800763e:	d80a      	bhi.n	8007656 <_printf_i+0x32>
 8007640:	2f00      	cmp	r7, #0
 8007642:	f000 80d8 	beq.w	80077f6 <_printf_i+0x1d2>
 8007646:	2f58      	cmp	r7, #88	; 0x58
 8007648:	f000 80a3 	beq.w	8007792 <_printf_i+0x16e>
 800764c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007654:	e03a      	b.n	80076cc <_printf_i+0xa8>
 8007656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800765a:	2b15      	cmp	r3, #21
 800765c:	d8f6      	bhi.n	800764c <_printf_i+0x28>
 800765e:	a101      	add	r1, pc, #4	; (adr r1, 8007664 <_printf_i+0x40>)
 8007660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007664:	080076bd 	.word	0x080076bd
 8007668:	080076d1 	.word	0x080076d1
 800766c:	0800764d 	.word	0x0800764d
 8007670:	0800764d 	.word	0x0800764d
 8007674:	0800764d 	.word	0x0800764d
 8007678:	0800764d 	.word	0x0800764d
 800767c:	080076d1 	.word	0x080076d1
 8007680:	0800764d 	.word	0x0800764d
 8007684:	0800764d 	.word	0x0800764d
 8007688:	0800764d 	.word	0x0800764d
 800768c:	0800764d 	.word	0x0800764d
 8007690:	080077dd 	.word	0x080077dd
 8007694:	08007701 	.word	0x08007701
 8007698:	080077bf 	.word	0x080077bf
 800769c:	0800764d 	.word	0x0800764d
 80076a0:	0800764d 	.word	0x0800764d
 80076a4:	080077ff 	.word	0x080077ff
 80076a8:	0800764d 	.word	0x0800764d
 80076ac:	08007701 	.word	0x08007701
 80076b0:	0800764d 	.word	0x0800764d
 80076b4:	0800764d 	.word	0x0800764d
 80076b8:	080077c7 	.word	0x080077c7
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	1d1a      	adds	r2, r3, #4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	602a      	str	r2, [r5, #0]
 80076c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076cc:	2301      	movs	r3, #1
 80076ce:	e0a3      	b.n	8007818 <_printf_i+0x1f4>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	6829      	ldr	r1, [r5, #0]
 80076d4:	0606      	lsls	r6, r0, #24
 80076d6:	f101 0304 	add.w	r3, r1, #4
 80076da:	d50a      	bpl.n	80076f2 <_printf_i+0xce>
 80076dc:	680e      	ldr	r6, [r1, #0]
 80076de:	602b      	str	r3, [r5, #0]
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	da03      	bge.n	80076ec <_printf_i+0xc8>
 80076e4:	232d      	movs	r3, #45	; 0x2d
 80076e6:	4276      	negs	r6, r6
 80076e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ec:	485e      	ldr	r0, [pc, #376]	; (8007868 <_printf_i+0x244>)
 80076ee:	230a      	movs	r3, #10
 80076f0:	e019      	b.n	8007726 <_printf_i+0x102>
 80076f2:	680e      	ldr	r6, [r1, #0]
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076fa:	bf18      	it	ne
 80076fc:	b236      	sxthne	r6, r6
 80076fe:	e7ef      	b.n	80076e0 <_printf_i+0xbc>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	6029      	str	r1, [r5, #0]
 8007708:	0601      	lsls	r1, r0, #24
 800770a:	d501      	bpl.n	8007710 <_printf_i+0xec>
 800770c:	681e      	ldr	r6, [r3, #0]
 800770e:	e002      	b.n	8007716 <_printf_i+0xf2>
 8007710:	0646      	lsls	r6, r0, #25
 8007712:	d5fb      	bpl.n	800770c <_printf_i+0xe8>
 8007714:	881e      	ldrh	r6, [r3, #0]
 8007716:	4854      	ldr	r0, [pc, #336]	; (8007868 <_printf_i+0x244>)
 8007718:	2f6f      	cmp	r7, #111	; 0x6f
 800771a:	bf0c      	ite	eq
 800771c:	2308      	moveq	r3, #8
 800771e:	230a      	movne	r3, #10
 8007720:	2100      	movs	r1, #0
 8007722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007726:	6865      	ldr	r5, [r4, #4]
 8007728:	60a5      	str	r5, [r4, #8]
 800772a:	2d00      	cmp	r5, #0
 800772c:	bfa2      	ittt	ge
 800772e:	6821      	ldrge	r1, [r4, #0]
 8007730:	f021 0104 	bicge.w	r1, r1, #4
 8007734:	6021      	strge	r1, [r4, #0]
 8007736:	b90e      	cbnz	r6, 800773c <_printf_i+0x118>
 8007738:	2d00      	cmp	r5, #0
 800773a:	d04d      	beq.n	80077d8 <_printf_i+0x1b4>
 800773c:	4615      	mov	r5, r2
 800773e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007742:	fb03 6711 	mls	r7, r3, r1, r6
 8007746:	5dc7      	ldrb	r7, [r0, r7]
 8007748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800774c:	4637      	mov	r7, r6
 800774e:	42bb      	cmp	r3, r7
 8007750:	460e      	mov	r6, r1
 8007752:	d9f4      	bls.n	800773e <_printf_i+0x11a>
 8007754:	2b08      	cmp	r3, #8
 8007756:	d10b      	bne.n	8007770 <_printf_i+0x14c>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	07de      	lsls	r6, r3, #31
 800775c:	d508      	bpl.n	8007770 <_printf_i+0x14c>
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	6861      	ldr	r1, [r4, #4]
 8007762:	4299      	cmp	r1, r3
 8007764:	bfde      	ittt	le
 8007766:	2330      	movle	r3, #48	; 0x30
 8007768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800776c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007770:	1b52      	subs	r2, r2, r5
 8007772:	6122      	str	r2, [r4, #16]
 8007774:	f8cd a000 	str.w	sl, [sp]
 8007778:	464b      	mov	r3, r9
 800777a:	aa03      	add	r2, sp, #12
 800777c:	4621      	mov	r1, r4
 800777e:	4640      	mov	r0, r8
 8007780:	f7ff fee2 	bl	8007548 <_printf_common>
 8007784:	3001      	adds	r0, #1
 8007786:	d14c      	bne.n	8007822 <_printf_i+0x1fe>
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	b004      	add	sp, #16
 800778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007792:	4835      	ldr	r0, [pc, #212]	; (8007868 <_printf_i+0x244>)
 8007794:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007798:	6829      	ldr	r1, [r5, #0]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	f851 6b04 	ldr.w	r6, [r1], #4
 80077a0:	6029      	str	r1, [r5, #0]
 80077a2:	061d      	lsls	r5, r3, #24
 80077a4:	d514      	bpl.n	80077d0 <_printf_i+0x1ac>
 80077a6:	07df      	lsls	r7, r3, #31
 80077a8:	bf44      	itt	mi
 80077aa:	f043 0320 	orrmi.w	r3, r3, #32
 80077ae:	6023      	strmi	r3, [r4, #0]
 80077b0:	b91e      	cbnz	r6, 80077ba <_printf_i+0x196>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	f023 0320 	bic.w	r3, r3, #32
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	2310      	movs	r3, #16
 80077bc:	e7b0      	b.n	8007720 <_printf_i+0xfc>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	f043 0320 	orr.w	r3, r3, #32
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	2378      	movs	r3, #120	; 0x78
 80077c8:	4828      	ldr	r0, [pc, #160]	; (800786c <_printf_i+0x248>)
 80077ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ce:	e7e3      	b.n	8007798 <_printf_i+0x174>
 80077d0:	0659      	lsls	r1, r3, #25
 80077d2:	bf48      	it	mi
 80077d4:	b2b6      	uxthmi	r6, r6
 80077d6:	e7e6      	b.n	80077a6 <_printf_i+0x182>
 80077d8:	4615      	mov	r5, r2
 80077da:	e7bb      	b.n	8007754 <_printf_i+0x130>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	6826      	ldr	r6, [r4, #0]
 80077e0:	6961      	ldr	r1, [r4, #20]
 80077e2:	1d18      	adds	r0, r3, #4
 80077e4:	6028      	str	r0, [r5, #0]
 80077e6:	0635      	lsls	r5, r6, #24
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	d501      	bpl.n	80077f0 <_printf_i+0x1cc>
 80077ec:	6019      	str	r1, [r3, #0]
 80077ee:	e002      	b.n	80077f6 <_printf_i+0x1d2>
 80077f0:	0670      	lsls	r0, r6, #25
 80077f2:	d5fb      	bpl.n	80077ec <_printf_i+0x1c8>
 80077f4:	8019      	strh	r1, [r3, #0]
 80077f6:	2300      	movs	r3, #0
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	4615      	mov	r5, r2
 80077fc:	e7ba      	b.n	8007774 <_printf_i+0x150>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	1d1a      	adds	r2, r3, #4
 8007802:	602a      	str	r2, [r5, #0]
 8007804:	681d      	ldr	r5, [r3, #0]
 8007806:	6862      	ldr	r2, [r4, #4]
 8007808:	2100      	movs	r1, #0
 800780a:	4628      	mov	r0, r5
 800780c:	f7f8 fcf8 	bl	8000200 <memchr>
 8007810:	b108      	cbz	r0, 8007816 <_printf_i+0x1f2>
 8007812:	1b40      	subs	r0, r0, r5
 8007814:	6060      	str	r0, [r4, #4]
 8007816:	6863      	ldr	r3, [r4, #4]
 8007818:	6123      	str	r3, [r4, #16]
 800781a:	2300      	movs	r3, #0
 800781c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007820:	e7a8      	b.n	8007774 <_printf_i+0x150>
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	462a      	mov	r2, r5
 8007826:	4649      	mov	r1, r9
 8007828:	4640      	mov	r0, r8
 800782a:	47d0      	blx	sl
 800782c:	3001      	adds	r0, #1
 800782e:	d0ab      	beq.n	8007788 <_printf_i+0x164>
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	079b      	lsls	r3, r3, #30
 8007834:	d413      	bmi.n	800785e <_printf_i+0x23a>
 8007836:	68e0      	ldr	r0, [r4, #12]
 8007838:	9b03      	ldr	r3, [sp, #12]
 800783a:	4298      	cmp	r0, r3
 800783c:	bfb8      	it	lt
 800783e:	4618      	movlt	r0, r3
 8007840:	e7a4      	b.n	800778c <_printf_i+0x168>
 8007842:	2301      	movs	r3, #1
 8007844:	4632      	mov	r2, r6
 8007846:	4649      	mov	r1, r9
 8007848:	4640      	mov	r0, r8
 800784a:	47d0      	blx	sl
 800784c:	3001      	adds	r0, #1
 800784e:	d09b      	beq.n	8007788 <_printf_i+0x164>
 8007850:	3501      	adds	r5, #1
 8007852:	68e3      	ldr	r3, [r4, #12]
 8007854:	9903      	ldr	r1, [sp, #12]
 8007856:	1a5b      	subs	r3, r3, r1
 8007858:	42ab      	cmp	r3, r5
 800785a:	dcf2      	bgt.n	8007842 <_printf_i+0x21e>
 800785c:	e7eb      	b.n	8007836 <_printf_i+0x212>
 800785e:	2500      	movs	r5, #0
 8007860:	f104 0619 	add.w	r6, r4, #25
 8007864:	e7f5      	b.n	8007852 <_printf_i+0x22e>
 8007866:	bf00      	nop
 8007868:	0800c204 	.word	0x0800c204
 800786c:	0800c215 	.word	0x0800c215

08007870 <_scanf_float>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	b087      	sub	sp, #28
 8007876:	4617      	mov	r7, r2
 8007878:	9303      	str	r3, [sp, #12]
 800787a:	688b      	ldr	r3, [r1, #8]
 800787c:	1e5a      	subs	r2, r3, #1
 800787e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007882:	bf83      	ittte	hi
 8007884:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007888:	195b      	addhi	r3, r3, r5
 800788a:	9302      	strhi	r3, [sp, #8]
 800788c:	2300      	movls	r3, #0
 800788e:	bf86      	itte	hi
 8007890:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007894:	608b      	strhi	r3, [r1, #8]
 8007896:	9302      	strls	r3, [sp, #8]
 8007898:	680b      	ldr	r3, [r1, #0]
 800789a:	468b      	mov	fp, r1
 800789c:	2500      	movs	r5, #0
 800789e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80078a2:	f84b 3b1c 	str.w	r3, [fp], #28
 80078a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078aa:	4680      	mov	r8, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	465e      	mov	r6, fp
 80078b0:	46aa      	mov	sl, r5
 80078b2:	46a9      	mov	r9, r5
 80078b4:	9501      	str	r5, [sp, #4]
 80078b6:	68a2      	ldr	r2, [r4, #8]
 80078b8:	b152      	cbz	r2, 80078d0 <_scanf_float+0x60>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b4e      	cmp	r3, #78	; 0x4e
 80078c0:	d864      	bhi.n	800798c <_scanf_float+0x11c>
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d83c      	bhi.n	8007940 <_scanf_float+0xd0>
 80078c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80078ca:	b2c8      	uxtb	r0, r1
 80078cc:	280e      	cmp	r0, #14
 80078ce:	d93a      	bls.n	8007946 <_scanf_float+0xd6>
 80078d0:	f1b9 0f00 	cmp.w	r9, #0
 80078d4:	d003      	beq.n	80078de <_scanf_float+0x6e>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078e2:	f1ba 0f01 	cmp.w	sl, #1
 80078e6:	f200 8113 	bhi.w	8007b10 <_scanf_float+0x2a0>
 80078ea:	455e      	cmp	r6, fp
 80078ec:	f200 8105 	bhi.w	8007afa <_scanf_float+0x28a>
 80078f0:	2501      	movs	r5, #1
 80078f2:	4628      	mov	r0, r5
 80078f4:	b007      	add	sp, #28
 80078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80078fe:	2a0d      	cmp	r2, #13
 8007900:	d8e6      	bhi.n	80078d0 <_scanf_float+0x60>
 8007902:	a101      	add	r1, pc, #4	; (adr r1, 8007908 <_scanf_float+0x98>)
 8007904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007908:	08007a47 	.word	0x08007a47
 800790c:	080078d1 	.word	0x080078d1
 8007910:	080078d1 	.word	0x080078d1
 8007914:	080078d1 	.word	0x080078d1
 8007918:	08007aa7 	.word	0x08007aa7
 800791c:	08007a7f 	.word	0x08007a7f
 8007920:	080078d1 	.word	0x080078d1
 8007924:	080078d1 	.word	0x080078d1
 8007928:	08007a55 	.word	0x08007a55
 800792c:	080078d1 	.word	0x080078d1
 8007930:	080078d1 	.word	0x080078d1
 8007934:	080078d1 	.word	0x080078d1
 8007938:	080078d1 	.word	0x080078d1
 800793c:	08007a0d 	.word	0x08007a0d
 8007940:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007944:	e7db      	b.n	80078fe <_scanf_float+0x8e>
 8007946:	290e      	cmp	r1, #14
 8007948:	d8c2      	bhi.n	80078d0 <_scanf_float+0x60>
 800794a:	a001      	add	r0, pc, #4	; (adr r0, 8007950 <_scanf_float+0xe0>)
 800794c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007950:	080079ff 	.word	0x080079ff
 8007954:	080078d1 	.word	0x080078d1
 8007958:	080079ff 	.word	0x080079ff
 800795c:	08007a93 	.word	0x08007a93
 8007960:	080078d1 	.word	0x080078d1
 8007964:	080079ad 	.word	0x080079ad
 8007968:	080079e9 	.word	0x080079e9
 800796c:	080079e9 	.word	0x080079e9
 8007970:	080079e9 	.word	0x080079e9
 8007974:	080079e9 	.word	0x080079e9
 8007978:	080079e9 	.word	0x080079e9
 800797c:	080079e9 	.word	0x080079e9
 8007980:	080079e9 	.word	0x080079e9
 8007984:	080079e9 	.word	0x080079e9
 8007988:	080079e9 	.word	0x080079e9
 800798c:	2b6e      	cmp	r3, #110	; 0x6e
 800798e:	d809      	bhi.n	80079a4 <_scanf_float+0x134>
 8007990:	2b60      	cmp	r3, #96	; 0x60
 8007992:	d8b2      	bhi.n	80078fa <_scanf_float+0x8a>
 8007994:	2b54      	cmp	r3, #84	; 0x54
 8007996:	d077      	beq.n	8007a88 <_scanf_float+0x218>
 8007998:	2b59      	cmp	r3, #89	; 0x59
 800799a:	d199      	bne.n	80078d0 <_scanf_float+0x60>
 800799c:	2d07      	cmp	r5, #7
 800799e:	d197      	bne.n	80078d0 <_scanf_float+0x60>
 80079a0:	2508      	movs	r5, #8
 80079a2:	e029      	b.n	80079f8 <_scanf_float+0x188>
 80079a4:	2b74      	cmp	r3, #116	; 0x74
 80079a6:	d06f      	beq.n	8007a88 <_scanf_float+0x218>
 80079a8:	2b79      	cmp	r3, #121	; 0x79
 80079aa:	e7f6      	b.n	800799a <_scanf_float+0x12a>
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	05c8      	lsls	r0, r1, #23
 80079b0:	d51a      	bpl.n	80079e8 <_scanf_float+0x178>
 80079b2:	9b02      	ldr	r3, [sp, #8]
 80079b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80079b8:	6021      	str	r1, [r4, #0]
 80079ba:	f109 0901 	add.w	r9, r9, #1
 80079be:	b11b      	cbz	r3, 80079c8 <_scanf_float+0x158>
 80079c0:	3b01      	subs	r3, #1
 80079c2:	3201      	adds	r2, #1
 80079c4:	9302      	str	r3, [sp, #8]
 80079c6:	60a2      	str	r2, [r4, #8]
 80079c8:	68a3      	ldr	r3, [r4, #8]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	3301      	adds	r3, #1
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	607b      	str	r3, [r7, #4]
 80079dc:	f340 8084 	ble.w	8007ae8 <_scanf_float+0x278>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	e766      	b.n	80078b6 <_scanf_float+0x46>
 80079e8:	eb1a 0f05 	cmn.w	sl, r5
 80079ec:	f47f af70 	bne.w	80078d0 <_scanf_float+0x60>
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80079f6:	6022      	str	r2, [r4, #0]
 80079f8:	f806 3b01 	strb.w	r3, [r6], #1
 80079fc:	e7e4      	b.n	80079c8 <_scanf_float+0x158>
 80079fe:	6822      	ldr	r2, [r4, #0]
 8007a00:	0610      	lsls	r0, r2, #24
 8007a02:	f57f af65 	bpl.w	80078d0 <_scanf_float+0x60>
 8007a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a0a:	e7f4      	b.n	80079f6 <_scanf_float+0x186>
 8007a0c:	f1ba 0f00 	cmp.w	sl, #0
 8007a10:	d10e      	bne.n	8007a30 <_scanf_float+0x1c0>
 8007a12:	f1b9 0f00 	cmp.w	r9, #0
 8007a16:	d10e      	bne.n	8007a36 <_scanf_float+0x1c6>
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a22:	d108      	bne.n	8007a36 <_scanf_float+0x1c6>
 8007a24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a28:	6022      	str	r2, [r4, #0]
 8007a2a:	f04f 0a01 	mov.w	sl, #1
 8007a2e:	e7e3      	b.n	80079f8 <_scanf_float+0x188>
 8007a30:	f1ba 0f02 	cmp.w	sl, #2
 8007a34:	d055      	beq.n	8007ae2 <_scanf_float+0x272>
 8007a36:	2d01      	cmp	r5, #1
 8007a38:	d002      	beq.n	8007a40 <_scanf_float+0x1d0>
 8007a3a:	2d04      	cmp	r5, #4
 8007a3c:	f47f af48 	bne.w	80078d0 <_scanf_float+0x60>
 8007a40:	3501      	adds	r5, #1
 8007a42:	b2ed      	uxtb	r5, r5
 8007a44:	e7d8      	b.n	80079f8 <_scanf_float+0x188>
 8007a46:	f1ba 0f01 	cmp.w	sl, #1
 8007a4a:	f47f af41 	bne.w	80078d0 <_scanf_float+0x60>
 8007a4e:	f04f 0a02 	mov.w	sl, #2
 8007a52:	e7d1      	b.n	80079f8 <_scanf_float+0x188>
 8007a54:	b97d      	cbnz	r5, 8007a76 <_scanf_float+0x206>
 8007a56:	f1b9 0f00 	cmp.w	r9, #0
 8007a5a:	f47f af3c 	bne.w	80078d6 <_scanf_float+0x66>
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a68:	f47f af39 	bne.w	80078de <_scanf_float+0x6e>
 8007a6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	2501      	movs	r5, #1
 8007a74:	e7c0      	b.n	80079f8 <_scanf_float+0x188>
 8007a76:	2d03      	cmp	r5, #3
 8007a78:	d0e2      	beq.n	8007a40 <_scanf_float+0x1d0>
 8007a7a:	2d05      	cmp	r5, #5
 8007a7c:	e7de      	b.n	8007a3c <_scanf_float+0x1cc>
 8007a7e:	2d02      	cmp	r5, #2
 8007a80:	f47f af26 	bne.w	80078d0 <_scanf_float+0x60>
 8007a84:	2503      	movs	r5, #3
 8007a86:	e7b7      	b.n	80079f8 <_scanf_float+0x188>
 8007a88:	2d06      	cmp	r5, #6
 8007a8a:	f47f af21 	bne.w	80078d0 <_scanf_float+0x60>
 8007a8e:	2507      	movs	r5, #7
 8007a90:	e7b2      	b.n	80079f8 <_scanf_float+0x188>
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	0591      	lsls	r1, r2, #22
 8007a96:	f57f af1b 	bpl.w	80078d0 <_scanf_float+0x60>
 8007a9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007aa4:	e7a8      	b.n	80079f8 <_scanf_float+0x188>
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007aac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ab0:	d006      	beq.n	8007ac0 <_scanf_float+0x250>
 8007ab2:	0550      	lsls	r0, r2, #21
 8007ab4:	f57f af0c 	bpl.w	80078d0 <_scanf_float+0x60>
 8007ab8:	f1b9 0f00 	cmp.w	r9, #0
 8007abc:	f43f af0f 	beq.w	80078de <_scanf_float+0x6e>
 8007ac0:	0591      	lsls	r1, r2, #22
 8007ac2:	bf58      	it	pl
 8007ac4:	9901      	ldrpl	r1, [sp, #4]
 8007ac6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007aca:	bf58      	it	pl
 8007acc:	eba9 0101 	subpl.w	r1, r9, r1
 8007ad0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ad4:	bf58      	it	pl
 8007ad6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ada:	6022      	str	r2, [r4, #0]
 8007adc:	f04f 0900 	mov.w	r9, #0
 8007ae0:	e78a      	b.n	80079f8 <_scanf_float+0x188>
 8007ae2:	f04f 0a03 	mov.w	sl, #3
 8007ae6:	e787      	b.n	80079f8 <_scanf_float+0x188>
 8007ae8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007aec:	4639      	mov	r1, r7
 8007aee:	4640      	mov	r0, r8
 8007af0:	4798      	blx	r3
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f43f aedf 	beq.w	80078b6 <_scanf_float+0x46>
 8007af8:	e6ea      	b.n	80078d0 <_scanf_float+0x60>
 8007afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b02:	463a      	mov	r2, r7
 8007b04:	4640      	mov	r0, r8
 8007b06:	4798      	blx	r3
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	e6ec      	b.n	80078ea <_scanf_float+0x7a>
 8007b10:	1e6b      	subs	r3, r5, #1
 8007b12:	2b06      	cmp	r3, #6
 8007b14:	d825      	bhi.n	8007b62 <_scanf_float+0x2f2>
 8007b16:	2d02      	cmp	r5, #2
 8007b18:	d836      	bhi.n	8007b88 <_scanf_float+0x318>
 8007b1a:	455e      	cmp	r6, fp
 8007b1c:	f67f aee8 	bls.w	80078f0 <_scanf_float+0x80>
 8007b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b28:	463a      	mov	r2, r7
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4798      	blx	r3
 8007b2e:	6923      	ldr	r3, [r4, #16]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	6123      	str	r3, [r4, #16]
 8007b34:	e7f1      	b.n	8007b1a <_scanf_float+0x2aa>
 8007b36:	9802      	ldr	r0, [sp, #8]
 8007b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b40:	9002      	str	r0, [sp, #8]
 8007b42:	463a      	mov	r2, r7
 8007b44:	4640      	mov	r0, r8
 8007b46:	4798      	blx	r3
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b52:	fa5f fa8a 	uxtb.w	sl, sl
 8007b56:	f1ba 0f02 	cmp.w	sl, #2
 8007b5a:	d1ec      	bne.n	8007b36 <_scanf_float+0x2c6>
 8007b5c:	3d03      	subs	r5, #3
 8007b5e:	b2ed      	uxtb	r5, r5
 8007b60:	1b76      	subs	r6, r6, r5
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	05da      	lsls	r2, r3, #23
 8007b66:	d52f      	bpl.n	8007bc8 <_scanf_float+0x358>
 8007b68:	055b      	lsls	r3, r3, #21
 8007b6a:	d510      	bpl.n	8007b8e <_scanf_float+0x31e>
 8007b6c:	455e      	cmp	r6, fp
 8007b6e:	f67f aebf 	bls.w	80078f0 <_scanf_float+0x80>
 8007b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b7a:	463a      	mov	r2, r7
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	4798      	blx	r3
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	e7f1      	b.n	8007b6c <_scanf_float+0x2fc>
 8007b88:	46aa      	mov	sl, r5
 8007b8a:	9602      	str	r6, [sp, #8]
 8007b8c:	e7df      	b.n	8007b4e <_scanf_float+0x2de>
 8007b8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	2965      	cmp	r1, #101	; 0x65
 8007b96:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	d00c      	beq.n	8007bbc <_scanf_float+0x34c>
 8007ba2:	2945      	cmp	r1, #69	; 0x45
 8007ba4:	d00a      	beq.n	8007bbc <_scanf_float+0x34c>
 8007ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007baa:	463a      	mov	r2, r7
 8007bac:	4640      	mov	r0, r8
 8007bae:	4798      	blx	r3
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	1eb5      	subs	r5, r6, #2
 8007bba:	6123      	str	r3, [r4, #16]
 8007bbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bc0:	463a      	mov	r2, r7
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	4798      	blx	r3
 8007bc6:	462e      	mov	r6, r5
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	f015 0510 	ands.w	r5, r5, #16
 8007bce:	d159      	bne.n	8007c84 <_scanf_float+0x414>
 8007bd0:	7035      	strb	r5, [r6, #0]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bdc:	d11b      	bne.n	8007c16 <_scanf_float+0x3a6>
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	454b      	cmp	r3, r9
 8007be2:	eba3 0209 	sub.w	r2, r3, r9
 8007be6:	d123      	bne.n	8007c30 <_scanf_float+0x3c0>
 8007be8:	2200      	movs	r2, #0
 8007bea:	4659      	mov	r1, fp
 8007bec:	4640      	mov	r0, r8
 8007bee:	f000 ff1d 	bl	8008a2c <_strtod_r>
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	f012 0f02 	tst.w	r2, #2
 8007bfa:	ec57 6b10 	vmov	r6, r7, d0
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	d021      	beq.n	8007c46 <_scanf_float+0x3d6>
 8007c02:	9903      	ldr	r1, [sp, #12]
 8007c04:	1d1a      	adds	r2, r3, #4
 8007c06:	600a      	str	r2, [r1, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	e9c3 6700 	strd	r6, r7, [r3]
 8007c0e:	68e3      	ldr	r3, [r4, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	60e3      	str	r3, [r4, #12]
 8007c14:	e66d      	b.n	80078f2 <_scanf_float+0x82>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0e5      	beq.n	8007be8 <_scanf_float+0x378>
 8007c1c:	9905      	ldr	r1, [sp, #20]
 8007c1e:	230a      	movs	r3, #10
 8007c20:	462a      	mov	r2, r5
 8007c22:	3101      	adds	r1, #1
 8007c24:	4640      	mov	r0, r8
 8007c26:	f000 ff89 	bl	8008b3c <_strtol_r>
 8007c2a:	9b04      	ldr	r3, [sp, #16]
 8007c2c:	9e05      	ldr	r6, [sp, #20]
 8007c2e:	1ac2      	subs	r2, r0, r3
 8007c30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c34:	429e      	cmp	r6, r3
 8007c36:	bf28      	it	cs
 8007c38:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c3c:	4912      	ldr	r1, [pc, #72]	; (8007c88 <_scanf_float+0x418>)
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f000 f82c 	bl	8007c9c <siprintf>
 8007c44:	e7d0      	b.n	8007be8 <_scanf_float+0x378>
 8007c46:	9903      	ldr	r1, [sp, #12]
 8007c48:	f012 0f04 	tst.w	r2, #4
 8007c4c:	f103 0204 	add.w	r2, r3, #4
 8007c50:	600a      	str	r2, [r1, #0]
 8007c52:	d1d9      	bne.n	8007c08 <_scanf_float+0x398>
 8007c54:	f8d3 8000 	ldr.w	r8, [r3]
 8007c58:	ee10 2a10 	vmov	r2, s0
 8007c5c:	ee10 0a10 	vmov	r0, s0
 8007c60:	463b      	mov	r3, r7
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 ff72 	bl	8000b4c <__aeabi_dcmpun>
 8007c68:	b128      	cbz	r0, 8007c76 <_scanf_float+0x406>
 8007c6a:	4808      	ldr	r0, [pc, #32]	; (8007c8c <_scanf_float+0x41c>)
 8007c6c:	f000 f810 	bl	8007c90 <nanf>
 8007c70:	ed88 0a00 	vstr	s0, [r8]
 8007c74:	e7cb      	b.n	8007c0e <_scanf_float+0x39e>
 8007c76:	4630      	mov	r0, r6
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 ffc5 	bl	8000c08 <__aeabi_d2f>
 8007c7e:	f8c8 0000 	str.w	r0, [r8]
 8007c82:	e7c4      	b.n	8007c0e <_scanf_float+0x39e>
 8007c84:	2500      	movs	r5, #0
 8007c86:	e634      	b.n	80078f2 <_scanf_float+0x82>
 8007c88:	0800c226 	.word	0x0800c226
 8007c8c:	0800c64b 	.word	0x0800c64b

08007c90 <nanf>:
 8007c90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c98 <nanf+0x8>
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	7fc00000 	.word	0x7fc00000

08007c9c <siprintf>:
 8007c9c:	b40e      	push	{r1, r2, r3}
 8007c9e:	b500      	push	{lr}
 8007ca0:	b09c      	sub	sp, #112	; 0x70
 8007ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ca4:	9002      	str	r0, [sp, #8]
 8007ca6:	9006      	str	r0, [sp, #24]
 8007ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cac:	4809      	ldr	r0, [pc, #36]	; (8007cd4 <siprintf+0x38>)
 8007cae:	9107      	str	r1, [sp, #28]
 8007cb0:	9104      	str	r1, [sp, #16]
 8007cb2:	4909      	ldr	r1, [pc, #36]	; (8007cd8 <siprintf+0x3c>)
 8007cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb8:	9105      	str	r1, [sp, #20]
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	a902      	add	r1, sp, #8
 8007cc0:	f002 ffbe 	bl	800ac40 <_svfiprintf_r>
 8007cc4:	9b02      	ldr	r3, [sp, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	b01c      	add	sp, #112	; 0x70
 8007ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd0:	b003      	add	sp, #12
 8007cd2:	4770      	bx	lr
 8007cd4:	20000814 	.word	0x20000814
 8007cd8:	ffff0208 	.word	0xffff0208

08007cdc <siscanf>:
 8007cdc:	b40e      	push	{r1, r2, r3}
 8007cde:	b510      	push	{r4, lr}
 8007ce0:	b09f      	sub	sp, #124	; 0x7c
 8007ce2:	ac21      	add	r4, sp, #132	; 0x84
 8007ce4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007ce8:	f854 2b04 	ldr.w	r2, [r4], #4
 8007cec:	9201      	str	r2, [sp, #4]
 8007cee:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007cf2:	9004      	str	r0, [sp, #16]
 8007cf4:	9008      	str	r0, [sp, #32]
 8007cf6:	f7f8 fa7b 	bl	80001f0 <strlen>
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <siscanf+0x50>)
 8007cfc:	9005      	str	r0, [sp, #20]
 8007cfe:	9009      	str	r0, [sp, #36]	; 0x24
 8007d00:	930d      	str	r3, [sp, #52]	; 0x34
 8007d02:	480b      	ldr	r0, [pc, #44]	; (8007d30 <siscanf+0x54>)
 8007d04:	9a01      	ldr	r2, [sp, #4]
 8007d06:	6800      	ldr	r0, [r0, #0]
 8007d08:	9403      	str	r4, [sp, #12]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8007d0e:	9316      	str	r3, [sp, #88]	; 0x58
 8007d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007d18:	a904      	add	r1, sp, #16
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	f003 f8ea 	bl	800aef4 <__ssvfiscanf_r>
 8007d20:	b01f      	add	sp, #124	; 0x7c
 8007d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d26:	b003      	add	sp, #12
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	08007d57 	.word	0x08007d57
 8007d30:	20000814 	.word	0x20000814

08007d34 <__sread>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	460c      	mov	r4, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	f003 fba4 	bl	800b488 <_read_r>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	bfab      	itete	ge
 8007d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d46:	89a3      	ldrhlt	r3, [r4, #12]
 8007d48:	181b      	addge	r3, r3, r0
 8007d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d4e:	bfac      	ite	ge
 8007d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d52:	81a3      	strhlt	r3, [r4, #12]
 8007d54:	bd10      	pop	{r4, pc}

08007d56 <__seofread>:
 8007d56:	2000      	movs	r0, #0
 8007d58:	4770      	bx	lr

08007d5a <__swrite>:
 8007d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	461f      	mov	r7, r3
 8007d60:	898b      	ldrh	r3, [r1, #12]
 8007d62:	05db      	lsls	r3, r3, #23
 8007d64:	4605      	mov	r5, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	4616      	mov	r6, r2
 8007d6a:	d505      	bpl.n	8007d78 <__swrite+0x1e>
 8007d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d70:	2302      	movs	r3, #2
 8007d72:	2200      	movs	r2, #0
 8007d74:	f002 f916 	bl	8009fa4 <_lseek_r>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	4632      	mov	r2, r6
 8007d86:	463b      	mov	r3, r7
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8e:	f000 bef7 	b.w	8008b80 <_write_r>

08007d92 <__sseek>:
 8007d92:	b510      	push	{r4, lr}
 8007d94:	460c      	mov	r4, r1
 8007d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9a:	f002 f903 	bl	8009fa4 <_lseek_r>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	bf15      	itete	ne
 8007da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dae:	81a3      	strheq	r3, [r4, #12]
 8007db0:	bf18      	it	ne
 8007db2:	81a3      	strhne	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__sclose>:
 8007db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dba:	f000 bef3 	b.w	8008ba4 <_close_r>

08007dbe <strncmp>:
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	b17a      	cbz	r2, 8007de2 <strncmp+0x24>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	3901      	subs	r1, #1
 8007dc6:	1884      	adds	r4, r0, r2
 8007dc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007dcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007dd0:	4290      	cmp	r0, r2
 8007dd2:	d101      	bne.n	8007dd8 <strncmp+0x1a>
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d101      	bne.n	8007ddc <strncmp+0x1e>
 8007dd8:	1a80      	subs	r0, r0, r2
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d1f3      	bne.n	8007dc8 <strncmp+0xa>
 8007de0:	e7fa      	b.n	8007dd8 <strncmp+0x1a>
 8007de2:	4610      	mov	r0, r2
 8007de4:	e7f9      	b.n	8007dda <strncmp+0x1c>

08007de6 <sulp>:
 8007de6:	b570      	push	{r4, r5, r6, lr}
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	ec45 4b10 	vmov	d0, r4, r5
 8007df0:	4616      	mov	r6, r2
 8007df2:	f002 fc83 	bl	800a6fc <__ulp>
 8007df6:	ec51 0b10 	vmov	r0, r1, d0
 8007dfa:	b17e      	cbz	r6, 8007e1c <sulp+0x36>
 8007dfc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd09      	ble.n	8007e1c <sulp+0x36>
 8007e08:	051b      	lsls	r3, r3, #20
 8007e0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e0e:	2400      	movs	r4, #0
 8007e10:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e14:	4622      	mov	r2, r4
 8007e16:	462b      	mov	r3, r5
 8007e18:	f7f8 fbfe 	bl	8000618 <__aeabi_dmul>
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e20 <_strtod_l>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ed2d 8b02 	vpush	{d8}
 8007e28:	b09d      	sub	sp, #116	; 0x74
 8007e2a:	461f      	mov	r7, r3
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9318      	str	r3, [sp, #96]	; 0x60
 8007e30:	4ba2      	ldr	r3, [pc, #648]	; (80080bc <_strtod_l+0x29c>)
 8007e32:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	4604      	mov	r4, r0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	4688      	mov	r8, r1
 8007e3e:	f7f8 f9d7 	bl	80001f0 <strlen>
 8007e42:	f04f 0a00 	mov.w	sl, #0
 8007e46:	4605      	mov	r5, r0
 8007e48:	f04f 0b00 	mov.w	fp, #0
 8007e4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e52:	781a      	ldrb	r2, [r3, #0]
 8007e54:	2a2b      	cmp	r2, #43	; 0x2b
 8007e56:	d04e      	beq.n	8007ef6 <_strtod_l+0xd6>
 8007e58:	d83b      	bhi.n	8007ed2 <_strtod_l+0xb2>
 8007e5a:	2a0d      	cmp	r2, #13
 8007e5c:	d834      	bhi.n	8007ec8 <_strtod_l+0xa8>
 8007e5e:	2a08      	cmp	r2, #8
 8007e60:	d834      	bhi.n	8007ecc <_strtod_l+0xac>
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	d03e      	beq.n	8007ee4 <_strtod_l+0xc4>
 8007e66:	2300      	movs	r3, #0
 8007e68:	930a      	str	r3, [sp, #40]	; 0x28
 8007e6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007e6c:	7833      	ldrb	r3, [r6, #0]
 8007e6e:	2b30      	cmp	r3, #48	; 0x30
 8007e70:	f040 80b0 	bne.w	8007fd4 <_strtod_l+0x1b4>
 8007e74:	7873      	ldrb	r3, [r6, #1]
 8007e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e7a:	2b58      	cmp	r3, #88	; 0x58
 8007e7c:	d168      	bne.n	8007f50 <_strtod_l+0x130>
 8007e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	ab18      	add	r3, sp, #96	; 0x60
 8007e84:	9702      	str	r7, [sp, #8]
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4a8d      	ldr	r2, [pc, #564]	; (80080c0 <_strtod_l+0x2a0>)
 8007e8a:	ab19      	add	r3, sp, #100	; 0x64
 8007e8c:	a917      	add	r1, sp, #92	; 0x5c
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f001 fd7c 	bl	800998c <__gethex>
 8007e94:	f010 0707 	ands.w	r7, r0, #7
 8007e98:	4605      	mov	r5, r0
 8007e9a:	d005      	beq.n	8007ea8 <_strtod_l+0x88>
 8007e9c:	2f06      	cmp	r7, #6
 8007e9e:	d12c      	bne.n	8007efa <_strtod_l+0xda>
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f040 8590 	bne.w	80089d0 <_strtod_l+0xbb0>
 8007eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb2:	b1eb      	cbz	r3, 8007ef0 <_strtod_l+0xd0>
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007eba:	ec43 2b10 	vmov	d0, r2, r3
 8007ebe:	b01d      	add	sp, #116	; 0x74
 8007ec0:	ecbd 8b02 	vpop	{d8}
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	2a20      	cmp	r2, #32
 8007eca:	d1cc      	bne.n	8007e66 <_strtod_l+0x46>
 8007ecc:	3301      	adds	r3, #1
 8007ece:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ed0:	e7be      	b.n	8007e50 <_strtod_l+0x30>
 8007ed2:	2a2d      	cmp	r2, #45	; 0x2d
 8007ed4:	d1c7      	bne.n	8007e66 <_strtod_l+0x46>
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	920a      	str	r2, [sp, #40]	; 0x28
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1c2      	bne.n	8007e6a <_strtod_l+0x4a>
 8007ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ee6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f040 856e 	bne.w	80089cc <_strtod_l+0xbac>
 8007ef0:	4652      	mov	r2, sl
 8007ef2:	465b      	mov	r3, fp
 8007ef4:	e7e1      	b.n	8007eba <_strtod_l+0x9a>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	e7ee      	b.n	8007ed8 <_strtod_l+0xb8>
 8007efa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007efc:	b13a      	cbz	r2, 8007f0e <_strtod_l+0xee>
 8007efe:	2135      	movs	r1, #53	; 0x35
 8007f00:	a81a      	add	r0, sp, #104	; 0x68
 8007f02:	f002 fd06 	bl	800a912 <__copybits>
 8007f06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f002 f8c5 	bl	800a098 <_Bfree>
 8007f0e:	3f01      	subs	r7, #1
 8007f10:	2f04      	cmp	r7, #4
 8007f12:	d806      	bhi.n	8007f22 <_strtod_l+0x102>
 8007f14:	e8df f007 	tbb	[pc, r7]
 8007f18:	1714030a 	.word	0x1714030a
 8007f1c:	0a          	.byte	0x0a
 8007f1d:	00          	.byte	0x00
 8007f1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007f22:	0728      	lsls	r0, r5, #28
 8007f24:	d5c0      	bpl.n	8007ea8 <_strtod_l+0x88>
 8007f26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007f2a:	e7bd      	b.n	8007ea8 <_strtod_l+0x88>
 8007f2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007f30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f3e:	e7f0      	b.n	8007f22 <_strtod_l+0x102>
 8007f40:	f8df b180 	ldr.w	fp, [pc, #384]	; 80080c4 <_strtod_l+0x2a4>
 8007f44:	e7ed      	b.n	8007f22 <_strtod_l+0x102>
 8007f46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007f4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007f4e:	e7e8      	b.n	8007f22 <_strtod_l+0x102>
 8007f50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2b30      	cmp	r3, #48	; 0x30
 8007f5a:	d0f9      	beq.n	8007f50 <_strtod_l+0x130>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0a3      	beq.n	8007ea8 <_strtod_l+0x88>
 8007f60:	2301      	movs	r3, #1
 8007f62:	f04f 0900 	mov.w	r9, #0
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f6a:	9308      	str	r3, [sp, #32]
 8007f6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f70:	464f      	mov	r7, r9
 8007f72:	220a      	movs	r2, #10
 8007f74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007f76:	7806      	ldrb	r6, [r0, #0]
 8007f78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f7c:	b2d9      	uxtb	r1, r3
 8007f7e:	2909      	cmp	r1, #9
 8007f80:	d92a      	bls.n	8007fd8 <_strtod_l+0x1b8>
 8007f82:	9905      	ldr	r1, [sp, #20]
 8007f84:	462a      	mov	r2, r5
 8007f86:	f7ff ff1a 	bl	8007dbe <strncmp>
 8007f8a:	b398      	cbz	r0, 8007ff4 <_strtod_l+0x1d4>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	4632      	mov	r2, r6
 8007f90:	463d      	mov	r5, r7
 8007f92:	9005      	str	r0, [sp, #20]
 8007f94:	4603      	mov	r3, r0
 8007f96:	2a65      	cmp	r2, #101	; 0x65
 8007f98:	d001      	beq.n	8007f9e <_strtod_l+0x17e>
 8007f9a:	2a45      	cmp	r2, #69	; 0x45
 8007f9c:	d118      	bne.n	8007fd0 <_strtod_l+0x1b0>
 8007f9e:	b91d      	cbnz	r5, 8007fa8 <_strtod_l+0x188>
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	4302      	orrs	r2, r0
 8007fa4:	d09e      	beq.n	8007ee4 <_strtod_l+0xc4>
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007fac:	f108 0201 	add.w	r2, r8, #1
 8007fb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007fb6:	2a2b      	cmp	r2, #43	; 0x2b
 8007fb8:	d075      	beq.n	80080a6 <_strtod_l+0x286>
 8007fba:	2a2d      	cmp	r2, #45	; 0x2d
 8007fbc:	d07b      	beq.n	80080b6 <_strtod_l+0x296>
 8007fbe:	f04f 0c00 	mov.w	ip, #0
 8007fc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007fc6:	2909      	cmp	r1, #9
 8007fc8:	f240 8082 	bls.w	80080d0 <_strtod_l+0x2b0>
 8007fcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	e09d      	b.n	8008110 <_strtod_l+0x2f0>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e7c4      	b.n	8007f62 <_strtod_l+0x142>
 8007fd8:	2f08      	cmp	r7, #8
 8007fda:	bfd8      	it	le
 8007fdc:	9907      	ldrle	r1, [sp, #28]
 8007fde:	f100 0001 	add.w	r0, r0, #1
 8007fe2:	bfda      	itte	le
 8007fe4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007fe8:	9307      	strle	r3, [sp, #28]
 8007fea:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007fee:	3701      	adds	r7, #1
 8007ff0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007ff2:	e7bf      	b.n	8007f74 <_strtod_l+0x154>
 8007ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ff6:	195a      	adds	r2, r3, r5
 8007ff8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ffa:	5d5a      	ldrb	r2, [r3, r5]
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	d037      	beq.n	8008070 <_strtod_l+0x250>
 8008000:	9005      	str	r0, [sp, #20]
 8008002:	463d      	mov	r5, r7
 8008004:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008008:	2b09      	cmp	r3, #9
 800800a:	d912      	bls.n	8008032 <_strtod_l+0x212>
 800800c:	2301      	movs	r3, #1
 800800e:	e7c2      	b.n	8007f96 <_strtod_l+0x176>
 8008010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	9217      	str	r2, [sp, #92]	; 0x5c
 8008016:	785a      	ldrb	r2, [r3, #1]
 8008018:	3001      	adds	r0, #1
 800801a:	2a30      	cmp	r2, #48	; 0x30
 800801c:	d0f8      	beq.n	8008010 <_strtod_l+0x1f0>
 800801e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008022:	2b08      	cmp	r3, #8
 8008024:	f200 84d9 	bhi.w	80089da <_strtod_l+0xbba>
 8008028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800802a:	9005      	str	r0, [sp, #20]
 800802c:	2000      	movs	r0, #0
 800802e:	9308      	str	r3, [sp, #32]
 8008030:	4605      	mov	r5, r0
 8008032:	3a30      	subs	r2, #48	; 0x30
 8008034:	f100 0301 	add.w	r3, r0, #1
 8008038:	d014      	beq.n	8008064 <_strtod_l+0x244>
 800803a:	9905      	ldr	r1, [sp, #20]
 800803c:	4419      	add	r1, r3
 800803e:	9105      	str	r1, [sp, #20]
 8008040:	462b      	mov	r3, r5
 8008042:	eb00 0e05 	add.w	lr, r0, r5
 8008046:	210a      	movs	r1, #10
 8008048:	4573      	cmp	r3, lr
 800804a:	d113      	bne.n	8008074 <_strtod_l+0x254>
 800804c:	182b      	adds	r3, r5, r0
 800804e:	2b08      	cmp	r3, #8
 8008050:	f105 0501 	add.w	r5, r5, #1
 8008054:	4405      	add	r5, r0
 8008056:	dc1c      	bgt.n	8008092 <_strtod_l+0x272>
 8008058:	9907      	ldr	r1, [sp, #28]
 800805a:	230a      	movs	r3, #10
 800805c:	fb03 2301 	mla	r3, r3, r1, r2
 8008060:	9307      	str	r3, [sp, #28]
 8008062:	2300      	movs	r3, #0
 8008064:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008066:	1c51      	adds	r1, r2, #1
 8008068:	9117      	str	r1, [sp, #92]	; 0x5c
 800806a:	7852      	ldrb	r2, [r2, #1]
 800806c:	4618      	mov	r0, r3
 800806e:	e7c9      	b.n	8008004 <_strtod_l+0x1e4>
 8008070:	4638      	mov	r0, r7
 8008072:	e7d2      	b.n	800801a <_strtod_l+0x1fa>
 8008074:	2b08      	cmp	r3, #8
 8008076:	dc04      	bgt.n	8008082 <_strtod_l+0x262>
 8008078:	9e07      	ldr	r6, [sp, #28]
 800807a:	434e      	muls	r6, r1
 800807c:	9607      	str	r6, [sp, #28]
 800807e:	3301      	adds	r3, #1
 8008080:	e7e2      	b.n	8008048 <_strtod_l+0x228>
 8008082:	f103 0c01 	add.w	ip, r3, #1
 8008086:	f1bc 0f10 	cmp.w	ip, #16
 800808a:	bfd8      	it	le
 800808c:	fb01 f909 	mulle.w	r9, r1, r9
 8008090:	e7f5      	b.n	800807e <_strtod_l+0x25e>
 8008092:	2d10      	cmp	r5, #16
 8008094:	bfdc      	itt	le
 8008096:	230a      	movle	r3, #10
 8008098:	fb03 2909 	mlale	r9, r3, r9, r2
 800809c:	e7e1      	b.n	8008062 <_strtod_l+0x242>
 800809e:	2300      	movs	r3, #0
 80080a0:	9305      	str	r3, [sp, #20]
 80080a2:	2301      	movs	r3, #1
 80080a4:	e77c      	b.n	8007fa0 <_strtod_l+0x180>
 80080a6:	f04f 0c00 	mov.w	ip, #0
 80080aa:	f108 0202 	add.w	r2, r8, #2
 80080ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80080b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80080b4:	e785      	b.n	8007fc2 <_strtod_l+0x1a2>
 80080b6:	f04f 0c01 	mov.w	ip, #1
 80080ba:	e7f6      	b.n	80080aa <_strtod_l+0x28a>
 80080bc:	0800c478 	.word	0x0800c478
 80080c0:	0800c22c 	.word	0x0800c22c
 80080c4:	7ff00000 	.word	0x7ff00000
 80080c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080ca:	1c51      	adds	r1, r2, #1
 80080cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80080ce:	7852      	ldrb	r2, [r2, #1]
 80080d0:	2a30      	cmp	r2, #48	; 0x30
 80080d2:	d0f9      	beq.n	80080c8 <_strtod_l+0x2a8>
 80080d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80080d8:	2908      	cmp	r1, #8
 80080da:	f63f af79 	bhi.w	8007fd0 <_strtod_l+0x1b0>
 80080de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80080e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080e4:	9206      	str	r2, [sp, #24]
 80080e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080e8:	1c51      	adds	r1, r2, #1
 80080ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80080ec:	7852      	ldrb	r2, [r2, #1]
 80080ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80080f2:	2e09      	cmp	r6, #9
 80080f4:	d937      	bls.n	8008166 <_strtod_l+0x346>
 80080f6:	9e06      	ldr	r6, [sp, #24]
 80080f8:	1b89      	subs	r1, r1, r6
 80080fa:	2908      	cmp	r1, #8
 80080fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008100:	dc02      	bgt.n	8008108 <_strtod_l+0x2e8>
 8008102:	4576      	cmp	r6, lr
 8008104:	bfa8      	it	ge
 8008106:	4676      	movge	r6, lr
 8008108:	f1bc 0f00 	cmp.w	ip, #0
 800810c:	d000      	beq.n	8008110 <_strtod_l+0x2f0>
 800810e:	4276      	negs	r6, r6
 8008110:	2d00      	cmp	r5, #0
 8008112:	d14d      	bne.n	80081b0 <_strtod_l+0x390>
 8008114:	9904      	ldr	r1, [sp, #16]
 8008116:	4301      	orrs	r1, r0
 8008118:	f47f aec6 	bne.w	8007ea8 <_strtod_l+0x88>
 800811c:	2b00      	cmp	r3, #0
 800811e:	f47f aee1 	bne.w	8007ee4 <_strtod_l+0xc4>
 8008122:	2a69      	cmp	r2, #105	; 0x69
 8008124:	d027      	beq.n	8008176 <_strtod_l+0x356>
 8008126:	dc24      	bgt.n	8008172 <_strtod_l+0x352>
 8008128:	2a49      	cmp	r2, #73	; 0x49
 800812a:	d024      	beq.n	8008176 <_strtod_l+0x356>
 800812c:	2a4e      	cmp	r2, #78	; 0x4e
 800812e:	f47f aed9 	bne.w	8007ee4 <_strtod_l+0xc4>
 8008132:	499f      	ldr	r1, [pc, #636]	; (80083b0 <_strtod_l+0x590>)
 8008134:	a817      	add	r0, sp, #92	; 0x5c
 8008136:	f001 fe81 	bl	8009e3c <__match>
 800813a:	2800      	cmp	r0, #0
 800813c:	f43f aed2 	beq.w	8007ee4 <_strtod_l+0xc4>
 8008140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b28      	cmp	r3, #40	; 0x28
 8008146:	d12d      	bne.n	80081a4 <_strtod_l+0x384>
 8008148:	499a      	ldr	r1, [pc, #616]	; (80083b4 <_strtod_l+0x594>)
 800814a:	aa1a      	add	r2, sp, #104	; 0x68
 800814c:	a817      	add	r0, sp, #92	; 0x5c
 800814e:	f001 fe89 	bl	8009e64 <__hexnan>
 8008152:	2805      	cmp	r0, #5
 8008154:	d126      	bne.n	80081a4 <_strtod_l+0x384>
 8008156:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008158:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800815c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008160:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008164:	e6a0      	b.n	8007ea8 <_strtod_l+0x88>
 8008166:	210a      	movs	r1, #10
 8008168:	fb01 2e0e 	mla	lr, r1, lr, r2
 800816c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008170:	e7b9      	b.n	80080e6 <_strtod_l+0x2c6>
 8008172:	2a6e      	cmp	r2, #110	; 0x6e
 8008174:	e7db      	b.n	800812e <_strtod_l+0x30e>
 8008176:	4990      	ldr	r1, [pc, #576]	; (80083b8 <_strtod_l+0x598>)
 8008178:	a817      	add	r0, sp, #92	; 0x5c
 800817a:	f001 fe5f 	bl	8009e3c <__match>
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f aeb0 	beq.w	8007ee4 <_strtod_l+0xc4>
 8008184:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008186:	498d      	ldr	r1, [pc, #564]	; (80083bc <_strtod_l+0x59c>)
 8008188:	3b01      	subs	r3, #1
 800818a:	a817      	add	r0, sp, #92	; 0x5c
 800818c:	9317      	str	r3, [sp, #92]	; 0x5c
 800818e:	f001 fe55 	bl	8009e3c <__match>
 8008192:	b910      	cbnz	r0, 800819a <_strtod_l+0x37a>
 8008194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008196:	3301      	adds	r3, #1
 8008198:	9317      	str	r3, [sp, #92]	; 0x5c
 800819a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80083cc <_strtod_l+0x5ac>
 800819e:	f04f 0a00 	mov.w	sl, #0
 80081a2:	e681      	b.n	8007ea8 <_strtod_l+0x88>
 80081a4:	4886      	ldr	r0, [pc, #536]	; (80083c0 <_strtod_l+0x5a0>)
 80081a6:	f003 f983 	bl	800b4b0 <nan>
 80081aa:	ec5b ab10 	vmov	sl, fp, d0
 80081ae:	e67b      	b.n	8007ea8 <_strtod_l+0x88>
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	9807      	ldr	r0, [sp, #28]
 80081b4:	1af3      	subs	r3, r6, r3
 80081b6:	2f00      	cmp	r7, #0
 80081b8:	bf08      	it	eq
 80081ba:	462f      	moveq	r7, r5
 80081bc:	2d10      	cmp	r5, #16
 80081be:	9306      	str	r3, [sp, #24]
 80081c0:	46a8      	mov	r8, r5
 80081c2:	bfa8      	it	ge
 80081c4:	f04f 0810 	movge.w	r8, #16
 80081c8:	f7f8 f9ac 	bl	8000524 <__aeabi_ui2d>
 80081cc:	2d09      	cmp	r5, #9
 80081ce:	4682      	mov	sl, r0
 80081d0:	468b      	mov	fp, r1
 80081d2:	dd13      	ble.n	80081fc <_strtod_l+0x3dc>
 80081d4:	4b7b      	ldr	r3, [pc, #492]	; (80083c4 <_strtod_l+0x5a4>)
 80081d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80081da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081de:	f7f8 fa1b 	bl	8000618 <__aeabi_dmul>
 80081e2:	4682      	mov	sl, r0
 80081e4:	4648      	mov	r0, r9
 80081e6:	468b      	mov	fp, r1
 80081e8:	f7f8 f99c 	bl	8000524 <__aeabi_ui2d>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4650      	mov	r0, sl
 80081f2:	4659      	mov	r1, fp
 80081f4:	f7f8 f85a 	bl	80002ac <__adddf3>
 80081f8:	4682      	mov	sl, r0
 80081fa:	468b      	mov	fp, r1
 80081fc:	2d0f      	cmp	r5, #15
 80081fe:	dc38      	bgt.n	8008272 <_strtod_l+0x452>
 8008200:	9b06      	ldr	r3, [sp, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	f43f ae50 	beq.w	8007ea8 <_strtod_l+0x88>
 8008208:	dd24      	ble.n	8008254 <_strtod_l+0x434>
 800820a:	2b16      	cmp	r3, #22
 800820c:	dc0b      	bgt.n	8008226 <_strtod_l+0x406>
 800820e:	496d      	ldr	r1, [pc, #436]	; (80083c4 <_strtod_l+0x5a4>)
 8008210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008218:	4652      	mov	r2, sl
 800821a:	465b      	mov	r3, fp
 800821c:	f7f8 f9fc 	bl	8000618 <__aeabi_dmul>
 8008220:	4682      	mov	sl, r0
 8008222:	468b      	mov	fp, r1
 8008224:	e640      	b.n	8007ea8 <_strtod_l+0x88>
 8008226:	9a06      	ldr	r2, [sp, #24]
 8008228:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800822c:	4293      	cmp	r3, r2
 800822e:	db20      	blt.n	8008272 <_strtod_l+0x452>
 8008230:	4c64      	ldr	r4, [pc, #400]	; (80083c4 <_strtod_l+0x5a4>)
 8008232:	f1c5 050f 	rsb	r5, r5, #15
 8008236:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800823a:	4652      	mov	r2, sl
 800823c:	465b      	mov	r3, fp
 800823e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008242:	f7f8 f9e9 	bl	8000618 <__aeabi_dmul>
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	1b5d      	subs	r5, r3, r5
 800824a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800824e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008252:	e7e3      	b.n	800821c <_strtod_l+0x3fc>
 8008254:	9b06      	ldr	r3, [sp, #24]
 8008256:	3316      	adds	r3, #22
 8008258:	db0b      	blt.n	8008272 <_strtod_l+0x452>
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	1b9e      	subs	r6, r3, r6
 800825e:	4b59      	ldr	r3, [pc, #356]	; (80083c4 <_strtod_l+0x5a4>)
 8008260:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008264:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008268:	4650      	mov	r0, sl
 800826a:	4659      	mov	r1, fp
 800826c:	f7f8 fafe 	bl	800086c <__aeabi_ddiv>
 8008270:	e7d6      	b.n	8008220 <_strtod_l+0x400>
 8008272:	9b06      	ldr	r3, [sp, #24]
 8008274:	eba5 0808 	sub.w	r8, r5, r8
 8008278:	4498      	add	r8, r3
 800827a:	f1b8 0f00 	cmp.w	r8, #0
 800827e:	dd74      	ble.n	800836a <_strtod_l+0x54a>
 8008280:	f018 030f 	ands.w	r3, r8, #15
 8008284:	d00a      	beq.n	800829c <_strtod_l+0x47c>
 8008286:	494f      	ldr	r1, [pc, #316]	; (80083c4 <_strtod_l+0x5a4>)
 8008288:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008294:	f7f8 f9c0 	bl	8000618 <__aeabi_dmul>
 8008298:	4682      	mov	sl, r0
 800829a:	468b      	mov	fp, r1
 800829c:	f038 080f 	bics.w	r8, r8, #15
 80082a0:	d04f      	beq.n	8008342 <_strtod_l+0x522>
 80082a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80082a6:	dd22      	ble.n	80082ee <_strtod_l+0x4ce>
 80082a8:	2500      	movs	r5, #0
 80082aa:	462e      	mov	r6, r5
 80082ac:	9507      	str	r5, [sp, #28]
 80082ae:	9505      	str	r5, [sp, #20]
 80082b0:	2322      	movs	r3, #34	; 0x22
 80082b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80083cc <_strtod_l+0x5ac>
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	f04f 0a00 	mov.w	sl, #0
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f43f adf2 	beq.w	8007ea8 <_strtod_l+0x88>
 80082c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082c6:	4620      	mov	r0, r4
 80082c8:	f001 fee6 	bl	800a098 <_Bfree>
 80082cc:	9905      	ldr	r1, [sp, #20]
 80082ce:	4620      	mov	r0, r4
 80082d0:	f001 fee2 	bl	800a098 <_Bfree>
 80082d4:	4631      	mov	r1, r6
 80082d6:	4620      	mov	r0, r4
 80082d8:	f001 fede 	bl	800a098 <_Bfree>
 80082dc:	9907      	ldr	r1, [sp, #28]
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 feda 	bl	800a098 <_Bfree>
 80082e4:	4629      	mov	r1, r5
 80082e6:	4620      	mov	r0, r4
 80082e8:	f001 fed6 	bl	800a098 <_Bfree>
 80082ec:	e5dc      	b.n	8007ea8 <_strtod_l+0x88>
 80082ee:	4b36      	ldr	r3, [pc, #216]	; (80083c8 <_strtod_l+0x5a8>)
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	2300      	movs	r3, #0
 80082f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80082f8:	4650      	mov	r0, sl
 80082fa:	4659      	mov	r1, fp
 80082fc:	4699      	mov	r9, r3
 80082fe:	f1b8 0f01 	cmp.w	r8, #1
 8008302:	dc21      	bgt.n	8008348 <_strtod_l+0x528>
 8008304:	b10b      	cbz	r3, 800830a <_strtod_l+0x4ea>
 8008306:	4682      	mov	sl, r0
 8008308:	468b      	mov	fp, r1
 800830a:	4b2f      	ldr	r3, [pc, #188]	; (80083c8 <_strtod_l+0x5a8>)
 800830c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008310:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008314:	4652      	mov	r2, sl
 8008316:	465b      	mov	r3, fp
 8008318:	e9d9 0100 	ldrd	r0, r1, [r9]
 800831c:	f7f8 f97c 	bl	8000618 <__aeabi_dmul>
 8008320:	4b2a      	ldr	r3, [pc, #168]	; (80083cc <_strtod_l+0x5ac>)
 8008322:	460a      	mov	r2, r1
 8008324:	400b      	ands	r3, r1
 8008326:	492a      	ldr	r1, [pc, #168]	; (80083d0 <_strtod_l+0x5b0>)
 8008328:	428b      	cmp	r3, r1
 800832a:	4682      	mov	sl, r0
 800832c:	d8bc      	bhi.n	80082a8 <_strtod_l+0x488>
 800832e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008332:	428b      	cmp	r3, r1
 8008334:	bf86      	itte	hi
 8008336:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80083d4 <_strtod_l+0x5b4>
 800833a:	f04f 3aff 	movhi.w	sl, #4294967295
 800833e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008342:	2300      	movs	r3, #0
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	e084      	b.n	8008452 <_strtod_l+0x632>
 8008348:	f018 0f01 	tst.w	r8, #1
 800834c:	d005      	beq.n	800835a <_strtod_l+0x53a>
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f8 f960 	bl	8000618 <__aeabi_dmul>
 8008358:	2301      	movs	r3, #1
 800835a:	9a04      	ldr	r2, [sp, #16]
 800835c:	3208      	adds	r2, #8
 800835e:	f109 0901 	add.w	r9, r9, #1
 8008362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008366:	9204      	str	r2, [sp, #16]
 8008368:	e7c9      	b.n	80082fe <_strtod_l+0x4de>
 800836a:	d0ea      	beq.n	8008342 <_strtod_l+0x522>
 800836c:	f1c8 0800 	rsb	r8, r8, #0
 8008370:	f018 020f 	ands.w	r2, r8, #15
 8008374:	d00a      	beq.n	800838c <_strtod_l+0x56c>
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <_strtod_l+0x5a4>)
 8008378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800837c:	4650      	mov	r0, sl
 800837e:	4659      	mov	r1, fp
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7f8 fa72 	bl	800086c <__aeabi_ddiv>
 8008388:	4682      	mov	sl, r0
 800838a:	468b      	mov	fp, r1
 800838c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008390:	d0d7      	beq.n	8008342 <_strtod_l+0x522>
 8008392:	f1b8 0f1f 	cmp.w	r8, #31
 8008396:	dd1f      	ble.n	80083d8 <_strtod_l+0x5b8>
 8008398:	2500      	movs	r5, #0
 800839a:	462e      	mov	r6, r5
 800839c:	9507      	str	r5, [sp, #28]
 800839e:	9505      	str	r5, [sp, #20]
 80083a0:	2322      	movs	r3, #34	; 0x22
 80083a2:	f04f 0a00 	mov.w	sl, #0
 80083a6:	f04f 0b00 	mov.w	fp, #0
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	e786      	b.n	80082bc <_strtod_l+0x49c>
 80083ae:	bf00      	nop
 80083b0:	0800c201 	.word	0x0800c201
 80083b4:	0800c240 	.word	0x0800c240
 80083b8:	0800c1f9 	.word	0x0800c1f9
 80083bc:	0800c384 	.word	0x0800c384
 80083c0:	0800c64b 	.word	0x0800c64b
 80083c4:	0800c510 	.word	0x0800c510
 80083c8:	0800c4e8 	.word	0x0800c4e8
 80083cc:	7ff00000 	.word	0x7ff00000
 80083d0:	7ca00000 	.word	0x7ca00000
 80083d4:	7fefffff 	.word	0x7fefffff
 80083d8:	f018 0310 	ands.w	r3, r8, #16
 80083dc:	bf18      	it	ne
 80083de:	236a      	movne	r3, #106	; 0x6a
 80083e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008790 <_strtod_l+0x970>
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	4650      	mov	r0, sl
 80083e8:	4659      	mov	r1, fp
 80083ea:	2300      	movs	r3, #0
 80083ec:	f018 0f01 	tst.w	r8, #1
 80083f0:	d004      	beq.n	80083fc <_strtod_l+0x5dc>
 80083f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80083f6:	f7f8 f90f 	bl	8000618 <__aeabi_dmul>
 80083fa:	2301      	movs	r3, #1
 80083fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008400:	f109 0908 	add.w	r9, r9, #8
 8008404:	d1f2      	bne.n	80083ec <_strtod_l+0x5cc>
 8008406:	b10b      	cbz	r3, 800840c <_strtod_l+0x5ec>
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	b1c3      	cbz	r3, 8008442 <_strtod_l+0x622>
 8008410:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008414:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008418:	2b00      	cmp	r3, #0
 800841a:	4659      	mov	r1, fp
 800841c:	dd11      	ble.n	8008442 <_strtod_l+0x622>
 800841e:	2b1f      	cmp	r3, #31
 8008420:	f340 8124 	ble.w	800866c <_strtod_l+0x84c>
 8008424:	2b34      	cmp	r3, #52	; 0x34
 8008426:	bfde      	ittt	le
 8008428:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800842c:	f04f 33ff 	movle.w	r3, #4294967295
 8008430:	fa03 f202 	lslle.w	r2, r3, r2
 8008434:	f04f 0a00 	mov.w	sl, #0
 8008438:	bfcc      	ite	gt
 800843a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800843e:	ea02 0b01 	andle.w	fp, r2, r1
 8008442:	2200      	movs	r2, #0
 8008444:	2300      	movs	r3, #0
 8008446:	4650      	mov	r0, sl
 8008448:	4659      	mov	r1, fp
 800844a:	f7f8 fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800844e:	2800      	cmp	r0, #0
 8008450:	d1a2      	bne.n	8008398 <_strtod_l+0x578>
 8008452:	9b07      	ldr	r3, [sp, #28]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	9908      	ldr	r1, [sp, #32]
 8008458:	462b      	mov	r3, r5
 800845a:	463a      	mov	r2, r7
 800845c:	4620      	mov	r0, r4
 800845e:	f001 fe83 	bl	800a168 <__s2b>
 8008462:	9007      	str	r0, [sp, #28]
 8008464:	2800      	cmp	r0, #0
 8008466:	f43f af1f 	beq.w	80082a8 <_strtod_l+0x488>
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	1b9e      	subs	r6, r3, r6
 800846e:	9b06      	ldr	r3, [sp, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	bfb4      	ite	lt
 8008474:	4633      	movlt	r3, r6
 8008476:	2300      	movge	r3, #0
 8008478:	930c      	str	r3, [sp, #48]	; 0x30
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	2500      	movs	r5, #0
 800847e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008482:	9312      	str	r3, [sp, #72]	; 0x48
 8008484:	462e      	mov	r6, r5
 8008486:	9b07      	ldr	r3, [sp, #28]
 8008488:	4620      	mov	r0, r4
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	f001 fdc4 	bl	800a018 <_Balloc>
 8008490:	9005      	str	r0, [sp, #20]
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f af0c 	beq.w	80082b0 <_strtod_l+0x490>
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	3202      	adds	r2, #2
 800849e:	f103 010c 	add.w	r1, r3, #12
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	300c      	adds	r0, #12
 80084a6:	f001 fda9 	bl	8009ffc <memcpy>
 80084aa:	ec4b ab10 	vmov	d0, sl, fp
 80084ae:	aa1a      	add	r2, sp, #104	; 0x68
 80084b0:	a919      	add	r1, sp, #100	; 0x64
 80084b2:	4620      	mov	r0, r4
 80084b4:	f002 f99e 	bl	800a7f4 <__d2b>
 80084b8:	ec4b ab18 	vmov	d8, sl, fp
 80084bc:	9018      	str	r0, [sp, #96]	; 0x60
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f aef6 	beq.w	80082b0 <_strtod_l+0x490>
 80084c4:	2101      	movs	r1, #1
 80084c6:	4620      	mov	r0, r4
 80084c8:	f001 fee8 	bl	800a29c <__i2b>
 80084cc:	4606      	mov	r6, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f43f aeee 	beq.w	80082b0 <_strtod_l+0x490>
 80084d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084d6:	9904      	ldr	r1, [sp, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	bfab      	itete	ge
 80084dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80084de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80084e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80084e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80084e6:	bfac      	ite	ge
 80084e8:	eb03 0902 	addge.w	r9, r3, r2
 80084ec:	1ad7      	sublt	r7, r2, r3
 80084ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084f0:	eba3 0801 	sub.w	r8, r3, r1
 80084f4:	4490      	add	r8, r2
 80084f6:	4ba1      	ldr	r3, [pc, #644]	; (800877c <_strtod_l+0x95c>)
 80084f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80084fc:	4598      	cmp	r8, r3
 80084fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008502:	f280 80c7 	bge.w	8008694 <_strtod_l+0x874>
 8008506:	eba3 0308 	sub.w	r3, r3, r8
 800850a:	2b1f      	cmp	r3, #31
 800850c:	eba2 0203 	sub.w	r2, r2, r3
 8008510:	f04f 0101 	mov.w	r1, #1
 8008514:	f300 80b1 	bgt.w	800867a <_strtod_l+0x85a>
 8008518:	fa01 f303 	lsl.w	r3, r1, r3
 800851c:	930d      	str	r3, [sp, #52]	; 0x34
 800851e:	2300      	movs	r3, #0
 8008520:	9308      	str	r3, [sp, #32]
 8008522:	eb09 0802 	add.w	r8, r9, r2
 8008526:	9b04      	ldr	r3, [sp, #16]
 8008528:	45c1      	cmp	r9, r8
 800852a:	4417      	add	r7, r2
 800852c:	441f      	add	r7, r3
 800852e:	464b      	mov	r3, r9
 8008530:	bfa8      	it	ge
 8008532:	4643      	movge	r3, r8
 8008534:	42bb      	cmp	r3, r7
 8008536:	bfa8      	it	ge
 8008538:	463b      	movge	r3, r7
 800853a:	2b00      	cmp	r3, #0
 800853c:	bfc2      	ittt	gt
 800853e:	eba8 0803 	subgt.w	r8, r8, r3
 8008542:	1aff      	subgt	r7, r7, r3
 8008544:	eba9 0903 	subgt.w	r9, r9, r3
 8008548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800854a:	2b00      	cmp	r3, #0
 800854c:	dd17      	ble.n	800857e <_strtod_l+0x75e>
 800854e:	4631      	mov	r1, r6
 8008550:	461a      	mov	r2, r3
 8008552:	4620      	mov	r0, r4
 8008554:	f001 ff62 	bl	800a41c <__pow5mult>
 8008558:	4606      	mov	r6, r0
 800855a:	2800      	cmp	r0, #0
 800855c:	f43f aea8 	beq.w	80082b0 <_strtod_l+0x490>
 8008560:	4601      	mov	r1, r0
 8008562:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008564:	4620      	mov	r0, r4
 8008566:	f001 feaf 	bl	800a2c8 <__multiply>
 800856a:	900b      	str	r0, [sp, #44]	; 0x2c
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f ae9f 	beq.w	80082b0 <_strtod_l+0x490>
 8008572:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008574:	4620      	mov	r0, r4
 8008576:	f001 fd8f 	bl	800a098 <_Bfree>
 800857a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857c:	9318      	str	r3, [sp, #96]	; 0x60
 800857e:	f1b8 0f00 	cmp.w	r8, #0
 8008582:	f300 808c 	bgt.w	800869e <_strtod_l+0x87e>
 8008586:	9b06      	ldr	r3, [sp, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	dd08      	ble.n	800859e <_strtod_l+0x77e>
 800858c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800858e:	9905      	ldr	r1, [sp, #20]
 8008590:	4620      	mov	r0, r4
 8008592:	f001 ff43 	bl	800a41c <__pow5mult>
 8008596:	9005      	str	r0, [sp, #20]
 8008598:	2800      	cmp	r0, #0
 800859a:	f43f ae89 	beq.w	80082b0 <_strtod_l+0x490>
 800859e:	2f00      	cmp	r7, #0
 80085a0:	dd08      	ble.n	80085b4 <_strtod_l+0x794>
 80085a2:	9905      	ldr	r1, [sp, #20]
 80085a4:	463a      	mov	r2, r7
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 ff92 	bl	800a4d0 <__lshift>
 80085ac:	9005      	str	r0, [sp, #20]
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f43f ae7e 	beq.w	80082b0 <_strtod_l+0x490>
 80085b4:	f1b9 0f00 	cmp.w	r9, #0
 80085b8:	dd08      	ble.n	80085cc <_strtod_l+0x7ac>
 80085ba:	4631      	mov	r1, r6
 80085bc:	464a      	mov	r2, r9
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 ff86 	bl	800a4d0 <__lshift>
 80085c4:	4606      	mov	r6, r0
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f43f ae72 	beq.w	80082b0 <_strtod_l+0x490>
 80085cc:	9a05      	ldr	r2, [sp, #20]
 80085ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80085d0:	4620      	mov	r0, r4
 80085d2:	f002 f809 	bl	800a5e8 <__mdiff>
 80085d6:	4605      	mov	r5, r0
 80085d8:	2800      	cmp	r0, #0
 80085da:	f43f ae69 	beq.w	80082b0 <_strtod_l+0x490>
 80085de:	68c3      	ldr	r3, [r0, #12]
 80085e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e2:	2300      	movs	r3, #0
 80085e4:	60c3      	str	r3, [r0, #12]
 80085e6:	4631      	mov	r1, r6
 80085e8:	f001 ffe2 	bl	800a5b0 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	da60      	bge.n	80086b2 <_strtod_l+0x892>
 80085f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f2:	ea53 030a 	orrs.w	r3, r3, sl
 80085f6:	f040 8082 	bne.w	80086fe <_strtod_l+0x8de>
 80085fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d17d      	bne.n	80086fe <_strtod_l+0x8de>
 8008602:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008606:	0d1b      	lsrs	r3, r3, #20
 8008608:	051b      	lsls	r3, r3, #20
 800860a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800860e:	d976      	bls.n	80086fe <_strtod_l+0x8de>
 8008610:	696b      	ldr	r3, [r5, #20]
 8008612:	b913      	cbnz	r3, 800861a <_strtod_l+0x7fa>
 8008614:	692b      	ldr	r3, [r5, #16]
 8008616:	2b01      	cmp	r3, #1
 8008618:	dd71      	ble.n	80086fe <_strtod_l+0x8de>
 800861a:	4629      	mov	r1, r5
 800861c:	2201      	movs	r2, #1
 800861e:	4620      	mov	r0, r4
 8008620:	f001 ff56 	bl	800a4d0 <__lshift>
 8008624:	4631      	mov	r1, r6
 8008626:	4605      	mov	r5, r0
 8008628:	f001 ffc2 	bl	800a5b0 <__mcmp>
 800862c:	2800      	cmp	r0, #0
 800862e:	dd66      	ble.n	80086fe <_strtod_l+0x8de>
 8008630:	9904      	ldr	r1, [sp, #16]
 8008632:	4a53      	ldr	r2, [pc, #332]	; (8008780 <_strtod_l+0x960>)
 8008634:	465b      	mov	r3, fp
 8008636:	2900      	cmp	r1, #0
 8008638:	f000 8081 	beq.w	800873e <_strtod_l+0x91e>
 800863c:	ea02 010b 	and.w	r1, r2, fp
 8008640:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008644:	dc7b      	bgt.n	800873e <_strtod_l+0x91e>
 8008646:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800864a:	f77f aea9 	ble.w	80083a0 <_strtod_l+0x580>
 800864e:	4b4d      	ldr	r3, [pc, #308]	; (8008784 <_strtod_l+0x964>)
 8008650:	4650      	mov	r0, sl
 8008652:	4659      	mov	r1, fp
 8008654:	2200      	movs	r2, #0
 8008656:	f7f7 ffdf 	bl	8000618 <__aeabi_dmul>
 800865a:	460b      	mov	r3, r1
 800865c:	4303      	orrs	r3, r0
 800865e:	bf08      	it	eq
 8008660:	2322      	moveq	r3, #34	; 0x22
 8008662:	4682      	mov	sl, r0
 8008664:	468b      	mov	fp, r1
 8008666:	bf08      	it	eq
 8008668:	6023      	streq	r3, [r4, #0]
 800866a:	e62b      	b.n	80082c4 <_strtod_l+0x4a4>
 800866c:	f04f 32ff 	mov.w	r2, #4294967295
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	ea03 0a0a 	and.w	sl, r3, sl
 8008678:	e6e3      	b.n	8008442 <_strtod_l+0x622>
 800867a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800867e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008682:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008686:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800868a:	fa01 f308 	lsl.w	r3, r1, r8
 800868e:	9308      	str	r3, [sp, #32]
 8008690:	910d      	str	r1, [sp, #52]	; 0x34
 8008692:	e746      	b.n	8008522 <_strtod_l+0x702>
 8008694:	2300      	movs	r3, #0
 8008696:	9308      	str	r3, [sp, #32]
 8008698:	2301      	movs	r3, #1
 800869a:	930d      	str	r3, [sp, #52]	; 0x34
 800869c:	e741      	b.n	8008522 <_strtod_l+0x702>
 800869e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086a0:	4642      	mov	r2, r8
 80086a2:	4620      	mov	r0, r4
 80086a4:	f001 ff14 	bl	800a4d0 <__lshift>
 80086a8:	9018      	str	r0, [sp, #96]	; 0x60
 80086aa:	2800      	cmp	r0, #0
 80086ac:	f47f af6b 	bne.w	8008586 <_strtod_l+0x766>
 80086b0:	e5fe      	b.n	80082b0 <_strtod_l+0x490>
 80086b2:	465f      	mov	r7, fp
 80086b4:	d16e      	bne.n	8008794 <_strtod_l+0x974>
 80086b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086bc:	b342      	cbz	r2, 8008710 <_strtod_l+0x8f0>
 80086be:	4a32      	ldr	r2, [pc, #200]	; (8008788 <_strtod_l+0x968>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d128      	bne.n	8008716 <_strtod_l+0x8f6>
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	4651      	mov	r1, sl
 80086c8:	b1eb      	cbz	r3, 8008706 <_strtod_l+0x8e6>
 80086ca:	4b2d      	ldr	r3, [pc, #180]	; (8008780 <_strtod_l+0x960>)
 80086cc:	403b      	ands	r3, r7
 80086ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086d2:	f04f 32ff 	mov.w	r2, #4294967295
 80086d6:	d819      	bhi.n	800870c <_strtod_l+0x8ec>
 80086d8:	0d1b      	lsrs	r3, r3, #20
 80086da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	4299      	cmp	r1, r3
 80086e4:	d117      	bne.n	8008716 <_strtod_l+0x8f6>
 80086e6:	4b29      	ldr	r3, [pc, #164]	; (800878c <_strtod_l+0x96c>)
 80086e8:	429f      	cmp	r7, r3
 80086ea:	d102      	bne.n	80086f2 <_strtod_l+0x8d2>
 80086ec:	3101      	adds	r1, #1
 80086ee:	f43f addf 	beq.w	80082b0 <_strtod_l+0x490>
 80086f2:	4b23      	ldr	r3, [pc, #140]	; (8008780 <_strtod_l+0x960>)
 80086f4:	403b      	ands	r3, r7
 80086f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80086fa:	f04f 0a00 	mov.w	sl, #0
 80086fe:	9b04      	ldr	r3, [sp, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1a4      	bne.n	800864e <_strtod_l+0x82e>
 8008704:	e5de      	b.n	80082c4 <_strtod_l+0x4a4>
 8008706:	f04f 33ff 	mov.w	r3, #4294967295
 800870a:	e7ea      	b.n	80086e2 <_strtod_l+0x8c2>
 800870c:	4613      	mov	r3, r2
 800870e:	e7e8      	b.n	80086e2 <_strtod_l+0x8c2>
 8008710:	ea53 030a 	orrs.w	r3, r3, sl
 8008714:	d08c      	beq.n	8008630 <_strtod_l+0x810>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	b1db      	cbz	r3, 8008752 <_strtod_l+0x932>
 800871a:	423b      	tst	r3, r7
 800871c:	d0ef      	beq.n	80086fe <_strtod_l+0x8de>
 800871e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008720:	9a04      	ldr	r2, [sp, #16]
 8008722:	4650      	mov	r0, sl
 8008724:	4659      	mov	r1, fp
 8008726:	b1c3      	cbz	r3, 800875a <_strtod_l+0x93a>
 8008728:	f7ff fb5d 	bl	8007de6 <sulp>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	ec51 0b18 	vmov	r0, r1, d8
 8008734:	f7f7 fdba 	bl	80002ac <__adddf3>
 8008738:	4682      	mov	sl, r0
 800873a:	468b      	mov	fp, r1
 800873c:	e7df      	b.n	80086fe <_strtod_l+0x8de>
 800873e:	4013      	ands	r3, r2
 8008740:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008744:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008748:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800874c:	f04f 3aff 	mov.w	sl, #4294967295
 8008750:	e7d5      	b.n	80086fe <_strtod_l+0x8de>
 8008752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008754:	ea13 0f0a 	tst.w	r3, sl
 8008758:	e7e0      	b.n	800871c <_strtod_l+0x8fc>
 800875a:	f7ff fb44 	bl	8007de6 <sulp>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	ec51 0b18 	vmov	r0, r1, d8
 8008766:	f7f7 fd9f 	bl	80002a8 <__aeabi_dsub>
 800876a:	2200      	movs	r2, #0
 800876c:	2300      	movs	r3, #0
 800876e:	4682      	mov	sl, r0
 8008770:	468b      	mov	fp, r1
 8008772:	f7f8 f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008776:	2800      	cmp	r0, #0
 8008778:	d0c1      	beq.n	80086fe <_strtod_l+0x8de>
 800877a:	e611      	b.n	80083a0 <_strtod_l+0x580>
 800877c:	fffffc02 	.word	0xfffffc02
 8008780:	7ff00000 	.word	0x7ff00000
 8008784:	39500000 	.word	0x39500000
 8008788:	000fffff 	.word	0x000fffff
 800878c:	7fefffff 	.word	0x7fefffff
 8008790:	0800c258 	.word	0x0800c258
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	f002 f888 	bl	800a8ac <__ratio>
 800879c:	ec59 8b10 	vmov	r8, r9, d0
 80087a0:	ee10 0a10 	vmov	r0, s0
 80087a4:	2200      	movs	r2, #0
 80087a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087aa:	4649      	mov	r1, r9
 80087ac:	f7f8 f9b0 	bl	8000b10 <__aeabi_dcmple>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d07a      	beq.n	80088aa <_strtod_l+0xa8a>
 80087b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d04a      	beq.n	8008850 <_strtod_l+0xa30>
 80087ba:	4b95      	ldr	r3, [pc, #596]	; (8008a10 <_strtod_l+0xbf0>)
 80087bc:	2200      	movs	r2, #0
 80087be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008a10 <_strtod_l+0xbf0>
 80087c6:	f04f 0800 	mov.w	r8, #0
 80087ca:	4b92      	ldr	r3, [pc, #584]	; (8008a14 <_strtod_l+0xbf4>)
 80087cc:	403b      	ands	r3, r7
 80087ce:	930d      	str	r3, [sp, #52]	; 0x34
 80087d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087d2:	4b91      	ldr	r3, [pc, #580]	; (8008a18 <_strtod_l+0xbf8>)
 80087d4:	429a      	cmp	r2, r3
 80087d6:	f040 80b0 	bne.w	800893a <_strtod_l+0xb1a>
 80087da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80087e2:	ec4b ab10 	vmov	d0, sl, fp
 80087e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087ea:	f001 ff87 	bl	800a6fc <__ulp>
 80087ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087f2:	ec53 2b10 	vmov	r2, r3, d0
 80087f6:	f7f7 ff0f 	bl	8000618 <__aeabi_dmul>
 80087fa:	4652      	mov	r2, sl
 80087fc:	465b      	mov	r3, fp
 80087fe:	f7f7 fd55 	bl	80002ac <__adddf3>
 8008802:	460b      	mov	r3, r1
 8008804:	4983      	ldr	r1, [pc, #524]	; (8008a14 <_strtod_l+0xbf4>)
 8008806:	4a85      	ldr	r2, [pc, #532]	; (8008a1c <_strtod_l+0xbfc>)
 8008808:	4019      	ands	r1, r3
 800880a:	4291      	cmp	r1, r2
 800880c:	4682      	mov	sl, r0
 800880e:	d960      	bls.n	80088d2 <_strtod_l+0xab2>
 8008810:	ee18 3a90 	vmov	r3, s17
 8008814:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008818:	4293      	cmp	r3, r2
 800881a:	d104      	bne.n	8008826 <_strtod_l+0xa06>
 800881c:	ee18 3a10 	vmov	r3, s16
 8008820:	3301      	adds	r3, #1
 8008822:	f43f ad45 	beq.w	80082b0 <_strtod_l+0x490>
 8008826:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008a28 <_strtod_l+0xc08>
 800882a:	f04f 3aff 	mov.w	sl, #4294967295
 800882e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008830:	4620      	mov	r0, r4
 8008832:	f001 fc31 	bl	800a098 <_Bfree>
 8008836:	9905      	ldr	r1, [sp, #20]
 8008838:	4620      	mov	r0, r4
 800883a:	f001 fc2d 	bl	800a098 <_Bfree>
 800883e:	4631      	mov	r1, r6
 8008840:	4620      	mov	r0, r4
 8008842:	f001 fc29 	bl	800a098 <_Bfree>
 8008846:	4629      	mov	r1, r5
 8008848:	4620      	mov	r0, r4
 800884a:	f001 fc25 	bl	800a098 <_Bfree>
 800884e:	e61a      	b.n	8008486 <_strtod_l+0x666>
 8008850:	f1ba 0f00 	cmp.w	sl, #0
 8008854:	d11b      	bne.n	800888e <_strtod_l+0xa6e>
 8008856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800885a:	b9f3      	cbnz	r3, 800889a <_strtod_l+0xa7a>
 800885c:	4b6c      	ldr	r3, [pc, #432]	; (8008a10 <_strtod_l+0xbf0>)
 800885e:	2200      	movs	r2, #0
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f7f8 f94a 	bl	8000afc <__aeabi_dcmplt>
 8008868:	b9d0      	cbnz	r0, 80088a0 <_strtod_l+0xa80>
 800886a:	4640      	mov	r0, r8
 800886c:	4649      	mov	r1, r9
 800886e:	4b6c      	ldr	r3, [pc, #432]	; (8008a20 <_strtod_l+0xc00>)
 8008870:	2200      	movs	r2, #0
 8008872:	f7f7 fed1 	bl	8000618 <__aeabi_dmul>
 8008876:	4680      	mov	r8, r0
 8008878:	4689      	mov	r9, r1
 800887a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800887e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008882:	9315      	str	r3, [sp, #84]	; 0x54
 8008884:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008888:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800888c:	e79d      	b.n	80087ca <_strtod_l+0x9aa>
 800888e:	f1ba 0f01 	cmp.w	sl, #1
 8008892:	d102      	bne.n	800889a <_strtod_l+0xa7a>
 8008894:	2f00      	cmp	r7, #0
 8008896:	f43f ad83 	beq.w	80083a0 <_strtod_l+0x580>
 800889a:	4b62      	ldr	r3, [pc, #392]	; (8008a24 <_strtod_l+0xc04>)
 800889c:	2200      	movs	r2, #0
 800889e:	e78e      	b.n	80087be <_strtod_l+0x99e>
 80088a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008a20 <_strtod_l+0xc00>
 80088a4:	f04f 0800 	mov.w	r8, #0
 80088a8:	e7e7      	b.n	800887a <_strtod_l+0xa5a>
 80088aa:	4b5d      	ldr	r3, [pc, #372]	; (8008a20 <_strtod_l+0xc00>)
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	2200      	movs	r2, #0
 80088b2:	f7f7 feb1 	bl	8000618 <__aeabi_dmul>
 80088b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b8:	4680      	mov	r8, r0
 80088ba:	4689      	mov	r9, r1
 80088bc:	b933      	cbnz	r3, 80088cc <_strtod_l+0xaac>
 80088be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088c2:	900e      	str	r0, [sp, #56]	; 0x38
 80088c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80088ca:	e7dd      	b.n	8008888 <_strtod_l+0xa68>
 80088cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80088d0:	e7f9      	b.n	80088c6 <_strtod_l+0xaa6>
 80088d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1a8      	bne.n	800882e <_strtod_l+0xa0e>
 80088dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088e2:	0d1b      	lsrs	r3, r3, #20
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d1a1      	bne.n	800882e <_strtod_l+0xa0e>
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f8 f9f3 	bl	8000cd8 <__aeabi_d2lz>
 80088f2:	f7f7 fe63 	bl	80005bc <__aeabi_l2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4640      	mov	r0, r8
 80088fc:	4649      	mov	r1, r9
 80088fe:	f7f7 fcd3 	bl	80002a8 <__aeabi_dsub>
 8008902:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008908:	ea43 030a 	orr.w	r3, r3, sl
 800890c:	4313      	orrs	r3, r2
 800890e:	4680      	mov	r8, r0
 8008910:	4689      	mov	r9, r1
 8008912:	d055      	beq.n	80089c0 <_strtod_l+0xba0>
 8008914:	a336      	add	r3, pc, #216	; (adr r3, 80089f0 <_strtod_l+0xbd0>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f8 f8ef 	bl	8000afc <__aeabi_dcmplt>
 800891e:	2800      	cmp	r0, #0
 8008920:	f47f acd0 	bne.w	80082c4 <_strtod_l+0x4a4>
 8008924:	a334      	add	r3, pc, #208	; (adr r3, 80089f8 <_strtod_l+0xbd8>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f8 f903 	bl	8000b38 <__aeabi_dcmpgt>
 8008932:	2800      	cmp	r0, #0
 8008934:	f43f af7b 	beq.w	800882e <_strtod_l+0xa0e>
 8008938:	e4c4      	b.n	80082c4 <_strtod_l+0x4a4>
 800893a:	9b04      	ldr	r3, [sp, #16]
 800893c:	b333      	cbz	r3, 800898c <_strtod_l+0xb6c>
 800893e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008940:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008944:	d822      	bhi.n	800898c <_strtod_l+0xb6c>
 8008946:	a32e      	add	r3, pc, #184	; (adr r3, 8008a00 <_strtod_l+0xbe0>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	f7f8 f8de 	bl	8000b10 <__aeabi_dcmple>
 8008954:	b1a0      	cbz	r0, 8008980 <_strtod_l+0xb60>
 8008956:	4649      	mov	r1, r9
 8008958:	4640      	mov	r0, r8
 800895a:	f7f8 f935 	bl	8000bc8 <__aeabi_d2uiz>
 800895e:	2801      	cmp	r0, #1
 8008960:	bf38      	it	cc
 8008962:	2001      	movcc	r0, #1
 8008964:	f7f7 fdde 	bl	8000524 <__aeabi_ui2d>
 8008968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800896a:	4680      	mov	r8, r0
 800896c:	4689      	mov	r9, r1
 800896e:	bb23      	cbnz	r3, 80089ba <_strtod_l+0xb9a>
 8008970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008974:	9010      	str	r0, [sp, #64]	; 0x40
 8008976:	9311      	str	r3, [sp, #68]	; 0x44
 8008978:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800897c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008982:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008984:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	9309      	str	r3, [sp, #36]	; 0x24
 800898c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008990:	eeb0 0a48 	vmov.f32	s0, s16
 8008994:	eef0 0a68 	vmov.f32	s1, s17
 8008998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800899c:	f001 feae 	bl	800a6fc <__ulp>
 80089a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089a4:	ec53 2b10 	vmov	r2, r3, d0
 80089a8:	f7f7 fe36 	bl	8000618 <__aeabi_dmul>
 80089ac:	ec53 2b18 	vmov	r2, r3, d8
 80089b0:	f7f7 fc7c 	bl	80002ac <__adddf3>
 80089b4:	4682      	mov	sl, r0
 80089b6:	468b      	mov	fp, r1
 80089b8:	e78d      	b.n	80088d6 <_strtod_l+0xab6>
 80089ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80089be:	e7db      	b.n	8008978 <_strtod_l+0xb58>
 80089c0:	a311      	add	r3, pc, #68	; (adr r3, 8008a08 <_strtod_l+0xbe8>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f7f8 f899 	bl	8000afc <__aeabi_dcmplt>
 80089ca:	e7b2      	b.n	8008932 <_strtod_l+0xb12>
 80089cc:	2300      	movs	r3, #0
 80089ce:	930a      	str	r3, [sp, #40]	; 0x28
 80089d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	f7ff ba6b 	b.w	8007eb0 <_strtod_l+0x90>
 80089da:	2a65      	cmp	r2, #101	; 0x65
 80089dc:	f43f ab5f 	beq.w	800809e <_strtod_l+0x27e>
 80089e0:	2a45      	cmp	r2, #69	; 0x45
 80089e2:	f43f ab5c 	beq.w	800809e <_strtod_l+0x27e>
 80089e6:	2301      	movs	r3, #1
 80089e8:	f7ff bb94 	b.w	8008114 <_strtod_l+0x2f4>
 80089ec:	f3af 8000 	nop.w
 80089f0:	94a03595 	.word	0x94a03595
 80089f4:	3fdfffff 	.word	0x3fdfffff
 80089f8:	35afe535 	.word	0x35afe535
 80089fc:	3fe00000 	.word	0x3fe00000
 8008a00:	ffc00000 	.word	0xffc00000
 8008a04:	41dfffff 	.word	0x41dfffff
 8008a08:	94a03595 	.word	0x94a03595
 8008a0c:	3fcfffff 	.word	0x3fcfffff
 8008a10:	3ff00000 	.word	0x3ff00000
 8008a14:	7ff00000 	.word	0x7ff00000
 8008a18:	7fe00000 	.word	0x7fe00000
 8008a1c:	7c9fffff 	.word	0x7c9fffff
 8008a20:	3fe00000 	.word	0x3fe00000
 8008a24:	bff00000 	.word	0xbff00000
 8008a28:	7fefffff 	.word	0x7fefffff

08008a2c <_strtod_r>:
 8008a2c:	4b01      	ldr	r3, [pc, #4]	; (8008a34 <_strtod_r+0x8>)
 8008a2e:	f7ff b9f7 	b.w	8007e20 <_strtod_l>
 8008a32:	bf00      	nop
 8008a34:	2000087c 	.word	0x2000087c

08008a38 <_strtol_l.constprop.0>:
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3e:	d001      	beq.n	8008a44 <_strtol_l.constprop.0+0xc>
 8008a40:	2b24      	cmp	r3, #36	; 0x24
 8008a42:	d906      	bls.n	8008a52 <_strtol_l.constprop.0+0x1a>
 8008a44:	f7fe fa78 	bl	8006f38 <__errno>
 8008a48:	2316      	movs	r3, #22
 8008a4a:	6003      	str	r3, [r0, #0]
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b38 <_strtol_l.constprop.0+0x100>
 8008a56:	460d      	mov	r5, r1
 8008a58:	462e      	mov	r6, r5
 8008a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008a62:	f017 0708 	ands.w	r7, r7, #8
 8008a66:	d1f7      	bne.n	8008a58 <_strtol_l.constprop.0+0x20>
 8008a68:	2c2d      	cmp	r4, #45	; 0x2d
 8008a6a:	d132      	bne.n	8008ad2 <_strtol_l.constprop.0+0x9a>
 8008a6c:	782c      	ldrb	r4, [r5, #0]
 8008a6e:	2701      	movs	r7, #1
 8008a70:	1cb5      	adds	r5, r6, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d05b      	beq.n	8008b2e <_strtol_l.constprop.0+0xf6>
 8008a76:	2b10      	cmp	r3, #16
 8008a78:	d109      	bne.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008a7a:	2c30      	cmp	r4, #48	; 0x30
 8008a7c:	d107      	bne.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008a7e:	782c      	ldrb	r4, [r5, #0]
 8008a80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a84:	2c58      	cmp	r4, #88	; 0x58
 8008a86:	d14d      	bne.n	8008b24 <_strtol_l.constprop.0+0xec>
 8008a88:	786c      	ldrb	r4, [r5, #1]
 8008a8a:	2310      	movs	r3, #16
 8008a8c:	3502      	adds	r5, #2
 8008a8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a92:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a96:	f04f 0c00 	mov.w	ip, #0
 8008a9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a9e:	4666      	mov	r6, ip
 8008aa0:	fb03 8a19 	mls	sl, r3, r9, r8
 8008aa4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008aa8:	f1be 0f09 	cmp.w	lr, #9
 8008aac:	d816      	bhi.n	8008adc <_strtol_l.constprop.0+0xa4>
 8008aae:	4674      	mov	r4, lr
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	dd24      	ble.n	8008afe <_strtol_l.constprop.0+0xc6>
 8008ab4:	f1bc 0f00 	cmp.w	ip, #0
 8008ab8:	db1e      	blt.n	8008af8 <_strtol_l.constprop.0+0xc0>
 8008aba:	45b1      	cmp	r9, r6
 8008abc:	d31c      	bcc.n	8008af8 <_strtol_l.constprop.0+0xc0>
 8008abe:	d101      	bne.n	8008ac4 <_strtol_l.constprop.0+0x8c>
 8008ac0:	45a2      	cmp	sl, r4
 8008ac2:	db19      	blt.n	8008af8 <_strtol_l.constprop.0+0xc0>
 8008ac4:	fb06 4603 	mla	r6, r6, r3, r4
 8008ac8:	f04f 0c01 	mov.w	ip, #1
 8008acc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ad0:	e7e8      	b.n	8008aa4 <_strtol_l.constprop.0+0x6c>
 8008ad2:	2c2b      	cmp	r4, #43	; 0x2b
 8008ad4:	bf04      	itt	eq
 8008ad6:	782c      	ldrbeq	r4, [r5, #0]
 8008ad8:	1cb5      	addeq	r5, r6, #2
 8008ada:	e7ca      	b.n	8008a72 <_strtol_l.constprop.0+0x3a>
 8008adc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008ae0:	f1be 0f19 	cmp.w	lr, #25
 8008ae4:	d801      	bhi.n	8008aea <_strtol_l.constprop.0+0xb2>
 8008ae6:	3c37      	subs	r4, #55	; 0x37
 8008ae8:	e7e2      	b.n	8008ab0 <_strtol_l.constprop.0+0x78>
 8008aea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008aee:	f1be 0f19 	cmp.w	lr, #25
 8008af2:	d804      	bhi.n	8008afe <_strtol_l.constprop.0+0xc6>
 8008af4:	3c57      	subs	r4, #87	; 0x57
 8008af6:	e7db      	b.n	8008ab0 <_strtol_l.constprop.0+0x78>
 8008af8:	f04f 3cff 	mov.w	ip, #4294967295
 8008afc:	e7e6      	b.n	8008acc <_strtol_l.constprop.0+0x94>
 8008afe:	f1bc 0f00 	cmp.w	ip, #0
 8008b02:	da05      	bge.n	8008b10 <_strtol_l.constprop.0+0xd8>
 8008b04:	2322      	movs	r3, #34	; 0x22
 8008b06:	6003      	str	r3, [r0, #0]
 8008b08:	4646      	mov	r6, r8
 8008b0a:	b942      	cbnz	r2, 8008b1e <_strtol_l.constprop.0+0xe6>
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	e79e      	b.n	8008a4e <_strtol_l.constprop.0+0x16>
 8008b10:	b107      	cbz	r7, 8008b14 <_strtol_l.constprop.0+0xdc>
 8008b12:	4276      	negs	r6, r6
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	d0f9      	beq.n	8008b0c <_strtol_l.constprop.0+0xd4>
 8008b18:	f1bc 0f00 	cmp.w	ip, #0
 8008b1c:	d000      	beq.n	8008b20 <_strtol_l.constprop.0+0xe8>
 8008b1e:	1e69      	subs	r1, r5, #1
 8008b20:	6011      	str	r1, [r2, #0]
 8008b22:	e7f3      	b.n	8008b0c <_strtol_l.constprop.0+0xd4>
 8008b24:	2430      	movs	r4, #48	; 0x30
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1b1      	bne.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	e7af      	b.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008b2e:	2c30      	cmp	r4, #48	; 0x30
 8008b30:	d0a5      	beq.n	8008a7e <_strtol_l.constprop.0+0x46>
 8008b32:	230a      	movs	r3, #10
 8008b34:	e7ab      	b.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008b36:	bf00      	nop
 8008b38:	0800c281 	.word	0x0800c281

08008b3c <_strtol_r>:
 8008b3c:	f7ff bf7c 	b.w	8008a38 <_strtol_l.constprop.0>

08008b40 <_vsiprintf_r>:
 8008b40:	b500      	push	{lr}
 8008b42:	b09b      	sub	sp, #108	; 0x6c
 8008b44:	9100      	str	r1, [sp, #0]
 8008b46:	9104      	str	r1, [sp, #16]
 8008b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b4c:	9105      	str	r1, [sp, #20]
 8008b4e:	9102      	str	r1, [sp, #8]
 8008b50:	4905      	ldr	r1, [pc, #20]	; (8008b68 <_vsiprintf_r+0x28>)
 8008b52:	9103      	str	r1, [sp, #12]
 8008b54:	4669      	mov	r1, sp
 8008b56:	f002 f873 	bl	800ac40 <_svfiprintf_r>
 8008b5a:	9b00      	ldr	r3, [sp, #0]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	b01b      	add	sp, #108	; 0x6c
 8008b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b66:	bf00      	nop
 8008b68:	ffff0208 	.word	0xffff0208

08008b6c <vsiprintf>:
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	460a      	mov	r2, r1
 8008b70:	4601      	mov	r1, r0
 8008b72:	4802      	ldr	r0, [pc, #8]	; (8008b7c <vsiprintf+0x10>)
 8008b74:	6800      	ldr	r0, [r0, #0]
 8008b76:	f7ff bfe3 	b.w	8008b40 <_vsiprintf_r>
 8008b7a:	bf00      	nop
 8008b7c:	20000814 	.word	0x20000814

08008b80 <_write_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_write_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f7fa f8cd 	bl	8002d2e <_write>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_write_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_write_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	200010c8 	.word	0x200010c8

08008ba4 <_close_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d06      	ldr	r5, [pc, #24]	; (8008bc0 <_close_r+0x1c>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	602b      	str	r3, [r5, #0]
 8008bb0:	f7fa f8d9 	bl	8002d66 <_close>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_close_r+0x1a>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_close_r+0x1a>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	200010c8 	.word	0x200010c8

08008bc4 <quorem>:
 8008bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	6903      	ldr	r3, [r0, #16]
 8008bca:	690c      	ldr	r4, [r1, #16]
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	4607      	mov	r7, r0
 8008bd0:	f2c0 8081 	blt.w	8008cd6 <quorem+0x112>
 8008bd4:	3c01      	subs	r4, #1
 8008bd6:	f101 0814 	add.w	r8, r1, #20
 8008bda:	f100 0514 	add.w	r5, r0, #20
 8008bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008be8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bec:	3301      	adds	r3, #1
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bfc:	d331      	bcc.n	8008c62 <quorem+0x9e>
 8008bfe:	f04f 0e00 	mov.w	lr, #0
 8008c02:	4640      	mov	r0, r8
 8008c04:	46ac      	mov	ip, r5
 8008c06:	46f2      	mov	sl, lr
 8008c08:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c0c:	b293      	uxth	r3, r2
 8008c0e:	fb06 e303 	mla	r3, r6, r3, lr
 8008c12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	ebaa 0303 	sub.w	r3, sl, r3
 8008c1c:	f8dc a000 	ldr.w	sl, [ip]
 8008c20:	0c12      	lsrs	r2, r2, #16
 8008c22:	fa13 f38a 	uxtah	r3, r3, sl
 8008c26:	fb06 e202 	mla	r2, r6, r2, lr
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	9b00      	ldr	r3, [sp, #0]
 8008c2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c32:	b292      	uxth	r2, r2
 8008c34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c40:	4581      	cmp	r9, r0
 8008c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c46:	f84c 3b04 	str.w	r3, [ip], #4
 8008c4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c4e:	d2db      	bcs.n	8008c08 <quorem+0x44>
 8008c50:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c54:	b92b      	cbnz	r3, 8008c62 <quorem+0x9e>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	3b04      	subs	r3, #4
 8008c5a:	429d      	cmp	r5, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	d32e      	bcc.n	8008cbe <quorem+0xfa>
 8008c60:	613c      	str	r4, [r7, #16]
 8008c62:	4638      	mov	r0, r7
 8008c64:	f001 fca4 	bl	800a5b0 <__mcmp>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	db24      	blt.n	8008cb6 <quorem+0xf2>
 8008c6c:	3601      	adds	r6, #1
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f04f 0c00 	mov.w	ip, #0
 8008c74:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c78:	f8d0 e000 	ldr.w	lr, [r0]
 8008c7c:	b293      	uxth	r3, r2
 8008c7e:	ebac 0303 	sub.w	r3, ip, r3
 8008c82:	0c12      	lsrs	r2, r2, #16
 8008c84:	fa13 f38e 	uxtah	r3, r3, lr
 8008c88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c96:	45c1      	cmp	r9, r8
 8008c98:	f840 3b04 	str.w	r3, [r0], #4
 8008c9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ca0:	d2e8      	bcs.n	8008c74 <quorem+0xb0>
 8008ca2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ca6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008caa:	b922      	cbnz	r2, 8008cb6 <quorem+0xf2>
 8008cac:	3b04      	subs	r3, #4
 8008cae:	429d      	cmp	r5, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	d30a      	bcc.n	8008cca <quorem+0x106>
 8008cb4:	613c      	str	r4, [r7, #16]
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	b003      	add	sp, #12
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbe:	6812      	ldr	r2, [r2, #0]
 8008cc0:	3b04      	subs	r3, #4
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	d1cc      	bne.n	8008c60 <quorem+0x9c>
 8008cc6:	3c01      	subs	r4, #1
 8008cc8:	e7c7      	b.n	8008c5a <quorem+0x96>
 8008cca:	6812      	ldr	r2, [r2, #0]
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <quorem+0xf0>
 8008cd2:	3c01      	subs	r4, #1
 8008cd4:	e7eb      	b.n	8008cae <quorem+0xea>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e7ee      	b.n	8008cb8 <quorem+0xf4>
 8008cda:	0000      	movs	r0, r0
 8008cdc:	0000      	movs	r0, r0
	...

08008ce0 <_dtoa_r>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	ed2d 8b04 	vpush	{d8-d9}
 8008ce8:	ec57 6b10 	vmov	r6, r7, d0
 8008cec:	b093      	sub	sp, #76	; 0x4c
 8008cee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008cf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cf4:	9106      	str	r1, [sp, #24]
 8008cf6:	ee10 aa10 	vmov	sl, s0
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8008d00:	46bb      	mov	fp, r7
 8008d02:	b975      	cbnz	r5, 8008d22 <_dtoa_r+0x42>
 8008d04:	2010      	movs	r0, #16
 8008d06:	f001 f95f 	bl	8009fc8 <malloc>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	6260      	str	r0, [r4, #36]	; 0x24
 8008d0e:	b920      	cbnz	r0, 8008d1a <_dtoa_r+0x3a>
 8008d10:	4ba7      	ldr	r3, [pc, #668]	; (8008fb0 <_dtoa_r+0x2d0>)
 8008d12:	21ea      	movs	r1, #234	; 0xea
 8008d14:	48a7      	ldr	r0, [pc, #668]	; (8008fb4 <_dtoa_r+0x2d4>)
 8008d16:	f002 fcd7 	bl	800b6c8 <__assert_func>
 8008d1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d1e:	6005      	str	r5, [r0, #0]
 8008d20:	60c5      	str	r5, [r0, #12]
 8008d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d24:	6819      	ldr	r1, [r3, #0]
 8008d26:	b151      	cbz	r1, 8008d3e <_dtoa_r+0x5e>
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	604a      	str	r2, [r1, #4]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4093      	lsls	r3, r2
 8008d30:	608b      	str	r3, [r1, #8]
 8008d32:	4620      	mov	r0, r4
 8008d34:	f001 f9b0 	bl	800a098 <_Bfree>
 8008d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	1e3b      	subs	r3, r7, #0
 8008d40:	bfaa      	itet	ge
 8008d42:	2300      	movge	r3, #0
 8008d44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d48:	f8c8 3000 	strge.w	r3, [r8]
 8008d4c:	4b9a      	ldr	r3, [pc, #616]	; (8008fb8 <_dtoa_r+0x2d8>)
 8008d4e:	bfbc      	itt	lt
 8008d50:	2201      	movlt	r2, #1
 8008d52:	f8c8 2000 	strlt.w	r2, [r8]
 8008d56:	ea33 030b 	bics.w	r3, r3, fp
 8008d5a:	d11b      	bne.n	8008d94 <_dtoa_r+0xb4>
 8008d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d68:	4333      	orrs	r3, r6
 8008d6a:	f000 8592 	beq.w	8009892 <_dtoa_r+0xbb2>
 8008d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d70:	b963      	cbnz	r3, 8008d8c <_dtoa_r+0xac>
 8008d72:	4b92      	ldr	r3, [pc, #584]	; (8008fbc <_dtoa_r+0x2dc>)
 8008d74:	e022      	b.n	8008dbc <_dtoa_r+0xdc>
 8008d76:	4b92      	ldr	r3, [pc, #584]	; (8008fc0 <_dtoa_r+0x2e0>)
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	9801      	ldr	r0, [sp, #4]
 8008d82:	b013      	add	sp, #76	; 0x4c
 8008d84:	ecbd 8b04 	vpop	{d8-d9}
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	4b8b      	ldr	r3, [pc, #556]	; (8008fbc <_dtoa_r+0x2dc>)
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	3303      	adds	r3, #3
 8008d92:	e7f3      	b.n	8008d7c <_dtoa_r+0x9c>
 8008d94:	2200      	movs	r2, #0
 8008d96:	2300      	movs	r3, #0
 8008d98:	4650      	mov	r0, sl
 8008d9a:	4659      	mov	r1, fp
 8008d9c:	f7f7 fea4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008da0:	ec4b ab19 	vmov	d9, sl, fp
 8008da4:	4680      	mov	r8, r0
 8008da6:	b158      	cbz	r0, 8008dc0 <_dtoa_r+0xe0>
 8008da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008daa:	2301      	movs	r3, #1
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 856b 	beq.w	800988c <_dtoa_r+0xbac>
 8008db6:	4883      	ldr	r0, [pc, #524]	; (8008fc4 <_dtoa_r+0x2e4>)
 8008db8:	6018      	str	r0, [r3, #0]
 8008dba:	1e43      	subs	r3, r0, #1
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	e7df      	b.n	8008d80 <_dtoa_r+0xa0>
 8008dc0:	ec4b ab10 	vmov	d0, sl, fp
 8008dc4:	aa10      	add	r2, sp, #64	; 0x40
 8008dc6:	a911      	add	r1, sp, #68	; 0x44
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f001 fd13 	bl	800a7f4 <__d2b>
 8008dce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008dd2:	ee08 0a10 	vmov	s16, r0
 8008dd6:	2d00      	cmp	r5, #0
 8008dd8:	f000 8084 	beq.w	8008ee4 <_dtoa_r+0x204>
 8008ddc:	ee19 3a90 	vmov	r3, s19
 8008de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008de4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008de8:	4656      	mov	r6, sl
 8008dea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008dee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008df2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008df6:	4b74      	ldr	r3, [pc, #464]	; (8008fc8 <_dtoa_r+0x2e8>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f7f7 fa53 	bl	80002a8 <__aeabi_dsub>
 8008e02:	a365      	add	r3, pc, #404	; (adr r3, 8008f98 <_dtoa_r+0x2b8>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fc06 	bl	8000618 <__aeabi_dmul>
 8008e0c:	a364      	add	r3, pc, #400	; (adr r3, 8008fa0 <_dtoa_r+0x2c0>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fa4b 	bl	80002ac <__adddf3>
 8008e16:	4606      	mov	r6, r0
 8008e18:	4628      	mov	r0, r5
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	f7f7 fb92 	bl	8000544 <__aeabi_i2d>
 8008e20:	a361      	add	r3, pc, #388	; (adr r3, 8008fa8 <_dtoa_r+0x2c8>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fbf7 	bl	8000618 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fa3b 	bl	80002ac <__adddf3>
 8008e36:	4606      	mov	r6, r0
 8008e38:	460f      	mov	r7, r1
 8008e3a:	f7f7 fe9d 	bl	8000b78 <__aeabi_d2iz>
 8008e3e:	2200      	movs	r2, #0
 8008e40:	9000      	str	r0, [sp, #0]
 8008e42:	2300      	movs	r3, #0
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f7 fe58 	bl	8000afc <__aeabi_dcmplt>
 8008e4c:	b150      	cbz	r0, 8008e64 <_dtoa_r+0x184>
 8008e4e:	9800      	ldr	r0, [sp, #0]
 8008e50:	f7f7 fb78 	bl	8000544 <__aeabi_i2d>
 8008e54:	4632      	mov	r2, r6
 8008e56:	463b      	mov	r3, r7
 8008e58:	f7f7 fe46 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e5c:	b910      	cbnz	r0, 8008e64 <_dtoa_r+0x184>
 8008e5e:	9b00      	ldr	r3, [sp, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	9b00      	ldr	r3, [sp, #0]
 8008e66:	2b16      	cmp	r3, #22
 8008e68:	d85a      	bhi.n	8008f20 <_dtoa_r+0x240>
 8008e6a:	9a00      	ldr	r2, [sp, #0]
 8008e6c:	4b57      	ldr	r3, [pc, #348]	; (8008fcc <_dtoa_r+0x2ec>)
 8008e6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	ec51 0b19 	vmov	r0, r1, d9
 8008e7a:	f7f7 fe3f 	bl	8000afc <__aeabi_dcmplt>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d050      	beq.n	8008f24 <_dtoa_r+0x244>
 8008e82:	9b00      	ldr	r3, [sp, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e8e:	1b5d      	subs	r5, r3, r5
 8008e90:	1e6b      	subs	r3, r5, #1
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	bf45      	ittet	mi
 8008e96:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e9a:	9304      	strmi	r3, [sp, #16]
 8008e9c:	2300      	movpl	r3, #0
 8008e9e:	2300      	movmi	r3, #0
 8008ea0:	bf4c      	ite	mi
 8008ea2:	9305      	strmi	r3, [sp, #20]
 8008ea4:	9304      	strpl	r3, [sp, #16]
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	db3d      	blt.n	8008f28 <_dtoa_r+0x248>
 8008eac:	9b05      	ldr	r3, [sp, #20]
 8008eae:	9a00      	ldr	r2, [sp, #0]
 8008eb0:	920a      	str	r2, [sp, #40]	; 0x28
 8008eb2:	4413      	add	r3, r2
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9307      	str	r3, [sp, #28]
 8008eba:	9b06      	ldr	r3, [sp, #24]
 8008ebc:	2b09      	cmp	r3, #9
 8008ebe:	f200 8089 	bhi.w	8008fd4 <_dtoa_r+0x2f4>
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	bfc4      	itt	gt
 8008ec6:	3b04      	subgt	r3, #4
 8008ec8:	9306      	strgt	r3, [sp, #24]
 8008eca:	9b06      	ldr	r3, [sp, #24]
 8008ecc:	f1a3 0302 	sub.w	r3, r3, #2
 8008ed0:	bfcc      	ite	gt
 8008ed2:	2500      	movgt	r5, #0
 8008ed4:	2501      	movle	r5, #1
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	f200 8087 	bhi.w	8008fea <_dtoa_r+0x30a>
 8008edc:	e8df f003 	tbb	[pc, r3]
 8008ee0:	59383a2d 	.word	0x59383a2d
 8008ee4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ee8:	441d      	add	r5, r3
 8008eea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	bfc1      	itttt	gt
 8008ef2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ef6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008efa:	fa0b f303 	lslgt.w	r3, fp, r3
 8008efe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f02:	bfda      	itte	le
 8008f04:	f1c3 0320 	rsble	r3, r3, #32
 8008f08:	fa06 f003 	lslle.w	r0, r6, r3
 8008f0c:	4318      	orrgt	r0, r3
 8008f0e:	f7f7 fb09 	bl	8000524 <__aeabi_ui2d>
 8008f12:	2301      	movs	r3, #1
 8008f14:	4606      	mov	r6, r0
 8008f16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f1a:	3d01      	subs	r5, #1
 8008f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8008f1e:	e76a      	b.n	8008df6 <_dtoa_r+0x116>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e7b2      	b.n	8008e8a <_dtoa_r+0x1aa>
 8008f24:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f26:	e7b1      	b.n	8008e8c <_dtoa_r+0x1ac>
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	9a00      	ldr	r2, [sp, #0]
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	4253      	negs	r3, r2
 8008f32:	9307      	str	r3, [sp, #28]
 8008f34:	2300      	movs	r3, #0
 8008f36:	930a      	str	r3, [sp, #40]	; 0x28
 8008f38:	e7bf      	b.n	8008eba <_dtoa_r+0x1da>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9308      	str	r3, [sp, #32]
 8008f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dc55      	bgt.n	8008ff0 <_dtoa_r+0x310>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f4e:	e00c      	b.n	8008f6a <_dtoa_r+0x28a>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e7f3      	b.n	8008f3c <_dtoa_r+0x25c>
 8008f54:	2300      	movs	r3, #0
 8008f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f58:	9308      	str	r3, [sp, #32]
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	9302      	str	r3, [sp, #8]
 8008f60:	3301      	adds	r3, #1
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	bfb8      	it	lt
 8008f68:	2301      	movlt	r3, #1
 8008f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	6042      	str	r2, [r0, #4]
 8008f70:	2204      	movs	r2, #4
 8008f72:	f102 0614 	add.w	r6, r2, #20
 8008f76:	429e      	cmp	r6, r3
 8008f78:	6841      	ldr	r1, [r0, #4]
 8008f7a:	d93d      	bls.n	8008ff8 <_dtoa_r+0x318>
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f001 f84b 	bl	800a018 <_Balloc>
 8008f82:	9001      	str	r0, [sp, #4]
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d13b      	bne.n	8009000 <_dtoa_r+0x320>
 8008f88:	4b11      	ldr	r3, [pc, #68]	; (8008fd0 <_dtoa_r+0x2f0>)
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f90:	e6c0      	b.n	8008d14 <_dtoa_r+0x34>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e7df      	b.n	8008f56 <_dtoa_r+0x276>
 8008f96:	bf00      	nop
 8008f98:	636f4361 	.word	0x636f4361
 8008f9c:	3fd287a7 	.word	0x3fd287a7
 8008fa0:	8b60c8b3 	.word	0x8b60c8b3
 8008fa4:	3fc68a28 	.word	0x3fc68a28
 8008fa8:	509f79fb 	.word	0x509f79fb
 8008fac:	3fd34413 	.word	0x3fd34413
 8008fb0:	0800c38e 	.word	0x0800c38e
 8008fb4:	0800c3a5 	.word	0x0800c3a5
 8008fb8:	7ff00000 	.word	0x7ff00000
 8008fbc:	0800c38a 	.word	0x0800c38a
 8008fc0:	0800c381 	.word	0x0800c381
 8008fc4:	0800c5fa 	.word	0x0800c5fa
 8008fc8:	3ff80000 	.word	0x3ff80000
 8008fcc:	0800c510 	.word	0x0800c510
 8008fd0:	0800c400 	.word	0x0800c400
 8008fd4:	2501      	movs	r5, #1
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	9306      	str	r3, [sp, #24]
 8008fda:	9508      	str	r5, [sp, #32]
 8008fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2312      	movs	r3, #18
 8008fe8:	e7b0      	b.n	8008f4c <_dtoa_r+0x26c>
 8008fea:	2301      	movs	r3, #1
 8008fec:	9308      	str	r3, [sp, #32]
 8008fee:	e7f5      	b.n	8008fdc <_dtoa_r+0x2fc>
 8008ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ff6:	e7b8      	b.n	8008f6a <_dtoa_r+0x28a>
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	6041      	str	r1, [r0, #4]
 8008ffc:	0052      	lsls	r2, r2, #1
 8008ffe:	e7b8      	b.n	8008f72 <_dtoa_r+0x292>
 8009000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009002:	9a01      	ldr	r2, [sp, #4]
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	2b0e      	cmp	r3, #14
 800900a:	f200 809d 	bhi.w	8009148 <_dtoa_r+0x468>
 800900e:	2d00      	cmp	r5, #0
 8009010:	f000 809a 	beq.w	8009148 <_dtoa_r+0x468>
 8009014:	9b00      	ldr	r3, [sp, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	dd32      	ble.n	8009080 <_dtoa_r+0x3a0>
 800901a:	4ab7      	ldr	r2, [pc, #732]	; (80092f8 <_dtoa_r+0x618>)
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009028:	9b00      	ldr	r3, [sp, #0]
 800902a:	05d8      	lsls	r0, r3, #23
 800902c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009030:	d516      	bpl.n	8009060 <_dtoa_r+0x380>
 8009032:	4bb2      	ldr	r3, [pc, #712]	; (80092fc <_dtoa_r+0x61c>)
 8009034:	ec51 0b19 	vmov	r0, r1, d9
 8009038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800903c:	f7f7 fc16 	bl	800086c <__aeabi_ddiv>
 8009040:	f007 070f 	and.w	r7, r7, #15
 8009044:	4682      	mov	sl, r0
 8009046:	468b      	mov	fp, r1
 8009048:	2503      	movs	r5, #3
 800904a:	4eac      	ldr	r6, [pc, #688]	; (80092fc <_dtoa_r+0x61c>)
 800904c:	b957      	cbnz	r7, 8009064 <_dtoa_r+0x384>
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	4650      	mov	r0, sl
 8009054:	4659      	mov	r1, fp
 8009056:	f7f7 fc09 	bl	800086c <__aeabi_ddiv>
 800905a:	4682      	mov	sl, r0
 800905c:	468b      	mov	fp, r1
 800905e:	e028      	b.n	80090b2 <_dtoa_r+0x3d2>
 8009060:	2502      	movs	r5, #2
 8009062:	e7f2      	b.n	800904a <_dtoa_r+0x36a>
 8009064:	07f9      	lsls	r1, r7, #31
 8009066:	d508      	bpl.n	800907a <_dtoa_r+0x39a>
 8009068:	4640      	mov	r0, r8
 800906a:	4649      	mov	r1, r9
 800906c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009070:	f7f7 fad2 	bl	8000618 <__aeabi_dmul>
 8009074:	3501      	adds	r5, #1
 8009076:	4680      	mov	r8, r0
 8009078:	4689      	mov	r9, r1
 800907a:	107f      	asrs	r7, r7, #1
 800907c:	3608      	adds	r6, #8
 800907e:	e7e5      	b.n	800904c <_dtoa_r+0x36c>
 8009080:	f000 809b 	beq.w	80091ba <_dtoa_r+0x4da>
 8009084:	9b00      	ldr	r3, [sp, #0]
 8009086:	4f9d      	ldr	r7, [pc, #628]	; (80092fc <_dtoa_r+0x61c>)
 8009088:	425e      	negs	r6, r3
 800908a:	4b9b      	ldr	r3, [pc, #620]	; (80092f8 <_dtoa_r+0x618>)
 800908c:	f006 020f 	and.w	r2, r6, #15
 8009090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	ec51 0b19 	vmov	r0, r1, d9
 800909c:	f7f7 fabc 	bl	8000618 <__aeabi_dmul>
 80090a0:	1136      	asrs	r6, r6, #4
 80090a2:	4682      	mov	sl, r0
 80090a4:	468b      	mov	fp, r1
 80090a6:	2300      	movs	r3, #0
 80090a8:	2502      	movs	r5, #2
 80090aa:	2e00      	cmp	r6, #0
 80090ac:	d17a      	bne.n	80091a4 <_dtoa_r+0x4c4>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1d3      	bne.n	800905a <_dtoa_r+0x37a>
 80090b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8082 	beq.w	80091be <_dtoa_r+0x4de>
 80090ba:	4b91      	ldr	r3, [pc, #580]	; (8009300 <_dtoa_r+0x620>)
 80090bc:	2200      	movs	r2, #0
 80090be:	4650      	mov	r0, sl
 80090c0:	4659      	mov	r1, fp
 80090c2:	f7f7 fd1b 	bl	8000afc <__aeabi_dcmplt>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d079      	beq.n	80091be <_dtoa_r+0x4de>
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d076      	beq.n	80091be <_dtoa_r+0x4de>
 80090d0:	9b02      	ldr	r3, [sp, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	dd36      	ble.n	8009144 <_dtoa_r+0x464>
 80090d6:	9b00      	ldr	r3, [sp, #0]
 80090d8:	4650      	mov	r0, sl
 80090da:	4659      	mov	r1, fp
 80090dc:	1e5f      	subs	r7, r3, #1
 80090de:	2200      	movs	r2, #0
 80090e0:	4b88      	ldr	r3, [pc, #544]	; (8009304 <_dtoa_r+0x624>)
 80090e2:	f7f7 fa99 	bl	8000618 <__aeabi_dmul>
 80090e6:	9e02      	ldr	r6, [sp, #8]
 80090e8:	4682      	mov	sl, r0
 80090ea:	468b      	mov	fp, r1
 80090ec:	3501      	adds	r5, #1
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7f7 fa28 	bl	8000544 <__aeabi_i2d>
 80090f4:	4652      	mov	r2, sl
 80090f6:	465b      	mov	r3, fp
 80090f8:	f7f7 fa8e 	bl	8000618 <__aeabi_dmul>
 80090fc:	4b82      	ldr	r3, [pc, #520]	; (8009308 <_dtoa_r+0x628>)
 80090fe:	2200      	movs	r2, #0
 8009100:	f7f7 f8d4 	bl	80002ac <__adddf3>
 8009104:	46d0      	mov	r8, sl
 8009106:	46d9      	mov	r9, fp
 8009108:	4682      	mov	sl, r0
 800910a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800910e:	2e00      	cmp	r6, #0
 8009110:	d158      	bne.n	80091c4 <_dtoa_r+0x4e4>
 8009112:	4b7e      	ldr	r3, [pc, #504]	; (800930c <_dtoa_r+0x62c>)
 8009114:	2200      	movs	r2, #0
 8009116:	4640      	mov	r0, r8
 8009118:	4649      	mov	r1, r9
 800911a:	f7f7 f8c5 	bl	80002a8 <__aeabi_dsub>
 800911e:	4652      	mov	r2, sl
 8009120:	465b      	mov	r3, fp
 8009122:	4680      	mov	r8, r0
 8009124:	4689      	mov	r9, r1
 8009126:	f7f7 fd07 	bl	8000b38 <__aeabi_dcmpgt>
 800912a:	2800      	cmp	r0, #0
 800912c:	f040 8295 	bne.w	800965a <_dtoa_r+0x97a>
 8009130:	4652      	mov	r2, sl
 8009132:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009136:	4640      	mov	r0, r8
 8009138:	4649      	mov	r1, r9
 800913a:	f7f7 fcdf 	bl	8000afc <__aeabi_dcmplt>
 800913e:	2800      	cmp	r0, #0
 8009140:	f040 8289 	bne.w	8009656 <_dtoa_r+0x976>
 8009144:	ec5b ab19 	vmov	sl, fp, d9
 8009148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800914a:	2b00      	cmp	r3, #0
 800914c:	f2c0 8148 	blt.w	80093e0 <_dtoa_r+0x700>
 8009150:	9a00      	ldr	r2, [sp, #0]
 8009152:	2a0e      	cmp	r2, #14
 8009154:	f300 8144 	bgt.w	80093e0 <_dtoa_r+0x700>
 8009158:	4b67      	ldr	r3, [pc, #412]	; (80092f8 <_dtoa_r+0x618>)
 800915a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800915e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009164:	2b00      	cmp	r3, #0
 8009166:	f280 80d5 	bge.w	8009314 <_dtoa_r+0x634>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f300 80d1 	bgt.w	8009314 <_dtoa_r+0x634>
 8009172:	f040 826f 	bne.w	8009654 <_dtoa_r+0x974>
 8009176:	4b65      	ldr	r3, [pc, #404]	; (800930c <_dtoa_r+0x62c>)
 8009178:	2200      	movs	r2, #0
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 fa4b 	bl	8000618 <__aeabi_dmul>
 8009182:	4652      	mov	r2, sl
 8009184:	465b      	mov	r3, fp
 8009186:	f7f7 fccd 	bl	8000b24 <__aeabi_dcmpge>
 800918a:	9e03      	ldr	r6, [sp, #12]
 800918c:	4637      	mov	r7, r6
 800918e:	2800      	cmp	r0, #0
 8009190:	f040 8245 	bne.w	800961e <_dtoa_r+0x93e>
 8009194:	9d01      	ldr	r5, [sp, #4]
 8009196:	2331      	movs	r3, #49	; 0x31
 8009198:	f805 3b01 	strb.w	r3, [r5], #1
 800919c:	9b00      	ldr	r3, [sp, #0]
 800919e:	3301      	adds	r3, #1
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	e240      	b.n	8009626 <_dtoa_r+0x946>
 80091a4:	07f2      	lsls	r2, r6, #31
 80091a6:	d505      	bpl.n	80091b4 <_dtoa_r+0x4d4>
 80091a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ac:	f7f7 fa34 	bl	8000618 <__aeabi_dmul>
 80091b0:	3501      	adds	r5, #1
 80091b2:	2301      	movs	r3, #1
 80091b4:	1076      	asrs	r6, r6, #1
 80091b6:	3708      	adds	r7, #8
 80091b8:	e777      	b.n	80090aa <_dtoa_r+0x3ca>
 80091ba:	2502      	movs	r5, #2
 80091bc:	e779      	b.n	80090b2 <_dtoa_r+0x3d2>
 80091be:	9f00      	ldr	r7, [sp, #0]
 80091c0:	9e03      	ldr	r6, [sp, #12]
 80091c2:	e794      	b.n	80090ee <_dtoa_r+0x40e>
 80091c4:	9901      	ldr	r1, [sp, #4]
 80091c6:	4b4c      	ldr	r3, [pc, #304]	; (80092f8 <_dtoa_r+0x618>)
 80091c8:	4431      	add	r1, r6
 80091ca:	910d      	str	r1, [sp, #52]	; 0x34
 80091cc:	9908      	ldr	r1, [sp, #32]
 80091ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d043      	beq.n	8009262 <_dtoa_r+0x582>
 80091da:	494d      	ldr	r1, [pc, #308]	; (8009310 <_dtoa_r+0x630>)
 80091dc:	2000      	movs	r0, #0
 80091de:	f7f7 fb45 	bl	800086c <__aeabi_ddiv>
 80091e2:	4652      	mov	r2, sl
 80091e4:	465b      	mov	r3, fp
 80091e6:	f7f7 f85f 	bl	80002a8 <__aeabi_dsub>
 80091ea:	9d01      	ldr	r5, [sp, #4]
 80091ec:	4682      	mov	sl, r0
 80091ee:	468b      	mov	fp, r1
 80091f0:	4649      	mov	r1, r9
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7f7 fcc0 	bl	8000b78 <__aeabi_d2iz>
 80091f8:	4606      	mov	r6, r0
 80091fa:	f7f7 f9a3 	bl	8000544 <__aeabi_i2d>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f84f 	bl	80002a8 <__aeabi_dsub>
 800920a:	3630      	adds	r6, #48	; 0x30
 800920c:	f805 6b01 	strb.w	r6, [r5], #1
 8009210:	4652      	mov	r2, sl
 8009212:	465b      	mov	r3, fp
 8009214:	4680      	mov	r8, r0
 8009216:	4689      	mov	r9, r1
 8009218:	f7f7 fc70 	bl	8000afc <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	d163      	bne.n	80092e8 <_dtoa_r+0x608>
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	4936      	ldr	r1, [pc, #216]	; (8009300 <_dtoa_r+0x620>)
 8009226:	2000      	movs	r0, #0
 8009228:	f7f7 f83e 	bl	80002a8 <__aeabi_dsub>
 800922c:	4652      	mov	r2, sl
 800922e:	465b      	mov	r3, fp
 8009230:	f7f7 fc64 	bl	8000afc <__aeabi_dcmplt>
 8009234:	2800      	cmp	r0, #0
 8009236:	f040 80b5 	bne.w	80093a4 <_dtoa_r+0x6c4>
 800923a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800923c:	429d      	cmp	r5, r3
 800923e:	d081      	beq.n	8009144 <_dtoa_r+0x464>
 8009240:	4b30      	ldr	r3, [pc, #192]	; (8009304 <_dtoa_r+0x624>)
 8009242:	2200      	movs	r2, #0
 8009244:	4650      	mov	r0, sl
 8009246:	4659      	mov	r1, fp
 8009248:	f7f7 f9e6 	bl	8000618 <__aeabi_dmul>
 800924c:	4b2d      	ldr	r3, [pc, #180]	; (8009304 <_dtoa_r+0x624>)
 800924e:	4682      	mov	sl, r0
 8009250:	468b      	mov	fp, r1
 8009252:	4640      	mov	r0, r8
 8009254:	4649      	mov	r1, r9
 8009256:	2200      	movs	r2, #0
 8009258:	f7f7 f9de 	bl	8000618 <__aeabi_dmul>
 800925c:	4680      	mov	r8, r0
 800925e:	4689      	mov	r9, r1
 8009260:	e7c6      	b.n	80091f0 <_dtoa_r+0x510>
 8009262:	4650      	mov	r0, sl
 8009264:	4659      	mov	r1, fp
 8009266:	f7f7 f9d7 	bl	8000618 <__aeabi_dmul>
 800926a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800926c:	9d01      	ldr	r5, [sp, #4]
 800926e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009270:	4682      	mov	sl, r0
 8009272:	468b      	mov	fp, r1
 8009274:	4649      	mov	r1, r9
 8009276:	4640      	mov	r0, r8
 8009278:	f7f7 fc7e 	bl	8000b78 <__aeabi_d2iz>
 800927c:	4606      	mov	r6, r0
 800927e:	f7f7 f961 	bl	8000544 <__aeabi_i2d>
 8009282:	3630      	adds	r6, #48	; 0x30
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 f80c 	bl	80002a8 <__aeabi_dsub>
 8009290:	f805 6b01 	strb.w	r6, [r5], #1
 8009294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009296:	429d      	cmp	r5, r3
 8009298:	4680      	mov	r8, r0
 800929a:	4689      	mov	r9, r1
 800929c:	f04f 0200 	mov.w	r2, #0
 80092a0:	d124      	bne.n	80092ec <_dtoa_r+0x60c>
 80092a2:	4b1b      	ldr	r3, [pc, #108]	; (8009310 <_dtoa_r+0x630>)
 80092a4:	4650      	mov	r0, sl
 80092a6:	4659      	mov	r1, fp
 80092a8:	f7f7 f800 	bl	80002ac <__adddf3>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f7 fc40 	bl	8000b38 <__aeabi_dcmpgt>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d173      	bne.n	80093a4 <_dtoa_r+0x6c4>
 80092bc:	4652      	mov	r2, sl
 80092be:	465b      	mov	r3, fp
 80092c0:	4913      	ldr	r1, [pc, #76]	; (8009310 <_dtoa_r+0x630>)
 80092c2:	2000      	movs	r0, #0
 80092c4:	f7f6 fff0 	bl	80002a8 <__aeabi_dsub>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7f7 fc14 	bl	8000afc <__aeabi_dcmplt>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	f43f af35 	beq.w	8009144 <_dtoa_r+0x464>
 80092da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092dc:	1e6b      	subs	r3, r5, #1
 80092de:	930f      	str	r3, [sp, #60]	; 0x3c
 80092e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092e4:	2b30      	cmp	r3, #48	; 0x30
 80092e6:	d0f8      	beq.n	80092da <_dtoa_r+0x5fa>
 80092e8:	9700      	str	r7, [sp, #0]
 80092ea:	e049      	b.n	8009380 <_dtoa_r+0x6a0>
 80092ec:	4b05      	ldr	r3, [pc, #20]	; (8009304 <_dtoa_r+0x624>)
 80092ee:	f7f7 f993 	bl	8000618 <__aeabi_dmul>
 80092f2:	4680      	mov	r8, r0
 80092f4:	4689      	mov	r9, r1
 80092f6:	e7bd      	b.n	8009274 <_dtoa_r+0x594>
 80092f8:	0800c510 	.word	0x0800c510
 80092fc:	0800c4e8 	.word	0x0800c4e8
 8009300:	3ff00000 	.word	0x3ff00000
 8009304:	40240000 	.word	0x40240000
 8009308:	401c0000 	.word	0x401c0000
 800930c:	40140000 	.word	0x40140000
 8009310:	3fe00000 	.word	0x3fe00000
 8009314:	9d01      	ldr	r5, [sp, #4]
 8009316:	4656      	mov	r6, sl
 8009318:	465f      	mov	r7, fp
 800931a:	4642      	mov	r2, r8
 800931c:	464b      	mov	r3, r9
 800931e:	4630      	mov	r0, r6
 8009320:	4639      	mov	r1, r7
 8009322:	f7f7 faa3 	bl	800086c <__aeabi_ddiv>
 8009326:	f7f7 fc27 	bl	8000b78 <__aeabi_d2iz>
 800932a:	4682      	mov	sl, r0
 800932c:	f7f7 f90a 	bl	8000544 <__aeabi_i2d>
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	f7f7 f970 	bl	8000618 <__aeabi_dmul>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4630      	mov	r0, r6
 800933e:	4639      	mov	r1, r7
 8009340:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009344:	f7f6 ffb0 	bl	80002a8 <__aeabi_dsub>
 8009348:	f805 6b01 	strb.w	r6, [r5], #1
 800934c:	9e01      	ldr	r6, [sp, #4]
 800934e:	9f03      	ldr	r7, [sp, #12]
 8009350:	1bae      	subs	r6, r5, r6
 8009352:	42b7      	cmp	r7, r6
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	d135      	bne.n	80093c6 <_dtoa_r+0x6e6>
 800935a:	f7f6 ffa7 	bl	80002ac <__adddf3>
 800935e:	4642      	mov	r2, r8
 8009360:	464b      	mov	r3, r9
 8009362:	4606      	mov	r6, r0
 8009364:	460f      	mov	r7, r1
 8009366:	f7f7 fbe7 	bl	8000b38 <__aeabi_dcmpgt>
 800936a:	b9d0      	cbnz	r0, 80093a2 <_dtoa_r+0x6c2>
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f7 fbb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009378:	b110      	cbz	r0, 8009380 <_dtoa_r+0x6a0>
 800937a:	f01a 0f01 	tst.w	sl, #1
 800937e:	d110      	bne.n	80093a2 <_dtoa_r+0x6c2>
 8009380:	4620      	mov	r0, r4
 8009382:	ee18 1a10 	vmov	r1, s16
 8009386:	f000 fe87 	bl	800a098 <_Bfree>
 800938a:	2300      	movs	r3, #0
 800938c:	9800      	ldr	r0, [sp, #0]
 800938e:	702b      	strb	r3, [r5, #0]
 8009390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009392:	3001      	adds	r0, #1
 8009394:	6018      	str	r0, [r3, #0]
 8009396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009398:	2b00      	cmp	r3, #0
 800939a:	f43f acf1 	beq.w	8008d80 <_dtoa_r+0xa0>
 800939e:	601d      	str	r5, [r3, #0]
 80093a0:	e4ee      	b.n	8008d80 <_dtoa_r+0xa0>
 80093a2:	9f00      	ldr	r7, [sp, #0]
 80093a4:	462b      	mov	r3, r5
 80093a6:	461d      	mov	r5, r3
 80093a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093ac:	2a39      	cmp	r2, #57	; 0x39
 80093ae:	d106      	bne.n	80093be <_dtoa_r+0x6de>
 80093b0:	9a01      	ldr	r2, [sp, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d1f7      	bne.n	80093a6 <_dtoa_r+0x6c6>
 80093b6:	9901      	ldr	r1, [sp, #4]
 80093b8:	2230      	movs	r2, #48	; 0x30
 80093ba:	3701      	adds	r7, #1
 80093bc:	700a      	strb	r2, [r1, #0]
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	3201      	adds	r2, #1
 80093c2:	701a      	strb	r2, [r3, #0]
 80093c4:	e790      	b.n	80092e8 <_dtoa_r+0x608>
 80093c6:	4ba6      	ldr	r3, [pc, #664]	; (8009660 <_dtoa_r+0x980>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	f7f7 f925 	bl	8000618 <__aeabi_dmul>
 80093ce:	2200      	movs	r2, #0
 80093d0:	2300      	movs	r3, #0
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	f7f7 fb87 	bl	8000ae8 <__aeabi_dcmpeq>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d09d      	beq.n	800931a <_dtoa_r+0x63a>
 80093de:	e7cf      	b.n	8009380 <_dtoa_r+0x6a0>
 80093e0:	9a08      	ldr	r2, [sp, #32]
 80093e2:	2a00      	cmp	r2, #0
 80093e4:	f000 80d7 	beq.w	8009596 <_dtoa_r+0x8b6>
 80093e8:	9a06      	ldr	r2, [sp, #24]
 80093ea:	2a01      	cmp	r2, #1
 80093ec:	f300 80ba 	bgt.w	8009564 <_dtoa_r+0x884>
 80093f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	f000 80b2 	beq.w	800955c <_dtoa_r+0x87c>
 80093f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093fc:	9e07      	ldr	r6, [sp, #28]
 80093fe:	9d04      	ldr	r5, [sp, #16]
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	441a      	add	r2, r3
 8009404:	9204      	str	r2, [sp, #16]
 8009406:	9a05      	ldr	r2, [sp, #20]
 8009408:	2101      	movs	r1, #1
 800940a:	441a      	add	r2, r3
 800940c:	4620      	mov	r0, r4
 800940e:	9205      	str	r2, [sp, #20]
 8009410:	f000 ff44 	bl	800a29c <__i2b>
 8009414:	4607      	mov	r7, r0
 8009416:	2d00      	cmp	r5, #0
 8009418:	dd0c      	ble.n	8009434 <_dtoa_r+0x754>
 800941a:	9b05      	ldr	r3, [sp, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	dd09      	ble.n	8009434 <_dtoa_r+0x754>
 8009420:	42ab      	cmp	r3, r5
 8009422:	9a04      	ldr	r2, [sp, #16]
 8009424:	bfa8      	it	ge
 8009426:	462b      	movge	r3, r5
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	9204      	str	r2, [sp, #16]
 800942c:	9a05      	ldr	r2, [sp, #20]
 800942e:	1aed      	subs	r5, r5, r3
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	9305      	str	r3, [sp, #20]
 8009434:	9b07      	ldr	r3, [sp, #28]
 8009436:	b31b      	cbz	r3, 8009480 <_dtoa_r+0x7a0>
 8009438:	9b08      	ldr	r3, [sp, #32]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80af 	beq.w	800959e <_dtoa_r+0x8be>
 8009440:	2e00      	cmp	r6, #0
 8009442:	dd13      	ble.n	800946c <_dtoa_r+0x78c>
 8009444:	4639      	mov	r1, r7
 8009446:	4632      	mov	r2, r6
 8009448:	4620      	mov	r0, r4
 800944a:	f000 ffe7 	bl	800a41c <__pow5mult>
 800944e:	ee18 2a10 	vmov	r2, s16
 8009452:	4601      	mov	r1, r0
 8009454:	4607      	mov	r7, r0
 8009456:	4620      	mov	r0, r4
 8009458:	f000 ff36 	bl	800a2c8 <__multiply>
 800945c:	ee18 1a10 	vmov	r1, s16
 8009460:	4680      	mov	r8, r0
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fe18 	bl	800a098 <_Bfree>
 8009468:	ee08 8a10 	vmov	s16, r8
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	1b9a      	subs	r2, r3, r6
 8009470:	d006      	beq.n	8009480 <_dtoa_r+0x7a0>
 8009472:	ee18 1a10 	vmov	r1, s16
 8009476:	4620      	mov	r0, r4
 8009478:	f000 ffd0 	bl	800a41c <__pow5mult>
 800947c:	ee08 0a10 	vmov	s16, r0
 8009480:	2101      	movs	r1, #1
 8009482:	4620      	mov	r0, r4
 8009484:	f000 ff0a 	bl	800a29c <__i2b>
 8009488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	4606      	mov	r6, r0
 800948e:	f340 8088 	ble.w	80095a2 <_dtoa_r+0x8c2>
 8009492:	461a      	mov	r2, r3
 8009494:	4601      	mov	r1, r0
 8009496:	4620      	mov	r0, r4
 8009498:	f000 ffc0 	bl	800a41c <__pow5mult>
 800949c:	9b06      	ldr	r3, [sp, #24]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	4606      	mov	r6, r0
 80094a2:	f340 8081 	ble.w	80095a8 <_dtoa_r+0x8c8>
 80094a6:	f04f 0800 	mov.w	r8, #0
 80094aa:	6933      	ldr	r3, [r6, #16]
 80094ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094b0:	6918      	ldr	r0, [r3, #16]
 80094b2:	f000 fea3 	bl	800a1fc <__hi0bits>
 80094b6:	f1c0 0020 	rsb	r0, r0, #32
 80094ba:	9b05      	ldr	r3, [sp, #20]
 80094bc:	4418      	add	r0, r3
 80094be:	f010 001f 	ands.w	r0, r0, #31
 80094c2:	f000 8092 	beq.w	80095ea <_dtoa_r+0x90a>
 80094c6:	f1c0 0320 	rsb	r3, r0, #32
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	f340 808a 	ble.w	80095e4 <_dtoa_r+0x904>
 80094d0:	f1c0 001c 	rsb	r0, r0, #28
 80094d4:	9b04      	ldr	r3, [sp, #16]
 80094d6:	4403      	add	r3, r0
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	9b05      	ldr	r3, [sp, #20]
 80094dc:	4403      	add	r3, r0
 80094de:	4405      	add	r5, r0
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	dd07      	ble.n	80094f8 <_dtoa_r+0x818>
 80094e8:	ee18 1a10 	vmov	r1, s16
 80094ec:	461a      	mov	r2, r3
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 ffee 	bl	800a4d0 <__lshift>
 80094f4:	ee08 0a10 	vmov	s16, r0
 80094f8:	9b05      	ldr	r3, [sp, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dd05      	ble.n	800950a <_dtoa_r+0x82a>
 80094fe:	4631      	mov	r1, r6
 8009500:	461a      	mov	r2, r3
 8009502:	4620      	mov	r0, r4
 8009504:	f000 ffe4 	bl	800a4d0 <__lshift>
 8009508:	4606      	mov	r6, r0
 800950a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800950c:	2b00      	cmp	r3, #0
 800950e:	d06e      	beq.n	80095ee <_dtoa_r+0x90e>
 8009510:	ee18 0a10 	vmov	r0, s16
 8009514:	4631      	mov	r1, r6
 8009516:	f001 f84b 	bl	800a5b0 <__mcmp>
 800951a:	2800      	cmp	r0, #0
 800951c:	da67      	bge.n	80095ee <_dtoa_r+0x90e>
 800951e:	9b00      	ldr	r3, [sp, #0]
 8009520:	3b01      	subs	r3, #1
 8009522:	ee18 1a10 	vmov	r1, s16
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	220a      	movs	r2, #10
 800952a:	2300      	movs	r3, #0
 800952c:	4620      	mov	r0, r4
 800952e:	f000 fdd5 	bl	800a0dc <__multadd>
 8009532:	9b08      	ldr	r3, [sp, #32]
 8009534:	ee08 0a10 	vmov	s16, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 81b1 	beq.w	80098a0 <_dtoa_r+0xbc0>
 800953e:	2300      	movs	r3, #0
 8009540:	4639      	mov	r1, r7
 8009542:	220a      	movs	r2, #10
 8009544:	4620      	mov	r0, r4
 8009546:	f000 fdc9 	bl	800a0dc <__multadd>
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	4607      	mov	r7, r0
 8009550:	f300 808e 	bgt.w	8009670 <_dtoa_r+0x990>
 8009554:	9b06      	ldr	r3, [sp, #24]
 8009556:	2b02      	cmp	r3, #2
 8009558:	dc51      	bgt.n	80095fe <_dtoa_r+0x91e>
 800955a:	e089      	b.n	8009670 <_dtoa_r+0x990>
 800955c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800955e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009562:	e74b      	b.n	80093fc <_dtoa_r+0x71c>
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	1e5e      	subs	r6, r3, #1
 8009568:	9b07      	ldr	r3, [sp, #28]
 800956a:	42b3      	cmp	r3, r6
 800956c:	bfbf      	itttt	lt
 800956e:	9b07      	ldrlt	r3, [sp, #28]
 8009570:	9607      	strlt	r6, [sp, #28]
 8009572:	1af2      	sublt	r2, r6, r3
 8009574:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009576:	bfb6      	itet	lt
 8009578:	189b      	addlt	r3, r3, r2
 800957a:	1b9e      	subge	r6, r3, r6
 800957c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	bfb8      	it	lt
 8009582:	2600      	movlt	r6, #0
 8009584:	2b00      	cmp	r3, #0
 8009586:	bfb7      	itett	lt
 8009588:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800958c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009590:	1a9d      	sublt	r5, r3, r2
 8009592:	2300      	movlt	r3, #0
 8009594:	e734      	b.n	8009400 <_dtoa_r+0x720>
 8009596:	9e07      	ldr	r6, [sp, #28]
 8009598:	9d04      	ldr	r5, [sp, #16]
 800959a:	9f08      	ldr	r7, [sp, #32]
 800959c:	e73b      	b.n	8009416 <_dtoa_r+0x736>
 800959e:	9a07      	ldr	r2, [sp, #28]
 80095a0:	e767      	b.n	8009472 <_dtoa_r+0x792>
 80095a2:	9b06      	ldr	r3, [sp, #24]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	dc18      	bgt.n	80095da <_dtoa_r+0x8fa>
 80095a8:	f1ba 0f00 	cmp.w	sl, #0
 80095ac:	d115      	bne.n	80095da <_dtoa_r+0x8fa>
 80095ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095b2:	b993      	cbnz	r3, 80095da <_dtoa_r+0x8fa>
 80095b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095b8:	0d1b      	lsrs	r3, r3, #20
 80095ba:	051b      	lsls	r3, r3, #20
 80095bc:	b183      	cbz	r3, 80095e0 <_dtoa_r+0x900>
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	3301      	adds	r3, #1
 80095c2:	9304      	str	r3, [sp, #16]
 80095c4:	9b05      	ldr	r3, [sp, #20]
 80095c6:	3301      	adds	r3, #1
 80095c8:	9305      	str	r3, [sp, #20]
 80095ca:	f04f 0801 	mov.w	r8, #1
 80095ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f47f af6a 	bne.w	80094aa <_dtoa_r+0x7ca>
 80095d6:	2001      	movs	r0, #1
 80095d8:	e76f      	b.n	80094ba <_dtoa_r+0x7da>
 80095da:	f04f 0800 	mov.w	r8, #0
 80095de:	e7f6      	b.n	80095ce <_dtoa_r+0x8ee>
 80095e0:	4698      	mov	r8, r3
 80095e2:	e7f4      	b.n	80095ce <_dtoa_r+0x8ee>
 80095e4:	f43f af7d 	beq.w	80094e2 <_dtoa_r+0x802>
 80095e8:	4618      	mov	r0, r3
 80095ea:	301c      	adds	r0, #28
 80095ec:	e772      	b.n	80094d4 <_dtoa_r+0x7f4>
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dc37      	bgt.n	8009664 <_dtoa_r+0x984>
 80095f4:	9b06      	ldr	r3, [sp, #24]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	dd34      	ble.n	8009664 <_dtoa_r+0x984>
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	9302      	str	r3, [sp, #8]
 80095fe:	9b02      	ldr	r3, [sp, #8]
 8009600:	b96b      	cbnz	r3, 800961e <_dtoa_r+0x93e>
 8009602:	4631      	mov	r1, r6
 8009604:	2205      	movs	r2, #5
 8009606:	4620      	mov	r0, r4
 8009608:	f000 fd68 	bl	800a0dc <__multadd>
 800960c:	4601      	mov	r1, r0
 800960e:	4606      	mov	r6, r0
 8009610:	ee18 0a10 	vmov	r0, s16
 8009614:	f000 ffcc 	bl	800a5b0 <__mcmp>
 8009618:	2800      	cmp	r0, #0
 800961a:	f73f adbb 	bgt.w	8009194 <_dtoa_r+0x4b4>
 800961e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009620:	9d01      	ldr	r5, [sp, #4]
 8009622:	43db      	mvns	r3, r3
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	f04f 0800 	mov.w	r8, #0
 800962a:	4631      	mov	r1, r6
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fd33 	bl	800a098 <_Bfree>
 8009632:	2f00      	cmp	r7, #0
 8009634:	f43f aea4 	beq.w	8009380 <_dtoa_r+0x6a0>
 8009638:	f1b8 0f00 	cmp.w	r8, #0
 800963c:	d005      	beq.n	800964a <_dtoa_r+0x96a>
 800963e:	45b8      	cmp	r8, r7
 8009640:	d003      	beq.n	800964a <_dtoa_r+0x96a>
 8009642:	4641      	mov	r1, r8
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fd27 	bl	800a098 <_Bfree>
 800964a:	4639      	mov	r1, r7
 800964c:	4620      	mov	r0, r4
 800964e:	f000 fd23 	bl	800a098 <_Bfree>
 8009652:	e695      	b.n	8009380 <_dtoa_r+0x6a0>
 8009654:	2600      	movs	r6, #0
 8009656:	4637      	mov	r7, r6
 8009658:	e7e1      	b.n	800961e <_dtoa_r+0x93e>
 800965a:	9700      	str	r7, [sp, #0]
 800965c:	4637      	mov	r7, r6
 800965e:	e599      	b.n	8009194 <_dtoa_r+0x4b4>
 8009660:	40240000 	.word	0x40240000
 8009664:	9b08      	ldr	r3, [sp, #32]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 80ca 	beq.w	8009800 <_dtoa_r+0xb20>
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	9302      	str	r3, [sp, #8]
 8009670:	2d00      	cmp	r5, #0
 8009672:	dd05      	ble.n	8009680 <_dtoa_r+0x9a0>
 8009674:	4639      	mov	r1, r7
 8009676:	462a      	mov	r2, r5
 8009678:	4620      	mov	r0, r4
 800967a:	f000 ff29 	bl	800a4d0 <__lshift>
 800967e:	4607      	mov	r7, r0
 8009680:	f1b8 0f00 	cmp.w	r8, #0
 8009684:	d05b      	beq.n	800973e <_dtoa_r+0xa5e>
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fcc5 	bl	800a018 <_Balloc>
 800968e:	4605      	mov	r5, r0
 8009690:	b928      	cbnz	r0, 800969e <_dtoa_r+0x9be>
 8009692:	4b87      	ldr	r3, [pc, #540]	; (80098b0 <_dtoa_r+0xbd0>)
 8009694:	4602      	mov	r2, r0
 8009696:	f240 21ea 	movw	r1, #746	; 0x2ea
 800969a:	f7ff bb3b 	b.w	8008d14 <_dtoa_r+0x34>
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	3202      	adds	r2, #2
 80096a2:	0092      	lsls	r2, r2, #2
 80096a4:	f107 010c 	add.w	r1, r7, #12
 80096a8:	300c      	adds	r0, #12
 80096aa:	f000 fca7 	bl	8009ffc <memcpy>
 80096ae:	2201      	movs	r2, #1
 80096b0:	4629      	mov	r1, r5
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 ff0c 	bl	800a4d0 <__lshift>
 80096b8:	9b01      	ldr	r3, [sp, #4]
 80096ba:	f103 0901 	add.w	r9, r3, #1
 80096be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80096c2:	4413      	add	r3, r2
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	f00a 0301 	and.w	r3, sl, #1
 80096ca:	46b8      	mov	r8, r7
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	4607      	mov	r7, r0
 80096d0:	4631      	mov	r1, r6
 80096d2:	ee18 0a10 	vmov	r0, s16
 80096d6:	f7ff fa75 	bl	8008bc4 <quorem>
 80096da:	4641      	mov	r1, r8
 80096dc:	9002      	str	r0, [sp, #8]
 80096de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096e2:	ee18 0a10 	vmov	r0, s16
 80096e6:	f000 ff63 	bl	800a5b0 <__mcmp>
 80096ea:	463a      	mov	r2, r7
 80096ec:	9003      	str	r0, [sp, #12]
 80096ee:	4631      	mov	r1, r6
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 ff79 	bl	800a5e8 <__mdiff>
 80096f6:	68c2      	ldr	r2, [r0, #12]
 80096f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80096fc:	4605      	mov	r5, r0
 80096fe:	bb02      	cbnz	r2, 8009742 <_dtoa_r+0xa62>
 8009700:	4601      	mov	r1, r0
 8009702:	ee18 0a10 	vmov	r0, s16
 8009706:	f000 ff53 	bl	800a5b0 <__mcmp>
 800970a:	4602      	mov	r2, r0
 800970c:	4629      	mov	r1, r5
 800970e:	4620      	mov	r0, r4
 8009710:	9207      	str	r2, [sp, #28]
 8009712:	f000 fcc1 	bl	800a098 <_Bfree>
 8009716:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800971a:	ea43 0102 	orr.w	r1, r3, r2
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	430b      	orrs	r3, r1
 8009722:	464d      	mov	r5, r9
 8009724:	d10f      	bne.n	8009746 <_dtoa_r+0xa66>
 8009726:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800972a:	d02a      	beq.n	8009782 <_dtoa_r+0xaa2>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	dd02      	ble.n	8009738 <_dtoa_r+0xa58>
 8009732:	9b02      	ldr	r3, [sp, #8]
 8009734:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009738:	f88b a000 	strb.w	sl, [fp]
 800973c:	e775      	b.n	800962a <_dtoa_r+0x94a>
 800973e:	4638      	mov	r0, r7
 8009740:	e7ba      	b.n	80096b8 <_dtoa_r+0x9d8>
 8009742:	2201      	movs	r2, #1
 8009744:	e7e2      	b.n	800970c <_dtoa_r+0xa2c>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	db04      	blt.n	8009756 <_dtoa_r+0xa76>
 800974c:	9906      	ldr	r1, [sp, #24]
 800974e:	430b      	orrs	r3, r1
 8009750:	9904      	ldr	r1, [sp, #16]
 8009752:	430b      	orrs	r3, r1
 8009754:	d122      	bne.n	800979c <_dtoa_r+0xabc>
 8009756:	2a00      	cmp	r2, #0
 8009758:	ddee      	ble.n	8009738 <_dtoa_r+0xa58>
 800975a:	ee18 1a10 	vmov	r1, s16
 800975e:	2201      	movs	r2, #1
 8009760:	4620      	mov	r0, r4
 8009762:	f000 feb5 	bl	800a4d0 <__lshift>
 8009766:	4631      	mov	r1, r6
 8009768:	ee08 0a10 	vmov	s16, r0
 800976c:	f000 ff20 	bl	800a5b0 <__mcmp>
 8009770:	2800      	cmp	r0, #0
 8009772:	dc03      	bgt.n	800977c <_dtoa_r+0xa9c>
 8009774:	d1e0      	bne.n	8009738 <_dtoa_r+0xa58>
 8009776:	f01a 0f01 	tst.w	sl, #1
 800977a:	d0dd      	beq.n	8009738 <_dtoa_r+0xa58>
 800977c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009780:	d1d7      	bne.n	8009732 <_dtoa_r+0xa52>
 8009782:	2339      	movs	r3, #57	; 0x39
 8009784:	f88b 3000 	strb.w	r3, [fp]
 8009788:	462b      	mov	r3, r5
 800978a:	461d      	mov	r5, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009792:	2a39      	cmp	r2, #57	; 0x39
 8009794:	d071      	beq.n	800987a <_dtoa_r+0xb9a>
 8009796:	3201      	adds	r2, #1
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	e746      	b.n	800962a <_dtoa_r+0x94a>
 800979c:	2a00      	cmp	r2, #0
 800979e:	dd07      	ble.n	80097b0 <_dtoa_r+0xad0>
 80097a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097a4:	d0ed      	beq.n	8009782 <_dtoa_r+0xaa2>
 80097a6:	f10a 0301 	add.w	r3, sl, #1
 80097aa:	f88b 3000 	strb.w	r3, [fp]
 80097ae:	e73c      	b.n	800962a <_dtoa_r+0x94a>
 80097b0:	9b05      	ldr	r3, [sp, #20]
 80097b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097b6:	4599      	cmp	r9, r3
 80097b8:	d047      	beq.n	800984a <_dtoa_r+0xb6a>
 80097ba:	ee18 1a10 	vmov	r1, s16
 80097be:	2300      	movs	r3, #0
 80097c0:	220a      	movs	r2, #10
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fc8a 	bl	800a0dc <__multadd>
 80097c8:	45b8      	cmp	r8, r7
 80097ca:	ee08 0a10 	vmov	s16, r0
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	f04f 020a 	mov.w	r2, #10
 80097d6:	4641      	mov	r1, r8
 80097d8:	4620      	mov	r0, r4
 80097da:	d106      	bne.n	80097ea <_dtoa_r+0xb0a>
 80097dc:	f000 fc7e 	bl	800a0dc <__multadd>
 80097e0:	4680      	mov	r8, r0
 80097e2:	4607      	mov	r7, r0
 80097e4:	f109 0901 	add.w	r9, r9, #1
 80097e8:	e772      	b.n	80096d0 <_dtoa_r+0x9f0>
 80097ea:	f000 fc77 	bl	800a0dc <__multadd>
 80097ee:	4639      	mov	r1, r7
 80097f0:	4680      	mov	r8, r0
 80097f2:	2300      	movs	r3, #0
 80097f4:	220a      	movs	r2, #10
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 fc70 	bl	800a0dc <__multadd>
 80097fc:	4607      	mov	r7, r0
 80097fe:	e7f1      	b.n	80097e4 <_dtoa_r+0xb04>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	9302      	str	r3, [sp, #8]
 8009804:	9d01      	ldr	r5, [sp, #4]
 8009806:	ee18 0a10 	vmov	r0, s16
 800980a:	4631      	mov	r1, r6
 800980c:	f7ff f9da 	bl	8008bc4 <quorem>
 8009810:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009814:	9b01      	ldr	r3, [sp, #4]
 8009816:	f805 ab01 	strb.w	sl, [r5], #1
 800981a:	1aea      	subs	r2, r5, r3
 800981c:	9b02      	ldr	r3, [sp, #8]
 800981e:	4293      	cmp	r3, r2
 8009820:	dd09      	ble.n	8009836 <_dtoa_r+0xb56>
 8009822:	ee18 1a10 	vmov	r1, s16
 8009826:	2300      	movs	r3, #0
 8009828:	220a      	movs	r2, #10
 800982a:	4620      	mov	r0, r4
 800982c:	f000 fc56 	bl	800a0dc <__multadd>
 8009830:	ee08 0a10 	vmov	s16, r0
 8009834:	e7e7      	b.n	8009806 <_dtoa_r+0xb26>
 8009836:	9b02      	ldr	r3, [sp, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	bfc8      	it	gt
 800983c:	461d      	movgt	r5, r3
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	bfd8      	it	le
 8009842:	2501      	movle	r5, #1
 8009844:	441d      	add	r5, r3
 8009846:	f04f 0800 	mov.w	r8, #0
 800984a:	ee18 1a10 	vmov	r1, s16
 800984e:	2201      	movs	r2, #1
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fe3d 	bl	800a4d0 <__lshift>
 8009856:	4631      	mov	r1, r6
 8009858:	ee08 0a10 	vmov	s16, r0
 800985c:	f000 fea8 	bl	800a5b0 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dc91      	bgt.n	8009788 <_dtoa_r+0xaa8>
 8009864:	d102      	bne.n	800986c <_dtoa_r+0xb8c>
 8009866:	f01a 0f01 	tst.w	sl, #1
 800986a:	d18d      	bne.n	8009788 <_dtoa_r+0xaa8>
 800986c:	462b      	mov	r3, r5
 800986e:	461d      	mov	r5, r3
 8009870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009874:	2a30      	cmp	r2, #48	; 0x30
 8009876:	d0fa      	beq.n	800986e <_dtoa_r+0xb8e>
 8009878:	e6d7      	b.n	800962a <_dtoa_r+0x94a>
 800987a:	9a01      	ldr	r2, [sp, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	d184      	bne.n	800978a <_dtoa_r+0xaaa>
 8009880:	9b00      	ldr	r3, [sp, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	2331      	movs	r3, #49	; 0x31
 8009888:	7013      	strb	r3, [r2, #0]
 800988a:	e6ce      	b.n	800962a <_dtoa_r+0x94a>
 800988c:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <_dtoa_r+0xbd4>)
 800988e:	f7ff ba95 	b.w	8008dbc <_dtoa_r+0xdc>
 8009892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009894:	2b00      	cmp	r3, #0
 8009896:	f47f aa6e 	bne.w	8008d76 <_dtoa_r+0x96>
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <_dtoa_r+0xbd8>)
 800989c:	f7ff ba8e 	b.w	8008dbc <_dtoa_r+0xdc>
 80098a0:	9b02      	ldr	r3, [sp, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dcae      	bgt.n	8009804 <_dtoa_r+0xb24>
 80098a6:	9b06      	ldr	r3, [sp, #24]
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	f73f aea8 	bgt.w	80095fe <_dtoa_r+0x91e>
 80098ae:	e7a9      	b.n	8009804 <_dtoa_r+0xb24>
 80098b0:	0800c400 	.word	0x0800c400
 80098b4:	0800c5f9 	.word	0x0800c5f9
 80098b8:	0800c381 	.word	0x0800c381

080098bc <rshift>:
 80098bc:	6903      	ldr	r3, [r0, #16]
 80098be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80098c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80098ca:	f100 0414 	add.w	r4, r0, #20
 80098ce:	dd45      	ble.n	800995c <rshift+0xa0>
 80098d0:	f011 011f 	ands.w	r1, r1, #31
 80098d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80098d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80098dc:	d10c      	bne.n	80098f8 <rshift+0x3c>
 80098de:	f100 0710 	add.w	r7, r0, #16
 80098e2:	4629      	mov	r1, r5
 80098e4:	42b1      	cmp	r1, r6
 80098e6:	d334      	bcc.n	8009952 <rshift+0x96>
 80098e8:	1a9b      	subs	r3, r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	1eea      	subs	r2, r5, #3
 80098ee:	4296      	cmp	r6, r2
 80098f0:	bf38      	it	cc
 80098f2:	2300      	movcc	r3, #0
 80098f4:	4423      	add	r3, r4
 80098f6:	e015      	b.n	8009924 <rshift+0x68>
 80098f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80098fc:	f1c1 0820 	rsb	r8, r1, #32
 8009900:	40cf      	lsrs	r7, r1
 8009902:	f105 0e04 	add.w	lr, r5, #4
 8009906:	46a1      	mov	r9, r4
 8009908:	4576      	cmp	r6, lr
 800990a:	46f4      	mov	ip, lr
 800990c:	d815      	bhi.n	800993a <rshift+0x7e>
 800990e:	1a9a      	subs	r2, r3, r2
 8009910:	0092      	lsls	r2, r2, #2
 8009912:	3a04      	subs	r2, #4
 8009914:	3501      	adds	r5, #1
 8009916:	42ae      	cmp	r6, r5
 8009918:	bf38      	it	cc
 800991a:	2200      	movcc	r2, #0
 800991c:	18a3      	adds	r3, r4, r2
 800991e:	50a7      	str	r7, [r4, r2]
 8009920:	b107      	cbz	r7, 8009924 <rshift+0x68>
 8009922:	3304      	adds	r3, #4
 8009924:	1b1a      	subs	r2, r3, r4
 8009926:	42a3      	cmp	r3, r4
 8009928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800992c:	bf08      	it	eq
 800992e:	2300      	moveq	r3, #0
 8009930:	6102      	str	r2, [r0, #16]
 8009932:	bf08      	it	eq
 8009934:	6143      	streq	r3, [r0, #20]
 8009936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800993a:	f8dc c000 	ldr.w	ip, [ip]
 800993e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009942:	ea4c 0707 	orr.w	r7, ip, r7
 8009946:	f849 7b04 	str.w	r7, [r9], #4
 800994a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800994e:	40cf      	lsrs	r7, r1
 8009950:	e7da      	b.n	8009908 <rshift+0x4c>
 8009952:	f851 cb04 	ldr.w	ip, [r1], #4
 8009956:	f847 cf04 	str.w	ip, [r7, #4]!
 800995a:	e7c3      	b.n	80098e4 <rshift+0x28>
 800995c:	4623      	mov	r3, r4
 800995e:	e7e1      	b.n	8009924 <rshift+0x68>

08009960 <__hexdig_fun>:
 8009960:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009964:	2b09      	cmp	r3, #9
 8009966:	d802      	bhi.n	800996e <__hexdig_fun+0xe>
 8009968:	3820      	subs	r0, #32
 800996a:	b2c0      	uxtb	r0, r0
 800996c:	4770      	bx	lr
 800996e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009972:	2b05      	cmp	r3, #5
 8009974:	d801      	bhi.n	800997a <__hexdig_fun+0x1a>
 8009976:	3847      	subs	r0, #71	; 0x47
 8009978:	e7f7      	b.n	800996a <__hexdig_fun+0xa>
 800997a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800997e:	2b05      	cmp	r3, #5
 8009980:	d801      	bhi.n	8009986 <__hexdig_fun+0x26>
 8009982:	3827      	subs	r0, #39	; 0x27
 8009984:	e7f1      	b.n	800996a <__hexdig_fun+0xa>
 8009986:	2000      	movs	r0, #0
 8009988:	4770      	bx	lr
	...

0800998c <__gethex>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	ed2d 8b02 	vpush	{d8}
 8009994:	b089      	sub	sp, #36	; 0x24
 8009996:	ee08 0a10 	vmov	s16, r0
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	4bb4      	ldr	r3, [pc, #720]	; (8009c70 <__gethex+0x2e4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	468b      	mov	fp, r1
 80099a6:	4690      	mov	r8, r2
 80099a8:	f7f6 fc22 	bl	80001f0 <strlen>
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	f8db 2000 	ldr.w	r2, [fp]
 80099b2:	4403      	add	r3, r0
 80099b4:	4682      	mov	sl, r0
 80099b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80099ba:	9305      	str	r3, [sp, #20]
 80099bc:	1c93      	adds	r3, r2, #2
 80099be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80099c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80099c6:	32fe      	adds	r2, #254	; 0xfe
 80099c8:	18d1      	adds	r1, r2, r3
 80099ca:	461f      	mov	r7, r3
 80099cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099d0:	9100      	str	r1, [sp, #0]
 80099d2:	2830      	cmp	r0, #48	; 0x30
 80099d4:	d0f8      	beq.n	80099c8 <__gethex+0x3c>
 80099d6:	f7ff ffc3 	bl	8009960 <__hexdig_fun>
 80099da:	4604      	mov	r4, r0
 80099dc:	2800      	cmp	r0, #0
 80099de:	d13a      	bne.n	8009a56 <__gethex+0xca>
 80099e0:	9901      	ldr	r1, [sp, #4]
 80099e2:	4652      	mov	r2, sl
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7fe f9ea 	bl	8007dbe <strncmp>
 80099ea:	4605      	mov	r5, r0
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d168      	bne.n	8009ac2 <__gethex+0x136>
 80099f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80099f4:	eb07 060a 	add.w	r6, r7, sl
 80099f8:	f7ff ffb2 	bl	8009960 <__hexdig_fun>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d062      	beq.n	8009ac6 <__gethex+0x13a>
 8009a00:	4633      	mov	r3, r6
 8009a02:	7818      	ldrb	r0, [r3, #0]
 8009a04:	2830      	cmp	r0, #48	; 0x30
 8009a06:	461f      	mov	r7, r3
 8009a08:	f103 0301 	add.w	r3, r3, #1
 8009a0c:	d0f9      	beq.n	8009a02 <__gethex+0x76>
 8009a0e:	f7ff ffa7 	bl	8009960 <__hexdig_fun>
 8009a12:	2301      	movs	r3, #1
 8009a14:	fab0 f480 	clz	r4, r0
 8009a18:	0964      	lsrs	r4, r4, #5
 8009a1a:	4635      	mov	r5, r6
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	463a      	mov	r2, r7
 8009a20:	4616      	mov	r6, r2
 8009a22:	3201      	adds	r2, #1
 8009a24:	7830      	ldrb	r0, [r6, #0]
 8009a26:	f7ff ff9b 	bl	8009960 <__hexdig_fun>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d1f8      	bne.n	8009a20 <__gethex+0x94>
 8009a2e:	9901      	ldr	r1, [sp, #4]
 8009a30:	4652      	mov	r2, sl
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7fe f9c3 	bl	8007dbe <strncmp>
 8009a38:	b980      	cbnz	r0, 8009a5c <__gethex+0xd0>
 8009a3a:	b94d      	cbnz	r5, 8009a50 <__gethex+0xc4>
 8009a3c:	eb06 050a 	add.w	r5, r6, sl
 8009a40:	462a      	mov	r2, r5
 8009a42:	4616      	mov	r6, r2
 8009a44:	3201      	adds	r2, #1
 8009a46:	7830      	ldrb	r0, [r6, #0]
 8009a48:	f7ff ff8a 	bl	8009960 <__hexdig_fun>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d1f8      	bne.n	8009a42 <__gethex+0xb6>
 8009a50:	1bad      	subs	r5, r5, r6
 8009a52:	00ad      	lsls	r5, r5, #2
 8009a54:	e004      	b.n	8009a60 <__gethex+0xd4>
 8009a56:	2400      	movs	r4, #0
 8009a58:	4625      	mov	r5, r4
 8009a5a:	e7e0      	b.n	8009a1e <__gethex+0x92>
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	d1f7      	bne.n	8009a50 <__gethex+0xc4>
 8009a60:	7833      	ldrb	r3, [r6, #0]
 8009a62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a66:	2b50      	cmp	r3, #80	; 0x50
 8009a68:	d13b      	bne.n	8009ae2 <__gethex+0x156>
 8009a6a:	7873      	ldrb	r3, [r6, #1]
 8009a6c:	2b2b      	cmp	r3, #43	; 0x2b
 8009a6e:	d02c      	beq.n	8009aca <__gethex+0x13e>
 8009a70:	2b2d      	cmp	r3, #45	; 0x2d
 8009a72:	d02e      	beq.n	8009ad2 <__gethex+0x146>
 8009a74:	1c71      	adds	r1, r6, #1
 8009a76:	f04f 0900 	mov.w	r9, #0
 8009a7a:	7808      	ldrb	r0, [r1, #0]
 8009a7c:	f7ff ff70 	bl	8009960 <__hexdig_fun>
 8009a80:	1e43      	subs	r3, r0, #1
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b18      	cmp	r3, #24
 8009a86:	d82c      	bhi.n	8009ae2 <__gethex+0x156>
 8009a88:	f1a0 0210 	sub.w	r2, r0, #16
 8009a8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a90:	f7ff ff66 	bl	8009960 <__hexdig_fun>
 8009a94:	1e43      	subs	r3, r0, #1
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b18      	cmp	r3, #24
 8009a9a:	d91d      	bls.n	8009ad8 <__gethex+0x14c>
 8009a9c:	f1b9 0f00 	cmp.w	r9, #0
 8009aa0:	d000      	beq.n	8009aa4 <__gethex+0x118>
 8009aa2:	4252      	negs	r2, r2
 8009aa4:	4415      	add	r5, r2
 8009aa6:	f8cb 1000 	str.w	r1, [fp]
 8009aaa:	b1e4      	cbz	r4, 8009ae6 <__gethex+0x15a>
 8009aac:	9b00      	ldr	r3, [sp, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bf14      	ite	ne
 8009ab2:	2700      	movne	r7, #0
 8009ab4:	2706      	moveq	r7, #6
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	b009      	add	sp, #36	; 0x24
 8009aba:	ecbd 8b02 	vpop	{d8}
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac2:	463e      	mov	r6, r7
 8009ac4:	4625      	mov	r5, r4
 8009ac6:	2401      	movs	r4, #1
 8009ac8:	e7ca      	b.n	8009a60 <__gethex+0xd4>
 8009aca:	f04f 0900 	mov.w	r9, #0
 8009ace:	1cb1      	adds	r1, r6, #2
 8009ad0:	e7d3      	b.n	8009a7a <__gethex+0xee>
 8009ad2:	f04f 0901 	mov.w	r9, #1
 8009ad6:	e7fa      	b.n	8009ace <__gethex+0x142>
 8009ad8:	230a      	movs	r3, #10
 8009ada:	fb03 0202 	mla	r2, r3, r2, r0
 8009ade:	3a10      	subs	r2, #16
 8009ae0:	e7d4      	b.n	8009a8c <__gethex+0x100>
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	e7df      	b.n	8009aa6 <__gethex+0x11a>
 8009ae6:	1bf3      	subs	r3, r6, r7
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	4621      	mov	r1, r4
 8009aec:	2b07      	cmp	r3, #7
 8009aee:	dc0b      	bgt.n	8009b08 <__gethex+0x17c>
 8009af0:	ee18 0a10 	vmov	r0, s16
 8009af4:	f000 fa90 	bl	800a018 <_Balloc>
 8009af8:	4604      	mov	r4, r0
 8009afa:	b940      	cbnz	r0, 8009b0e <__gethex+0x182>
 8009afc:	4b5d      	ldr	r3, [pc, #372]	; (8009c74 <__gethex+0x2e8>)
 8009afe:	4602      	mov	r2, r0
 8009b00:	21de      	movs	r1, #222	; 0xde
 8009b02:	485d      	ldr	r0, [pc, #372]	; (8009c78 <__gethex+0x2ec>)
 8009b04:	f001 fde0 	bl	800b6c8 <__assert_func>
 8009b08:	3101      	adds	r1, #1
 8009b0a:	105b      	asrs	r3, r3, #1
 8009b0c:	e7ee      	b.n	8009aec <__gethex+0x160>
 8009b0e:	f100 0914 	add.w	r9, r0, #20
 8009b12:	f04f 0b00 	mov.w	fp, #0
 8009b16:	f1ca 0301 	rsb	r3, sl, #1
 8009b1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b1e:	f8cd b000 	str.w	fp, [sp]
 8009b22:	9306      	str	r3, [sp, #24]
 8009b24:	42b7      	cmp	r7, r6
 8009b26:	d340      	bcc.n	8009baa <__gethex+0x21e>
 8009b28:	9802      	ldr	r0, [sp, #8]
 8009b2a:	9b00      	ldr	r3, [sp, #0]
 8009b2c:	f840 3b04 	str.w	r3, [r0], #4
 8009b30:	eba0 0009 	sub.w	r0, r0, r9
 8009b34:	1080      	asrs	r0, r0, #2
 8009b36:	0146      	lsls	r6, r0, #5
 8009b38:	6120      	str	r0, [r4, #16]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fb5e 	bl	800a1fc <__hi0bits>
 8009b40:	1a30      	subs	r0, r6, r0
 8009b42:	f8d8 6000 	ldr.w	r6, [r8]
 8009b46:	42b0      	cmp	r0, r6
 8009b48:	dd63      	ble.n	8009c12 <__gethex+0x286>
 8009b4a:	1b87      	subs	r7, r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 ff02 	bl	800a958 <__any_on>
 8009b54:	4682      	mov	sl, r0
 8009b56:	b1a8      	cbz	r0, 8009b84 <__gethex+0x1f8>
 8009b58:	1e7b      	subs	r3, r7, #1
 8009b5a:	1159      	asrs	r1, r3, #5
 8009b5c:	f003 021f 	and.w	r2, r3, #31
 8009b60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b64:	f04f 0a01 	mov.w	sl, #1
 8009b68:	fa0a f202 	lsl.w	r2, sl, r2
 8009b6c:	420a      	tst	r2, r1
 8009b6e:	d009      	beq.n	8009b84 <__gethex+0x1f8>
 8009b70:	4553      	cmp	r3, sl
 8009b72:	dd05      	ble.n	8009b80 <__gethex+0x1f4>
 8009b74:	1eb9      	subs	r1, r7, #2
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 feee 	bl	800a958 <__any_on>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d145      	bne.n	8009c0c <__gethex+0x280>
 8009b80:	f04f 0a02 	mov.w	sl, #2
 8009b84:	4639      	mov	r1, r7
 8009b86:	4620      	mov	r0, r4
 8009b88:	f7ff fe98 	bl	80098bc <rshift>
 8009b8c:	443d      	add	r5, r7
 8009b8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b92:	42ab      	cmp	r3, r5
 8009b94:	da4c      	bge.n	8009c30 <__gethex+0x2a4>
 8009b96:	ee18 0a10 	vmov	r0, s16
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	f000 fa7c 	bl	800a098 <_Bfree>
 8009ba0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	27a3      	movs	r7, #163	; 0xa3
 8009ba8:	e785      	b.n	8009ab6 <__gethex+0x12a>
 8009baa:	1e73      	subs	r3, r6, #1
 8009bac:	9a05      	ldr	r2, [sp, #20]
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d019      	beq.n	8009bec <__gethex+0x260>
 8009bb8:	f1bb 0f20 	cmp.w	fp, #32
 8009bbc:	d107      	bne.n	8009bce <__gethex+0x242>
 8009bbe:	9b02      	ldr	r3, [sp, #8]
 8009bc0:	9a00      	ldr	r2, [sp, #0]
 8009bc2:	f843 2b04 	str.w	r2, [r3], #4
 8009bc6:	9302      	str	r3, [sp, #8]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	469b      	mov	fp, r3
 8009bce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009bd2:	f7ff fec5 	bl	8009960 <__hexdig_fun>
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	f000 000f 	and.w	r0, r0, #15
 8009bdc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009be0:	4303      	orrs	r3, r0
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	f10b 0b04 	add.w	fp, fp, #4
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	e00d      	b.n	8009c08 <__gethex+0x27c>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	9a06      	ldr	r2, [sp, #24]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	42bb      	cmp	r3, r7
 8009bf4:	d3e0      	bcc.n	8009bb8 <__gethex+0x22c>
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	9901      	ldr	r1, [sp, #4]
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	f7fe f8de 	bl	8007dbe <strncmp>
 8009c02:	9b07      	ldr	r3, [sp, #28]
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d1d7      	bne.n	8009bb8 <__gethex+0x22c>
 8009c08:	461e      	mov	r6, r3
 8009c0a:	e78b      	b.n	8009b24 <__gethex+0x198>
 8009c0c:	f04f 0a03 	mov.w	sl, #3
 8009c10:	e7b8      	b.n	8009b84 <__gethex+0x1f8>
 8009c12:	da0a      	bge.n	8009c2a <__gethex+0x29e>
 8009c14:	1a37      	subs	r7, r6, r0
 8009c16:	4621      	mov	r1, r4
 8009c18:	ee18 0a10 	vmov	r0, s16
 8009c1c:	463a      	mov	r2, r7
 8009c1e:	f000 fc57 	bl	800a4d0 <__lshift>
 8009c22:	1bed      	subs	r5, r5, r7
 8009c24:	4604      	mov	r4, r0
 8009c26:	f100 0914 	add.w	r9, r0, #20
 8009c2a:	f04f 0a00 	mov.w	sl, #0
 8009c2e:	e7ae      	b.n	8009b8e <__gethex+0x202>
 8009c30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c34:	42a8      	cmp	r0, r5
 8009c36:	dd72      	ble.n	8009d1e <__gethex+0x392>
 8009c38:	1b45      	subs	r5, r0, r5
 8009c3a:	42ae      	cmp	r6, r5
 8009c3c:	dc36      	bgt.n	8009cac <__gethex+0x320>
 8009c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d02a      	beq.n	8009c9c <__gethex+0x310>
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d02c      	beq.n	8009ca4 <__gethex+0x318>
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d11c      	bne.n	8009c88 <__gethex+0x2fc>
 8009c4e:	42ae      	cmp	r6, r5
 8009c50:	d11a      	bne.n	8009c88 <__gethex+0x2fc>
 8009c52:	2e01      	cmp	r6, #1
 8009c54:	d112      	bne.n	8009c7c <__gethex+0x2f0>
 8009c56:	9a04      	ldr	r2, [sp, #16]
 8009c58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	6123      	str	r3, [r4, #16]
 8009c62:	f8c9 3000 	str.w	r3, [r9]
 8009c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c68:	2762      	movs	r7, #98	; 0x62
 8009c6a:	601c      	str	r4, [r3, #0]
 8009c6c:	e723      	b.n	8009ab6 <__gethex+0x12a>
 8009c6e:	bf00      	nop
 8009c70:	0800c478 	.word	0x0800c478
 8009c74:	0800c400 	.word	0x0800c400
 8009c78:	0800c411 	.word	0x0800c411
 8009c7c:	1e71      	subs	r1, r6, #1
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 fe6a 	bl	800a958 <__any_on>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d1e6      	bne.n	8009c56 <__gethex+0x2ca>
 8009c88:	ee18 0a10 	vmov	r0, s16
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	f000 fa03 	bl	800a098 <_Bfree>
 8009c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c94:	2300      	movs	r3, #0
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	2750      	movs	r7, #80	; 0x50
 8009c9a:	e70c      	b.n	8009ab6 <__gethex+0x12a>
 8009c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1f2      	bne.n	8009c88 <__gethex+0x2fc>
 8009ca2:	e7d8      	b.n	8009c56 <__gethex+0x2ca>
 8009ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1d5      	bne.n	8009c56 <__gethex+0x2ca>
 8009caa:	e7ed      	b.n	8009c88 <__gethex+0x2fc>
 8009cac:	1e6f      	subs	r7, r5, #1
 8009cae:	f1ba 0f00 	cmp.w	sl, #0
 8009cb2:	d131      	bne.n	8009d18 <__gethex+0x38c>
 8009cb4:	b127      	cbz	r7, 8009cc0 <__gethex+0x334>
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fe4d 	bl	800a958 <__any_on>
 8009cbe:	4682      	mov	sl, r0
 8009cc0:	117b      	asrs	r3, r7, #5
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009cc8:	f007 071f 	and.w	r7, r7, #31
 8009ccc:	fa01 f707 	lsl.w	r7, r1, r7
 8009cd0:	421f      	tst	r7, r3
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	bf18      	it	ne
 8009cd8:	f04a 0a02 	orrne.w	sl, sl, #2
 8009cdc:	1b76      	subs	r6, r6, r5
 8009cde:	f7ff fded 	bl	80098bc <rshift>
 8009ce2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ce6:	2702      	movs	r7, #2
 8009ce8:	f1ba 0f00 	cmp.w	sl, #0
 8009cec:	d048      	beq.n	8009d80 <__gethex+0x3f4>
 8009cee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d015      	beq.n	8009d22 <__gethex+0x396>
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d017      	beq.n	8009d2a <__gethex+0x39e>
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d109      	bne.n	8009d12 <__gethex+0x386>
 8009cfe:	f01a 0f02 	tst.w	sl, #2
 8009d02:	d006      	beq.n	8009d12 <__gethex+0x386>
 8009d04:	f8d9 0000 	ldr.w	r0, [r9]
 8009d08:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d0c:	f01a 0f01 	tst.w	sl, #1
 8009d10:	d10e      	bne.n	8009d30 <__gethex+0x3a4>
 8009d12:	f047 0710 	orr.w	r7, r7, #16
 8009d16:	e033      	b.n	8009d80 <__gethex+0x3f4>
 8009d18:	f04f 0a01 	mov.w	sl, #1
 8009d1c:	e7d0      	b.n	8009cc0 <__gethex+0x334>
 8009d1e:	2701      	movs	r7, #1
 8009d20:	e7e2      	b.n	8009ce8 <__gethex+0x35c>
 8009d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d24:	f1c3 0301 	rsb	r3, r3, #1
 8009d28:	9315      	str	r3, [sp, #84]	; 0x54
 8009d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <__gethex+0x386>
 8009d30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d34:	f104 0314 	add.w	r3, r4, #20
 8009d38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009d40:	f04f 0c00 	mov.w	ip, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d4e:	d01c      	beq.n	8009d8a <__gethex+0x3fe>
 8009d50:	3201      	adds	r2, #1
 8009d52:	6002      	str	r2, [r0, #0]
 8009d54:	2f02      	cmp	r7, #2
 8009d56:	f104 0314 	add.w	r3, r4, #20
 8009d5a:	d13f      	bne.n	8009ddc <__gethex+0x450>
 8009d5c:	f8d8 2000 	ldr.w	r2, [r8]
 8009d60:	3a01      	subs	r2, #1
 8009d62:	42b2      	cmp	r2, r6
 8009d64:	d10a      	bne.n	8009d7c <__gethex+0x3f0>
 8009d66:	1171      	asrs	r1, r6, #5
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d6e:	f006 061f 	and.w	r6, r6, #31
 8009d72:	fa02 f606 	lsl.w	r6, r2, r6
 8009d76:	421e      	tst	r6, r3
 8009d78:	bf18      	it	ne
 8009d7a:	4617      	movne	r7, r2
 8009d7c:	f047 0720 	orr.w	r7, r7, #32
 8009d80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d82:	601c      	str	r4, [r3, #0]
 8009d84:	9b04      	ldr	r3, [sp, #16]
 8009d86:	601d      	str	r5, [r3, #0]
 8009d88:	e695      	b.n	8009ab6 <__gethex+0x12a>
 8009d8a:	4299      	cmp	r1, r3
 8009d8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d90:	d8d8      	bhi.n	8009d44 <__gethex+0x3b8>
 8009d92:	68a3      	ldr	r3, [r4, #8]
 8009d94:	459b      	cmp	fp, r3
 8009d96:	db19      	blt.n	8009dcc <__gethex+0x440>
 8009d98:	6861      	ldr	r1, [r4, #4]
 8009d9a:	ee18 0a10 	vmov	r0, s16
 8009d9e:	3101      	adds	r1, #1
 8009da0:	f000 f93a 	bl	800a018 <_Balloc>
 8009da4:	4681      	mov	r9, r0
 8009da6:	b918      	cbnz	r0, 8009db0 <__gethex+0x424>
 8009da8:	4b1a      	ldr	r3, [pc, #104]	; (8009e14 <__gethex+0x488>)
 8009daa:	4602      	mov	r2, r0
 8009dac:	2184      	movs	r1, #132	; 0x84
 8009dae:	e6a8      	b.n	8009b02 <__gethex+0x176>
 8009db0:	6922      	ldr	r2, [r4, #16]
 8009db2:	3202      	adds	r2, #2
 8009db4:	f104 010c 	add.w	r1, r4, #12
 8009db8:	0092      	lsls	r2, r2, #2
 8009dba:	300c      	adds	r0, #12
 8009dbc:	f000 f91e 	bl	8009ffc <memcpy>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	ee18 0a10 	vmov	r0, s16
 8009dc6:	f000 f967 	bl	800a098 <_Bfree>
 8009dca:	464c      	mov	r4, r9
 8009dcc:	6923      	ldr	r3, [r4, #16]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009dd4:	6122      	str	r2, [r4, #16]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	615a      	str	r2, [r3, #20]
 8009dda:	e7bb      	b.n	8009d54 <__gethex+0x3c8>
 8009ddc:	6922      	ldr	r2, [r4, #16]
 8009dde:	455a      	cmp	r2, fp
 8009de0:	dd0b      	ble.n	8009dfa <__gethex+0x46e>
 8009de2:	2101      	movs	r1, #1
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7ff fd69 	bl	80098bc <rshift>
 8009dea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dee:	3501      	adds	r5, #1
 8009df0:	42ab      	cmp	r3, r5
 8009df2:	f6ff aed0 	blt.w	8009b96 <__gethex+0x20a>
 8009df6:	2701      	movs	r7, #1
 8009df8:	e7c0      	b.n	8009d7c <__gethex+0x3f0>
 8009dfa:	f016 061f 	ands.w	r6, r6, #31
 8009dfe:	d0fa      	beq.n	8009df6 <__gethex+0x46a>
 8009e00:	4453      	add	r3, sl
 8009e02:	f1c6 0620 	rsb	r6, r6, #32
 8009e06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e0a:	f000 f9f7 	bl	800a1fc <__hi0bits>
 8009e0e:	42b0      	cmp	r0, r6
 8009e10:	dbe7      	blt.n	8009de2 <__gethex+0x456>
 8009e12:	e7f0      	b.n	8009df6 <__gethex+0x46a>
 8009e14:	0800c400 	.word	0x0800c400

08009e18 <L_shift>:
 8009e18:	f1c2 0208 	rsb	r2, r2, #8
 8009e1c:	0092      	lsls	r2, r2, #2
 8009e1e:	b570      	push	{r4, r5, r6, lr}
 8009e20:	f1c2 0620 	rsb	r6, r2, #32
 8009e24:	6843      	ldr	r3, [r0, #4]
 8009e26:	6804      	ldr	r4, [r0, #0]
 8009e28:	fa03 f506 	lsl.w	r5, r3, r6
 8009e2c:	432c      	orrs	r4, r5
 8009e2e:	40d3      	lsrs	r3, r2
 8009e30:	6004      	str	r4, [r0, #0]
 8009e32:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e36:	4288      	cmp	r0, r1
 8009e38:	d3f4      	bcc.n	8009e24 <L_shift+0xc>
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}

08009e3c <__match>:
 8009e3c:	b530      	push	{r4, r5, lr}
 8009e3e:	6803      	ldr	r3, [r0, #0]
 8009e40:	3301      	adds	r3, #1
 8009e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e46:	b914      	cbnz	r4, 8009e4e <__match+0x12>
 8009e48:	6003      	str	r3, [r0, #0]
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	bd30      	pop	{r4, r5, pc}
 8009e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e56:	2d19      	cmp	r5, #25
 8009e58:	bf98      	it	ls
 8009e5a:	3220      	addls	r2, #32
 8009e5c:	42a2      	cmp	r2, r4
 8009e5e:	d0f0      	beq.n	8009e42 <__match+0x6>
 8009e60:	2000      	movs	r0, #0
 8009e62:	e7f3      	b.n	8009e4c <__match+0x10>

08009e64 <__hexnan>:
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	680b      	ldr	r3, [r1, #0]
 8009e6a:	115e      	asrs	r6, r3, #5
 8009e6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e70:	f013 031f 	ands.w	r3, r3, #31
 8009e74:	b087      	sub	sp, #28
 8009e76:	bf18      	it	ne
 8009e78:	3604      	addne	r6, #4
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	1f37      	subs	r7, r6, #4
 8009e7e:	4690      	mov	r8, r2
 8009e80:	6802      	ldr	r2, [r0, #0]
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	4682      	mov	sl, r0
 8009e86:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e8a:	46b9      	mov	r9, r7
 8009e8c:	463c      	mov	r4, r7
 8009e8e:	9502      	str	r5, [sp, #8]
 8009e90:	46ab      	mov	fp, r5
 8009e92:	7851      	ldrb	r1, [r2, #1]
 8009e94:	1c53      	adds	r3, r2, #1
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	b341      	cbz	r1, 8009eec <__hexnan+0x88>
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	9205      	str	r2, [sp, #20]
 8009e9e:	9104      	str	r1, [sp, #16]
 8009ea0:	f7ff fd5e 	bl	8009960 <__hexdig_fun>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d14f      	bne.n	8009f48 <__hexnan+0xe4>
 8009ea8:	9904      	ldr	r1, [sp, #16]
 8009eaa:	9a05      	ldr	r2, [sp, #20]
 8009eac:	2920      	cmp	r1, #32
 8009eae:	d818      	bhi.n	8009ee2 <__hexnan+0x7e>
 8009eb0:	9b02      	ldr	r3, [sp, #8]
 8009eb2:	459b      	cmp	fp, r3
 8009eb4:	dd13      	ble.n	8009ede <__hexnan+0x7a>
 8009eb6:	454c      	cmp	r4, r9
 8009eb8:	d206      	bcs.n	8009ec8 <__hexnan+0x64>
 8009eba:	2d07      	cmp	r5, #7
 8009ebc:	dc04      	bgt.n	8009ec8 <__hexnan+0x64>
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f7ff ffa8 	bl	8009e18 <L_shift>
 8009ec8:	4544      	cmp	r4, r8
 8009eca:	d950      	bls.n	8009f6e <__hexnan+0x10a>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f1a4 0904 	sub.w	r9, r4, #4
 8009ed2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ed6:	f8cd b008 	str.w	fp, [sp, #8]
 8009eda:	464c      	mov	r4, r9
 8009edc:	461d      	mov	r5, r3
 8009ede:	9a03      	ldr	r2, [sp, #12]
 8009ee0:	e7d7      	b.n	8009e92 <__hexnan+0x2e>
 8009ee2:	2929      	cmp	r1, #41	; 0x29
 8009ee4:	d156      	bne.n	8009f94 <__hexnan+0x130>
 8009ee6:	3202      	adds	r2, #2
 8009ee8:	f8ca 2000 	str.w	r2, [sl]
 8009eec:	f1bb 0f00 	cmp.w	fp, #0
 8009ef0:	d050      	beq.n	8009f94 <__hexnan+0x130>
 8009ef2:	454c      	cmp	r4, r9
 8009ef4:	d206      	bcs.n	8009f04 <__hexnan+0xa0>
 8009ef6:	2d07      	cmp	r5, #7
 8009ef8:	dc04      	bgt.n	8009f04 <__hexnan+0xa0>
 8009efa:	462a      	mov	r2, r5
 8009efc:	4649      	mov	r1, r9
 8009efe:	4620      	mov	r0, r4
 8009f00:	f7ff ff8a 	bl	8009e18 <L_shift>
 8009f04:	4544      	cmp	r4, r8
 8009f06:	d934      	bls.n	8009f72 <__hexnan+0x10e>
 8009f08:	f1a8 0204 	sub.w	r2, r8, #4
 8009f0c:	4623      	mov	r3, r4
 8009f0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f12:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f16:	429f      	cmp	r7, r3
 8009f18:	d2f9      	bcs.n	8009f0e <__hexnan+0xaa>
 8009f1a:	1b3b      	subs	r3, r7, r4
 8009f1c:	f023 0303 	bic.w	r3, r3, #3
 8009f20:	3304      	adds	r3, #4
 8009f22:	3401      	adds	r4, #1
 8009f24:	3e03      	subs	r6, #3
 8009f26:	42b4      	cmp	r4, r6
 8009f28:	bf88      	it	hi
 8009f2a:	2304      	movhi	r3, #4
 8009f2c:	4443      	add	r3, r8
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f843 2b04 	str.w	r2, [r3], #4
 8009f34:	429f      	cmp	r7, r3
 8009f36:	d2fb      	bcs.n	8009f30 <__hexnan+0xcc>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	b91b      	cbnz	r3, 8009f44 <__hexnan+0xe0>
 8009f3c:	4547      	cmp	r7, r8
 8009f3e:	d127      	bne.n	8009f90 <__hexnan+0x12c>
 8009f40:	2301      	movs	r3, #1
 8009f42:	603b      	str	r3, [r7, #0]
 8009f44:	2005      	movs	r0, #5
 8009f46:	e026      	b.n	8009f96 <__hexnan+0x132>
 8009f48:	3501      	adds	r5, #1
 8009f4a:	2d08      	cmp	r5, #8
 8009f4c:	f10b 0b01 	add.w	fp, fp, #1
 8009f50:	dd06      	ble.n	8009f60 <__hexnan+0xfc>
 8009f52:	4544      	cmp	r4, r8
 8009f54:	d9c3      	bls.n	8009ede <__hexnan+0x7a>
 8009f56:	2300      	movs	r3, #0
 8009f58:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f5c:	2501      	movs	r5, #1
 8009f5e:	3c04      	subs	r4, #4
 8009f60:	6822      	ldr	r2, [r4, #0]
 8009f62:	f000 000f 	and.w	r0, r0, #15
 8009f66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	e7b7      	b.n	8009ede <__hexnan+0x7a>
 8009f6e:	2508      	movs	r5, #8
 8009f70:	e7b5      	b.n	8009ede <__hexnan+0x7a>
 8009f72:	9b01      	ldr	r3, [sp, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0df      	beq.n	8009f38 <__hexnan+0xd4>
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7c:	f1c3 0320 	rsb	r3, r3, #32
 8009f80:	fa22 f303 	lsr.w	r3, r2, r3
 8009f84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f88:	401a      	ands	r2, r3
 8009f8a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009f8e:	e7d3      	b.n	8009f38 <__hexnan+0xd4>
 8009f90:	3f04      	subs	r7, #4
 8009f92:	e7d1      	b.n	8009f38 <__hexnan+0xd4>
 8009f94:	2004      	movs	r0, #4
 8009f96:	b007      	add	sp, #28
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f9c <_localeconv_r>:
 8009f9c:	4800      	ldr	r0, [pc, #0]	; (8009fa0 <_localeconv_r+0x4>)
 8009f9e:	4770      	bx	lr
 8009fa0:	2000096c 	.word	0x2000096c

08009fa4 <_lseek_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_lseek_r+0x20>)
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f7f8 fefe 	bl	8002db4 <_lseek>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_lseek_r+0x1e>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_lseek_r+0x1e>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	200010c8 	.word	0x200010c8

08009fc8 <malloc>:
 8009fc8:	4b02      	ldr	r3, [pc, #8]	; (8009fd4 <malloc+0xc>)
 8009fca:	4601      	mov	r1, r0
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	f000 bd67 	b.w	800aaa0 <_malloc_r>
 8009fd2:	bf00      	nop
 8009fd4:	20000814 	.word	0x20000814

08009fd8 <__ascii_mbtowc>:
 8009fd8:	b082      	sub	sp, #8
 8009fda:	b901      	cbnz	r1, 8009fde <__ascii_mbtowc+0x6>
 8009fdc:	a901      	add	r1, sp, #4
 8009fde:	b142      	cbz	r2, 8009ff2 <__ascii_mbtowc+0x1a>
 8009fe0:	b14b      	cbz	r3, 8009ff6 <__ascii_mbtowc+0x1e>
 8009fe2:	7813      	ldrb	r3, [r2, #0]
 8009fe4:	600b      	str	r3, [r1, #0]
 8009fe6:	7812      	ldrb	r2, [r2, #0]
 8009fe8:	1e10      	subs	r0, r2, #0
 8009fea:	bf18      	it	ne
 8009fec:	2001      	movne	r0, #1
 8009fee:	b002      	add	sp, #8
 8009ff0:	4770      	bx	lr
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	e7fb      	b.n	8009fee <__ascii_mbtowc+0x16>
 8009ff6:	f06f 0001 	mvn.w	r0, #1
 8009ffa:	e7f8      	b.n	8009fee <__ascii_mbtowc+0x16>

08009ffc <memcpy>:
 8009ffc:	440a      	add	r2, r1
 8009ffe:	4291      	cmp	r1, r2
 800a000:	f100 33ff 	add.w	r3, r0, #4294967295
 800a004:	d100      	bne.n	800a008 <memcpy+0xc>
 800a006:	4770      	bx	lr
 800a008:	b510      	push	{r4, lr}
 800a00a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a00e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a012:	4291      	cmp	r1, r2
 800a014:	d1f9      	bne.n	800a00a <memcpy+0xe>
 800a016:	bd10      	pop	{r4, pc}

0800a018 <_Balloc>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a01c:	4604      	mov	r4, r0
 800a01e:	460d      	mov	r5, r1
 800a020:	b976      	cbnz	r6, 800a040 <_Balloc+0x28>
 800a022:	2010      	movs	r0, #16
 800a024:	f7ff ffd0 	bl	8009fc8 <malloc>
 800a028:	4602      	mov	r2, r0
 800a02a:	6260      	str	r0, [r4, #36]	; 0x24
 800a02c:	b920      	cbnz	r0, 800a038 <_Balloc+0x20>
 800a02e:	4b18      	ldr	r3, [pc, #96]	; (800a090 <_Balloc+0x78>)
 800a030:	4818      	ldr	r0, [pc, #96]	; (800a094 <_Balloc+0x7c>)
 800a032:	2166      	movs	r1, #102	; 0x66
 800a034:	f001 fb48 	bl	800b6c8 <__assert_func>
 800a038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a03c:	6006      	str	r6, [r0, #0]
 800a03e:	60c6      	str	r6, [r0, #12]
 800a040:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a042:	68f3      	ldr	r3, [r6, #12]
 800a044:	b183      	cbz	r3, 800a068 <_Balloc+0x50>
 800a046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a04e:	b9b8      	cbnz	r0, 800a080 <_Balloc+0x68>
 800a050:	2101      	movs	r1, #1
 800a052:	fa01 f605 	lsl.w	r6, r1, r5
 800a056:	1d72      	adds	r2, r6, #5
 800a058:	0092      	lsls	r2, r2, #2
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fc9d 	bl	800a99a <_calloc_r>
 800a060:	b160      	cbz	r0, 800a07c <_Balloc+0x64>
 800a062:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a066:	e00e      	b.n	800a086 <_Balloc+0x6e>
 800a068:	2221      	movs	r2, #33	; 0x21
 800a06a:	2104      	movs	r1, #4
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 fc94 	bl	800a99a <_calloc_r>
 800a072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a074:	60f0      	str	r0, [r6, #12]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e4      	bne.n	800a046 <_Balloc+0x2e>
 800a07c:	2000      	movs	r0, #0
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
 800a080:	6802      	ldr	r2, [r0, #0]
 800a082:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a086:	2300      	movs	r3, #0
 800a088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a08c:	e7f7      	b.n	800a07e <_Balloc+0x66>
 800a08e:	bf00      	nop
 800a090:	0800c38e 	.word	0x0800c38e
 800a094:	0800c48c 	.word	0x0800c48c

0800a098 <_Bfree>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	b976      	cbnz	r6, 800a0c0 <_Bfree+0x28>
 800a0a2:	2010      	movs	r0, #16
 800a0a4:	f7ff ff90 	bl	8009fc8 <malloc>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6268      	str	r0, [r5, #36]	; 0x24
 800a0ac:	b920      	cbnz	r0, 800a0b8 <_Bfree+0x20>
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <_Bfree+0x3c>)
 800a0b0:	4809      	ldr	r0, [pc, #36]	; (800a0d8 <_Bfree+0x40>)
 800a0b2:	218a      	movs	r1, #138	; 0x8a
 800a0b4:	f001 fb08 	bl	800b6c8 <__assert_func>
 800a0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0bc:	6006      	str	r6, [r0, #0]
 800a0be:	60c6      	str	r6, [r0, #12]
 800a0c0:	b13c      	cbz	r4, 800a0d2 <_Bfree+0x3a>
 800a0c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0c4:	6862      	ldr	r2, [r4, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0cc:	6021      	str	r1, [r4, #0]
 800a0ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	0800c38e 	.word	0x0800c38e
 800a0d8:	0800c48c 	.word	0x0800c48c

0800a0dc <__multadd>:
 800a0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e0:	690d      	ldr	r5, [r1, #16]
 800a0e2:	4607      	mov	r7, r0
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	461e      	mov	r6, r3
 800a0e8:	f101 0c14 	add.w	ip, r1, #20
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a0f2:	b299      	uxth	r1, r3
 800a0f4:	fb02 6101 	mla	r1, r2, r1, r6
 800a0f8:	0c1e      	lsrs	r6, r3, #16
 800a0fa:	0c0b      	lsrs	r3, r1, #16
 800a0fc:	fb02 3306 	mla	r3, r2, r6, r3
 800a100:	b289      	uxth	r1, r1
 800a102:	3001      	adds	r0, #1
 800a104:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a108:	4285      	cmp	r5, r0
 800a10a:	f84c 1b04 	str.w	r1, [ip], #4
 800a10e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a112:	dcec      	bgt.n	800a0ee <__multadd+0x12>
 800a114:	b30e      	cbz	r6, 800a15a <__multadd+0x7e>
 800a116:	68a3      	ldr	r3, [r4, #8]
 800a118:	42ab      	cmp	r3, r5
 800a11a:	dc19      	bgt.n	800a150 <__multadd+0x74>
 800a11c:	6861      	ldr	r1, [r4, #4]
 800a11e:	4638      	mov	r0, r7
 800a120:	3101      	adds	r1, #1
 800a122:	f7ff ff79 	bl	800a018 <_Balloc>
 800a126:	4680      	mov	r8, r0
 800a128:	b928      	cbnz	r0, 800a136 <__multadd+0x5a>
 800a12a:	4602      	mov	r2, r0
 800a12c:	4b0c      	ldr	r3, [pc, #48]	; (800a160 <__multadd+0x84>)
 800a12e:	480d      	ldr	r0, [pc, #52]	; (800a164 <__multadd+0x88>)
 800a130:	21b5      	movs	r1, #181	; 0xb5
 800a132:	f001 fac9 	bl	800b6c8 <__assert_func>
 800a136:	6922      	ldr	r2, [r4, #16]
 800a138:	3202      	adds	r2, #2
 800a13a:	f104 010c 	add.w	r1, r4, #12
 800a13e:	0092      	lsls	r2, r2, #2
 800a140:	300c      	adds	r0, #12
 800a142:	f7ff ff5b 	bl	8009ffc <memcpy>
 800a146:	4621      	mov	r1, r4
 800a148:	4638      	mov	r0, r7
 800a14a:	f7ff ffa5 	bl	800a098 <_Bfree>
 800a14e:	4644      	mov	r4, r8
 800a150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a154:	3501      	adds	r5, #1
 800a156:	615e      	str	r6, [r3, #20]
 800a158:	6125      	str	r5, [r4, #16]
 800a15a:	4620      	mov	r0, r4
 800a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a160:	0800c400 	.word	0x0800c400
 800a164:	0800c48c 	.word	0x0800c48c

0800a168 <__s2b>:
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	460c      	mov	r4, r1
 800a16e:	4615      	mov	r5, r2
 800a170:	461f      	mov	r7, r3
 800a172:	2209      	movs	r2, #9
 800a174:	3308      	adds	r3, #8
 800a176:	4606      	mov	r6, r0
 800a178:	fb93 f3f2 	sdiv	r3, r3, r2
 800a17c:	2100      	movs	r1, #0
 800a17e:	2201      	movs	r2, #1
 800a180:	429a      	cmp	r2, r3
 800a182:	db09      	blt.n	800a198 <__s2b+0x30>
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff ff47 	bl	800a018 <_Balloc>
 800a18a:	b940      	cbnz	r0, 800a19e <__s2b+0x36>
 800a18c:	4602      	mov	r2, r0
 800a18e:	4b19      	ldr	r3, [pc, #100]	; (800a1f4 <__s2b+0x8c>)
 800a190:	4819      	ldr	r0, [pc, #100]	; (800a1f8 <__s2b+0x90>)
 800a192:	21ce      	movs	r1, #206	; 0xce
 800a194:	f001 fa98 	bl	800b6c8 <__assert_func>
 800a198:	0052      	lsls	r2, r2, #1
 800a19a:	3101      	adds	r1, #1
 800a19c:	e7f0      	b.n	800a180 <__s2b+0x18>
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	6143      	str	r3, [r0, #20]
 800a1a2:	2d09      	cmp	r5, #9
 800a1a4:	f04f 0301 	mov.w	r3, #1
 800a1a8:	6103      	str	r3, [r0, #16]
 800a1aa:	dd16      	ble.n	800a1da <__s2b+0x72>
 800a1ac:	f104 0909 	add.w	r9, r4, #9
 800a1b0:	46c8      	mov	r8, r9
 800a1b2:	442c      	add	r4, r5
 800a1b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1b8:	4601      	mov	r1, r0
 800a1ba:	3b30      	subs	r3, #48	; 0x30
 800a1bc:	220a      	movs	r2, #10
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f7ff ff8c 	bl	800a0dc <__multadd>
 800a1c4:	45a0      	cmp	r8, r4
 800a1c6:	d1f5      	bne.n	800a1b4 <__s2b+0x4c>
 800a1c8:	f1a5 0408 	sub.w	r4, r5, #8
 800a1cc:	444c      	add	r4, r9
 800a1ce:	1b2d      	subs	r5, r5, r4
 800a1d0:	1963      	adds	r3, r4, r5
 800a1d2:	42bb      	cmp	r3, r7
 800a1d4:	db04      	blt.n	800a1e0 <__s2b+0x78>
 800a1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1da:	340a      	adds	r4, #10
 800a1dc:	2509      	movs	r5, #9
 800a1de:	e7f6      	b.n	800a1ce <__s2b+0x66>
 800a1e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	3b30      	subs	r3, #48	; 0x30
 800a1e8:	220a      	movs	r2, #10
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7ff ff76 	bl	800a0dc <__multadd>
 800a1f0:	e7ee      	b.n	800a1d0 <__s2b+0x68>
 800a1f2:	bf00      	nop
 800a1f4:	0800c400 	.word	0x0800c400
 800a1f8:	0800c48c 	.word	0x0800c48c

0800a1fc <__hi0bits>:
 800a1fc:	0c03      	lsrs	r3, r0, #16
 800a1fe:	041b      	lsls	r3, r3, #16
 800a200:	b9d3      	cbnz	r3, 800a238 <__hi0bits+0x3c>
 800a202:	0400      	lsls	r0, r0, #16
 800a204:	2310      	movs	r3, #16
 800a206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a20a:	bf04      	itt	eq
 800a20c:	0200      	lsleq	r0, r0, #8
 800a20e:	3308      	addeq	r3, #8
 800a210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a214:	bf04      	itt	eq
 800a216:	0100      	lsleq	r0, r0, #4
 800a218:	3304      	addeq	r3, #4
 800a21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a21e:	bf04      	itt	eq
 800a220:	0080      	lsleq	r0, r0, #2
 800a222:	3302      	addeq	r3, #2
 800a224:	2800      	cmp	r0, #0
 800a226:	db05      	blt.n	800a234 <__hi0bits+0x38>
 800a228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a22c:	f103 0301 	add.w	r3, r3, #1
 800a230:	bf08      	it	eq
 800a232:	2320      	moveq	r3, #32
 800a234:	4618      	mov	r0, r3
 800a236:	4770      	bx	lr
 800a238:	2300      	movs	r3, #0
 800a23a:	e7e4      	b.n	800a206 <__hi0bits+0xa>

0800a23c <__lo0bits>:
 800a23c:	6803      	ldr	r3, [r0, #0]
 800a23e:	f013 0207 	ands.w	r2, r3, #7
 800a242:	4601      	mov	r1, r0
 800a244:	d00b      	beq.n	800a25e <__lo0bits+0x22>
 800a246:	07da      	lsls	r2, r3, #31
 800a248:	d423      	bmi.n	800a292 <__lo0bits+0x56>
 800a24a:	0798      	lsls	r0, r3, #30
 800a24c:	bf49      	itett	mi
 800a24e:	085b      	lsrmi	r3, r3, #1
 800a250:	089b      	lsrpl	r3, r3, #2
 800a252:	2001      	movmi	r0, #1
 800a254:	600b      	strmi	r3, [r1, #0]
 800a256:	bf5c      	itt	pl
 800a258:	600b      	strpl	r3, [r1, #0]
 800a25a:	2002      	movpl	r0, #2
 800a25c:	4770      	bx	lr
 800a25e:	b298      	uxth	r0, r3
 800a260:	b9a8      	cbnz	r0, 800a28e <__lo0bits+0x52>
 800a262:	0c1b      	lsrs	r3, r3, #16
 800a264:	2010      	movs	r0, #16
 800a266:	b2da      	uxtb	r2, r3
 800a268:	b90a      	cbnz	r2, 800a26e <__lo0bits+0x32>
 800a26a:	3008      	adds	r0, #8
 800a26c:	0a1b      	lsrs	r3, r3, #8
 800a26e:	071a      	lsls	r2, r3, #28
 800a270:	bf04      	itt	eq
 800a272:	091b      	lsreq	r3, r3, #4
 800a274:	3004      	addeq	r0, #4
 800a276:	079a      	lsls	r2, r3, #30
 800a278:	bf04      	itt	eq
 800a27a:	089b      	lsreq	r3, r3, #2
 800a27c:	3002      	addeq	r0, #2
 800a27e:	07da      	lsls	r2, r3, #31
 800a280:	d403      	bmi.n	800a28a <__lo0bits+0x4e>
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	f100 0001 	add.w	r0, r0, #1
 800a288:	d005      	beq.n	800a296 <__lo0bits+0x5a>
 800a28a:	600b      	str	r3, [r1, #0]
 800a28c:	4770      	bx	lr
 800a28e:	4610      	mov	r0, r2
 800a290:	e7e9      	b.n	800a266 <__lo0bits+0x2a>
 800a292:	2000      	movs	r0, #0
 800a294:	4770      	bx	lr
 800a296:	2020      	movs	r0, #32
 800a298:	4770      	bx	lr
	...

0800a29c <__i2b>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	f7ff feb9 	bl	800a018 <_Balloc>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	b928      	cbnz	r0, 800a2b6 <__i2b+0x1a>
 800a2aa:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <__i2b+0x24>)
 800a2ac:	4805      	ldr	r0, [pc, #20]	; (800a2c4 <__i2b+0x28>)
 800a2ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2b2:	f001 fa09 	bl	800b6c8 <__assert_func>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	6144      	str	r4, [r0, #20]
 800a2ba:	6103      	str	r3, [r0, #16]
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800c400 	.word	0x0800c400
 800a2c4:	0800c48c 	.word	0x0800c48c

0800a2c8 <__multiply>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	4691      	mov	r9, r2
 800a2ce:	690a      	ldr	r2, [r1, #16]
 800a2d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	bfb8      	it	lt
 800a2d8:	460b      	movlt	r3, r1
 800a2da:	460c      	mov	r4, r1
 800a2dc:	bfbc      	itt	lt
 800a2de:	464c      	movlt	r4, r9
 800a2e0:	4699      	movlt	r9, r3
 800a2e2:	6927      	ldr	r7, [r4, #16]
 800a2e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2e8:	68a3      	ldr	r3, [r4, #8]
 800a2ea:	6861      	ldr	r1, [r4, #4]
 800a2ec:	eb07 060a 	add.w	r6, r7, sl
 800a2f0:	42b3      	cmp	r3, r6
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	bfb8      	it	lt
 800a2f6:	3101      	addlt	r1, #1
 800a2f8:	f7ff fe8e 	bl	800a018 <_Balloc>
 800a2fc:	b930      	cbnz	r0, 800a30c <__multiply+0x44>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b44      	ldr	r3, [pc, #272]	; (800a414 <__multiply+0x14c>)
 800a302:	4845      	ldr	r0, [pc, #276]	; (800a418 <__multiply+0x150>)
 800a304:	f240 115d 	movw	r1, #349	; 0x15d
 800a308:	f001 f9de 	bl	800b6c8 <__assert_func>
 800a30c:	f100 0514 	add.w	r5, r0, #20
 800a310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a314:	462b      	mov	r3, r5
 800a316:	2200      	movs	r2, #0
 800a318:	4543      	cmp	r3, r8
 800a31a:	d321      	bcc.n	800a360 <__multiply+0x98>
 800a31c:	f104 0314 	add.w	r3, r4, #20
 800a320:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a324:	f109 0314 	add.w	r3, r9, #20
 800a328:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a32c:	9202      	str	r2, [sp, #8]
 800a32e:	1b3a      	subs	r2, r7, r4
 800a330:	3a15      	subs	r2, #21
 800a332:	f022 0203 	bic.w	r2, r2, #3
 800a336:	3204      	adds	r2, #4
 800a338:	f104 0115 	add.w	r1, r4, #21
 800a33c:	428f      	cmp	r7, r1
 800a33e:	bf38      	it	cc
 800a340:	2204      	movcc	r2, #4
 800a342:	9201      	str	r2, [sp, #4]
 800a344:	9a02      	ldr	r2, [sp, #8]
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d80c      	bhi.n	800a366 <__multiply+0x9e>
 800a34c:	2e00      	cmp	r6, #0
 800a34e:	dd03      	ble.n	800a358 <__multiply+0x90>
 800a350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a354:	2b00      	cmp	r3, #0
 800a356:	d05a      	beq.n	800a40e <__multiply+0x146>
 800a358:	6106      	str	r6, [r0, #16]
 800a35a:	b005      	add	sp, #20
 800a35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a360:	f843 2b04 	str.w	r2, [r3], #4
 800a364:	e7d8      	b.n	800a318 <__multiply+0x50>
 800a366:	f8b3 a000 	ldrh.w	sl, [r3]
 800a36a:	f1ba 0f00 	cmp.w	sl, #0
 800a36e:	d024      	beq.n	800a3ba <__multiply+0xf2>
 800a370:	f104 0e14 	add.w	lr, r4, #20
 800a374:	46a9      	mov	r9, r5
 800a376:	f04f 0c00 	mov.w	ip, #0
 800a37a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a37e:	f8d9 1000 	ldr.w	r1, [r9]
 800a382:	fa1f fb82 	uxth.w	fp, r2
 800a386:	b289      	uxth	r1, r1
 800a388:	fb0a 110b 	mla	r1, sl, fp, r1
 800a38c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a390:	f8d9 2000 	ldr.w	r2, [r9]
 800a394:	4461      	add	r1, ip
 800a396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a39a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a39e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3a2:	b289      	uxth	r1, r1
 800a3a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3a8:	4577      	cmp	r7, lr
 800a3aa:	f849 1b04 	str.w	r1, [r9], #4
 800a3ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3b2:	d8e2      	bhi.n	800a37a <__multiply+0xb2>
 800a3b4:	9a01      	ldr	r2, [sp, #4]
 800a3b6:	f845 c002 	str.w	ip, [r5, r2]
 800a3ba:	9a03      	ldr	r2, [sp, #12]
 800a3bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	f1b9 0f00 	cmp.w	r9, #0
 800a3c6:	d020      	beq.n	800a40a <__multiply+0x142>
 800a3c8:	6829      	ldr	r1, [r5, #0]
 800a3ca:	f104 0c14 	add.w	ip, r4, #20
 800a3ce:	46ae      	mov	lr, r5
 800a3d0:	f04f 0a00 	mov.w	sl, #0
 800a3d4:	f8bc b000 	ldrh.w	fp, [ip]
 800a3d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3dc:	fb09 220b 	mla	r2, r9, fp, r2
 800a3e0:	4492      	add	sl, r2
 800a3e2:	b289      	uxth	r1, r1
 800a3e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a3e8:	f84e 1b04 	str.w	r1, [lr], #4
 800a3ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3f0:	f8be 1000 	ldrh.w	r1, [lr]
 800a3f4:	0c12      	lsrs	r2, r2, #16
 800a3f6:	fb09 1102 	mla	r1, r9, r2, r1
 800a3fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a3fe:	4567      	cmp	r7, ip
 800a400:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a404:	d8e6      	bhi.n	800a3d4 <__multiply+0x10c>
 800a406:	9a01      	ldr	r2, [sp, #4]
 800a408:	50a9      	str	r1, [r5, r2]
 800a40a:	3504      	adds	r5, #4
 800a40c:	e79a      	b.n	800a344 <__multiply+0x7c>
 800a40e:	3e01      	subs	r6, #1
 800a410:	e79c      	b.n	800a34c <__multiply+0x84>
 800a412:	bf00      	nop
 800a414:	0800c400 	.word	0x0800c400
 800a418:	0800c48c 	.word	0x0800c48c

0800a41c <__pow5mult>:
 800a41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a420:	4615      	mov	r5, r2
 800a422:	f012 0203 	ands.w	r2, r2, #3
 800a426:	4606      	mov	r6, r0
 800a428:	460f      	mov	r7, r1
 800a42a:	d007      	beq.n	800a43c <__pow5mult+0x20>
 800a42c:	4c25      	ldr	r4, [pc, #148]	; (800a4c4 <__pow5mult+0xa8>)
 800a42e:	3a01      	subs	r2, #1
 800a430:	2300      	movs	r3, #0
 800a432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a436:	f7ff fe51 	bl	800a0dc <__multadd>
 800a43a:	4607      	mov	r7, r0
 800a43c:	10ad      	asrs	r5, r5, #2
 800a43e:	d03d      	beq.n	800a4bc <__pow5mult+0xa0>
 800a440:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a442:	b97c      	cbnz	r4, 800a464 <__pow5mult+0x48>
 800a444:	2010      	movs	r0, #16
 800a446:	f7ff fdbf 	bl	8009fc8 <malloc>
 800a44a:	4602      	mov	r2, r0
 800a44c:	6270      	str	r0, [r6, #36]	; 0x24
 800a44e:	b928      	cbnz	r0, 800a45c <__pow5mult+0x40>
 800a450:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <__pow5mult+0xac>)
 800a452:	481e      	ldr	r0, [pc, #120]	; (800a4cc <__pow5mult+0xb0>)
 800a454:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a458:	f001 f936 	bl	800b6c8 <__assert_func>
 800a45c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a460:	6004      	str	r4, [r0, #0]
 800a462:	60c4      	str	r4, [r0, #12]
 800a464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a46c:	b94c      	cbnz	r4, 800a482 <__pow5mult+0x66>
 800a46e:	f240 2171 	movw	r1, #625	; 0x271
 800a472:	4630      	mov	r0, r6
 800a474:	f7ff ff12 	bl	800a29c <__i2b>
 800a478:	2300      	movs	r3, #0
 800a47a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a47e:	4604      	mov	r4, r0
 800a480:	6003      	str	r3, [r0, #0]
 800a482:	f04f 0900 	mov.w	r9, #0
 800a486:	07eb      	lsls	r3, r5, #31
 800a488:	d50a      	bpl.n	800a4a0 <__pow5mult+0x84>
 800a48a:	4639      	mov	r1, r7
 800a48c:	4622      	mov	r2, r4
 800a48e:	4630      	mov	r0, r6
 800a490:	f7ff ff1a 	bl	800a2c8 <__multiply>
 800a494:	4639      	mov	r1, r7
 800a496:	4680      	mov	r8, r0
 800a498:	4630      	mov	r0, r6
 800a49a:	f7ff fdfd 	bl	800a098 <_Bfree>
 800a49e:	4647      	mov	r7, r8
 800a4a0:	106d      	asrs	r5, r5, #1
 800a4a2:	d00b      	beq.n	800a4bc <__pow5mult+0xa0>
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	b938      	cbnz	r0, 800a4b8 <__pow5mult+0x9c>
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7ff ff0b 	bl	800a2c8 <__multiply>
 800a4b2:	6020      	str	r0, [r4, #0]
 800a4b4:	f8c0 9000 	str.w	r9, [r0]
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	e7e4      	b.n	800a486 <__pow5mult+0x6a>
 800a4bc:	4638      	mov	r0, r7
 800a4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0800c5d8 	.word	0x0800c5d8
 800a4c8:	0800c38e 	.word	0x0800c38e
 800a4cc:	0800c48c 	.word	0x0800c48c

0800a4d0 <__lshift>:
 800a4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	6849      	ldr	r1, [r1, #4]
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4de:	68a3      	ldr	r3, [r4, #8]
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	4691      	mov	r9, r2
 800a4e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4e8:	f108 0601 	add.w	r6, r8, #1
 800a4ec:	42b3      	cmp	r3, r6
 800a4ee:	db0b      	blt.n	800a508 <__lshift+0x38>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f7ff fd91 	bl	800a018 <_Balloc>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	b948      	cbnz	r0, 800a50e <__lshift+0x3e>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	4b2a      	ldr	r3, [pc, #168]	; (800a5a8 <__lshift+0xd8>)
 800a4fe:	482b      	ldr	r0, [pc, #172]	; (800a5ac <__lshift+0xdc>)
 800a500:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a504:	f001 f8e0 	bl	800b6c8 <__assert_func>
 800a508:	3101      	adds	r1, #1
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	e7ee      	b.n	800a4ec <__lshift+0x1c>
 800a50e:	2300      	movs	r3, #0
 800a510:	f100 0114 	add.w	r1, r0, #20
 800a514:	f100 0210 	add.w	r2, r0, #16
 800a518:	4618      	mov	r0, r3
 800a51a:	4553      	cmp	r3, sl
 800a51c:	db37      	blt.n	800a58e <__lshift+0xbe>
 800a51e:	6920      	ldr	r0, [r4, #16]
 800a520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a524:	f104 0314 	add.w	r3, r4, #20
 800a528:	f019 091f 	ands.w	r9, r9, #31
 800a52c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a530:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a534:	d02f      	beq.n	800a596 <__lshift+0xc6>
 800a536:	f1c9 0e20 	rsb	lr, r9, #32
 800a53a:	468a      	mov	sl, r1
 800a53c:	f04f 0c00 	mov.w	ip, #0
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	fa02 f209 	lsl.w	r2, r2, r9
 800a546:	ea42 020c 	orr.w	r2, r2, ip
 800a54a:	f84a 2b04 	str.w	r2, [sl], #4
 800a54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a552:	4298      	cmp	r0, r3
 800a554:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a558:	d8f2      	bhi.n	800a540 <__lshift+0x70>
 800a55a:	1b03      	subs	r3, r0, r4
 800a55c:	3b15      	subs	r3, #21
 800a55e:	f023 0303 	bic.w	r3, r3, #3
 800a562:	3304      	adds	r3, #4
 800a564:	f104 0215 	add.w	r2, r4, #21
 800a568:	4290      	cmp	r0, r2
 800a56a:	bf38      	it	cc
 800a56c:	2304      	movcc	r3, #4
 800a56e:	f841 c003 	str.w	ip, [r1, r3]
 800a572:	f1bc 0f00 	cmp.w	ip, #0
 800a576:	d001      	beq.n	800a57c <__lshift+0xac>
 800a578:	f108 0602 	add.w	r6, r8, #2
 800a57c:	3e01      	subs	r6, #1
 800a57e:	4638      	mov	r0, r7
 800a580:	612e      	str	r6, [r5, #16]
 800a582:	4621      	mov	r1, r4
 800a584:	f7ff fd88 	bl	800a098 <_Bfree>
 800a588:	4628      	mov	r0, r5
 800a58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a592:	3301      	adds	r3, #1
 800a594:	e7c1      	b.n	800a51a <__lshift+0x4a>
 800a596:	3904      	subs	r1, #4
 800a598:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5a0:	4298      	cmp	r0, r3
 800a5a2:	d8f9      	bhi.n	800a598 <__lshift+0xc8>
 800a5a4:	e7ea      	b.n	800a57c <__lshift+0xac>
 800a5a6:	bf00      	nop
 800a5a8:	0800c400 	.word	0x0800c400
 800a5ac:	0800c48c 	.word	0x0800c48c

0800a5b0 <__mcmp>:
 800a5b0:	b530      	push	{r4, r5, lr}
 800a5b2:	6902      	ldr	r2, [r0, #16]
 800a5b4:	690c      	ldr	r4, [r1, #16]
 800a5b6:	1b12      	subs	r2, r2, r4
 800a5b8:	d10e      	bne.n	800a5d8 <__mcmp+0x28>
 800a5ba:	f100 0314 	add.w	r3, r0, #20
 800a5be:	3114      	adds	r1, #20
 800a5c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5d0:	42a5      	cmp	r5, r4
 800a5d2:	d003      	beq.n	800a5dc <__mcmp+0x2c>
 800a5d4:	d305      	bcc.n	800a5e2 <__mcmp+0x32>
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	4610      	mov	r0, r2
 800a5da:	bd30      	pop	{r4, r5, pc}
 800a5dc:	4283      	cmp	r3, r0
 800a5de:	d3f3      	bcc.n	800a5c8 <__mcmp+0x18>
 800a5e0:	e7fa      	b.n	800a5d8 <__mcmp+0x28>
 800a5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e6:	e7f7      	b.n	800a5d8 <__mcmp+0x28>

0800a5e8 <__mdiff>:
 800a5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4690      	mov	r8, r2
 800a5f6:	f7ff ffdb 	bl	800a5b0 <__mcmp>
 800a5fa:	1e05      	subs	r5, r0, #0
 800a5fc:	d110      	bne.n	800a620 <__mdiff+0x38>
 800a5fe:	4629      	mov	r1, r5
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff fd09 	bl	800a018 <_Balloc>
 800a606:	b930      	cbnz	r0, 800a616 <__mdiff+0x2e>
 800a608:	4b3a      	ldr	r3, [pc, #232]	; (800a6f4 <__mdiff+0x10c>)
 800a60a:	4602      	mov	r2, r0
 800a60c:	f240 2132 	movw	r1, #562	; 0x232
 800a610:	4839      	ldr	r0, [pc, #228]	; (800a6f8 <__mdiff+0x110>)
 800a612:	f001 f859 	bl	800b6c8 <__assert_func>
 800a616:	2301      	movs	r3, #1
 800a618:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a61c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	bfa4      	itt	ge
 800a622:	4643      	movge	r3, r8
 800a624:	46a0      	movge	r8, r4
 800a626:	4630      	mov	r0, r6
 800a628:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a62c:	bfa6      	itte	ge
 800a62e:	461c      	movge	r4, r3
 800a630:	2500      	movge	r5, #0
 800a632:	2501      	movlt	r5, #1
 800a634:	f7ff fcf0 	bl	800a018 <_Balloc>
 800a638:	b920      	cbnz	r0, 800a644 <__mdiff+0x5c>
 800a63a:	4b2e      	ldr	r3, [pc, #184]	; (800a6f4 <__mdiff+0x10c>)
 800a63c:	4602      	mov	r2, r0
 800a63e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a642:	e7e5      	b.n	800a610 <__mdiff+0x28>
 800a644:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a648:	6926      	ldr	r6, [r4, #16]
 800a64a:	60c5      	str	r5, [r0, #12]
 800a64c:	f104 0914 	add.w	r9, r4, #20
 800a650:	f108 0514 	add.w	r5, r8, #20
 800a654:	f100 0e14 	add.w	lr, r0, #20
 800a658:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a65c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a660:	f108 0210 	add.w	r2, r8, #16
 800a664:	46f2      	mov	sl, lr
 800a666:	2100      	movs	r1, #0
 800a668:	f859 3b04 	ldr.w	r3, [r9], #4
 800a66c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a670:	fa1f f883 	uxth.w	r8, r3
 800a674:	fa11 f18b 	uxtah	r1, r1, fp
 800a678:	0c1b      	lsrs	r3, r3, #16
 800a67a:	eba1 0808 	sub.w	r8, r1, r8
 800a67e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a682:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a686:	fa1f f888 	uxth.w	r8, r8
 800a68a:	1419      	asrs	r1, r3, #16
 800a68c:	454e      	cmp	r6, r9
 800a68e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a692:	f84a 3b04 	str.w	r3, [sl], #4
 800a696:	d8e7      	bhi.n	800a668 <__mdiff+0x80>
 800a698:	1b33      	subs	r3, r6, r4
 800a69a:	3b15      	subs	r3, #21
 800a69c:	f023 0303 	bic.w	r3, r3, #3
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	3415      	adds	r4, #21
 800a6a4:	42a6      	cmp	r6, r4
 800a6a6:	bf38      	it	cc
 800a6a8:	2304      	movcc	r3, #4
 800a6aa:	441d      	add	r5, r3
 800a6ac:	4473      	add	r3, lr
 800a6ae:	469e      	mov	lr, r3
 800a6b0:	462e      	mov	r6, r5
 800a6b2:	4566      	cmp	r6, ip
 800a6b4:	d30e      	bcc.n	800a6d4 <__mdiff+0xec>
 800a6b6:	f10c 0203 	add.w	r2, ip, #3
 800a6ba:	1b52      	subs	r2, r2, r5
 800a6bc:	f022 0203 	bic.w	r2, r2, #3
 800a6c0:	3d03      	subs	r5, #3
 800a6c2:	45ac      	cmp	ip, r5
 800a6c4:	bf38      	it	cc
 800a6c6:	2200      	movcc	r2, #0
 800a6c8:	441a      	add	r2, r3
 800a6ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6ce:	b17b      	cbz	r3, 800a6f0 <__mdiff+0x108>
 800a6d0:	6107      	str	r7, [r0, #16]
 800a6d2:	e7a3      	b.n	800a61c <__mdiff+0x34>
 800a6d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6d8:	fa11 f288 	uxtah	r2, r1, r8
 800a6dc:	1414      	asrs	r4, r2, #16
 800a6de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6e8:	f84e 2b04 	str.w	r2, [lr], #4
 800a6ec:	1421      	asrs	r1, r4, #16
 800a6ee:	e7e0      	b.n	800a6b2 <__mdiff+0xca>
 800a6f0:	3f01      	subs	r7, #1
 800a6f2:	e7ea      	b.n	800a6ca <__mdiff+0xe2>
 800a6f4:	0800c400 	.word	0x0800c400
 800a6f8:	0800c48c 	.word	0x0800c48c

0800a6fc <__ulp>:
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	ed8d 0b00 	vstr	d0, [sp]
 800a702:	9b01      	ldr	r3, [sp, #4]
 800a704:	4912      	ldr	r1, [pc, #72]	; (800a750 <__ulp+0x54>)
 800a706:	4019      	ands	r1, r3
 800a708:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a70c:	2900      	cmp	r1, #0
 800a70e:	dd05      	ble.n	800a71c <__ulp+0x20>
 800a710:	2200      	movs	r2, #0
 800a712:	460b      	mov	r3, r1
 800a714:	ec43 2b10 	vmov	d0, r2, r3
 800a718:	b002      	add	sp, #8
 800a71a:	4770      	bx	lr
 800a71c:	4249      	negs	r1, r1
 800a71e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a722:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	f04f 0300 	mov.w	r3, #0
 800a72e:	da04      	bge.n	800a73a <__ulp+0x3e>
 800a730:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a734:	fa41 f300 	asr.w	r3, r1, r0
 800a738:	e7ec      	b.n	800a714 <__ulp+0x18>
 800a73a:	f1a0 0114 	sub.w	r1, r0, #20
 800a73e:	291e      	cmp	r1, #30
 800a740:	bfda      	itte	le
 800a742:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a746:	fa20 f101 	lsrle.w	r1, r0, r1
 800a74a:	2101      	movgt	r1, #1
 800a74c:	460a      	mov	r2, r1
 800a74e:	e7e1      	b.n	800a714 <__ulp+0x18>
 800a750:	7ff00000 	.word	0x7ff00000

0800a754 <__b2d>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	6905      	ldr	r5, [r0, #16]
 800a758:	f100 0714 	add.w	r7, r0, #20
 800a75c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a760:	1f2e      	subs	r6, r5, #4
 800a762:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a766:	4620      	mov	r0, r4
 800a768:	f7ff fd48 	bl	800a1fc <__hi0bits>
 800a76c:	f1c0 0320 	rsb	r3, r0, #32
 800a770:	280a      	cmp	r0, #10
 800a772:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a7f0 <__b2d+0x9c>
 800a776:	600b      	str	r3, [r1, #0]
 800a778:	dc14      	bgt.n	800a7a4 <__b2d+0x50>
 800a77a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a77e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a782:	42b7      	cmp	r7, r6
 800a784:	ea41 030c 	orr.w	r3, r1, ip
 800a788:	bf34      	ite	cc
 800a78a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a78e:	2100      	movcs	r1, #0
 800a790:	3015      	adds	r0, #21
 800a792:	fa04 f000 	lsl.w	r0, r4, r0
 800a796:	fa21 f10e 	lsr.w	r1, r1, lr
 800a79a:	ea40 0201 	orr.w	r2, r0, r1
 800a79e:	ec43 2b10 	vmov	d0, r2, r3
 800a7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a4:	42b7      	cmp	r7, r6
 800a7a6:	bf3a      	itte	cc
 800a7a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7b0:	2100      	movcs	r1, #0
 800a7b2:	380b      	subs	r0, #11
 800a7b4:	d017      	beq.n	800a7e6 <__b2d+0x92>
 800a7b6:	f1c0 0c20 	rsb	ip, r0, #32
 800a7ba:	fa04 f500 	lsl.w	r5, r4, r0
 800a7be:	42be      	cmp	r6, r7
 800a7c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a7c4:	ea45 0504 	orr.w	r5, r5, r4
 800a7c8:	bf8c      	ite	hi
 800a7ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7ce:	2400      	movls	r4, #0
 800a7d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a7d4:	fa01 f000 	lsl.w	r0, r1, r0
 800a7d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a7dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7e0:	ea40 0204 	orr.w	r2, r0, r4
 800a7e4:	e7db      	b.n	800a79e <__b2d+0x4a>
 800a7e6:	ea44 030c 	orr.w	r3, r4, ip
 800a7ea:	460a      	mov	r2, r1
 800a7ec:	e7d7      	b.n	800a79e <__b2d+0x4a>
 800a7ee:	bf00      	nop
 800a7f0:	3ff00000 	.word	0x3ff00000

0800a7f4 <__d2b>:
 800a7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	ec57 6b10 	vmov	r6, r7, d0
 800a800:	4690      	mov	r8, r2
 800a802:	f7ff fc09 	bl	800a018 <_Balloc>
 800a806:	4604      	mov	r4, r0
 800a808:	b930      	cbnz	r0, 800a818 <__d2b+0x24>
 800a80a:	4602      	mov	r2, r0
 800a80c:	4b25      	ldr	r3, [pc, #148]	; (800a8a4 <__d2b+0xb0>)
 800a80e:	4826      	ldr	r0, [pc, #152]	; (800a8a8 <__d2b+0xb4>)
 800a810:	f240 310a 	movw	r1, #778	; 0x30a
 800a814:	f000 ff58 	bl	800b6c8 <__assert_func>
 800a818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a81c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a820:	bb35      	cbnz	r5, 800a870 <__d2b+0x7c>
 800a822:	2e00      	cmp	r6, #0
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	d028      	beq.n	800a87a <__d2b+0x86>
 800a828:	4668      	mov	r0, sp
 800a82a:	9600      	str	r6, [sp, #0]
 800a82c:	f7ff fd06 	bl	800a23c <__lo0bits>
 800a830:	9900      	ldr	r1, [sp, #0]
 800a832:	b300      	cbz	r0, 800a876 <__d2b+0x82>
 800a834:	9a01      	ldr	r2, [sp, #4]
 800a836:	f1c0 0320 	rsb	r3, r0, #32
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	430b      	orrs	r3, r1
 800a840:	40c2      	lsrs	r2, r0
 800a842:	6163      	str	r3, [r4, #20]
 800a844:	9201      	str	r2, [sp, #4]
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	61a3      	str	r3, [r4, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bf14      	ite	ne
 800a84e:	2202      	movne	r2, #2
 800a850:	2201      	moveq	r2, #1
 800a852:	6122      	str	r2, [r4, #16]
 800a854:	b1d5      	cbz	r5, 800a88c <__d2b+0x98>
 800a856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a85a:	4405      	add	r5, r0
 800a85c:	f8c9 5000 	str.w	r5, [r9]
 800a860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a864:	f8c8 0000 	str.w	r0, [r8]
 800a868:	4620      	mov	r0, r4
 800a86a:	b003      	add	sp, #12
 800a86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a874:	e7d5      	b.n	800a822 <__d2b+0x2e>
 800a876:	6161      	str	r1, [r4, #20]
 800a878:	e7e5      	b.n	800a846 <__d2b+0x52>
 800a87a:	a801      	add	r0, sp, #4
 800a87c:	f7ff fcde 	bl	800a23c <__lo0bits>
 800a880:	9b01      	ldr	r3, [sp, #4]
 800a882:	6163      	str	r3, [r4, #20]
 800a884:	2201      	movs	r2, #1
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	3020      	adds	r0, #32
 800a88a:	e7e3      	b.n	800a854 <__d2b+0x60>
 800a88c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a894:	f8c9 0000 	str.w	r0, [r9]
 800a898:	6918      	ldr	r0, [r3, #16]
 800a89a:	f7ff fcaf 	bl	800a1fc <__hi0bits>
 800a89e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8a2:	e7df      	b.n	800a864 <__d2b+0x70>
 800a8a4:	0800c400 	.word	0x0800c400
 800a8a8:	0800c48c 	.word	0x0800c48c

0800a8ac <__ratio>:
 800a8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	4688      	mov	r8, r1
 800a8b2:	4669      	mov	r1, sp
 800a8b4:	4681      	mov	r9, r0
 800a8b6:	f7ff ff4d 	bl	800a754 <__b2d>
 800a8ba:	a901      	add	r1, sp, #4
 800a8bc:	4640      	mov	r0, r8
 800a8be:	ec55 4b10 	vmov	r4, r5, d0
 800a8c2:	f7ff ff47 	bl	800a754 <__b2d>
 800a8c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8ce:	eba3 0c02 	sub.w	ip, r3, r2
 800a8d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8d6:	1a9b      	subs	r3, r3, r2
 800a8d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8dc:	ec51 0b10 	vmov	r0, r1, d0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfd6      	itet	le
 800a8e4:	460a      	movle	r2, r1
 800a8e6:	462a      	movgt	r2, r5
 800a8e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8ec:	468b      	mov	fp, r1
 800a8ee:	462f      	mov	r7, r5
 800a8f0:	bfd4      	ite	le
 800a8f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a8f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	ee10 2a10 	vmov	r2, s0
 800a900:	465b      	mov	r3, fp
 800a902:	4639      	mov	r1, r7
 800a904:	f7f5 ffb2 	bl	800086c <__aeabi_ddiv>
 800a908:	ec41 0b10 	vmov	d0, r0, r1
 800a90c:	b003      	add	sp, #12
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a912 <__copybits>:
 800a912:	3901      	subs	r1, #1
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	1149      	asrs	r1, r1, #5
 800a918:	6914      	ldr	r4, [r2, #16]
 800a91a:	3101      	adds	r1, #1
 800a91c:	f102 0314 	add.w	r3, r2, #20
 800a920:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a928:	1f05      	subs	r5, r0, #4
 800a92a:	42a3      	cmp	r3, r4
 800a92c:	d30c      	bcc.n	800a948 <__copybits+0x36>
 800a92e:	1aa3      	subs	r3, r4, r2
 800a930:	3b11      	subs	r3, #17
 800a932:	f023 0303 	bic.w	r3, r3, #3
 800a936:	3211      	adds	r2, #17
 800a938:	42a2      	cmp	r2, r4
 800a93a:	bf88      	it	hi
 800a93c:	2300      	movhi	r3, #0
 800a93e:	4418      	add	r0, r3
 800a940:	2300      	movs	r3, #0
 800a942:	4288      	cmp	r0, r1
 800a944:	d305      	bcc.n	800a952 <__copybits+0x40>
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	f853 6b04 	ldr.w	r6, [r3], #4
 800a94c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a950:	e7eb      	b.n	800a92a <__copybits+0x18>
 800a952:	f840 3b04 	str.w	r3, [r0], #4
 800a956:	e7f4      	b.n	800a942 <__copybits+0x30>

0800a958 <__any_on>:
 800a958:	f100 0214 	add.w	r2, r0, #20
 800a95c:	6900      	ldr	r0, [r0, #16]
 800a95e:	114b      	asrs	r3, r1, #5
 800a960:	4298      	cmp	r0, r3
 800a962:	b510      	push	{r4, lr}
 800a964:	db11      	blt.n	800a98a <__any_on+0x32>
 800a966:	dd0a      	ble.n	800a97e <__any_on+0x26>
 800a968:	f011 011f 	ands.w	r1, r1, #31
 800a96c:	d007      	beq.n	800a97e <__any_on+0x26>
 800a96e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a972:	fa24 f001 	lsr.w	r0, r4, r1
 800a976:	fa00 f101 	lsl.w	r1, r0, r1
 800a97a:	428c      	cmp	r4, r1
 800a97c:	d10b      	bne.n	800a996 <__any_on+0x3e>
 800a97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a982:	4293      	cmp	r3, r2
 800a984:	d803      	bhi.n	800a98e <__any_on+0x36>
 800a986:	2000      	movs	r0, #0
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	4603      	mov	r3, r0
 800a98c:	e7f7      	b.n	800a97e <__any_on+0x26>
 800a98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a992:	2900      	cmp	r1, #0
 800a994:	d0f5      	beq.n	800a982 <__any_on+0x2a>
 800a996:	2001      	movs	r0, #1
 800a998:	e7f6      	b.n	800a988 <__any_on+0x30>

0800a99a <_calloc_r>:
 800a99a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a99c:	fba1 2402 	umull	r2, r4, r1, r2
 800a9a0:	b94c      	cbnz	r4, 800a9b6 <_calloc_r+0x1c>
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	9201      	str	r2, [sp, #4]
 800a9a6:	f000 f87b 	bl	800aaa0 <_malloc_r>
 800a9aa:	9a01      	ldr	r2, [sp, #4]
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	b930      	cbnz	r0, 800a9be <_calloc_r+0x24>
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	b003      	add	sp, #12
 800a9b4:	bd30      	pop	{r4, r5, pc}
 800a9b6:	220c      	movs	r2, #12
 800a9b8:	6002      	str	r2, [r0, #0]
 800a9ba:	2500      	movs	r5, #0
 800a9bc:	e7f8      	b.n	800a9b0 <_calloc_r+0x16>
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f7fc fae4 	bl	8006f8c <memset>
 800a9c4:	e7f4      	b.n	800a9b0 <_calloc_r+0x16>
	...

0800a9c8 <_free_r>:
 800a9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ca:	2900      	cmp	r1, #0
 800a9cc:	d044      	beq.n	800aa58 <_free_r+0x90>
 800a9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d2:	9001      	str	r0, [sp, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a9da:	bfb8      	it	lt
 800a9dc:	18e4      	addlt	r4, r4, r3
 800a9de:	f001 f877 	bl	800bad0 <__malloc_lock>
 800a9e2:	4a1e      	ldr	r2, [pc, #120]	; (800aa5c <_free_r+0x94>)
 800a9e4:	9801      	ldr	r0, [sp, #4]
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	b933      	cbnz	r3, 800a9f8 <_free_r+0x30>
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	6014      	str	r4, [r2, #0]
 800a9ee:	b003      	add	sp, #12
 800a9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9f4:	f001 b872 	b.w	800badc <__malloc_unlock>
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	d908      	bls.n	800aa0e <_free_r+0x46>
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	1961      	adds	r1, r4, r5
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf01      	itttt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	1949      	addeq	r1, r1, r5
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	e7ed      	b.n	800a9ea <_free_r+0x22>
 800aa0e:	461a      	mov	r2, r3
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b10b      	cbz	r3, 800aa18 <_free_r+0x50>
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d9fa      	bls.n	800aa0e <_free_r+0x46>
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	1855      	adds	r5, r2, r1
 800aa1c:	42a5      	cmp	r5, r4
 800aa1e:	d10b      	bne.n	800aa38 <_free_r+0x70>
 800aa20:	6824      	ldr	r4, [r4, #0]
 800aa22:	4421      	add	r1, r4
 800aa24:	1854      	adds	r4, r2, r1
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	d1e0      	bne.n	800a9ee <_free_r+0x26>
 800aa2c:	681c      	ldr	r4, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	6053      	str	r3, [r2, #4]
 800aa32:	4421      	add	r1, r4
 800aa34:	6011      	str	r1, [r2, #0]
 800aa36:	e7da      	b.n	800a9ee <_free_r+0x26>
 800aa38:	d902      	bls.n	800aa40 <_free_r+0x78>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	6003      	str	r3, [r0, #0]
 800aa3e:	e7d6      	b.n	800a9ee <_free_r+0x26>
 800aa40:	6825      	ldr	r5, [r4, #0]
 800aa42:	1961      	adds	r1, r4, r5
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf04      	itt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	bf04      	itt	eq
 800aa50:	1949      	addeq	r1, r1, r5
 800aa52:	6021      	streq	r1, [r4, #0]
 800aa54:	6054      	str	r4, [r2, #4]
 800aa56:	e7ca      	b.n	800a9ee <_free_r+0x26>
 800aa58:	b003      	add	sp, #12
 800aa5a:	bd30      	pop	{r4, r5, pc}
 800aa5c:	200010c0 	.word	0x200010c0

0800aa60 <sbrk_aligned>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4e0e      	ldr	r6, [pc, #56]	; (800aa9c <sbrk_aligned+0x3c>)
 800aa64:	460c      	mov	r4, r1
 800aa66:	6831      	ldr	r1, [r6, #0]
 800aa68:	4605      	mov	r5, r0
 800aa6a:	b911      	cbnz	r1, 800aa72 <sbrk_aligned+0x12>
 800aa6c:	f000 fd28 	bl	800b4c0 <_sbrk_r>
 800aa70:	6030      	str	r0, [r6, #0]
 800aa72:	4621      	mov	r1, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	f000 fd23 	bl	800b4c0 <_sbrk_r>
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	d00a      	beq.n	800aa94 <sbrk_aligned+0x34>
 800aa7e:	1cc4      	adds	r4, r0, #3
 800aa80:	f024 0403 	bic.w	r4, r4, #3
 800aa84:	42a0      	cmp	r0, r4
 800aa86:	d007      	beq.n	800aa98 <sbrk_aligned+0x38>
 800aa88:	1a21      	subs	r1, r4, r0
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f000 fd18 	bl	800b4c0 <_sbrk_r>
 800aa90:	3001      	adds	r0, #1
 800aa92:	d101      	bne.n	800aa98 <sbrk_aligned+0x38>
 800aa94:	f04f 34ff 	mov.w	r4, #4294967295
 800aa98:	4620      	mov	r0, r4
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	200010c4 	.word	0x200010c4

0800aaa0 <_malloc_r>:
 800aaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa4:	1ccd      	adds	r5, r1, #3
 800aaa6:	f025 0503 	bic.w	r5, r5, #3
 800aaaa:	3508      	adds	r5, #8
 800aaac:	2d0c      	cmp	r5, #12
 800aaae:	bf38      	it	cc
 800aab0:	250c      	movcc	r5, #12
 800aab2:	2d00      	cmp	r5, #0
 800aab4:	4607      	mov	r7, r0
 800aab6:	db01      	blt.n	800aabc <_malloc_r+0x1c>
 800aab8:	42a9      	cmp	r1, r5
 800aaba:	d905      	bls.n	800aac8 <_malloc_r+0x28>
 800aabc:	230c      	movs	r3, #12
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	2600      	movs	r6, #0
 800aac2:	4630      	mov	r0, r6
 800aac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac8:	4e2e      	ldr	r6, [pc, #184]	; (800ab84 <_malloc_r+0xe4>)
 800aaca:	f001 f801 	bl	800bad0 <__malloc_lock>
 800aace:	6833      	ldr	r3, [r6, #0]
 800aad0:	461c      	mov	r4, r3
 800aad2:	bb34      	cbnz	r4, 800ab22 <_malloc_r+0x82>
 800aad4:	4629      	mov	r1, r5
 800aad6:	4638      	mov	r0, r7
 800aad8:	f7ff ffc2 	bl	800aa60 <sbrk_aligned>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	4604      	mov	r4, r0
 800aae0:	d14d      	bne.n	800ab7e <_malloc_r+0xde>
 800aae2:	6834      	ldr	r4, [r6, #0]
 800aae4:	4626      	mov	r6, r4
 800aae6:	2e00      	cmp	r6, #0
 800aae8:	d140      	bne.n	800ab6c <_malloc_r+0xcc>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	4631      	mov	r1, r6
 800aaee:	4638      	mov	r0, r7
 800aaf0:	eb04 0803 	add.w	r8, r4, r3
 800aaf4:	f000 fce4 	bl	800b4c0 <_sbrk_r>
 800aaf8:	4580      	cmp	r8, r0
 800aafa:	d13a      	bne.n	800ab72 <_malloc_r+0xd2>
 800aafc:	6821      	ldr	r1, [r4, #0]
 800aafe:	3503      	adds	r5, #3
 800ab00:	1a6d      	subs	r5, r5, r1
 800ab02:	f025 0503 	bic.w	r5, r5, #3
 800ab06:	3508      	adds	r5, #8
 800ab08:	2d0c      	cmp	r5, #12
 800ab0a:	bf38      	it	cc
 800ab0c:	250c      	movcc	r5, #12
 800ab0e:	4629      	mov	r1, r5
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7ff ffa5 	bl	800aa60 <sbrk_aligned>
 800ab16:	3001      	adds	r0, #1
 800ab18:	d02b      	beq.n	800ab72 <_malloc_r+0xd2>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	442b      	add	r3, r5
 800ab1e:	6023      	str	r3, [r4, #0]
 800ab20:	e00e      	b.n	800ab40 <_malloc_r+0xa0>
 800ab22:	6822      	ldr	r2, [r4, #0]
 800ab24:	1b52      	subs	r2, r2, r5
 800ab26:	d41e      	bmi.n	800ab66 <_malloc_r+0xc6>
 800ab28:	2a0b      	cmp	r2, #11
 800ab2a:	d916      	bls.n	800ab5a <_malloc_r+0xba>
 800ab2c:	1961      	adds	r1, r4, r5
 800ab2e:	42a3      	cmp	r3, r4
 800ab30:	6025      	str	r5, [r4, #0]
 800ab32:	bf18      	it	ne
 800ab34:	6059      	strne	r1, [r3, #4]
 800ab36:	6863      	ldr	r3, [r4, #4]
 800ab38:	bf08      	it	eq
 800ab3a:	6031      	streq	r1, [r6, #0]
 800ab3c:	5162      	str	r2, [r4, r5]
 800ab3e:	604b      	str	r3, [r1, #4]
 800ab40:	4638      	mov	r0, r7
 800ab42:	f104 060b 	add.w	r6, r4, #11
 800ab46:	f000 ffc9 	bl	800badc <__malloc_unlock>
 800ab4a:	f026 0607 	bic.w	r6, r6, #7
 800ab4e:	1d23      	adds	r3, r4, #4
 800ab50:	1af2      	subs	r2, r6, r3
 800ab52:	d0b6      	beq.n	800aac2 <_malloc_r+0x22>
 800ab54:	1b9b      	subs	r3, r3, r6
 800ab56:	50a3      	str	r3, [r4, r2]
 800ab58:	e7b3      	b.n	800aac2 <_malloc_r+0x22>
 800ab5a:	6862      	ldr	r2, [r4, #4]
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	bf0c      	ite	eq
 800ab60:	6032      	streq	r2, [r6, #0]
 800ab62:	605a      	strne	r2, [r3, #4]
 800ab64:	e7ec      	b.n	800ab40 <_malloc_r+0xa0>
 800ab66:	4623      	mov	r3, r4
 800ab68:	6864      	ldr	r4, [r4, #4]
 800ab6a:	e7b2      	b.n	800aad2 <_malloc_r+0x32>
 800ab6c:	4634      	mov	r4, r6
 800ab6e:	6876      	ldr	r6, [r6, #4]
 800ab70:	e7b9      	b.n	800aae6 <_malloc_r+0x46>
 800ab72:	230c      	movs	r3, #12
 800ab74:	603b      	str	r3, [r7, #0]
 800ab76:	4638      	mov	r0, r7
 800ab78:	f000 ffb0 	bl	800badc <__malloc_unlock>
 800ab7c:	e7a1      	b.n	800aac2 <_malloc_r+0x22>
 800ab7e:	6025      	str	r5, [r4, #0]
 800ab80:	e7de      	b.n	800ab40 <_malloc_r+0xa0>
 800ab82:	bf00      	nop
 800ab84:	200010c0 	.word	0x200010c0

0800ab88 <__ssputs_r>:
 800ab88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	688e      	ldr	r6, [r1, #8]
 800ab8e:	429e      	cmp	r6, r3
 800ab90:	4682      	mov	sl, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4690      	mov	r8, r2
 800ab96:	461f      	mov	r7, r3
 800ab98:	d838      	bhi.n	800ac0c <__ssputs_r+0x84>
 800ab9a:	898a      	ldrh	r2, [r1, #12]
 800ab9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aba0:	d032      	beq.n	800ac08 <__ssputs_r+0x80>
 800aba2:	6825      	ldr	r5, [r4, #0]
 800aba4:	6909      	ldr	r1, [r1, #16]
 800aba6:	eba5 0901 	sub.w	r9, r5, r1
 800abaa:	6965      	ldr	r5, [r4, #20]
 800abac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abb4:	3301      	adds	r3, #1
 800abb6:	444b      	add	r3, r9
 800abb8:	106d      	asrs	r5, r5, #1
 800abba:	429d      	cmp	r5, r3
 800abbc:	bf38      	it	cc
 800abbe:	461d      	movcc	r5, r3
 800abc0:	0553      	lsls	r3, r2, #21
 800abc2:	d531      	bpl.n	800ac28 <__ssputs_r+0xa0>
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7ff ff6b 	bl	800aaa0 <_malloc_r>
 800abca:	4606      	mov	r6, r0
 800abcc:	b950      	cbnz	r0, 800abe4 <__ssputs_r+0x5c>
 800abce:	230c      	movs	r3, #12
 800abd0:	f8ca 3000 	str.w	r3, [sl]
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abda:	81a3      	strh	r3, [r4, #12]
 800abdc:	f04f 30ff 	mov.w	r0, #4294967295
 800abe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe4:	6921      	ldr	r1, [r4, #16]
 800abe6:	464a      	mov	r2, r9
 800abe8:	f7ff fa08 	bl	8009ffc <memcpy>
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	6126      	str	r6, [r4, #16]
 800abfa:	6165      	str	r5, [r4, #20]
 800abfc:	444e      	add	r6, r9
 800abfe:	eba5 0509 	sub.w	r5, r5, r9
 800ac02:	6026      	str	r6, [r4, #0]
 800ac04:	60a5      	str	r5, [r4, #8]
 800ac06:	463e      	mov	r6, r7
 800ac08:	42be      	cmp	r6, r7
 800ac0a:	d900      	bls.n	800ac0e <__ssputs_r+0x86>
 800ac0c:	463e      	mov	r6, r7
 800ac0e:	6820      	ldr	r0, [r4, #0]
 800ac10:	4632      	mov	r2, r6
 800ac12:	4641      	mov	r1, r8
 800ac14:	f000 ff42 	bl	800ba9c <memmove>
 800ac18:	68a3      	ldr	r3, [r4, #8]
 800ac1a:	1b9b      	subs	r3, r3, r6
 800ac1c:	60a3      	str	r3, [r4, #8]
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	4433      	add	r3, r6
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	2000      	movs	r0, #0
 800ac26:	e7db      	b.n	800abe0 <__ssputs_r+0x58>
 800ac28:	462a      	mov	r2, r5
 800ac2a:	f000 ff5d 	bl	800bae8 <_realloc_r>
 800ac2e:	4606      	mov	r6, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1e1      	bne.n	800abf8 <__ssputs_r+0x70>
 800ac34:	6921      	ldr	r1, [r4, #16]
 800ac36:	4650      	mov	r0, sl
 800ac38:	f7ff fec6 	bl	800a9c8 <_free_r>
 800ac3c:	e7c7      	b.n	800abce <__ssputs_r+0x46>
	...

0800ac40 <_svfiprintf_r>:
 800ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	4698      	mov	r8, r3
 800ac46:	898b      	ldrh	r3, [r1, #12]
 800ac48:	061b      	lsls	r3, r3, #24
 800ac4a:	b09d      	sub	sp, #116	; 0x74
 800ac4c:	4607      	mov	r7, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	4614      	mov	r4, r2
 800ac52:	d50e      	bpl.n	800ac72 <_svfiprintf_r+0x32>
 800ac54:	690b      	ldr	r3, [r1, #16]
 800ac56:	b963      	cbnz	r3, 800ac72 <_svfiprintf_r+0x32>
 800ac58:	2140      	movs	r1, #64	; 0x40
 800ac5a:	f7ff ff21 	bl	800aaa0 <_malloc_r>
 800ac5e:	6028      	str	r0, [r5, #0]
 800ac60:	6128      	str	r0, [r5, #16]
 800ac62:	b920      	cbnz	r0, 800ac6e <_svfiprintf_r+0x2e>
 800ac64:	230c      	movs	r3, #12
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6c:	e0d1      	b.n	800ae12 <_svfiprintf_r+0x1d2>
 800ac6e:	2340      	movs	r3, #64	; 0x40
 800ac70:	616b      	str	r3, [r5, #20]
 800ac72:	2300      	movs	r3, #0
 800ac74:	9309      	str	r3, [sp, #36]	; 0x24
 800ac76:	2320      	movs	r3, #32
 800ac78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac80:	2330      	movs	r3, #48	; 0x30
 800ac82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae2c <_svfiprintf_r+0x1ec>
 800ac86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac8a:	f04f 0901 	mov.w	r9, #1
 800ac8e:	4623      	mov	r3, r4
 800ac90:	469a      	mov	sl, r3
 800ac92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac96:	b10a      	cbz	r2, 800ac9c <_svfiprintf_r+0x5c>
 800ac98:	2a25      	cmp	r2, #37	; 0x25
 800ac9a:	d1f9      	bne.n	800ac90 <_svfiprintf_r+0x50>
 800ac9c:	ebba 0b04 	subs.w	fp, sl, r4
 800aca0:	d00b      	beq.n	800acba <_svfiprintf_r+0x7a>
 800aca2:	465b      	mov	r3, fp
 800aca4:	4622      	mov	r2, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff ff6d 	bl	800ab88 <__ssputs_r>
 800acae:	3001      	adds	r0, #1
 800acb0:	f000 80aa 	beq.w	800ae08 <_svfiprintf_r+0x1c8>
 800acb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acb6:	445a      	add	r2, fp
 800acb8:	9209      	str	r2, [sp, #36]	; 0x24
 800acba:	f89a 3000 	ldrb.w	r3, [sl]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 80a2 	beq.w	800ae08 <_svfiprintf_r+0x1c8>
 800acc4:	2300      	movs	r3, #0
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acce:	f10a 0a01 	add.w	sl, sl, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	9307      	str	r3, [sp, #28]
 800acd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acda:	931a      	str	r3, [sp, #104]	; 0x68
 800acdc:	4654      	mov	r4, sl
 800acde:	2205      	movs	r2, #5
 800ace0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace4:	4851      	ldr	r0, [pc, #324]	; (800ae2c <_svfiprintf_r+0x1ec>)
 800ace6:	f7f5 fa8b 	bl	8000200 <memchr>
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	b9d8      	cbnz	r0, 800ad26 <_svfiprintf_r+0xe6>
 800acee:	06d0      	lsls	r0, r2, #27
 800acf0:	bf44      	itt	mi
 800acf2:	2320      	movmi	r3, #32
 800acf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acf8:	0711      	lsls	r1, r2, #28
 800acfa:	bf44      	itt	mi
 800acfc:	232b      	movmi	r3, #43	; 0x2b
 800acfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad02:	f89a 3000 	ldrb.w	r3, [sl]
 800ad06:	2b2a      	cmp	r3, #42	; 0x2a
 800ad08:	d015      	beq.n	800ad36 <_svfiprintf_r+0xf6>
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	4654      	mov	r4, sl
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f04f 0c0a 	mov.w	ip, #10
 800ad14:	4621      	mov	r1, r4
 800ad16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad1a:	3b30      	subs	r3, #48	; 0x30
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d94e      	bls.n	800adbe <_svfiprintf_r+0x17e>
 800ad20:	b1b0      	cbz	r0, 800ad50 <_svfiprintf_r+0x110>
 800ad22:	9207      	str	r2, [sp, #28]
 800ad24:	e014      	b.n	800ad50 <_svfiprintf_r+0x110>
 800ad26:	eba0 0308 	sub.w	r3, r0, r8
 800ad2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	46a2      	mov	sl, r4
 800ad34:	e7d2      	b.n	800acdc <_svfiprintf_r+0x9c>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	9103      	str	r1, [sp, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfbb      	ittet	lt
 800ad42:	425b      	neglt	r3, r3
 800ad44:	f042 0202 	orrlt.w	r2, r2, #2
 800ad48:	9307      	strge	r3, [sp, #28]
 800ad4a:	9307      	strlt	r3, [sp, #28]
 800ad4c:	bfb8      	it	lt
 800ad4e:	9204      	strlt	r2, [sp, #16]
 800ad50:	7823      	ldrb	r3, [r4, #0]
 800ad52:	2b2e      	cmp	r3, #46	; 0x2e
 800ad54:	d10c      	bne.n	800ad70 <_svfiprintf_r+0x130>
 800ad56:	7863      	ldrb	r3, [r4, #1]
 800ad58:	2b2a      	cmp	r3, #42	; 0x2a
 800ad5a:	d135      	bne.n	800adc8 <_svfiprintf_r+0x188>
 800ad5c:	9b03      	ldr	r3, [sp, #12]
 800ad5e:	1d1a      	adds	r2, r3, #4
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	9203      	str	r2, [sp, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	bfb8      	it	lt
 800ad68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad6c:	3402      	adds	r4, #2
 800ad6e:	9305      	str	r3, [sp, #20]
 800ad70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae3c <_svfiprintf_r+0x1fc>
 800ad74:	7821      	ldrb	r1, [r4, #0]
 800ad76:	2203      	movs	r2, #3
 800ad78:	4650      	mov	r0, sl
 800ad7a:	f7f5 fa41 	bl	8000200 <memchr>
 800ad7e:	b140      	cbz	r0, 800ad92 <_svfiprintf_r+0x152>
 800ad80:	2340      	movs	r3, #64	; 0x40
 800ad82:	eba0 000a 	sub.w	r0, r0, sl
 800ad86:	fa03 f000 	lsl.w	r0, r3, r0
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	4303      	orrs	r3, r0
 800ad8e:	3401      	adds	r4, #1
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad96:	4826      	ldr	r0, [pc, #152]	; (800ae30 <_svfiprintf_r+0x1f0>)
 800ad98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad9c:	2206      	movs	r2, #6
 800ad9e:	f7f5 fa2f 	bl	8000200 <memchr>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d038      	beq.n	800ae18 <_svfiprintf_r+0x1d8>
 800ada6:	4b23      	ldr	r3, [pc, #140]	; (800ae34 <_svfiprintf_r+0x1f4>)
 800ada8:	bb1b      	cbnz	r3, 800adf2 <_svfiprintf_r+0x1b2>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	3307      	adds	r3, #7
 800adae:	f023 0307 	bic.w	r3, r3, #7
 800adb2:	3308      	adds	r3, #8
 800adb4:	9303      	str	r3, [sp, #12]
 800adb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb8:	4433      	add	r3, r6
 800adba:	9309      	str	r3, [sp, #36]	; 0x24
 800adbc:	e767      	b.n	800ac8e <_svfiprintf_r+0x4e>
 800adbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800adc2:	460c      	mov	r4, r1
 800adc4:	2001      	movs	r0, #1
 800adc6:	e7a5      	b.n	800ad14 <_svfiprintf_r+0xd4>
 800adc8:	2300      	movs	r3, #0
 800adca:	3401      	adds	r4, #1
 800adcc:	9305      	str	r3, [sp, #20]
 800adce:	4619      	mov	r1, r3
 800add0:	f04f 0c0a 	mov.w	ip, #10
 800add4:	4620      	mov	r0, r4
 800add6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adda:	3a30      	subs	r2, #48	; 0x30
 800addc:	2a09      	cmp	r2, #9
 800adde:	d903      	bls.n	800ade8 <_svfiprintf_r+0x1a8>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0c5      	beq.n	800ad70 <_svfiprintf_r+0x130>
 800ade4:	9105      	str	r1, [sp, #20]
 800ade6:	e7c3      	b.n	800ad70 <_svfiprintf_r+0x130>
 800ade8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adec:	4604      	mov	r4, r0
 800adee:	2301      	movs	r3, #1
 800adf0:	e7f0      	b.n	800add4 <_svfiprintf_r+0x194>
 800adf2:	ab03      	add	r3, sp, #12
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	462a      	mov	r2, r5
 800adf8:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <_svfiprintf_r+0x1f8>)
 800adfa:	a904      	add	r1, sp, #16
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7fc f96d 	bl	80070dc <_printf_float>
 800ae02:	1c42      	adds	r2, r0, #1
 800ae04:	4606      	mov	r6, r0
 800ae06:	d1d6      	bne.n	800adb6 <_svfiprintf_r+0x176>
 800ae08:	89ab      	ldrh	r3, [r5, #12]
 800ae0a:	065b      	lsls	r3, r3, #25
 800ae0c:	f53f af2c 	bmi.w	800ac68 <_svfiprintf_r+0x28>
 800ae10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae12:	b01d      	add	sp, #116	; 0x74
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	ab03      	add	r3, sp, #12
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <_svfiprintf_r+0x1f8>)
 800ae20:	a904      	add	r1, sp, #16
 800ae22:	4638      	mov	r0, r7
 800ae24:	f7fc fbfe 	bl	8007624 <_printf_i>
 800ae28:	e7eb      	b.n	800ae02 <_svfiprintf_r+0x1c2>
 800ae2a:	bf00      	nop
 800ae2c:	0800c5e4 	.word	0x0800c5e4
 800ae30:	0800c5ee 	.word	0x0800c5ee
 800ae34:	080070dd 	.word	0x080070dd
 800ae38:	0800ab89 	.word	0x0800ab89
 800ae3c:	0800c5ea 	.word	0x0800c5ea

0800ae40 <_sungetc_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	1c4b      	adds	r3, r1, #1
 800ae44:	4614      	mov	r4, r2
 800ae46:	d103      	bne.n	800ae50 <_sungetc_r+0x10>
 800ae48:	f04f 35ff 	mov.w	r5, #4294967295
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	8993      	ldrh	r3, [r2, #12]
 800ae52:	f023 0320 	bic.w	r3, r3, #32
 800ae56:	8193      	strh	r3, [r2, #12]
 800ae58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae5a:	6852      	ldr	r2, [r2, #4]
 800ae5c:	b2cd      	uxtb	r5, r1
 800ae5e:	b18b      	cbz	r3, 800ae84 <_sungetc_r+0x44>
 800ae60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ae62:	4293      	cmp	r3, r2
 800ae64:	dd08      	ble.n	800ae78 <_sungetc_r+0x38>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	1e5a      	subs	r2, r3, #1
 800ae6a:	6022      	str	r2, [r4, #0]
 800ae6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ae70:	6863      	ldr	r3, [r4, #4]
 800ae72:	3301      	adds	r3, #1
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	e7e9      	b.n	800ae4c <_sungetc_r+0xc>
 800ae78:	4621      	mov	r1, r4
 800ae7a:	f000 fbdd 	bl	800b638 <__submore>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0f1      	beq.n	800ae66 <_sungetc_r+0x26>
 800ae82:	e7e1      	b.n	800ae48 <_sungetc_r+0x8>
 800ae84:	6921      	ldr	r1, [r4, #16]
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	b151      	cbz	r1, 800aea0 <_sungetc_r+0x60>
 800ae8a:	4299      	cmp	r1, r3
 800ae8c:	d208      	bcs.n	800aea0 <_sungetc_r+0x60>
 800ae8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ae92:	42a9      	cmp	r1, r5
 800ae94:	d104      	bne.n	800aea0 <_sungetc_r+0x60>
 800ae96:	3b01      	subs	r3, #1
 800ae98:	3201      	adds	r2, #1
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	6062      	str	r2, [r4, #4]
 800ae9e:	e7d5      	b.n	800ae4c <_sungetc_r+0xc>
 800aea0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800aea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea8:	6363      	str	r3, [r4, #52]	; 0x34
 800aeaa:	2303      	movs	r3, #3
 800aeac:	63a3      	str	r3, [r4, #56]	; 0x38
 800aeae:	4623      	mov	r3, r4
 800aeb0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e7dc      	b.n	800ae74 <_sungetc_r+0x34>

0800aeba <__ssrefill_r>:
 800aeba:	b510      	push	{r4, lr}
 800aebc:	460c      	mov	r4, r1
 800aebe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aec0:	b169      	cbz	r1, 800aede <__ssrefill_r+0x24>
 800aec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aec6:	4299      	cmp	r1, r3
 800aec8:	d001      	beq.n	800aece <__ssrefill_r+0x14>
 800aeca:	f7ff fd7d 	bl	800a9c8 <_free_r>
 800aece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aed0:	6063      	str	r3, [r4, #4]
 800aed2:	2000      	movs	r0, #0
 800aed4:	6360      	str	r0, [r4, #52]	; 0x34
 800aed6:	b113      	cbz	r3, 800aede <__ssrefill_r+0x24>
 800aed8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	2300      	movs	r3, #0
 800aee4:	6063      	str	r3, [r4, #4]
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f043 0320 	orr.w	r3, r3, #32
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	f04f 30ff 	mov.w	r0, #4294967295
 800aef2:	e7f3      	b.n	800aedc <__ssrefill_r+0x22>

0800aef4 <__ssvfiscanf_r>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aefe:	2100      	movs	r1, #0
 800af00:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800af04:	49a6      	ldr	r1, [pc, #664]	; (800b1a0 <__ssvfiscanf_r+0x2ac>)
 800af06:	91a0      	str	r1, [sp, #640]	; 0x280
 800af08:	f10d 0804 	add.w	r8, sp, #4
 800af0c:	49a5      	ldr	r1, [pc, #660]	; (800b1a4 <__ssvfiscanf_r+0x2b0>)
 800af0e:	4fa6      	ldr	r7, [pc, #664]	; (800b1a8 <__ssvfiscanf_r+0x2b4>)
 800af10:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b1ac <__ssvfiscanf_r+0x2b8>
 800af14:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800af18:	4606      	mov	r6, r0
 800af1a:	91a1      	str	r1, [sp, #644]	; 0x284
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	7813      	ldrb	r3, [r2, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 815a 	beq.w	800b1da <__ssvfiscanf_r+0x2e6>
 800af26:	5dd9      	ldrb	r1, [r3, r7]
 800af28:	f011 0108 	ands.w	r1, r1, #8
 800af2c:	f102 0501 	add.w	r5, r2, #1
 800af30:	d019      	beq.n	800af66 <__ssvfiscanf_r+0x72>
 800af32:	6863      	ldr	r3, [r4, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd0f      	ble.n	800af58 <__ssvfiscanf_r+0x64>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	5cba      	ldrb	r2, [r7, r2]
 800af3e:	0712      	lsls	r2, r2, #28
 800af40:	d401      	bmi.n	800af46 <__ssvfiscanf_r+0x52>
 800af42:	462a      	mov	r2, r5
 800af44:	e7eb      	b.n	800af1e <__ssvfiscanf_r+0x2a>
 800af46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af48:	3201      	adds	r2, #1
 800af4a:	9245      	str	r2, [sp, #276]	; 0x114
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	3301      	adds	r3, #1
 800af50:	3a01      	subs	r2, #1
 800af52:	6062      	str	r2, [r4, #4]
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	e7ec      	b.n	800af32 <__ssvfiscanf_r+0x3e>
 800af58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af5a:	4621      	mov	r1, r4
 800af5c:	4630      	mov	r0, r6
 800af5e:	4798      	blx	r3
 800af60:	2800      	cmp	r0, #0
 800af62:	d0e9      	beq.n	800af38 <__ssvfiscanf_r+0x44>
 800af64:	e7ed      	b.n	800af42 <__ssvfiscanf_r+0x4e>
 800af66:	2b25      	cmp	r3, #37	; 0x25
 800af68:	d012      	beq.n	800af90 <__ssvfiscanf_r+0x9c>
 800af6a:	469a      	mov	sl, r3
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f340 8091 	ble.w	800b096 <__ssvfiscanf_r+0x1a2>
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	7813      	ldrb	r3, [r2, #0]
 800af78:	4553      	cmp	r3, sl
 800af7a:	f040 812e 	bne.w	800b1da <__ssvfiscanf_r+0x2e6>
 800af7e:	6863      	ldr	r3, [r4, #4]
 800af80:	3b01      	subs	r3, #1
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800af86:	3201      	adds	r2, #1
 800af88:	3301      	adds	r3, #1
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	9345      	str	r3, [sp, #276]	; 0x114
 800af8e:	e7d8      	b.n	800af42 <__ssvfiscanf_r+0x4e>
 800af90:	9141      	str	r1, [sp, #260]	; 0x104
 800af92:	9143      	str	r1, [sp, #268]	; 0x10c
 800af94:	7853      	ldrb	r3, [r2, #1]
 800af96:	2b2a      	cmp	r3, #42	; 0x2a
 800af98:	bf02      	ittt	eq
 800af9a:	2310      	moveq	r3, #16
 800af9c:	1c95      	addeq	r5, r2, #2
 800af9e:	9341      	streq	r3, [sp, #260]	; 0x104
 800afa0:	220a      	movs	r2, #10
 800afa2:	46aa      	mov	sl, r5
 800afa4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800afa8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800afac:	2b09      	cmp	r3, #9
 800afae:	d91d      	bls.n	800afec <__ssvfiscanf_r+0xf8>
 800afb0:	487e      	ldr	r0, [pc, #504]	; (800b1ac <__ssvfiscanf_r+0x2b8>)
 800afb2:	2203      	movs	r2, #3
 800afb4:	f7f5 f924 	bl	8000200 <memchr>
 800afb8:	b140      	cbz	r0, 800afcc <__ssvfiscanf_r+0xd8>
 800afba:	2301      	movs	r3, #1
 800afbc:	eba0 0009 	sub.w	r0, r0, r9
 800afc0:	fa03 f000 	lsl.w	r0, r3, r0
 800afc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800afc6:	4318      	orrs	r0, r3
 800afc8:	9041      	str	r0, [sp, #260]	; 0x104
 800afca:	4655      	mov	r5, sl
 800afcc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800afd0:	2b78      	cmp	r3, #120	; 0x78
 800afd2:	d806      	bhi.n	800afe2 <__ssvfiscanf_r+0xee>
 800afd4:	2b57      	cmp	r3, #87	; 0x57
 800afd6:	d810      	bhi.n	800affa <__ssvfiscanf_r+0x106>
 800afd8:	2b25      	cmp	r3, #37	; 0x25
 800afda:	d0c6      	beq.n	800af6a <__ssvfiscanf_r+0x76>
 800afdc:	d856      	bhi.n	800b08c <__ssvfiscanf_r+0x198>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d064      	beq.n	800b0ac <__ssvfiscanf_r+0x1b8>
 800afe2:	2303      	movs	r3, #3
 800afe4:	9347      	str	r3, [sp, #284]	; 0x11c
 800afe6:	230a      	movs	r3, #10
 800afe8:	9342      	str	r3, [sp, #264]	; 0x108
 800afea:	e071      	b.n	800b0d0 <__ssvfiscanf_r+0x1dc>
 800afec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800afee:	fb02 1103 	mla	r1, r2, r3, r1
 800aff2:	3930      	subs	r1, #48	; 0x30
 800aff4:	9143      	str	r1, [sp, #268]	; 0x10c
 800aff6:	4655      	mov	r5, sl
 800aff8:	e7d3      	b.n	800afa2 <__ssvfiscanf_r+0xae>
 800affa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800affe:	2a20      	cmp	r2, #32
 800b000:	d8ef      	bhi.n	800afe2 <__ssvfiscanf_r+0xee>
 800b002:	a101      	add	r1, pc, #4	; (adr r1, 800b008 <__ssvfiscanf_r+0x114>)
 800b004:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b008:	0800b0bb 	.word	0x0800b0bb
 800b00c:	0800afe3 	.word	0x0800afe3
 800b010:	0800afe3 	.word	0x0800afe3
 800b014:	0800b119 	.word	0x0800b119
 800b018:	0800afe3 	.word	0x0800afe3
 800b01c:	0800afe3 	.word	0x0800afe3
 800b020:	0800afe3 	.word	0x0800afe3
 800b024:	0800afe3 	.word	0x0800afe3
 800b028:	0800afe3 	.word	0x0800afe3
 800b02c:	0800afe3 	.word	0x0800afe3
 800b030:	0800afe3 	.word	0x0800afe3
 800b034:	0800b12f 	.word	0x0800b12f
 800b038:	0800b105 	.word	0x0800b105
 800b03c:	0800b093 	.word	0x0800b093
 800b040:	0800b093 	.word	0x0800b093
 800b044:	0800b093 	.word	0x0800b093
 800b048:	0800afe3 	.word	0x0800afe3
 800b04c:	0800b109 	.word	0x0800b109
 800b050:	0800afe3 	.word	0x0800afe3
 800b054:	0800afe3 	.word	0x0800afe3
 800b058:	0800afe3 	.word	0x0800afe3
 800b05c:	0800afe3 	.word	0x0800afe3
 800b060:	0800b13f 	.word	0x0800b13f
 800b064:	0800b111 	.word	0x0800b111
 800b068:	0800b0b3 	.word	0x0800b0b3
 800b06c:	0800afe3 	.word	0x0800afe3
 800b070:	0800afe3 	.word	0x0800afe3
 800b074:	0800b13b 	.word	0x0800b13b
 800b078:	0800afe3 	.word	0x0800afe3
 800b07c:	0800b105 	.word	0x0800b105
 800b080:	0800afe3 	.word	0x0800afe3
 800b084:	0800afe3 	.word	0x0800afe3
 800b088:	0800b0bb 	.word	0x0800b0bb
 800b08c:	3b45      	subs	r3, #69	; 0x45
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d8a7      	bhi.n	800afe2 <__ssvfiscanf_r+0xee>
 800b092:	2305      	movs	r3, #5
 800b094:	e01b      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b096:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b098:	4621      	mov	r1, r4
 800b09a:	4630      	mov	r0, r6
 800b09c:	4798      	blx	r3
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f af68 	beq.w	800af74 <__ssvfiscanf_r+0x80>
 800b0a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f040 808d 	bne.w	800b1c6 <__ssvfiscanf_r+0x2d2>
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	e08f      	b.n	800b1d2 <__ssvfiscanf_r+0x2de>
 800b0b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0b4:	f042 0220 	orr.w	r2, r2, #32
 800b0b8:	9241      	str	r2, [sp, #260]	; 0x104
 800b0ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0c0:	9241      	str	r2, [sp, #260]	; 0x104
 800b0c2:	2210      	movs	r2, #16
 800b0c4:	2b6f      	cmp	r3, #111	; 0x6f
 800b0c6:	9242      	str	r2, [sp, #264]	; 0x108
 800b0c8:	bf34      	ite	cc
 800b0ca:	2303      	movcc	r3, #3
 800b0cc:	2304      	movcs	r3, #4
 800b0ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800b0d0:	6863      	ldr	r3, [r4, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	dd42      	ble.n	800b15c <__ssvfiscanf_r+0x268>
 800b0d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0d8:	0659      	lsls	r1, r3, #25
 800b0da:	d404      	bmi.n	800b0e6 <__ssvfiscanf_r+0x1f2>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	5cba      	ldrb	r2, [r7, r2]
 800b0e2:	0712      	lsls	r2, r2, #28
 800b0e4:	d441      	bmi.n	800b16a <__ssvfiscanf_r+0x276>
 800b0e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	dc50      	bgt.n	800b18e <__ssvfiscanf_r+0x29a>
 800b0ec:	466b      	mov	r3, sp
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	a941      	add	r1, sp, #260	; 0x104
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f000 f876 	bl	800b1e4 <_scanf_chars>
 800b0f8:	2801      	cmp	r0, #1
 800b0fa:	d06e      	beq.n	800b1da <__ssvfiscanf_r+0x2e6>
 800b0fc:	2802      	cmp	r0, #2
 800b0fe:	f47f af20 	bne.w	800af42 <__ssvfiscanf_r+0x4e>
 800b102:	e7cf      	b.n	800b0a4 <__ssvfiscanf_r+0x1b0>
 800b104:	220a      	movs	r2, #10
 800b106:	e7dd      	b.n	800b0c4 <__ssvfiscanf_r+0x1d0>
 800b108:	2300      	movs	r3, #0
 800b10a:	9342      	str	r3, [sp, #264]	; 0x108
 800b10c:	2303      	movs	r3, #3
 800b10e:	e7de      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b110:	2308      	movs	r3, #8
 800b112:	9342      	str	r3, [sp, #264]	; 0x108
 800b114:	2304      	movs	r3, #4
 800b116:	e7da      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b118:	4629      	mov	r1, r5
 800b11a:	4640      	mov	r0, r8
 800b11c:	f000 f9e0 	bl	800b4e0 <__sccl>
 800b120:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b126:	9341      	str	r3, [sp, #260]	; 0x104
 800b128:	4605      	mov	r5, r0
 800b12a:	2301      	movs	r3, #1
 800b12c:	e7cf      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b12e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b134:	9341      	str	r3, [sp, #260]	; 0x104
 800b136:	2300      	movs	r3, #0
 800b138:	e7c9      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b13a:	2302      	movs	r3, #2
 800b13c:	e7c7      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b13e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b140:	06c3      	lsls	r3, r0, #27
 800b142:	f53f aefe 	bmi.w	800af42 <__ssvfiscanf_r+0x4e>
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b14a:	1d19      	adds	r1, r3, #4
 800b14c:	9100      	str	r1, [sp, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f010 0f01 	tst.w	r0, #1
 800b154:	bf14      	ite	ne
 800b156:	801a      	strhne	r2, [r3, #0]
 800b158:	601a      	streq	r2, [r3, #0]
 800b15a:	e6f2      	b.n	800af42 <__ssvfiscanf_r+0x4e>
 800b15c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b15e:	4621      	mov	r1, r4
 800b160:	4630      	mov	r0, r6
 800b162:	4798      	blx	r3
 800b164:	2800      	cmp	r0, #0
 800b166:	d0b6      	beq.n	800b0d6 <__ssvfiscanf_r+0x1e2>
 800b168:	e79c      	b.n	800b0a4 <__ssvfiscanf_r+0x1b0>
 800b16a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b16c:	3201      	adds	r2, #1
 800b16e:	9245      	str	r2, [sp, #276]	; 0x114
 800b170:	6862      	ldr	r2, [r4, #4]
 800b172:	3a01      	subs	r2, #1
 800b174:	2a00      	cmp	r2, #0
 800b176:	6062      	str	r2, [r4, #4]
 800b178:	dd02      	ble.n	800b180 <__ssvfiscanf_r+0x28c>
 800b17a:	3301      	adds	r3, #1
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	e7ad      	b.n	800b0dc <__ssvfiscanf_r+0x1e8>
 800b180:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b182:	4621      	mov	r1, r4
 800b184:	4630      	mov	r0, r6
 800b186:	4798      	blx	r3
 800b188:	2800      	cmp	r0, #0
 800b18a:	d0a7      	beq.n	800b0dc <__ssvfiscanf_r+0x1e8>
 800b18c:	e78a      	b.n	800b0a4 <__ssvfiscanf_r+0x1b0>
 800b18e:	2b04      	cmp	r3, #4
 800b190:	dc0e      	bgt.n	800b1b0 <__ssvfiscanf_r+0x2bc>
 800b192:	466b      	mov	r3, sp
 800b194:	4622      	mov	r2, r4
 800b196:	a941      	add	r1, sp, #260	; 0x104
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 f87d 	bl	800b298 <_scanf_i>
 800b19e:	e7ab      	b.n	800b0f8 <__ssvfiscanf_r+0x204>
 800b1a0:	0800ae41 	.word	0x0800ae41
 800b1a4:	0800aebb 	.word	0x0800aebb
 800b1a8:	0800c281 	.word	0x0800c281
 800b1ac:	0800c5ea 	.word	0x0800c5ea
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <__ssvfiscanf_r+0x2ec>)
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f43f aec5 	beq.w	800af42 <__ssvfiscanf_r+0x4e>
 800b1b8:	466b      	mov	r3, sp
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	a941      	add	r1, sp, #260	; 0x104
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f7fc fb56 	bl	8007870 <_scanf_float>
 800b1c4:	e798      	b.n	800b0f8 <__ssvfiscanf_r+0x204>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1cc:	bf18      	it	ne
 800b1ce:	f04f 30ff 	movne.w	r0, #4294967295
 800b1d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1da:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b1dc:	e7f9      	b.n	800b1d2 <__ssvfiscanf_r+0x2de>
 800b1de:	bf00      	nop
 800b1e0:	08007871 	.word	0x08007871

0800b1e4 <_scanf_chars>:
 800b1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e8:	4615      	mov	r5, r2
 800b1ea:	688a      	ldr	r2, [r1, #8]
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	b932      	cbnz	r2, 800b200 <_scanf_chars+0x1c>
 800b1f2:	698a      	ldr	r2, [r1, #24]
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2201      	moveq	r2, #1
 800b1fa:	f04f 32ff 	movne.w	r2, #4294967295
 800b1fe:	608a      	str	r2, [r1, #8]
 800b200:	6822      	ldr	r2, [r4, #0]
 800b202:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b294 <_scanf_chars+0xb0>
 800b206:	06d1      	lsls	r1, r2, #27
 800b208:	bf5f      	itttt	pl
 800b20a:	681a      	ldrpl	r2, [r3, #0]
 800b20c:	1d11      	addpl	r1, r2, #4
 800b20e:	6019      	strpl	r1, [r3, #0]
 800b210:	6816      	ldrpl	r6, [r2, #0]
 800b212:	2700      	movs	r7, #0
 800b214:	69a0      	ldr	r0, [r4, #24]
 800b216:	b188      	cbz	r0, 800b23c <_scanf_chars+0x58>
 800b218:	2801      	cmp	r0, #1
 800b21a:	d107      	bne.n	800b22c <_scanf_chars+0x48>
 800b21c:	682a      	ldr	r2, [r5, #0]
 800b21e:	7811      	ldrb	r1, [r2, #0]
 800b220:	6962      	ldr	r2, [r4, #20]
 800b222:	5c52      	ldrb	r2, [r2, r1]
 800b224:	b952      	cbnz	r2, 800b23c <_scanf_chars+0x58>
 800b226:	2f00      	cmp	r7, #0
 800b228:	d031      	beq.n	800b28e <_scanf_chars+0xaa>
 800b22a:	e022      	b.n	800b272 <_scanf_chars+0x8e>
 800b22c:	2802      	cmp	r0, #2
 800b22e:	d120      	bne.n	800b272 <_scanf_chars+0x8e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b238:	071b      	lsls	r3, r3, #28
 800b23a:	d41a      	bmi.n	800b272 <_scanf_chars+0x8e>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	06da      	lsls	r2, r3, #27
 800b240:	bf5e      	ittt	pl
 800b242:	682b      	ldrpl	r3, [r5, #0]
 800b244:	781b      	ldrbpl	r3, [r3, #0]
 800b246:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b24a:	682a      	ldr	r2, [r5, #0]
 800b24c:	686b      	ldr	r3, [r5, #4]
 800b24e:	3201      	adds	r2, #1
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	68a2      	ldr	r2, [r4, #8]
 800b254:	3b01      	subs	r3, #1
 800b256:	3a01      	subs	r2, #1
 800b258:	606b      	str	r3, [r5, #4]
 800b25a:	3701      	adds	r7, #1
 800b25c:	60a2      	str	r2, [r4, #8]
 800b25e:	b142      	cbz	r2, 800b272 <_scanf_chars+0x8e>
 800b260:	2b00      	cmp	r3, #0
 800b262:	dcd7      	bgt.n	800b214 <_scanf_chars+0x30>
 800b264:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b268:	4629      	mov	r1, r5
 800b26a:	4640      	mov	r0, r8
 800b26c:	4798      	blx	r3
 800b26e:	2800      	cmp	r0, #0
 800b270:	d0d0      	beq.n	800b214 <_scanf_chars+0x30>
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	f013 0310 	ands.w	r3, r3, #16
 800b278:	d105      	bne.n	800b286 <_scanf_chars+0xa2>
 800b27a:	68e2      	ldr	r2, [r4, #12]
 800b27c:	3201      	adds	r2, #1
 800b27e:	60e2      	str	r2, [r4, #12]
 800b280:	69a2      	ldr	r2, [r4, #24]
 800b282:	b102      	cbz	r2, 800b286 <_scanf_chars+0xa2>
 800b284:	7033      	strb	r3, [r6, #0]
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	443b      	add	r3, r7
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	2000      	movs	r0, #0
 800b28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b292:	bf00      	nop
 800b294:	0800c281 	.word	0x0800c281

0800b298 <_scanf_i>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	4698      	mov	r8, r3
 800b29e:	4b76      	ldr	r3, [pc, #472]	; (800b478 <_scanf_i+0x1e0>)
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	ab03      	add	r3, sp, #12
 800b2ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b2b2:	4b72      	ldr	r3, [pc, #456]	; (800b47c <_scanf_i+0x1e4>)
 800b2b4:	69a1      	ldr	r1, [r4, #24]
 800b2b6:	4a72      	ldr	r2, [pc, #456]	; (800b480 <_scanf_i+0x1e8>)
 800b2b8:	2903      	cmp	r1, #3
 800b2ba:	bf18      	it	ne
 800b2bc:	461a      	movne	r2, r3
 800b2be:	68a3      	ldr	r3, [r4, #8]
 800b2c0:	9201      	str	r2, [sp, #4]
 800b2c2:	1e5a      	subs	r2, r3, #1
 800b2c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b2c8:	bf88      	it	hi
 800b2ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b2ce:	4627      	mov	r7, r4
 800b2d0:	bf82      	ittt	hi
 800b2d2:	eb03 0905 	addhi.w	r9, r3, r5
 800b2d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b2da:	60a3      	strhi	r3, [r4, #8]
 800b2dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b2e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b2e4:	bf98      	it	ls
 800b2e6:	f04f 0900 	movls.w	r9, #0
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	463d      	mov	r5, r7
 800b2ee:	f04f 0b00 	mov.w	fp, #0
 800b2f2:	6831      	ldr	r1, [r6, #0]
 800b2f4:	ab03      	add	r3, sp, #12
 800b2f6:	7809      	ldrb	r1, [r1, #0]
 800b2f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	f7f4 ff7f 	bl	8000200 <memchr>
 800b302:	b328      	cbz	r0, 800b350 <_scanf_i+0xb8>
 800b304:	f1bb 0f01 	cmp.w	fp, #1
 800b308:	d159      	bne.n	800b3be <_scanf_i+0x126>
 800b30a:	6862      	ldr	r2, [r4, #4]
 800b30c:	b92a      	cbnz	r2, 800b31a <_scanf_i+0x82>
 800b30e:	6822      	ldr	r2, [r4, #0]
 800b310:	2308      	movs	r3, #8
 800b312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b316:	6063      	str	r3, [r4, #4]
 800b318:	6022      	str	r2, [r4, #0]
 800b31a:	6822      	ldr	r2, [r4, #0]
 800b31c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b320:	6022      	str	r2, [r4, #0]
 800b322:	68a2      	ldr	r2, [r4, #8]
 800b324:	1e51      	subs	r1, r2, #1
 800b326:	60a1      	str	r1, [r4, #8]
 800b328:	b192      	cbz	r2, 800b350 <_scanf_i+0xb8>
 800b32a:	6832      	ldr	r2, [r6, #0]
 800b32c:	1c51      	adds	r1, r2, #1
 800b32e:	6031      	str	r1, [r6, #0]
 800b330:	7812      	ldrb	r2, [r2, #0]
 800b332:	f805 2b01 	strb.w	r2, [r5], #1
 800b336:	6872      	ldr	r2, [r6, #4]
 800b338:	3a01      	subs	r2, #1
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	6072      	str	r2, [r6, #4]
 800b33e:	dc07      	bgt.n	800b350 <_scanf_i+0xb8>
 800b340:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b344:	4631      	mov	r1, r6
 800b346:	4650      	mov	r0, sl
 800b348:	4790      	blx	r2
 800b34a:	2800      	cmp	r0, #0
 800b34c:	f040 8085 	bne.w	800b45a <_scanf_i+0x1c2>
 800b350:	f10b 0b01 	add.w	fp, fp, #1
 800b354:	f1bb 0f03 	cmp.w	fp, #3
 800b358:	d1cb      	bne.n	800b2f2 <_scanf_i+0x5a>
 800b35a:	6863      	ldr	r3, [r4, #4]
 800b35c:	b90b      	cbnz	r3, 800b362 <_scanf_i+0xca>
 800b35e:	230a      	movs	r3, #10
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	6863      	ldr	r3, [r4, #4]
 800b364:	4947      	ldr	r1, [pc, #284]	; (800b484 <_scanf_i+0x1ec>)
 800b366:	6960      	ldr	r0, [r4, #20]
 800b368:	1ac9      	subs	r1, r1, r3
 800b36a:	f000 f8b9 	bl	800b4e0 <__sccl>
 800b36e:	f04f 0b00 	mov.w	fp, #0
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	6822      	ldr	r2, [r4, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d03d      	beq.n	800b3f6 <_scanf_i+0x15e>
 800b37a:	6831      	ldr	r1, [r6, #0]
 800b37c:	6960      	ldr	r0, [r4, #20]
 800b37e:	f891 c000 	ldrb.w	ip, [r1]
 800b382:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b386:	2800      	cmp	r0, #0
 800b388:	d035      	beq.n	800b3f6 <_scanf_i+0x15e>
 800b38a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b38e:	d124      	bne.n	800b3da <_scanf_i+0x142>
 800b390:	0510      	lsls	r0, r2, #20
 800b392:	d522      	bpl.n	800b3da <_scanf_i+0x142>
 800b394:	f10b 0b01 	add.w	fp, fp, #1
 800b398:	f1b9 0f00 	cmp.w	r9, #0
 800b39c:	d003      	beq.n	800b3a6 <_scanf_i+0x10e>
 800b39e:	3301      	adds	r3, #1
 800b3a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3a4:	60a3      	str	r3, [r4, #8]
 800b3a6:	6873      	ldr	r3, [r6, #4]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	6073      	str	r3, [r6, #4]
 800b3ae:	dd1b      	ble.n	800b3e8 <_scanf_i+0x150>
 800b3b0:	6833      	ldr	r3, [r6, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	6033      	str	r3, [r6, #0]
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	60a3      	str	r3, [r4, #8]
 800b3bc:	e7d9      	b.n	800b372 <_scanf_i+0xda>
 800b3be:	f1bb 0f02 	cmp.w	fp, #2
 800b3c2:	d1ae      	bne.n	800b322 <_scanf_i+0x8a>
 800b3c4:	6822      	ldr	r2, [r4, #0]
 800b3c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b3ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b3ce:	d1bf      	bne.n	800b350 <_scanf_i+0xb8>
 800b3d0:	2310      	movs	r3, #16
 800b3d2:	6063      	str	r3, [r4, #4]
 800b3d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3d8:	e7a2      	b.n	800b320 <_scanf_i+0x88>
 800b3da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b3de:	6022      	str	r2, [r4, #0]
 800b3e0:	780b      	ldrb	r3, [r1, #0]
 800b3e2:	f805 3b01 	strb.w	r3, [r5], #1
 800b3e6:	e7de      	b.n	800b3a6 <_scanf_i+0x10e>
 800b3e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	4798      	blx	r3
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d0df      	beq.n	800b3b6 <_scanf_i+0x11e>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	05db      	lsls	r3, r3, #23
 800b3fa:	d50d      	bpl.n	800b418 <_scanf_i+0x180>
 800b3fc:	42bd      	cmp	r5, r7
 800b3fe:	d909      	bls.n	800b414 <_scanf_i+0x17c>
 800b400:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b408:	4632      	mov	r2, r6
 800b40a:	4650      	mov	r0, sl
 800b40c:	4798      	blx	r3
 800b40e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b412:	464d      	mov	r5, r9
 800b414:	42bd      	cmp	r5, r7
 800b416:	d02d      	beq.n	800b474 <_scanf_i+0x1dc>
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	f012 0210 	ands.w	r2, r2, #16
 800b41e:	d113      	bne.n	800b448 <_scanf_i+0x1b0>
 800b420:	702a      	strb	r2, [r5, #0]
 800b422:	6863      	ldr	r3, [r4, #4]
 800b424:	9e01      	ldr	r6, [sp, #4]
 800b426:	4639      	mov	r1, r7
 800b428:	4650      	mov	r0, sl
 800b42a:	47b0      	blx	r6
 800b42c:	6821      	ldr	r1, [r4, #0]
 800b42e:	f8d8 3000 	ldr.w	r3, [r8]
 800b432:	f011 0f20 	tst.w	r1, #32
 800b436:	d013      	beq.n	800b460 <_scanf_i+0x1c8>
 800b438:	1d1a      	adds	r2, r3, #4
 800b43a:	f8c8 2000 	str.w	r2, [r8]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6018      	str	r0, [r3, #0]
 800b442:	68e3      	ldr	r3, [r4, #12]
 800b444:	3301      	adds	r3, #1
 800b446:	60e3      	str	r3, [r4, #12]
 800b448:	1bed      	subs	r5, r5, r7
 800b44a:	44ab      	add	fp, r5
 800b44c:	6925      	ldr	r5, [r4, #16]
 800b44e:	445d      	add	r5, fp
 800b450:	6125      	str	r5, [r4, #16]
 800b452:	2000      	movs	r0, #0
 800b454:	b007      	add	sp, #28
 800b456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45a:	f04f 0b00 	mov.w	fp, #0
 800b45e:	e7ca      	b.n	800b3f6 <_scanf_i+0x15e>
 800b460:	1d1a      	adds	r2, r3, #4
 800b462:	f8c8 2000 	str.w	r2, [r8]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f011 0f01 	tst.w	r1, #1
 800b46c:	bf14      	ite	ne
 800b46e:	8018      	strhne	r0, [r3, #0]
 800b470:	6018      	streq	r0, [r3, #0]
 800b472:	e7e6      	b.n	800b442 <_scanf_i+0x1aa>
 800b474:	2001      	movs	r0, #1
 800b476:	e7ed      	b.n	800b454 <_scanf_i+0x1bc>
 800b478:	0800c1c4 	.word	0x0800c1c4
 800b47c:	0800b635 	.word	0x0800b635
 800b480:	08008b3d 	.word	0x08008b3d
 800b484:	0800c60e 	.word	0x0800c60e

0800b488 <_read_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d07      	ldr	r5, [pc, #28]	; (800b4a8 <_read_r+0x20>)
 800b48c:	4604      	mov	r4, r0
 800b48e:	4608      	mov	r0, r1
 800b490:	4611      	mov	r1, r2
 800b492:	2200      	movs	r2, #0
 800b494:	602a      	str	r2, [r5, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	f7f7 fc2c 	bl	8002cf4 <_read>
 800b49c:	1c43      	adds	r3, r0, #1
 800b49e:	d102      	bne.n	800b4a6 <_read_r+0x1e>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	b103      	cbz	r3, 800b4a6 <_read_r+0x1e>
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	200010c8 	.word	0x200010c8
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <nan>:
 800b4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b4b8 <nan+0x8>
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	00000000 	.word	0x00000000
 800b4bc:	7ff80000 	.word	0x7ff80000

0800b4c0 <_sbrk_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4d06      	ldr	r5, [pc, #24]	; (800b4dc <_sbrk_r+0x1c>)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	602b      	str	r3, [r5, #0]
 800b4cc:	f7f7 fc80 	bl	8002dd0 <_sbrk>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_sbrk_r+0x1a>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_sbrk_r+0x1a>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	200010c8 	.word	0x200010c8

0800b4e0 <__sccl>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	780b      	ldrb	r3, [r1, #0]
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	2b5e      	cmp	r3, #94	; 0x5e
 800b4e8:	bf0b      	itete	eq
 800b4ea:	784b      	ldrbeq	r3, [r1, #1]
 800b4ec:	1c48      	addne	r0, r1, #1
 800b4ee:	1c88      	addeq	r0, r1, #2
 800b4f0:	2200      	movne	r2, #0
 800b4f2:	bf08      	it	eq
 800b4f4:	2201      	moveq	r2, #1
 800b4f6:	1e61      	subs	r1, r4, #1
 800b4f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b4fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b500:	42a9      	cmp	r1, r5
 800b502:	d1fb      	bne.n	800b4fc <__sccl+0x1c>
 800b504:	b90b      	cbnz	r3, 800b50a <__sccl+0x2a>
 800b506:	3801      	subs	r0, #1
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	f082 0201 	eor.w	r2, r2, #1
 800b50e:	54e2      	strb	r2, [r4, r3]
 800b510:	4605      	mov	r5, r0
 800b512:	4628      	mov	r0, r5
 800b514:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b518:	292d      	cmp	r1, #45	; 0x2d
 800b51a:	d006      	beq.n	800b52a <__sccl+0x4a>
 800b51c:	295d      	cmp	r1, #93	; 0x5d
 800b51e:	d0f3      	beq.n	800b508 <__sccl+0x28>
 800b520:	b909      	cbnz	r1, 800b526 <__sccl+0x46>
 800b522:	4628      	mov	r0, r5
 800b524:	e7f0      	b.n	800b508 <__sccl+0x28>
 800b526:	460b      	mov	r3, r1
 800b528:	e7f1      	b.n	800b50e <__sccl+0x2e>
 800b52a:	786e      	ldrb	r6, [r5, #1]
 800b52c:	2e5d      	cmp	r6, #93	; 0x5d
 800b52e:	d0fa      	beq.n	800b526 <__sccl+0x46>
 800b530:	42b3      	cmp	r3, r6
 800b532:	dcf8      	bgt.n	800b526 <__sccl+0x46>
 800b534:	3502      	adds	r5, #2
 800b536:	4619      	mov	r1, r3
 800b538:	3101      	adds	r1, #1
 800b53a:	428e      	cmp	r6, r1
 800b53c:	5462      	strb	r2, [r4, r1]
 800b53e:	dcfb      	bgt.n	800b538 <__sccl+0x58>
 800b540:	1af1      	subs	r1, r6, r3
 800b542:	3901      	subs	r1, #1
 800b544:	1c58      	adds	r0, r3, #1
 800b546:	42b3      	cmp	r3, r6
 800b548:	bfa8      	it	ge
 800b54a:	2100      	movge	r1, #0
 800b54c:	1843      	adds	r3, r0, r1
 800b54e:	e7e0      	b.n	800b512 <__sccl+0x32>

0800b550 <_strtoul_l.constprop.0>:
 800b550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b554:	4f36      	ldr	r7, [pc, #216]	; (800b630 <_strtoul_l.constprop.0+0xe0>)
 800b556:	4686      	mov	lr, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	4628      	mov	r0, r5
 800b55c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b560:	5de6      	ldrb	r6, [r4, r7]
 800b562:	f016 0608 	ands.w	r6, r6, #8
 800b566:	d1f8      	bne.n	800b55a <_strtoul_l.constprop.0+0xa>
 800b568:	2c2d      	cmp	r4, #45	; 0x2d
 800b56a:	d12f      	bne.n	800b5cc <_strtoul_l.constprop.0+0x7c>
 800b56c:	782c      	ldrb	r4, [r5, #0]
 800b56e:	2601      	movs	r6, #1
 800b570:	1c85      	adds	r5, r0, #2
 800b572:	2b00      	cmp	r3, #0
 800b574:	d057      	beq.n	800b626 <_strtoul_l.constprop.0+0xd6>
 800b576:	2b10      	cmp	r3, #16
 800b578:	d109      	bne.n	800b58e <_strtoul_l.constprop.0+0x3e>
 800b57a:	2c30      	cmp	r4, #48	; 0x30
 800b57c:	d107      	bne.n	800b58e <_strtoul_l.constprop.0+0x3e>
 800b57e:	7828      	ldrb	r0, [r5, #0]
 800b580:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b584:	2858      	cmp	r0, #88	; 0x58
 800b586:	d149      	bne.n	800b61c <_strtoul_l.constprop.0+0xcc>
 800b588:	786c      	ldrb	r4, [r5, #1]
 800b58a:	2310      	movs	r3, #16
 800b58c:	3502      	adds	r5, #2
 800b58e:	f04f 38ff 	mov.w	r8, #4294967295
 800b592:	2700      	movs	r7, #0
 800b594:	fbb8 f8f3 	udiv	r8, r8, r3
 800b598:	fb03 f908 	mul.w	r9, r3, r8
 800b59c:	ea6f 0909 	mvn.w	r9, r9
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b5a6:	f1bc 0f09 	cmp.w	ip, #9
 800b5aa:	d814      	bhi.n	800b5d6 <_strtoul_l.constprop.0+0x86>
 800b5ac:	4664      	mov	r4, ip
 800b5ae:	42a3      	cmp	r3, r4
 800b5b0:	dd22      	ble.n	800b5f8 <_strtoul_l.constprop.0+0xa8>
 800b5b2:	2f00      	cmp	r7, #0
 800b5b4:	db1d      	blt.n	800b5f2 <_strtoul_l.constprop.0+0xa2>
 800b5b6:	4580      	cmp	r8, r0
 800b5b8:	d31b      	bcc.n	800b5f2 <_strtoul_l.constprop.0+0xa2>
 800b5ba:	d101      	bne.n	800b5c0 <_strtoul_l.constprop.0+0x70>
 800b5bc:	45a1      	cmp	r9, r4
 800b5be:	db18      	blt.n	800b5f2 <_strtoul_l.constprop.0+0xa2>
 800b5c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5c4:	2701      	movs	r7, #1
 800b5c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5ca:	e7ea      	b.n	800b5a2 <_strtoul_l.constprop.0+0x52>
 800b5cc:	2c2b      	cmp	r4, #43	; 0x2b
 800b5ce:	bf04      	itt	eq
 800b5d0:	782c      	ldrbeq	r4, [r5, #0]
 800b5d2:	1c85      	addeq	r5, r0, #2
 800b5d4:	e7cd      	b.n	800b572 <_strtoul_l.constprop.0+0x22>
 800b5d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b5da:	f1bc 0f19 	cmp.w	ip, #25
 800b5de:	d801      	bhi.n	800b5e4 <_strtoul_l.constprop.0+0x94>
 800b5e0:	3c37      	subs	r4, #55	; 0x37
 800b5e2:	e7e4      	b.n	800b5ae <_strtoul_l.constprop.0+0x5e>
 800b5e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b5e8:	f1bc 0f19 	cmp.w	ip, #25
 800b5ec:	d804      	bhi.n	800b5f8 <_strtoul_l.constprop.0+0xa8>
 800b5ee:	3c57      	subs	r4, #87	; 0x57
 800b5f0:	e7dd      	b.n	800b5ae <_strtoul_l.constprop.0+0x5e>
 800b5f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b5f6:	e7e6      	b.n	800b5c6 <_strtoul_l.constprop.0+0x76>
 800b5f8:	2f00      	cmp	r7, #0
 800b5fa:	da07      	bge.n	800b60c <_strtoul_l.constprop.0+0xbc>
 800b5fc:	2322      	movs	r3, #34	; 0x22
 800b5fe:	f8ce 3000 	str.w	r3, [lr]
 800b602:	f04f 30ff 	mov.w	r0, #4294967295
 800b606:	b932      	cbnz	r2, 800b616 <_strtoul_l.constprop.0+0xc6>
 800b608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b60c:	b106      	cbz	r6, 800b610 <_strtoul_l.constprop.0+0xc0>
 800b60e:	4240      	negs	r0, r0
 800b610:	2a00      	cmp	r2, #0
 800b612:	d0f9      	beq.n	800b608 <_strtoul_l.constprop.0+0xb8>
 800b614:	b107      	cbz	r7, 800b618 <_strtoul_l.constprop.0+0xc8>
 800b616:	1e69      	subs	r1, r5, #1
 800b618:	6011      	str	r1, [r2, #0]
 800b61a:	e7f5      	b.n	800b608 <_strtoul_l.constprop.0+0xb8>
 800b61c:	2430      	movs	r4, #48	; 0x30
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1b5      	bne.n	800b58e <_strtoul_l.constprop.0+0x3e>
 800b622:	2308      	movs	r3, #8
 800b624:	e7b3      	b.n	800b58e <_strtoul_l.constprop.0+0x3e>
 800b626:	2c30      	cmp	r4, #48	; 0x30
 800b628:	d0a9      	beq.n	800b57e <_strtoul_l.constprop.0+0x2e>
 800b62a:	230a      	movs	r3, #10
 800b62c:	e7af      	b.n	800b58e <_strtoul_l.constprop.0+0x3e>
 800b62e:	bf00      	nop
 800b630:	0800c281 	.word	0x0800c281

0800b634 <_strtoul_r>:
 800b634:	f7ff bf8c 	b.w	800b550 <_strtoul_l.constprop.0>

0800b638 <__submore>:
 800b638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63c:	460c      	mov	r4, r1
 800b63e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b644:	4299      	cmp	r1, r3
 800b646:	d11d      	bne.n	800b684 <__submore+0x4c>
 800b648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b64c:	f7ff fa28 	bl	800aaa0 <_malloc_r>
 800b650:	b918      	cbnz	r0, 800b65a <__submore+0x22>
 800b652:	f04f 30ff 	mov.w	r0, #4294967295
 800b656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b65e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b660:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b664:	6360      	str	r0, [r4, #52]	; 0x34
 800b666:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b66a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b66e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b672:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b676:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b67a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b67e:	6020      	str	r0, [r4, #0]
 800b680:	2000      	movs	r0, #0
 800b682:	e7e8      	b.n	800b656 <__submore+0x1e>
 800b684:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b686:	0077      	lsls	r7, r6, #1
 800b688:	463a      	mov	r2, r7
 800b68a:	f000 fa2d 	bl	800bae8 <_realloc_r>
 800b68e:	4605      	mov	r5, r0
 800b690:	2800      	cmp	r0, #0
 800b692:	d0de      	beq.n	800b652 <__submore+0x1a>
 800b694:	eb00 0806 	add.w	r8, r0, r6
 800b698:	4601      	mov	r1, r0
 800b69a:	4632      	mov	r2, r6
 800b69c:	4640      	mov	r0, r8
 800b69e:	f7fe fcad 	bl	8009ffc <memcpy>
 800b6a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b6a6:	f8c4 8000 	str.w	r8, [r4]
 800b6aa:	e7e9      	b.n	800b680 <__submore+0x48>

0800b6ac <__ascii_wctomb>:
 800b6ac:	b149      	cbz	r1, 800b6c2 <__ascii_wctomb+0x16>
 800b6ae:	2aff      	cmp	r2, #255	; 0xff
 800b6b0:	bf85      	ittet	hi
 800b6b2:	238a      	movhi	r3, #138	; 0x8a
 800b6b4:	6003      	strhi	r3, [r0, #0]
 800b6b6:	700a      	strbls	r2, [r1, #0]
 800b6b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6bc:	bf98      	it	ls
 800b6be:	2001      	movls	r0, #1
 800b6c0:	4770      	bx	lr
 800b6c2:	4608      	mov	r0, r1
 800b6c4:	4770      	bx	lr
	...

0800b6c8 <__assert_func>:
 800b6c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ca:	4614      	mov	r4, r2
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <__assert_func+0x2c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	68d8      	ldr	r0, [r3, #12]
 800b6d6:	b14c      	cbz	r4, 800b6ec <__assert_func+0x24>
 800b6d8:	4b07      	ldr	r3, [pc, #28]	; (800b6f8 <__assert_func+0x30>)
 800b6da:	9100      	str	r1, [sp, #0]
 800b6dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6e0:	4906      	ldr	r1, [pc, #24]	; (800b6fc <__assert_func+0x34>)
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	f000 f9a6 	bl	800ba34 <fiprintf>
 800b6e8:	f000 fc46 	bl	800bf78 <abort>
 800b6ec:	4b04      	ldr	r3, [pc, #16]	; (800b700 <__assert_func+0x38>)
 800b6ee:	461c      	mov	r4, r3
 800b6f0:	e7f3      	b.n	800b6da <__assert_func+0x12>
 800b6f2:	bf00      	nop
 800b6f4:	20000814 	.word	0x20000814
 800b6f8:	0800c610 	.word	0x0800c610
 800b6fc:	0800c61d 	.word	0x0800c61d
 800b700:	0800c64b 	.word	0x0800c64b

0800b704 <__sflush_r>:
 800b704:	898a      	ldrh	r2, [r1, #12]
 800b706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70a:	4605      	mov	r5, r0
 800b70c:	0710      	lsls	r0, r2, #28
 800b70e:	460c      	mov	r4, r1
 800b710:	d458      	bmi.n	800b7c4 <__sflush_r+0xc0>
 800b712:	684b      	ldr	r3, [r1, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	dc05      	bgt.n	800b724 <__sflush_r+0x20>
 800b718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dc02      	bgt.n	800b724 <__sflush_r+0x20>
 800b71e:	2000      	movs	r0, #0
 800b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b726:	2e00      	cmp	r6, #0
 800b728:	d0f9      	beq.n	800b71e <__sflush_r+0x1a>
 800b72a:	2300      	movs	r3, #0
 800b72c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b730:	682f      	ldr	r7, [r5, #0]
 800b732:	602b      	str	r3, [r5, #0]
 800b734:	d032      	beq.n	800b79c <__sflush_r+0x98>
 800b736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	075a      	lsls	r2, r3, #29
 800b73c:	d505      	bpl.n	800b74a <__sflush_r+0x46>
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	1ac0      	subs	r0, r0, r3
 800b742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b744:	b10b      	cbz	r3, 800b74a <__sflush_r+0x46>
 800b746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b748:	1ac0      	subs	r0, r0, r3
 800b74a:	2300      	movs	r3, #0
 800b74c:	4602      	mov	r2, r0
 800b74e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b750:	6a21      	ldr	r1, [r4, #32]
 800b752:	4628      	mov	r0, r5
 800b754:	47b0      	blx	r6
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	d106      	bne.n	800b76a <__sflush_r+0x66>
 800b75c:	6829      	ldr	r1, [r5, #0]
 800b75e:	291d      	cmp	r1, #29
 800b760:	d82c      	bhi.n	800b7bc <__sflush_r+0xb8>
 800b762:	4a2a      	ldr	r2, [pc, #168]	; (800b80c <__sflush_r+0x108>)
 800b764:	40ca      	lsrs	r2, r1
 800b766:	07d6      	lsls	r6, r2, #31
 800b768:	d528      	bpl.n	800b7bc <__sflush_r+0xb8>
 800b76a:	2200      	movs	r2, #0
 800b76c:	6062      	str	r2, [r4, #4]
 800b76e:	04d9      	lsls	r1, r3, #19
 800b770:	6922      	ldr	r2, [r4, #16]
 800b772:	6022      	str	r2, [r4, #0]
 800b774:	d504      	bpl.n	800b780 <__sflush_r+0x7c>
 800b776:	1c42      	adds	r2, r0, #1
 800b778:	d101      	bne.n	800b77e <__sflush_r+0x7a>
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	b903      	cbnz	r3, 800b780 <__sflush_r+0x7c>
 800b77e:	6560      	str	r0, [r4, #84]	; 0x54
 800b780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b782:	602f      	str	r7, [r5, #0]
 800b784:	2900      	cmp	r1, #0
 800b786:	d0ca      	beq.n	800b71e <__sflush_r+0x1a>
 800b788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b78c:	4299      	cmp	r1, r3
 800b78e:	d002      	beq.n	800b796 <__sflush_r+0x92>
 800b790:	4628      	mov	r0, r5
 800b792:	f7ff f919 	bl	800a9c8 <_free_r>
 800b796:	2000      	movs	r0, #0
 800b798:	6360      	str	r0, [r4, #52]	; 0x34
 800b79a:	e7c1      	b.n	800b720 <__sflush_r+0x1c>
 800b79c:	6a21      	ldr	r1, [r4, #32]
 800b79e:	2301      	movs	r3, #1
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b0      	blx	r6
 800b7a4:	1c41      	adds	r1, r0, #1
 800b7a6:	d1c7      	bne.n	800b738 <__sflush_r+0x34>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d0c4      	beq.n	800b738 <__sflush_r+0x34>
 800b7ae:	2b1d      	cmp	r3, #29
 800b7b0:	d001      	beq.n	800b7b6 <__sflush_r+0xb2>
 800b7b2:	2b16      	cmp	r3, #22
 800b7b4:	d101      	bne.n	800b7ba <__sflush_r+0xb6>
 800b7b6:	602f      	str	r7, [r5, #0]
 800b7b8:	e7b1      	b.n	800b71e <__sflush_r+0x1a>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	e7ad      	b.n	800b720 <__sflush_r+0x1c>
 800b7c4:	690f      	ldr	r7, [r1, #16]
 800b7c6:	2f00      	cmp	r7, #0
 800b7c8:	d0a9      	beq.n	800b71e <__sflush_r+0x1a>
 800b7ca:	0793      	lsls	r3, r2, #30
 800b7cc:	680e      	ldr	r6, [r1, #0]
 800b7ce:	bf08      	it	eq
 800b7d0:	694b      	ldreq	r3, [r1, #20]
 800b7d2:	600f      	str	r7, [r1, #0]
 800b7d4:	bf18      	it	ne
 800b7d6:	2300      	movne	r3, #0
 800b7d8:	eba6 0807 	sub.w	r8, r6, r7
 800b7dc:	608b      	str	r3, [r1, #8]
 800b7de:	f1b8 0f00 	cmp.w	r8, #0
 800b7e2:	dd9c      	ble.n	800b71e <__sflush_r+0x1a>
 800b7e4:	6a21      	ldr	r1, [r4, #32]
 800b7e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7e8:	4643      	mov	r3, r8
 800b7ea:	463a      	mov	r2, r7
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	47b0      	blx	r6
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	dc06      	bgt.n	800b802 <__sflush_r+0xfe>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	e78e      	b.n	800b720 <__sflush_r+0x1c>
 800b802:	4407      	add	r7, r0
 800b804:	eba8 0800 	sub.w	r8, r8, r0
 800b808:	e7e9      	b.n	800b7de <__sflush_r+0xda>
 800b80a:	bf00      	nop
 800b80c:	20400001 	.word	0x20400001

0800b810 <_fflush_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	690b      	ldr	r3, [r1, #16]
 800b814:	4605      	mov	r5, r0
 800b816:	460c      	mov	r4, r1
 800b818:	b913      	cbnz	r3, 800b820 <_fflush_r+0x10>
 800b81a:	2500      	movs	r5, #0
 800b81c:	4628      	mov	r0, r5
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	b118      	cbz	r0, 800b82a <_fflush_r+0x1a>
 800b822:	6983      	ldr	r3, [r0, #24]
 800b824:	b90b      	cbnz	r3, 800b82a <_fflush_r+0x1a>
 800b826:	f000 f887 	bl	800b938 <__sinit>
 800b82a:	4b14      	ldr	r3, [pc, #80]	; (800b87c <_fflush_r+0x6c>)
 800b82c:	429c      	cmp	r4, r3
 800b82e:	d11b      	bne.n	800b868 <_fflush_r+0x58>
 800b830:	686c      	ldr	r4, [r5, #4]
 800b832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0ef      	beq.n	800b81a <_fflush_r+0xa>
 800b83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b83c:	07d0      	lsls	r0, r2, #31
 800b83e:	d404      	bmi.n	800b84a <_fflush_r+0x3a>
 800b840:	0599      	lsls	r1, r3, #22
 800b842:	d402      	bmi.n	800b84a <_fflush_r+0x3a>
 800b844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b846:	f000 f927 	bl	800ba98 <__retarget_lock_acquire_recursive>
 800b84a:	4628      	mov	r0, r5
 800b84c:	4621      	mov	r1, r4
 800b84e:	f7ff ff59 	bl	800b704 <__sflush_r>
 800b852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b854:	07da      	lsls	r2, r3, #31
 800b856:	4605      	mov	r5, r0
 800b858:	d4e0      	bmi.n	800b81c <_fflush_r+0xc>
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	059b      	lsls	r3, r3, #22
 800b85e:	d4dd      	bmi.n	800b81c <_fflush_r+0xc>
 800b860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b862:	f000 f91a 	bl	800ba9a <__retarget_lock_release_recursive>
 800b866:	e7d9      	b.n	800b81c <_fflush_r+0xc>
 800b868:	4b05      	ldr	r3, [pc, #20]	; (800b880 <_fflush_r+0x70>)
 800b86a:	429c      	cmp	r4, r3
 800b86c:	d101      	bne.n	800b872 <_fflush_r+0x62>
 800b86e:	68ac      	ldr	r4, [r5, #8]
 800b870:	e7df      	b.n	800b832 <_fflush_r+0x22>
 800b872:	4b04      	ldr	r3, [pc, #16]	; (800b884 <_fflush_r+0x74>)
 800b874:	429c      	cmp	r4, r3
 800b876:	bf08      	it	eq
 800b878:	68ec      	ldreq	r4, [r5, #12]
 800b87a:	e7da      	b.n	800b832 <_fflush_r+0x22>
 800b87c:	0800c66c 	.word	0x0800c66c
 800b880:	0800c68c 	.word	0x0800c68c
 800b884:	0800c64c 	.word	0x0800c64c

0800b888 <std>:
 800b888:	2300      	movs	r3, #0
 800b88a:	b510      	push	{r4, lr}
 800b88c:	4604      	mov	r4, r0
 800b88e:	e9c0 3300 	strd	r3, r3, [r0]
 800b892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b896:	6083      	str	r3, [r0, #8]
 800b898:	8181      	strh	r1, [r0, #12]
 800b89a:	6643      	str	r3, [r0, #100]	; 0x64
 800b89c:	81c2      	strh	r2, [r0, #14]
 800b89e:	6183      	str	r3, [r0, #24]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	2208      	movs	r2, #8
 800b8a4:	305c      	adds	r0, #92	; 0x5c
 800b8a6:	f7fb fb71 	bl	8006f8c <memset>
 800b8aa:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <std+0x38>)
 800b8ac:	6263      	str	r3, [r4, #36]	; 0x24
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <std+0x3c>)
 800b8b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8b2:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <std+0x40>)
 800b8b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8b6:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <std+0x44>)
 800b8b8:	6224      	str	r4, [r4, #32]
 800b8ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	bf00      	nop
 800b8c0:	08007d35 	.word	0x08007d35
 800b8c4:	08007d5b 	.word	0x08007d5b
 800b8c8:	08007d93 	.word	0x08007d93
 800b8cc:	08007db7 	.word	0x08007db7

0800b8d0 <_cleanup_r>:
 800b8d0:	4901      	ldr	r1, [pc, #4]	; (800b8d8 <_cleanup_r+0x8>)
 800b8d2:	f000 b8c1 	b.w	800ba58 <_fwalk_reent>
 800b8d6:	bf00      	nop
 800b8d8:	0800b811 	.word	0x0800b811

0800b8dc <__sfmoreglue>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	2268      	movs	r2, #104	; 0x68
 800b8e0:	1e4d      	subs	r5, r1, #1
 800b8e2:	4355      	muls	r5, r2
 800b8e4:	460e      	mov	r6, r1
 800b8e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8ea:	f7ff f8d9 	bl	800aaa0 <_malloc_r>
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	b140      	cbz	r0, 800b904 <__sfmoreglue+0x28>
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b8f8:	300c      	adds	r0, #12
 800b8fa:	60a0      	str	r0, [r4, #8]
 800b8fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b900:	f7fb fb44 	bl	8006f8c <memset>
 800b904:	4620      	mov	r0, r4
 800b906:	bd70      	pop	{r4, r5, r6, pc}

0800b908 <__sfp_lock_acquire>:
 800b908:	4801      	ldr	r0, [pc, #4]	; (800b910 <__sfp_lock_acquire+0x8>)
 800b90a:	f000 b8c5 	b.w	800ba98 <__retarget_lock_acquire_recursive>
 800b90e:	bf00      	nop
 800b910:	200010cd 	.word	0x200010cd

0800b914 <__sfp_lock_release>:
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <__sfp_lock_release+0x8>)
 800b916:	f000 b8c0 	b.w	800ba9a <__retarget_lock_release_recursive>
 800b91a:	bf00      	nop
 800b91c:	200010cd 	.word	0x200010cd

0800b920 <__sinit_lock_acquire>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__sinit_lock_acquire+0x8>)
 800b922:	f000 b8b9 	b.w	800ba98 <__retarget_lock_acquire_recursive>
 800b926:	bf00      	nop
 800b928:	200010ce 	.word	0x200010ce

0800b92c <__sinit_lock_release>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__sinit_lock_release+0x8>)
 800b92e:	f000 b8b4 	b.w	800ba9a <__retarget_lock_release_recursive>
 800b932:	bf00      	nop
 800b934:	200010ce 	.word	0x200010ce

0800b938 <__sinit>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	4604      	mov	r4, r0
 800b93c:	f7ff fff0 	bl	800b920 <__sinit_lock_acquire>
 800b940:	69a3      	ldr	r3, [r4, #24]
 800b942:	b11b      	cbz	r3, 800b94c <__sinit+0x14>
 800b944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b948:	f7ff bff0 	b.w	800b92c <__sinit_lock_release>
 800b94c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b950:	6523      	str	r3, [r4, #80]	; 0x50
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <__sinit+0x68>)
 800b954:	4a13      	ldr	r2, [pc, #76]	; (800b9a4 <__sinit+0x6c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	62a2      	str	r2, [r4, #40]	; 0x28
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	bf04      	itt	eq
 800b95e:	2301      	moveq	r3, #1
 800b960:	61a3      	streq	r3, [r4, #24]
 800b962:	4620      	mov	r0, r4
 800b964:	f000 f820 	bl	800b9a8 <__sfp>
 800b968:	6060      	str	r0, [r4, #4]
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 f81c 	bl	800b9a8 <__sfp>
 800b970:	60a0      	str	r0, [r4, #8]
 800b972:	4620      	mov	r0, r4
 800b974:	f000 f818 	bl	800b9a8 <__sfp>
 800b978:	2200      	movs	r2, #0
 800b97a:	60e0      	str	r0, [r4, #12]
 800b97c:	2104      	movs	r1, #4
 800b97e:	6860      	ldr	r0, [r4, #4]
 800b980:	f7ff ff82 	bl	800b888 <std>
 800b984:	68a0      	ldr	r0, [r4, #8]
 800b986:	2201      	movs	r2, #1
 800b988:	2109      	movs	r1, #9
 800b98a:	f7ff ff7d 	bl	800b888 <std>
 800b98e:	68e0      	ldr	r0, [r4, #12]
 800b990:	2202      	movs	r2, #2
 800b992:	2112      	movs	r1, #18
 800b994:	f7ff ff78 	bl	800b888 <std>
 800b998:	2301      	movs	r3, #1
 800b99a:	61a3      	str	r3, [r4, #24]
 800b99c:	e7d2      	b.n	800b944 <__sinit+0xc>
 800b99e:	bf00      	nop
 800b9a0:	0800c1f0 	.word	0x0800c1f0
 800b9a4:	0800b8d1 	.word	0x0800b8d1

0800b9a8 <__sfp>:
 800b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9aa:	4607      	mov	r7, r0
 800b9ac:	f7ff ffac 	bl	800b908 <__sfp_lock_acquire>
 800b9b0:	4b1e      	ldr	r3, [pc, #120]	; (800ba2c <__sfp+0x84>)
 800b9b2:	681e      	ldr	r6, [r3, #0]
 800b9b4:	69b3      	ldr	r3, [r6, #24]
 800b9b6:	b913      	cbnz	r3, 800b9be <__sfp+0x16>
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f7ff ffbd 	bl	800b938 <__sinit>
 800b9be:	3648      	adds	r6, #72	; 0x48
 800b9c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	d503      	bpl.n	800b9d0 <__sfp+0x28>
 800b9c8:	6833      	ldr	r3, [r6, #0]
 800b9ca:	b30b      	cbz	r3, 800ba10 <__sfp+0x68>
 800b9cc:	6836      	ldr	r6, [r6, #0]
 800b9ce:	e7f7      	b.n	800b9c0 <__sfp+0x18>
 800b9d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9d4:	b9d5      	cbnz	r5, 800ba0c <__sfp+0x64>
 800b9d6:	4b16      	ldr	r3, [pc, #88]	; (800ba30 <__sfp+0x88>)
 800b9d8:	60e3      	str	r3, [r4, #12]
 800b9da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9de:	6665      	str	r5, [r4, #100]	; 0x64
 800b9e0:	f000 f859 	bl	800ba96 <__retarget_lock_init_recursive>
 800b9e4:	f7ff ff96 	bl	800b914 <__sfp_lock_release>
 800b9e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9f0:	6025      	str	r5, [r4, #0]
 800b9f2:	61a5      	str	r5, [r4, #24]
 800b9f4:	2208      	movs	r2, #8
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9fc:	f7fb fac6 	bl	8006f8c <memset>
 800ba00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba08:	4620      	mov	r0, r4
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	3468      	adds	r4, #104	; 0x68
 800ba0e:	e7d9      	b.n	800b9c4 <__sfp+0x1c>
 800ba10:	2104      	movs	r1, #4
 800ba12:	4638      	mov	r0, r7
 800ba14:	f7ff ff62 	bl	800b8dc <__sfmoreglue>
 800ba18:	4604      	mov	r4, r0
 800ba1a:	6030      	str	r0, [r6, #0]
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d1d5      	bne.n	800b9cc <__sfp+0x24>
 800ba20:	f7ff ff78 	bl	800b914 <__sfp_lock_release>
 800ba24:	230c      	movs	r3, #12
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	e7ee      	b.n	800ba08 <__sfp+0x60>
 800ba2a:	bf00      	nop
 800ba2c:	0800c1f0 	.word	0x0800c1f0
 800ba30:	ffff0001 	.word	0xffff0001

0800ba34 <fiprintf>:
 800ba34:	b40e      	push	{r1, r2, r3}
 800ba36:	b503      	push	{r0, r1, lr}
 800ba38:	4601      	mov	r1, r0
 800ba3a:	ab03      	add	r3, sp, #12
 800ba3c:	4805      	ldr	r0, [pc, #20]	; (800ba54 <fiprintf+0x20>)
 800ba3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba42:	6800      	ldr	r0, [r0, #0]
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	f000 f8a7 	bl	800bb98 <_vfiprintf_r>
 800ba4a:	b002      	add	sp, #8
 800ba4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba50:	b003      	add	sp, #12
 800ba52:	4770      	bx	lr
 800ba54:	20000814 	.word	0x20000814

0800ba58 <_fwalk_reent>:
 800ba58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	4688      	mov	r8, r1
 800ba60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba64:	2700      	movs	r7, #0
 800ba66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba6e:	d505      	bpl.n	800ba7c <_fwalk_reent+0x24>
 800ba70:	6824      	ldr	r4, [r4, #0]
 800ba72:	2c00      	cmp	r4, #0
 800ba74:	d1f7      	bne.n	800ba66 <_fwalk_reent+0xe>
 800ba76:	4638      	mov	r0, r7
 800ba78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7c:	89ab      	ldrh	r3, [r5, #12]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d907      	bls.n	800ba92 <_fwalk_reent+0x3a>
 800ba82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba86:	3301      	adds	r3, #1
 800ba88:	d003      	beq.n	800ba92 <_fwalk_reent+0x3a>
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	47c0      	blx	r8
 800ba90:	4307      	orrs	r7, r0
 800ba92:	3568      	adds	r5, #104	; 0x68
 800ba94:	e7e9      	b.n	800ba6a <_fwalk_reent+0x12>

0800ba96 <__retarget_lock_init_recursive>:
 800ba96:	4770      	bx	lr

0800ba98 <__retarget_lock_acquire_recursive>:
 800ba98:	4770      	bx	lr

0800ba9a <__retarget_lock_release_recursive>:
 800ba9a:	4770      	bx	lr

0800ba9c <memmove>:
 800ba9c:	4288      	cmp	r0, r1
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	eb01 0402 	add.w	r4, r1, r2
 800baa4:	d902      	bls.n	800baac <memmove+0x10>
 800baa6:	4284      	cmp	r4, r0
 800baa8:	4623      	mov	r3, r4
 800baaa:	d807      	bhi.n	800babc <memmove+0x20>
 800baac:	1e43      	subs	r3, r0, #1
 800baae:	42a1      	cmp	r1, r4
 800bab0:	d008      	beq.n	800bac4 <memmove+0x28>
 800bab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baba:	e7f8      	b.n	800baae <memmove+0x12>
 800babc:	4402      	add	r2, r0
 800babe:	4601      	mov	r1, r0
 800bac0:	428a      	cmp	r2, r1
 800bac2:	d100      	bne.n	800bac6 <memmove+0x2a>
 800bac4:	bd10      	pop	{r4, pc}
 800bac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bace:	e7f7      	b.n	800bac0 <memmove+0x24>

0800bad0 <__malloc_lock>:
 800bad0:	4801      	ldr	r0, [pc, #4]	; (800bad8 <__malloc_lock+0x8>)
 800bad2:	f7ff bfe1 	b.w	800ba98 <__retarget_lock_acquire_recursive>
 800bad6:	bf00      	nop
 800bad8:	200010cc 	.word	0x200010cc

0800badc <__malloc_unlock>:
 800badc:	4801      	ldr	r0, [pc, #4]	; (800bae4 <__malloc_unlock+0x8>)
 800bade:	f7ff bfdc 	b.w	800ba9a <__retarget_lock_release_recursive>
 800bae2:	bf00      	nop
 800bae4:	200010cc 	.word	0x200010cc

0800bae8 <_realloc_r>:
 800bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baec:	4680      	mov	r8, r0
 800baee:	4614      	mov	r4, r2
 800baf0:	460e      	mov	r6, r1
 800baf2:	b921      	cbnz	r1, 800bafe <_realloc_r+0x16>
 800baf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf8:	4611      	mov	r1, r2
 800bafa:	f7fe bfd1 	b.w	800aaa0 <_malloc_r>
 800bafe:	b92a      	cbnz	r2, 800bb0c <_realloc_r+0x24>
 800bb00:	f7fe ff62 	bl	800a9c8 <_free_r>
 800bb04:	4625      	mov	r5, r4
 800bb06:	4628      	mov	r0, r5
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	f000 faa0 	bl	800c050 <_malloc_usable_size_r>
 800bb10:	4284      	cmp	r4, r0
 800bb12:	4607      	mov	r7, r0
 800bb14:	d802      	bhi.n	800bb1c <_realloc_r+0x34>
 800bb16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb1a:	d812      	bhi.n	800bb42 <_realloc_r+0x5a>
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	4640      	mov	r0, r8
 800bb20:	f7fe ffbe 	bl	800aaa0 <_malloc_r>
 800bb24:	4605      	mov	r5, r0
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d0ed      	beq.n	800bb06 <_realloc_r+0x1e>
 800bb2a:	42bc      	cmp	r4, r7
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	4631      	mov	r1, r6
 800bb30:	bf28      	it	cs
 800bb32:	463a      	movcs	r2, r7
 800bb34:	f7fe fa62 	bl	8009ffc <memcpy>
 800bb38:	4631      	mov	r1, r6
 800bb3a:	4640      	mov	r0, r8
 800bb3c:	f7fe ff44 	bl	800a9c8 <_free_r>
 800bb40:	e7e1      	b.n	800bb06 <_realloc_r+0x1e>
 800bb42:	4635      	mov	r5, r6
 800bb44:	e7df      	b.n	800bb06 <_realloc_r+0x1e>

0800bb46 <__sfputc_r>:
 800bb46:	6893      	ldr	r3, [r2, #8]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	b410      	push	{r4}
 800bb4e:	6093      	str	r3, [r2, #8]
 800bb50:	da08      	bge.n	800bb64 <__sfputc_r+0x1e>
 800bb52:	6994      	ldr	r4, [r2, #24]
 800bb54:	42a3      	cmp	r3, r4
 800bb56:	db01      	blt.n	800bb5c <__sfputc_r+0x16>
 800bb58:	290a      	cmp	r1, #10
 800bb5a:	d103      	bne.n	800bb64 <__sfputc_r+0x1e>
 800bb5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb60:	f000 b94a 	b.w	800bdf8 <__swbuf_r>
 800bb64:	6813      	ldr	r3, [r2, #0]
 800bb66:	1c58      	adds	r0, r3, #1
 800bb68:	6010      	str	r0, [r2, #0]
 800bb6a:	7019      	strb	r1, [r3, #0]
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <__sfputs_r>:
 800bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb76:	4606      	mov	r6, r0
 800bb78:	460f      	mov	r7, r1
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	18d5      	adds	r5, r2, r3
 800bb7e:	42ac      	cmp	r4, r5
 800bb80:	d101      	bne.n	800bb86 <__sfputs_r+0x12>
 800bb82:	2000      	movs	r0, #0
 800bb84:	e007      	b.n	800bb96 <__sfputs_r+0x22>
 800bb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8a:	463a      	mov	r2, r7
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f7ff ffda 	bl	800bb46 <__sfputc_r>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d1f3      	bne.n	800bb7e <__sfputs_r+0xa>
 800bb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb98 <_vfiprintf_r>:
 800bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	b09d      	sub	sp, #116	; 0x74
 800bba0:	4614      	mov	r4, r2
 800bba2:	4698      	mov	r8, r3
 800bba4:	4606      	mov	r6, r0
 800bba6:	b118      	cbz	r0, 800bbb0 <_vfiprintf_r+0x18>
 800bba8:	6983      	ldr	r3, [r0, #24]
 800bbaa:	b90b      	cbnz	r3, 800bbb0 <_vfiprintf_r+0x18>
 800bbac:	f7ff fec4 	bl	800b938 <__sinit>
 800bbb0:	4b89      	ldr	r3, [pc, #548]	; (800bdd8 <_vfiprintf_r+0x240>)
 800bbb2:	429d      	cmp	r5, r3
 800bbb4:	d11b      	bne.n	800bbee <_vfiprintf_r+0x56>
 800bbb6:	6875      	ldr	r5, [r6, #4]
 800bbb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbba:	07d9      	lsls	r1, r3, #31
 800bbbc:	d405      	bmi.n	800bbca <_vfiprintf_r+0x32>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	059a      	lsls	r2, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_vfiprintf_r+0x32>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbc6:	f7ff ff67 	bl	800ba98 <__retarget_lock_acquire_recursive>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	071b      	lsls	r3, r3, #28
 800bbce:	d501      	bpl.n	800bbd4 <_vfiprintf_r+0x3c>
 800bbd0:	692b      	ldr	r3, [r5, #16]
 800bbd2:	b9eb      	cbnz	r3, 800bc10 <_vfiprintf_r+0x78>
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f000 f960 	bl	800be9c <__swsetup_r>
 800bbdc:	b1c0      	cbz	r0, 800bc10 <_vfiprintf_r+0x78>
 800bbde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe0:	07dc      	lsls	r4, r3, #31
 800bbe2:	d50e      	bpl.n	800bc02 <_vfiprintf_r+0x6a>
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	b01d      	add	sp, #116	; 0x74
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	4b7b      	ldr	r3, [pc, #492]	; (800bddc <_vfiprintf_r+0x244>)
 800bbf0:	429d      	cmp	r5, r3
 800bbf2:	d101      	bne.n	800bbf8 <_vfiprintf_r+0x60>
 800bbf4:	68b5      	ldr	r5, [r6, #8]
 800bbf6:	e7df      	b.n	800bbb8 <_vfiprintf_r+0x20>
 800bbf8:	4b79      	ldr	r3, [pc, #484]	; (800bde0 <_vfiprintf_r+0x248>)
 800bbfa:	429d      	cmp	r5, r3
 800bbfc:	bf08      	it	eq
 800bbfe:	68f5      	ldreq	r5, [r6, #12]
 800bc00:	e7da      	b.n	800bbb8 <_vfiprintf_r+0x20>
 800bc02:	89ab      	ldrh	r3, [r5, #12]
 800bc04:	0598      	lsls	r0, r3, #22
 800bc06:	d4ed      	bmi.n	800bbe4 <_vfiprintf_r+0x4c>
 800bc08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc0a:	f7ff ff46 	bl	800ba9a <__retarget_lock_release_recursive>
 800bc0e:	e7e9      	b.n	800bbe4 <_vfiprintf_r+0x4c>
 800bc10:	2300      	movs	r3, #0
 800bc12:	9309      	str	r3, [sp, #36]	; 0x24
 800bc14:	2320      	movs	r3, #32
 800bc16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc1e:	2330      	movs	r3, #48	; 0x30
 800bc20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bde4 <_vfiprintf_r+0x24c>
 800bc24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc28:	f04f 0901 	mov.w	r9, #1
 800bc2c:	4623      	mov	r3, r4
 800bc2e:	469a      	mov	sl, r3
 800bc30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc34:	b10a      	cbz	r2, 800bc3a <_vfiprintf_r+0xa2>
 800bc36:	2a25      	cmp	r2, #37	; 0x25
 800bc38:	d1f9      	bne.n	800bc2e <_vfiprintf_r+0x96>
 800bc3a:	ebba 0b04 	subs.w	fp, sl, r4
 800bc3e:	d00b      	beq.n	800bc58 <_vfiprintf_r+0xc0>
 800bc40:	465b      	mov	r3, fp
 800bc42:	4622      	mov	r2, r4
 800bc44:	4629      	mov	r1, r5
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7ff ff94 	bl	800bb74 <__sfputs_r>
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	f000 80aa 	beq.w	800bda6 <_vfiprintf_r+0x20e>
 800bc52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc54:	445a      	add	r2, fp
 800bc56:	9209      	str	r2, [sp, #36]	; 0x24
 800bc58:	f89a 3000 	ldrb.w	r3, [sl]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 80a2 	beq.w	800bda6 <_vfiprintf_r+0x20e>
 800bc62:	2300      	movs	r3, #0
 800bc64:	f04f 32ff 	mov.w	r2, #4294967295
 800bc68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc6c:	f10a 0a01 	add.w	sl, sl, #1
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	9307      	str	r3, [sp, #28]
 800bc74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc78:	931a      	str	r3, [sp, #104]	; 0x68
 800bc7a:	4654      	mov	r4, sl
 800bc7c:	2205      	movs	r2, #5
 800bc7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc82:	4858      	ldr	r0, [pc, #352]	; (800bde4 <_vfiprintf_r+0x24c>)
 800bc84:	f7f4 fabc 	bl	8000200 <memchr>
 800bc88:	9a04      	ldr	r2, [sp, #16]
 800bc8a:	b9d8      	cbnz	r0, 800bcc4 <_vfiprintf_r+0x12c>
 800bc8c:	06d1      	lsls	r1, r2, #27
 800bc8e:	bf44      	itt	mi
 800bc90:	2320      	movmi	r3, #32
 800bc92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc96:	0713      	lsls	r3, r2, #28
 800bc98:	bf44      	itt	mi
 800bc9a:	232b      	movmi	r3, #43	; 0x2b
 800bc9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bca0:	f89a 3000 	ldrb.w	r3, [sl]
 800bca4:	2b2a      	cmp	r3, #42	; 0x2a
 800bca6:	d015      	beq.n	800bcd4 <_vfiprintf_r+0x13c>
 800bca8:	9a07      	ldr	r2, [sp, #28]
 800bcaa:	4654      	mov	r4, sl
 800bcac:	2000      	movs	r0, #0
 800bcae:	f04f 0c0a 	mov.w	ip, #10
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcb8:	3b30      	subs	r3, #48	; 0x30
 800bcba:	2b09      	cmp	r3, #9
 800bcbc:	d94e      	bls.n	800bd5c <_vfiprintf_r+0x1c4>
 800bcbe:	b1b0      	cbz	r0, 800bcee <_vfiprintf_r+0x156>
 800bcc0:	9207      	str	r2, [sp, #28]
 800bcc2:	e014      	b.n	800bcee <_vfiprintf_r+0x156>
 800bcc4:	eba0 0308 	sub.w	r3, r0, r8
 800bcc8:	fa09 f303 	lsl.w	r3, r9, r3
 800bccc:	4313      	orrs	r3, r2
 800bcce:	9304      	str	r3, [sp, #16]
 800bcd0:	46a2      	mov	sl, r4
 800bcd2:	e7d2      	b.n	800bc7a <_vfiprintf_r+0xe2>
 800bcd4:	9b03      	ldr	r3, [sp, #12]
 800bcd6:	1d19      	adds	r1, r3, #4
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	9103      	str	r1, [sp, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bfbb      	ittet	lt
 800bce0:	425b      	neglt	r3, r3
 800bce2:	f042 0202 	orrlt.w	r2, r2, #2
 800bce6:	9307      	strge	r3, [sp, #28]
 800bce8:	9307      	strlt	r3, [sp, #28]
 800bcea:	bfb8      	it	lt
 800bcec:	9204      	strlt	r2, [sp, #16]
 800bcee:	7823      	ldrb	r3, [r4, #0]
 800bcf0:	2b2e      	cmp	r3, #46	; 0x2e
 800bcf2:	d10c      	bne.n	800bd0e <_vfiprintf_r+0x176>
 800bcf4:	7863      	ldrb	r3, [r4, #1]
 800bcf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bcf8:	d135      	bne.n	800bd66 <_vfiprintf_r+0x1ce>
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	1d1a      	adds	r2, r3, #4
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	9203      	str	r2, [sp, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	bfb8      	it	lt
 800bd06:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd0a:	3402      	adds	r4, #2
 800bd0c:	9305      	str	r3, [sp, #20]
 800bd0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdf4 <_vfiprintf_r+0x25c>
 800bd12:	7821      	ldrb	r1, [r4, #0]
 800bd14:	2203      	movs	r2, #3
 800bd16:	4650      	mov	r0, sl
 800bd18:	f7f4 fa72 	bl	8000200 <memchr>
 800bd1c:	b140      	cbz	r0, 800bd30 <_vfiprintf_r+0x198>
 800bd1e:	2340      	movs	r3, #64	; 0x40
 800bd20:	eba0 000a 	sub.w	r0, r0, sl
 800bd24:	fa03 f000 	lsl.w	r0, r3, r0
 800bd28:	9b04      	ldr	r3, [sp, #16]
 800bd2a:	4303      	orrs	r3, r0
 800bd2c:	3401      	adds	r4, #1
 800bd2e:	9304      	str	r3, [sp, #16]
 800bd30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd34:	482c      	ldr	r0, [pc, #176]	; (800bde8 <_vfiprintf_r+0x250>)
 800bd36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd3a:	2206      	movs	r2, #6
 800bd3c:	f7f4 fa60 	bl	8000200 <memchr>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d03f      	beq.n	800bdc4 <_vfiprintf_r+0x22c>
 800bd44:	4b29      	ldr	r3, [pc, #164]	; (800bdec <_vfiprintf_r+0x254>)
 800bd46:	bb1b      	cbnz	r3, 800bd90 <_vfiprintf_r+0x1f8>
 800bd48:	9b03      	ldr	r3, [sp, #12]
 800bd4a:	3307      	adds	r3, #7
 800bd4c:	f023 0307 	bic.w	r3, r3, #7
 800bd50:	3308      	adds	r3, #8
 800bd52:	9303      	str	r3, [sp, #12]
 800bd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd56:	443b      	add	r3, r7
 800bd58:	9309      	str	r3, [sp, #36]	; 0x24
 800bd5a:	e767      	b.n	800bc2c <_vfiprintf_r+0x94>
 800bd5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd60:	460c      	mov	r4, r1
 800bd62:	2001      	movs	r0, #1
 800bd64:	e7a5      	b.n	800bcb2 <_vfiprintf_r+0x11a>
 800bd66:	2300      	movs	r3, #0
 800bd68:	3401      	adds	r4, #1
 800bd6a:	9305      	str	r3, [sp, #20]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	f04f 0c0a 	mov.w	ip, #10
 800bd72:	4620      	mov	r0, r4
 800bd74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd78:	3a30      	subs	r2, #48	; 0x30
 800bd7a:	2a09      	cmp	r2, #9
 800bd7c:	d903      	bls.n	800bd86 <_vfiprintf_r+0x1ee>
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0c5      	beq.n	800bd0e <_vfiprintf_r+0x176>
 800bd82:	9105      	str	r1, [sp, #20]
 800bd84:	e7c3      	b.n	800bd0e <_vfiprintf_r+0x176>
 800bd86:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e7f0      	b.n	800bd72 <_vfiprintf_r+0x1da>
 800bd90:	ab03      	add	r3, sp, #12
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	462a      	mov	r2, r5
 800bd96:	4b16      	ldr	r3, [pc, #88]	; (800bdf0 <_vfiprintf_r+0x258>)
 800bd98:	a904      	add	r1, sp, #16
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f7fb f99e 	bl	80070dc <_printf_float>
 800bda0:	4607      	mov	r7, r0
 800bda2:	1c78      	adds	r0, r7, #1
 800bda4:	d1d6      	bne.n	800bd54 <_vfiprintf_r+0x1bc>
 800bda6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bda8:	07d9      	lsls	r1, r3, #31
 800bdaa:	d405      	bmi.n	800bdb8 <_vfiprintf_r+0x220>
 800bdac:	89ab      	ldrh	r3, [r5, #12]
 800bdae:	059a      	lsls	r2, r3, #22
 800bdb0:	d402      	bmi.n	800bdb8 <_vfiprintf_r+0x220>
 800bdb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdb4:	f7ff fe71 	bl	800ba9a <__retarget_lock_release_recursive>
 800bdb8:	89ab      	ldrh	r3, [r5, #12]
 800bdba:	065b      	lsls	r3, r3, #25
 800bdbc:	f53f af12 	bmi.w	800bbe4 <_vfiprintf_r+0x4c>
 800bdc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdc2:	e711      	b.n	800bbe8 <_vfiprintf_r+0x50>
 800bdc4:	ab03      	add	r3, sp, #12
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	462a      	mov	r2, r5
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <_vfiprintf_r+0x258>)
 800bdcc:	a904      	add	r1, sp, #16
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f7fb fc28 	bl	8007624 <_printf_i>
 800bdd4:	e7e4      	b.n	800bda0 <_vfiprintf_r+0x208>
 800bdd6:	bf00      	nop
 800bdd8:	0800c66c 	.word	0x0800c66c
 800bddc:	0800c68c 	.word	0x0800c68c
 800bde0:	0800c64c 	.word	0x0800c64c
 800bde4:	0800c5e4 	.word	0x0800c5e4
 800bde8:	0800c5ee 	.word	0x0800c5ee
 800bdec:	080070dd 	.word	0x080070dd
 800bdf0:	0800bb75 	.word	0x0800bb75
 800bdf4:	0800c5ea 	.word	0x0800c5ea

0800bdf8 <__swbuf_r>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	460e      	mov	r6, r1
 800bdfc:	4614      	mov	r4, r2
 800bdfe:	4605      	mov	r5, r0
 800be00:	b118      	cbz	r0, 800be0a <__swbuf_r+0x12>
 800be02:	6983      	ldr	r3, [r0, #24]
 800be04:	b90b      	cbnz	r3, 800be0a <__swbuf_r+0x12>
 800be06:	f7ff fd97 	bl	800b938 <__sinit>
 800be0a:	4b21      	ldr	r3, [pc, #132]	; (800be90 <__swbuf_r+0x98>)
 800be0c:	429c      	cmp	r4, r3
 800be0e:	d12b      	bne.n	800be68 <__swbuf_r+0x70>
 800be10:	686c      	ldr	r4, [r5, #4]
 800be12:	69a3      	ldr	r3, [r4, #24]
 800be14:	60a3      	str	r3, [r4, #8]
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	071a      	lsls	r2, r3, #28
 800be1a:	d52f      	bpl.n	800be7c <__swbuf_r+0x84>
 800be1c:	6923      	ldr	r3, [r4, #16]
 800be1e:	b36b      	cbz	r3, 800be7c <__swbuf_r+0x84>
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	6820      	ldr	r0, [r4, #0]
 800be24:	1ac0      	subs	r0, r0, r3
 800be26:	6963      	ldr	r3, [r4, #20]
 800be28:	b2f6      	uxtb	r6, r6
 800be2a:	4283      	cmp	r3, r0
 800be2c:	4637      	mov	r7, r6
 800be2e:	dc04      	bgt.n	800be3a <__swbuf_r+0x42>
 800be30:	4621      	mov	r1, r4
 800be32:	4628      	mov	r0, r5
 800be34:	f7ff fcec 	bl	800b810 <_fflush_r>
 800be38:	bb30      	cbnz	r0, 800be88 <__swbuf_r+0x90>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	60a3      	str	r3, [r4, #8]
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	6022      	str	r2, [r4, #0]
 800be46:	701e      	strb	r6, [r3, #0]
 800be48:	6963      	ldr	r3, [r4, #20]
 800be4a:	3001      	adds	r0, #1
 800be4c:	4283      	cmp	r3, r0
 800be4e:	d004      	beq.n	800be5a <__swbuf_r+0x62>
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	07db      	lsls	r3, r3, #31
 800be54:	d506      	bpl.n	800be64 <__swbuf_r+0x6c>
 800be56:	2e0a      	cmp	r6, #10
 800be58:	d104      	bne.n	800be64 <__swbuf_r+0x6c>
 800be5a:	4621      	mov	r1, r4
 800be5c:	4628      	mov	r0, r5
 800be5e:	f7ff fcd7 	bl	800b810 <_fflush_r>
 800be62:	b988      	cbnz	r0, 800be88 <__swbuf_r+0x90>
 800be64:	4638      	mov	r0, r7
 800be66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be68:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <__swbuf_r+0x9c>)
 800be6a:	429c      	cmp	r4, r3
 800be6c:	d101      	bne.n	800be72 <__swbuf_r+0x7a>
 800be6e:	68ac      	ldr	r4, [r5, #8]
 800be70:	e7cf      	b.n	800be12 <__swbuf_r+0x1a>
 800be72:	4b09      	ldr	r3, [pc, #36]	; (800be98 <__swbuf_r+0xa0>)
 800be74:	429c      	cmp	r4, r3
 800be76:	bf08      	it	eq
 800be78:	68ec      	ldreq	r4, [r5, #12]
 800be7a:	e7ca      	b.n	800be12 <__swbuf_r+0x1a>
 800be7c:	4621      	mov	r1, r4
 800be7e:	4628      	mov	r0, r5
 800be80:	f000 f80c 	bl	800be9c <__swsetup_r>
 800be84:	2800      	cmp	r0, #0
 800be86:	d0cb      	beq.n	800be20 <__swbuf_r+0x28>
 800be88:	f04f 37ff 	mov.w	r7, #4294967295
 800be8c:	e7ea      	b.n	800be64 <__swbuf_r+0x6c>
 800be8e:	bf00      	nop
 800be90:	0800c66c 	.word	0x0800c66c
 800be94:	0800c68c 	.word	0x0800c68c
 800be98:	0800c64c 	.word	0x0800c64c

0800be9c <__swsetup_r>:
 800be9c:	4b32      	ldr	r3, [pc, #200]	; (800bf68 <__swsetup_r+0xcc>)
 800be9e:	b570      	push	{r4, r5, r6, lr}
 800bea0:	681d      	ldr	r5, [r3, #0]
 800bea2:	4606      	mov	r6, r0
 800bea4:	460c      	mov	r4, r1
 800bea6:	b125      	cbz	r5, 800beb2 <__swsetup_r+0x16>
 800bea8:	69ab      	ldr	r3, [r5, #24]
 800beaa:	b913      	cbnz	r3, 800beb2 <__swsetup_r+0x16>
 800beac:	4628      	mov	r0, r5
 800beae:	f7ff fd43 	bl	800b938 <__sinit>
 800beb2:	4b2e      	ldr	r3, [pc, #184]	; (800bf6c <__swsetup_r+0xd0>)
 800beb4:	429c      	cmp	r4, r3
 800beb6:	d10f      	bne.n	800bed8 <__swsetup_r+0x3c>
 800beb8:	686c      	ldr	r4, [r5, #4]
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bec0:	0719      	lsls	r1, r3, #28
 800bec2:	d42c      	bmi.n	800bf1e <__swsetup_r+0x82>
 800bec4:	06dd      	lsls	r5, r3, #27
 800bec6:	d411      	bmi.n	800beec <__swsetup_r+0x50>
 800bec8:	2309      	movs	r3, #9
 800beca:	6033      	str	r3, [r6, #0]
 800becc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	f04f 30ff 	mov.w	r0, #4294967295
 800bed6:	e03e      	b.n	800bf56 <__swsetup_r+0xba>
 800bed8:	4b25      	ldr	r3, [pc, #148]	; (800bf70 <__swsetup_r+0xd4>)
 800beda:	429c      	cmp	r4, r3
 800bedc:	d101      	bne.n	800bee2 <__swsetup_r+0x46>
 800bede:	68ac      	ldr	r4, [r5, #8]
 800bee0:	e7eb      	b.n	800beba <__swsetup_r+0x1e>
 800bee2:	4b24      	ldr	r3, [pc, #144]	; (800bf74 <__swsetup_r+0xd8>)
 800bee4:	429c      	cmp	r4, r3
 800bee6:	bf08      	it	eq
 800bee8:	68ec      	ldreq	r4, [r5, #12]
 800beea:	e7e6      	b.n	800beba <__swsetup_r+0x1e>
 800beec:	0758      	lsls	r0, r3, #29
 800beee:	d512      	bpl.n	800bf16 <__swsetup_r+0x7a>
 800bef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bef2:	b141      	cbz	r1, 800bf06 <__swsetup_r+0x6a>
 800bef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bef8:	4299      	cmp	r1, r3
 800befa:	d002      	beq.n	800bf02 <__swsetup_r+0x66>
 800befc:	4630      	mov	r0, r6
 800befe:	f7fe fd63 	bl	800a9c8 <_free_r>
 800bf02:	2300      	movs	r3, #0
 800bf04:	6363      	str	r3, [r4, #52]	; 0x34
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	2300      	movs	r3, #0
 800bf10:	6063      	str	r3, [r4, #4]
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f043 0308 	orr.w	r3, r3, #8
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	6923      	ldr	r3, [r4, #16]
 800bf20:	b94b      	cbnz	r3, 800bf36 <__swsetup_r+0x9a>
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf2c:	d003      	beq.n	800bf36 <__swsetup_r+0x9a>
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4630      	mov	r0, r6
 800bf32:	f000 f84d 	bl	800bfd0 <__smakebuf_r>
 800bf36:	89a0      	ldrh	r0, [r4, #12]
 800bf38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf3c:	f010 0301 	ands.w	r3, r0, #1
 800bf40:	d00a      	beq.n	800bf58 <__swsetup_r+0xbc>
 800bf42:	2300      	movs	r3, #0
 800bf44:	60a3      	str	r3, [r4, #8]
 800bf46:	6963      	ldr	r3, [r4, #20]
 800bf48:	425b      	negs	r3, r3
 800bf4a:	61a3      	str	r3, [r4, #24]
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	b943      	cbnz	r3, 800bf62 <__swsetup_r+0xc6>
 800bf50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf54:	d1ba      	bne.n	800becc <__swsetup_r+0x30>
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	0781      	lsls	r1, r0, #30
 800bf5a:	bf58      	it	pl
 800bf5c:	6963      	ldrpl	r3, [r4, #20]
 800bf5e:	60a3      	str	r3, [r4, #8]
 800bf60:	e7f4      	b.n	800bf4c <__swsetup_r+0xb0>
 800bf62:	2000      	movs	r0, #0
 800bf64:	e7f7      	b.n	800bf56 <__swsetup_r+0xba>
 800bf66:	bf00      	nop
 800bf68:	20000814 	.word	0x20000814
 800bf6c:	0800c66c 	.word	0x0800c66c
 800bf70:	0800c68c 	.word	0x0800c68c
 800bf74:	0800c64c 	.word	0x0800c64c

0800bf78 <abort>:
 800bf78:	b508      	push	{r3, lr}
 800bf7a:	2006      	movs	r0, #6
 800bf7c:	f000 f898 	bl	800c0b0 <raise>
 800bf80:	2001      	movs	r0, #1
 800bf82:	f7f6 fead 	bl	8002ce0 <_exit>

0800bf86 <__swhatbuf_r>:
 800bf86:	b570      	push	{r4, r5, r6, lr}
 800bf88:	460e      	mov	r6, r1
 800bf8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8e:	2900      	cmp	r1, #0
 800bf90:	b096      	sub	sp, #88	; 0x58
 800bf92:	4614      	mov	r4, r2
 800bf94:	461d      	mov	r5, r3
 800bf96:	da08      	bge.n	800bfaa <__swhatbuf_r+0x24>
 800bf98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	602a      	str	r2, [r5, #0]
 800bfa0:	061a      	lsls	r2, r3, #24
 800bfa2:	d410      	bmi.n	800bfc6 <__swhatbuf_r+0x40>
 800bfa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfa8:	e00e      	b.n	800bfc8 <__swhatbuf_r+0x42>
 800bfaa:	466a      	mov	r2, sp
 800bfac:	f000 f89c 	bl	800c0e8 <_fstat_r>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	dbf1      	blt.n	800bf98 <__swhatbuf_r+0x12>
 800bfb4:	9a01      	ldr	r2, [sp, #4]
 800bfb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfbe:	425a      	negs	r2, r3
 800bfc0:	415a      	adcs	r2, r3
 800bfc2:	602a      	str	r2, [r5, #0]
 800bfc4:	e7ee      	b.n	800bfa4 <__swhatbuf_r+0x1e>
 800bfc6:	2340      	movs	r3, #64	; 0x40
 800bfc8:	2000      	movs	r0, #0
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	b016      	add	sp, #88	; 0x58
 800bfce:	bd70      	pop	{r4, r5, r6, pc}

0800bfd0 <__smakebuf_r>:
 800bfd0:	898b      	ldrh	r3, [r1, #12]
 800bfd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfd4:	079d      	lsls	r5, r3, #30
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460c      	mov	r4, r1
 800bfda:	d507      	bpl.n	800bfec <__smakebuf_r+0x1c>
 800bfdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	6123      	str	r3, [r4, #16]
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	6163      	str	r3, [r4, #20]
 800bfe8:	b002      	add	sp, #8
 800bfea:	bd70      	pop	{r4, r5, r6, pc}
 800bfec:	ab01      	add	r3, sp, #4
 800bfee:	466a      	mov	r2, sp
 800bff0:	f7ff ffc9 	bl	800bf86 <__swhatbuf_r>
 800bff4:	9900      	ldr	r1, [sp, #0]
 800bff6:	4605      	mov	r5, r0
 800bff8:	4630      	mov	r0, r6
 800bffa:	f7fe fd51 	bl	800aaa0 <_malloc_r>
 800bffe:	b948      	cbnz	r0, 800c014 <__smakebuf_r+0x44>
 800c000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c004:	059a      	lsls	r2, r3, #22
 800c006:	d4ef      	bmi.n	800bfe8 <__smakebuf_r+0x18>
 800c008:	f023 0303 	bic.w	r3, r3, #3
 800c00c:	f043 0302 	orr.w	r3, r3, #2
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	e7e3      	b.n	800bfdc <__smakebuf_r+0xc>
 800c014:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <__smakebuf_r+0x7c>)
 800c016:	62b3      	str	r3, [r6, #40]	; 0x28
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	6020      	str	r0, [r4, #0]
 800c01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	9b00      	ldr	r3, [sp, #0]
 800c024:	6163      	str	r3, [r4, #20]
 800c026:	9b01      	ldr	r3, [sp, #4]
 800c028:	6120      	str	r0, [r4, #16]
 800c02a:	b15b      	cbz	r3, 800c044 <__smakebuf_r+0x74>
 800c02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c030:	4630      	mov	r0, r6
 800c032:	f000 f86b 	bl	800c10c <_isatty_r>
 800c036:	b128      	cbz	r0, 800c044 <__smakebuf_r+0x74>
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	f043 0301 	orr.w	r3, r3, #1
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	89a0      	ldrh	r0, [r4, #12]
 800c046:	4305      	orrs	r5, r0
 800c048:	81a5      	strh	r5, [r4, #12]
 800c04a:	e7cd      	b.n	800bfe8 <__smakebuf_r+0x18>
 800c04c:	0800b8d1 	.word	0x0800b8d1

0800c050 <_malloc_usable_size_r>:
 800c050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c054:	1f18      	subs	r0, r3, #4
 800c056:	2b00      	cmp	r3, #0
 800c058:	bfbc      	itt	lt
 800c05a:	580b      	ldrlt	r3, [r1, r0]
 800c05c:	18c0      	addlt	r0, r0, r3
 800c05e:	4770      	bx	lr

0800c060 <_raise_r>:
 800c060:	291f      	cmp	r1, #31
 800c062:	b538      	push	{r3, r4, r5, lr}
 800c064:	4604      	mov	r4, r0
 800c066:	460d      	mov	r5, r1
 800c068:	d904      	bls.n	800c074 <_raise_r+0x14>
 800c06a:	2316      	movs	r3, #22
 800c06c:	6003      	str	r3, [r0, #0]
 800c06e:	f04f 30ff 	mov.w	r0, #4294967295
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c076:	b112      	cbz	r2, 800c07e <_raise_r+0x1e>
 800c078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c07c:	b94b      	cbnz	r3, 800c092 <_raise_r+0x32>
 800c07e:	4620      	mov	r0, r4
 800c080:	f000 f830 	bl	800c0e4 <_getpid_r>
 800c084:	462a      	mov	r2, r5
 800c086:	4601      	mov	r1, r0
 800c088:	4620      	mov	r0, r4
 800c08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c08e:	f000 b817 	b.w	800c0c0 <_kill_r>
 800c092:	2b01      	cmp	r3, #1
 800c094:	d00a      	beq.n	800c0ac <_raise_r+0x4c>
 800c096:	1c59      	adds	r1, r3, #1
 800c098:	d103      	bne.n	800c0a2 <_raise_r+0x42>
 800c09a:	2316      	movs	r3, #22
 800c09c:	6003      	str	r3, [r0, #0]
 800c09e:	2001      	movs	r0, #1
 800c0a0:	e7e7      	b.n	800c072 <_raise_r+0x12>
 800c0a2:	2400      	movs	r4, #0
 800c0a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	4798      	blx	r3
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e7e0      	b.n	800c072 <_raise_r+0x12>

0800c0b0 <raise>:
 800c0b0:	4b02      	ldr	r3, [pc, #8]	; (800c0bc <raise+0xc>)
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	6818      	ldr	r0, [r3, #0]
 800c0b6:	f7ff bfd3 	b.w	800c060 <_raise_r>
 800c0ba:	bf00      	nop
 800c0bc:	20000814 	.word	0x20000814

0800c0c0 <_kill_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d07      	ldr	r5, [pc, #28]	; (800c0e0 <_kill_r+0x20>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	602b      	str	r3, [r5, #0]
 800c0ce:	f7f6 fdf7 	bl	8002cc0 <_kill>
 800c0d2:	1c43      	adds	r3, r0, #1
 800c0d4:	d102      	bne.n	800c0dc <_kill_r+0x1c>
 800c0d6:	682b      	ldr	r3, [r5, #0]
 800c0d8:	b103      	cbz	r3, 800c0dc <_kill_r+0x1c>
 800c0da:	6023      	str	r3, [r4, #0]
 800c0dc:	bd38      	pop	{r3, r4, r5, pc}
 800c0de:	bf00      	nop
 800c0e0:	200010c8 	.word	0x200010c8

0800c0e4 <_getpid_r>:
 800c0e4:	f7f6 bde4 	b.w	8002cb0 <_getpid>

0800c0e8 <_fstat_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	4d07      	ldr	r5, [pc, #28]	; (800c108 <_fstat_r+0x20>)
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	4608      	mov	r0, r1
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	602b      	str	r3, [r5, #0]
 800c0f6:	f7f6 fe42 	bl	8002d7e <_fstat>
 800c0fa:	1c43      	adds	r3, r0, #1
 800c0fc:	d102      	bne.n	800c104 <_fstat_r+0x1c>
 800c0fe:	682b      	ldr	r3, [r5, #0]
 800c100:	b103      	cbz	r3, 800c104 <_fstat_r+0x1c>
 800c102:	6023      	str	r3, [r4, #0]
 800c104:	bd38      	pop	{r3, r4, r5, pc}
 800c106:	bf00      	nop
 800c108:	200010c8 	.word	0x200010c8

0800c10c <_isatty_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d06      	ldr	r5, [pc, #24]	; (800c128 <_isatty_r+0x1c>)
 800c110:	2300      	movs	r3, #0
 800c112:	4604      	mov	r4, r0
 800c114:	4608      	mov	r0, r1
 800c116:	602b      	str	r3, [r5, #0]
 800c118:	f7f6 fe41 	bl	8002d9e <_isatty>
 800c11c:	1c43      	adds	r3, r0, #1
 800c11e:	d102      	bne.n	800c126 <_isatty_r+0x1a>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	b103      	cbz	r3, 800c126 <_isatty_r+0x1a>
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	200010c8 	.word	0x200010c8

0800c12c <_init>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	bf00      	nop
 800c130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c132:	bc08      	pop	{r3}
 800c134:	469e      	mov	lr, r3
 800c136:	4770      	bx	lr

0800c138 <_fini>:
 800c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13a:	bf00      	nop
 800c13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c13e:	bc08      	pop	{r3}
 800c140:	469e      	mov	lr, r3
 800c142:	4770      	bx	lr
