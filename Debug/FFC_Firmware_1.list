
FFC_Firmware_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008650  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008800  08008800  00018800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c24  08008c24  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c2c  08008c2c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c2c  08008c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000005a0  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000780  20000780  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001076e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000256d  00000000  00000000  0003097e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00032ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  00033ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024df5  00000000  00000000  000349d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010933  00000000  00000000  000597cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc499  00000000  00000000  0006a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146599  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b68  00000000  00000000  001465ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080087e8 	.word	0x080087e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080087e8 	.word	0x080087e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <posCont_Tick>:
 * */


//https://uk.mathworks.com/help/sps/ref/discretepicontroller.html

void posCont_Tick(pCon_t *con, double refPos, double realPos){
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6178      	str	r0, [r7, #20]
 8000f78:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f7c:	ed87 1b00 	vstr	d1, [r7]

	/* Proportional controller */
	con->vel = con->Kp * ( refPos - realPos);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8e:	f7ff f98b 	bl	80002a8 <__aeabi_dsub>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f7ff fb3d 	bl	8000618 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	6979      	ldr	r1, [r7, #20]
 8000fa4:	e9c1 2304 	strd	r2, r3, [r1, #16]

	//Limits
	if(con->vel > 0.8) con->vel = 0.8;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fae:	a312      	add	r3, pc, #72	; (adr r3, 8000ff8 <posCont_Tick+0x88>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fdc0 	bl	8000b38 <__aeabi_dcmpgt>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <posCont_Tick+0x5a>
 8000fbe:	6979      	ldr	r1, [r7, #20]
 8000fc0:	a30d      	add	r3, pc, #52	; (adr r3, 8000ff8 <posCont_Tick+0x88>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if(con->vel < -0.8) con->vel = -0.8;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fd0:	a30b      	add	r3, pc, #44	; (adr r3, 8001000 <posCont_Tick+0x90>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fd91 	bl	8000afc <__aeabi_dcmplt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d100      	bne.n	8000fe2 <posCont_Tick+0x72>

	/* TODO: Implement a  generic PI function that can be used multiple times using different struct variables */

}
 8000fe0:	e005      	b.n	8000fee <posCont_Tick+0x7e>
	if(con->vel < -0.8) con->vel = -0.8;
 8000fe2:	6979      	ldr	r1, [r7, #20]
 8000fe4:	a306      	add	r3, pc, #24	; (adr r3, 8001000 <posCont_Tick+0x90>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	9999999a 	.word	0x9999999a
 8000ffc:	3fe99999 	.word	0x3fe99999
 8001000:	9999999a 	.word	0x9999999a
 8001004:	bfe99999 	.word	0xbfe99999

08001008 <refModel_Tick>:
/*
 * Mass-spring-damper model with stick/slip friction
 * Compute system status for a given input force and position
 */

void refModel_Tick(rMod_t *mod, double iForce, double iPosition){
 8001008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800100c:	b094      	sub	sp, #80	; 0x50
 800100e:	af00      	add	r7, sp, #0
 8001010:	6178      	str	r0, [r7, #20]
 8001012:	ed87 0b02 	vstr	d0, [r7, #8]
 8001016:	ed87 1b00 	vstr	d1, [r7]

	double frictionForce = 0;
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint8_t saturated = 0;		/* Saturated Position - Hard Stops Emulation */
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t stuck = 0;			/* Velocity is under dynamic friction velocity threshold (dfv) */
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	double dt = (double)mod->dt / 1000000;	// Convert dt to (s)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa74 	bl	8000524 <__aeabi_ui2d>
 800103c:	a3c3      	add	r3, pc, #780	; (adr r3, 800134c <refModel_Tick+0x344>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fc13 	bl	800086c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Compute ref Velocity
	mod->vel = mod->vel_1 + (dt * mod->acc_1);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800105a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800105e:	f7ff fadb 	bl	8000618 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4640      	mov	r0, r8
 8001068:	4649      	mov	r1, r9
 800106a:	f7ff f91f 	bl	80002ac <__adddf3>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	6979      	ldr	r1, [r7, #20]
 8001074:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// Compute ref Position
	mod->pos = mod->pos_1 + (dt * mod->vel_1);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	e9d3 891c 	ldrd	r8, r9, [r3, #112]	; 0x70
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001088:	f7ff fac6 	bl	8000618 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4640      	mov	r0, r8
 8001092:	4649      	mov	r1, r9
 8001094:	f7ff f90a 	bl	80002ac <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	6979      	ldr	r1, [r7, #20]
 800109e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	// Limit position Hard Stops
	if(mod->pos > mod->posMaxLim){
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	e9d3 8916 	ldrd	r8, r9, [r3, #88]	; 0x58
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa5b 	bl	8000568 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4640      	mov	r0, r8
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff fd3d 	bl	8000b38 <__aeabi_dcmpgt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00c      	beq.n	80010de <refModel_Tick+0xd6>

		mod->pos = mod->posMaxLim;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa4d 	bl	8000568 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	6979      	ldr	r1, [r7, #20]
 80010d4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		saturated = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	if(mod->pos < mod->posMinLim){
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	e9d3 8916 	ldrd	r8, r9, [r3, #88]	; 0x58
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa3d 	bl	8000568 <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4640      	mov	r0, r8
 80010f4:	4649      	mov	r1, r9
 80010f6:	f7ff fd01 	bl	8000afc <__aeabi_dcmplt>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <refModel_Tick+0x112>

		mod->pos = mod->posMinLim;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa2f 	bl	8000568 <__aeabi_f2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		saturated = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	/* Calculate damping force */
	double dampingForce = (mod->c * mod->vel);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001126:	f7ff fa77 	bl	8000618 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* Calculate forces relative to the position of the system */
//	double springForce = interpolate_force(mod, /*iPosition*/mod->pos);
	double springForce = (mod->k * mod->pos);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800113e:	f7ff fa6b 	bl	8000618 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	/* Friction Model --------------------------------------------------------------------------------*/
	// F = u * N -> where N is the Normal force between the moving object and the sliding surface.

	/* Velocity - Hit crossing (threshold) */
	if( mod->vel < mod->dfv && mod->vel > (-mod->dfv)) stuck = 1;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001156:	f7ff fcd1 	bl	8000afc <__aeabi_dcmplt>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d012      	beq.n	8001186 <refModel_Tick+0x17e>
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800116c:	4614      	mov	r4, r2
 800116e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001172:	4622      	mov	r2, r4
 8001174:	462b      	mov	r3, r5
 8001176:	f7ff fcdf 	bl	8000b38 <__aeabi_dcmpgt>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <refModel_Tick+0x17e>
 8001180:	2301      	movs	r3, #1
 8001182:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	if(stuck){
 8001186:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800118a:	2b00      	cmp	r3, #0
 800118c:	d05c      	beq.n	8001248 <refModel_Tick+0x240>

		int8_t sign = ((iForce - springForce) > 0) ? 1 : -1;
 800118e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001196:	f7ff f887 	bl	80002a8 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	f7ff fcc5 	bl	8000b38 <__aeabi_dcmpgt>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <refModel_Tick+0x1b0>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e001      	b.n	80011bc <refModel_Tick+0x1b4>
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		double modForce = fabs(iForce - springForce);
 80011c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c8:	f7ff f86e 	bl	80002a8 <__aeabi_dsub>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4611      	mov	r1, r2
 80011d2:	61b9      	str	r1, [r7, #24]
 80011d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	61fb      	str	r3, [r7, #28]

		/* Choose the smallest of these two*/
		frictionForce = (modForce < (mod->us * mod->N)) ? (sign)*modForce : (sign)*(mod->us * mod->N);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011e6:	f7ff fa17 	bl	8000618 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011f2:	f7ff fc83 	bl	8000afc <__aeabi_dcmplt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <refModel_Tick+0x20c>
 80011fc:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f99f 	bl	8000544 <__aeabi_i2d>
 8001206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800120a:	f7ff fa05 	bl	8000618 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e016      	b.n	8001242 <refModel_Tick+0x23a>
 8001214:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f993 	bl	8000544 <__aeabi_i2d>
 800121e:	4604      	mov	r4, r0
 8001220:	460d      	mov	r5, r1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800122e:	f7ff f9f3 	bl	8000618 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f9ed 	bl	8000618 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001246:	e02a      	b.n	800129e <refModel_Tick+0x296>

	}else{

		int8_t sign = (mod->vel > 0) ? 1 : -1;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f7ff fc6f 	bl	8000b38 <__aeabi_dcmpgt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <refModel_Tick+0x25c>
 8001260:	2301      	movs	r3, #1
 8001262:	e001      	b.n	8001268 <refModel_Tick+0x260>
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		frictionForce = (sign) * (mod->ud * mod->N);
 800126c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f967 	bl	8000544 <__aeabi_i2d>
 8001276:	4604      	mov	r4, r0
 8001278:	460d      	mov	r5, r1
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001286:	f7ff f9c7 	bl	8000618 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff f9c1 	bl	8000618 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	/* Do I want to have damping and friction dependent to the position? emulate different surfaces? */
	/* In a two axis controller the forces relatives to position will depend on a 2 dimensional array */

	// Compute ref Acceleration ->  ∑F = m * a
	//mod->acc = ((1 / (mod->m)) * (inputForce - (mod->c * mod->vel) - (mod->k * mod->pos)));
	mod->acc = ((1 / (mod->m)) * (iForce - dampingForce - frictionForce - springForce ));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012a4:	f04f 0000 	mov.w	r0, #0
 80012a8:	4927      	ldr	r1, [pc, #156]	; (8001348 <refModel_Tick+0x340>)
 80012aa:	f7ff fadf 	bl	800086c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012be:	f7fe fff3 	bl	80002a8 <__aeabi_dsub>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012ce:	f7fe ffeb 	bl	80002a8 <__aeabi_dsub>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012de:	f7fe ffe3 	bl	80002a8 <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7ff f995 	bl	8000618 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	6979      	ldr	r1, [r7, #20]
 80012f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	// Reset Velocity integrator if required.
	if(saturated || stuck) 	mod->vel = 0;	// TODO: Do I need to reset if stuck? or can I let it run free?
 80012f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <refModel_Tick+0x300>
 8001300:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <refModel_Tick+0x30e>
 8001308:	6979      	ldr	r1, [r7, #20]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// Store previous values
	mod->pos_1 = mod->pos;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800131c:	6979      	ldr	r1, [r7, #20]
 800131e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	mod->vel_1 = mod->vel;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001328:	6979      	ldr	r1, [r7, #20]
 800132a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	mod->acc_1 = mod->acc;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	; 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001344:	f3af 8000 	nop.w
 8001348:	3ff00000 	.word	0x3ff00000
 800134c:	00000000 	.word	0x00000000
 8001350:	412e8480 	.word	0x412e8480

08001354 <StepCon_GetPosition>:
//
//}


/* Returns actuator position in mm */
float StepCon_GetPosition(){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

	return MotorPos;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <StepCon_GetPosition+0x20>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc31 	bl	8000bc8 <__aeabi_d2f>
 8001366:	4603      	mov	r3, r0
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000208 	.word	0x20000208

08001378 <StepCon_Speed>:

// set linear actuator to a speed of speed mm/s
void StepCon_Speed(float speed){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	ed87 0a01 	vstr	s0, [r7, #4]

	if (speed < 0.0001 && speed > -0.0001) pulseTime = 0; // Dead band
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f8f0 	bl	8000568 <__aeabi_f2d>
 8001388:	a337      	add	r3, pc, #220	; (adr r3, 8001468 <StepCon_Speed+0xf0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff fbb5 	bl	8000afc <__aeabi_dcmplt>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00e      	beq.n	80013b6 <StepCon_Speed+0x3e>
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff f8e5 	bl	8000568 <__aeabi_f2d>
 800139e:	a334      	add	r3, pc, #208	; (adr r3, 8001470 <StepCon_Speed+0xf8>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff fbc8 	bl	8000b38 <__aeabi_dcmpgt>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <StepCon_Speed+0x3e>
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <StepCon_Speed+0xd0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	801a      	strh	r2, [r3, #0]
 80013b4:	e041      	b.n	800143a <StepCon_Speed+0xc2>

	else if(speed < 0){
 80013b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d51d      	bpl.n	8001400 <StepCon_Speed+0x88>
		dir = 0;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <StepCon_Speed+0xd4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
		StepCon_CCW; 			// CCW Direction
 80013ca:	2200      	movs	r2, #0
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <StepCon_Speed+0xd8>)
 80013d0:	f001 ffcc 	bl	800336c <HAL_GPIO_WritePin>
		pulseTime = -1000000/((speed/MM_PER_REV)* MICROSTEP);
 80013d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80013d8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001454 <StepCon_Speed+0xdc>
 80013dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001458 <StepCon_Speed+0xe0>
 80013e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013e8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800145c <StepCon_Speed+0xe4>
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f4:	ee17 3a90 	vmov	r3, s15
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <StepCon_Speed+0xd0>)
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	e01c      	b.n	800143a <StepCon_Speed+0xc2>
	}
	else{
		dir = 1;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <StepCon_Speed+0xd4>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
		StepCon_CW; 			// CW Direction
 8001406:	2201      	movs	r2, #1
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <StepCon_Speed+0xd8>)
 800140c:	f001 ffae 	bl	800336c <HAL_GPIO_WritePin>
		pulseTime = 1000000/((speed/MM_PER_REV)* MICROSTEP);
 8001410:	ed97 7a01 	vldr	s14, [r7, #4]
 8001414:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001454 <StepCon_Speed+0xdc>
 8001418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001458 <StepCon_Speed+0xe0>
 8001420:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001424:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001460 <StepCon_Speed+0xe8>
 8001428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <StepCon_Speed+0xd0>)
 8001438:	801a      	strh	r2, [r3, #0]
	}

	stepLimit = 0;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <StepCon_Speed+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	801a      	strh	r2, [r3, #0]

}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200001fc 	.word	0x200001fc
 800144c:	200001fe 	.word	0x200001fe
 8001450:	40021800 	.word	0x40021800
 8001454:	42200000 	.word	0x42200000
 8001458:	461c4000 	.word	0x461c4000
 800145c:	c9742400 	.word	0xc9742400
 8001460:	49742400 	.word	0x49742400
 8001464:	20000210 	.word	0x20000210
 8001468:	eb1c432d 	.word	0xeb1c432d
 800146c:	3f1a36e2 	.word	0x3f1a36e2
 8001470:	eb1c432d 	.word	0xeb1c432d
 8001474:	bf1a36e2 	.word	0xbf1a36e2

08001478 <StepCon_pulseTick>:


/*
 * Timer callback routine
 **/
void StepCon_pulseTick(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0



	if(!pulseTime){
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <StepCon_pulseTick+0x100>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d105      	bne.n	8001490 <StepCon_pulseTick+0x18>
		__HAL_TIM_SET_COUNTER(&htim2, 1000);
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <StepCon_pulseTick+0x104>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
		return;
 800148e:	e06e      	b.n	800156e <StepCon_pulseTick+0xf6>
	}

	if(pulseTime<4){
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <StepCon_pulseTick+0x100>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d806      	bhi.n	80014a6 <StepCon_pulseTick+0x2e>
		__HAL_TIM_SET_COUNTER(&htim2, 1000);
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <StepCon_pulseTick+0x104>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
		asm("NOP");
 80014a2:	bf00      	nop
		return;
 80014a4:	e063      	b.n	800156e <StepCon_pulseTick+0xf6>
	}

	__HAL_TIM_SET_COUNTER(&htim2, pulseTime);
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <StepCon_pulseTick+0x100>)
 80014a8:	881a      	ldrh	r2, [r3, #0]
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <StepCon_pulseTick+0x104>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24

	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <StepCon_pulseTick+0x108>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00a      	beq.n	80014ce <StepCon_pulseTick+0x56>
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <StepCon_pulseTick+0x10c>)
 80014ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <StepCon_pulseTick+0x110>)
 80014c4:	f7ff fb38 	bl	8000b38 <__aeabi_dcmpgt>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d14a      	bne.n	8001564 <StepCon_pulseTick+0xec>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <StepCon_pulseTick+0x108>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10a      	bne.n	80014ec <StepCon_pulseTick+0x74>
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <StepCon_pulseTick+0x10c>)
 80014d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <StepCon_pulseTick+0x114>)
 80014e2:	f7ff fb0b 	bl	8000afc <__aeabi_dcmplt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d13d      	bne.n	8001568 <StepCon_pulseTick+0xf0>

	if(stepLimit > 240) return;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <StepCon_pulseTick+0x118>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	2bf0      	cmp	r3, #240	; 0xf0
 80014f2:	d83b      	bhi.n	800156c <StepCon_pulseTick+0xf4>
	stepLimit++;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <StepCon_pulseTick+0x118>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <StepCon_pulseTick+0x118>)
 80014fe:	801a      	strh	r2, [r3, #0]

	/*Send pulse */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2120      	movs	r1, #32
 8001504:	4823      	ldr	r0, [pc, #140]	; (8001594 <StepCon_pulseTick+0x11c>)
 8001506:	f001 ff31 	bl	800336c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2120      	movs	r1, #32
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <StepCon_pulseTick+0x11c>)
 8001510:	f001 ff2c 	bl	800336c <HAL_GPIO_WritePin>

	if(dir) stepCount++;		/* Track how many pulses have been sent to the stepper */
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <StepCon_pulseTick+0x108>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <StepCon_pulseTick+0xb0>
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <StepCon_pulseTick+0x120>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <StepCon_pulseTick+0x120>)
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e004      	b.n	8001532 <StepCon_pulseTick+0xba>
	else 	stepCount--;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <StepCon_pulseTick+0x120>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <StepCon_pulseTick+0x120>)
 8001530:	6013      	str	r3, [r2, #0]



	MotorPos = ((double)stepCount / MICROSTEP) * MM_PER_REV;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <StepCon_pulseTick+0x120>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f804 	bl	8000544 <__aeabi_i2d>
 800153c:	a30c      	add	r3, pc, #48	; (adr r3, 8001570 <StepCon_pulseTick+0xf8>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f993 	bl	800086c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <StepCon_pulseTick+0x124>)
 8001554:	f7ff f860 	bl	8000618 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4909      	ldr	r1, [pc, #36]	; (8001584 <StepCon_pulseTick+0x10c>)
 800155e:	e9c1 2300 	strd	r2, r3, [r1]
 8001562:	e004      	b.n	800156e <StepCon_pulseTick+0xf6>
	if(dir && MotorPos > MAX_MOTOR_LIM) return;
 8001564:	bf00      	nop
 8001566:	e002      	b.n	800156e <StepCon_pulseTick+0xf6>
	if(!dir && MotorPos < MIN_MOTOR_LIM) return;
 8001568:	bf00      	nop
 800156a:	e000      	b.n	800156e <StepCon_pulseTick+0xf6>
	if(stepLimit > 240) return;
 800156c:	bf00      	nop
}
 800156e:	bd80      	pop	{r7, pc}
 8001570:	00000000 	.word	0x00000000
 8001574:	40c38800 	.word	0x40c38800
 8001578:	200001fc 	.word	0x200001fc
 800157c:	2000053c 	.word	0x2000053c
 8001580:	200001fe 	.word	0x200001fe
 8001584:	20000208 	.word	0x20000208
 8001588:	405b8000 	.word	0x405b8000
 800158c:	c05b8000 	.word	0xc05b8000
 8001590:	20000210 	.word	0x20000210
 8001594:	40021800 	.word	0x40021800
 8001598:	20000200 	.word	0x20000200
 800159c:	40440000 	.word	0x40440000

080015a0 <UART1_Init>:

	/*----------------------------*/
}


void UART1_Init(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  HAL_UART_Receive_DMA(&huart1, (uint8_t *)UART1_Rx_Buf, UART1_BUF_LEN);  // Initializes DMA for UART1
 80015a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015a8:	4902      	ldr	r1, [pc, #8]	; (80015b4 <UART1_Init+0x14>)
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <UART1_Init+0x18>)
 80015ac:	f003 f93e 	bl	800482c <HAL_UART_Receive_DMA>

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000214 	.word	0x20000214
 80015b8:	200005cc 	.word	0x200005cc

080015bc <UART1_Handler>:

/*@Brief Gets Commands from UART1 RingBuffer
 *
 */
void UART1_Handler(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

	static uint8_t UART1_CMD_Buff[300];	/* Command Handler Buffer */
	static uint16_t UART1_cmdPtr = 0;

	while(UART1_DataAvailable()){
 80015c2:	e02a      	b.n	800161a <UART1_Handler+0x5e>

		uint8_t aux = UART1_getChar();
 80015c4:	f000 f8c6 	bl	8001754 <UART1_getChar>
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]

		if(aux == '\n' || aux == '\r' ) { // End Command
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d002      	beq.n	80015d8 <UART1_Handler+0x1c>
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b0d      	cmp	r3, #13
 80015d6:	d10f      	bne.n	80015f8 <UART1_Handler+0x3c>

				UART1_CMD_Buff[UART1_cmdPtr] = aux;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <UART1_Handler+0x74>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <UART1_Handler+0x78>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	5453      	strb	r3, [r2, r1]
				UART1_Cmd_Callback(UART1_CMD_Buff, UART1_cmdPtr);
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <UART1_Handler+0x74>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <UART1_Handler+0x78>)
 80015ec:	f000 fc84 	bl	8001ef8 <UART1_Cmd_Callback>
				UART1_cmdPtr=0;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <UART1_Handler+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]
 80015f6:	e010      	b.n	800161a <UART1_Handler+0x5e>

		}else{             				// Command body

		UART1_CMD_Buff[UART1_cmdPtr] = aux;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <UART1_Handler+0x74>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <UART1_Handler+0x78>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	5453      	strb	r3, [r2, r1]
		if (UART1_cmdPtr < 299) UART1_cmdPtr++;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <UART1_Handler+0x74>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800160c:	d805      	bhi.n	800161a <UART1_Handler+0x5e>
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <UART1_Handler+0x74>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <UART1_Handler+0x74>)
 8001618:	801a      	strh	r2, [r3, #0]
	while(UART1_DataAvailable()){
 800161a:	f000 f85d 	bl	80016d8 <UART1_DataAvailable>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1cf      	bne.n	80015c4 <UART1_Handler+0x8>

		}
	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000040c 	.word	0x2000040c
 8001634:	20000410 	.word	0x20000410

08001638 <UART1_printf>:

void UART1_printf(const char *fmt, ...){
 8001638:	b40f      	push	{r0, r1, r2, r3}
 800163a:	b580      	push	{r7, lr}
 800163c:	b0c2      	sub	sp, #264	; 0x108
 800163e:	af00      	add	r7, sp, #0

	char tempBuff[256] = {0};
 8001640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001644:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	3304      	adds	r3, #4
 800164e:	22fc      	movs	r2, #252	; 0xfc
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f004 f9c8 	bl	80059e8 <memset>
	va_list arg;

	va_start (arg, fmt);
 8001658:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800165c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001664:	601a      	str	r2, [r3, #0]
	vsprintf(tempBuff,fmt, arg);
 8001666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800166a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800166e:	f107 0008 	add.w	r0, r7, #8
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001678:	f004 fe52 	bl	8006320 <vsiprintf>
	va_end (arg);

	//HAL_UART_Transmit(&huart1, (const uint8_t*)tempBuff, strlen(tempBuff), 0xff); /* Transmit over uart */
	HAL_UART_Transmit_IT(&huart1, (const uint8_t*)tempBuff, strlen(tempBuff)); /* Transmit over uart */
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fdb5 	bl	80001f0 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <UART1_printf+0x70>)
 8001692:	f003 f886 	bl	80047a2 <HAL_UART_Transmit_IT>
}
 8001696:	bf00      	nop
 8001698:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800169c:	46bd      	mov	sp, r7
 800169e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a2:	b004      	add	sp, #16
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200005cc 	.word	0x200005cc

080016ac <HAL_UART_RxCpltCallback>:

//  HAL_UART_Receive_DMA(&huart2, (uint8_t *)GPS_Rx_Buf, GPS_BUF_LEN);  // Initializes DMA for GPS
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

    if(huart == &huart1){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_UART_RxCpltCallback+0x24>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <HAL_UART_RxCpltCallback+0x16>
      UART1_DMA_Ovrn = 1;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_UART_RxCpltCallback+0x28>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
    }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200005cc 	.word	0x200005cc
 80016d4:	20000408 	.word	0x20000408

080016d8 <UART1_DataAvailable>:

static uint8_t UART1_DataAvailable() {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  if (((UART1_oPtr < UART1_iPtr) && !UART1_DMA_Ovrn) || ((UART1_oPtr > UART1_iPtr) && UART1_DMA_Ovrn)) {
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <UART1_DataAvailable+0x70>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <UART1_DataAvailable+0x74>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d203      	bcs.n	80016f8 <UART1_DataAvailable+0x20>
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <UART1_DataAvailable+0x78>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00d      	beq.n	8001714 <UART1_DataAvailable+0x3c>
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <UART1_DataAvailable+0x70>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <UART1_DataAvailable+0x74>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001708:	429a      	cmp	r2, r3
 800170a:	d905      	bls.n	8001718 <UART1_DataAvailable+0x40>
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <UART1_DataAvailable+0x78>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <UART1_DataAvailable+0x40>
    return 1;
 8001714:	2301      	movs	r3, #1
 8001716:	e012      	b.n	800173e <UART1_DataAvailable+0x66>
  } else if (UART1_DMA_Ovrn){
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <UART1_DataAvailable+0x78>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <UART1_DataAvailable+0x64>
    UART1_oPtr = UART1_iPtr;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <UART1_DataAvailable+0x74>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	b29b      	uxth	r3, r3
 8001728:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <UART1_DataAvailable+0x70>)
 8001730:	801a      	strh	r2, [r3, #0]
    UART1_DMA_Ovrn = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <UART1_DataAvailable+0x78>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    return 0;
 8001738:	2300      	movs	r3, #0
 800173a:	e000      	b.n	800173e <UART1_DataAvailable+0x66>
  }
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	2000040a 	.word	0x2000040a
 800174c:	20000610 	.word	0x20000610
 8001750:	20000408 	.word	0x20000408

08001754 <UART1_getChar>:

static uint8_t UART1_getChar() {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]
  if (UART1_DataAvailable()) {
 800175e:	f7ff ffbb 	bl	80016d8 <UART1_DataAvailable>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d014      	beq.n	8001792 <UART1_getChar+0x3e>
    ch = UART1_Rx_Buf[UART1_oPtr++];
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <UART1_getChar+0x48>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	b291      	uxth	r1, r2
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <UART1_getChar+0x48>)
 8001772:	8011      	strh	r1, [r2, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <UART1_getChar+0x4c>)
 8001778:	5c9b      	ldrb	r3, [r3, r2]
 800177a:	71fb      	strb	r3, [r7, #7]
    if (UART1_oPtr >= UART1_BUF_LEN) {
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <UART1_getChar+0x48>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001784:	d305      	bcc.n	8001792 <UART1_getChar+0x3e>
      UART1_oPtr = 0;
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <UART1_getChar+0x48>)
 8001788:	2200      	movs	r2, #0
 800178a:	801a      	strh	r2, [r3, #0]
      UART1_DMA_Ovrn = 0;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <UART1_getChar+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
    }
  }
  return ch;
 8001792:	79fb      	ldrb	r3, [r7, #7]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000040a 	.word	0x2000040a
 80017a0:	20000214 	.word	0x20000214
 80017a4:	20000408 	.word	0x20000408

080017a8 <Sensor_Receive>:
}



//https://cdn.sparkfun.com/assets/learn_tutorials/5/4/6/hx711F_EN.pdf
int32_t Sensor_Receive(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0

	static uint32_t pData = 0;
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b4:	482a      	ldr	r0, [pc, #168]	; (8001860 <Sensor_Receive+0xb8>)
 80017b6:	f001 fdd9 	bl	800336c <HAL_GPIO_WritePin>

	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) return pData;
 80017ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017be:	4828      	ldr	r0, [pc, #160]	; (8001860 <Sensor_Receive+0xb8>)
 80017c0:	f001 fdbc 	bl	800333c <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <Sensor_Receive+0x28>
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <Sensor_Receive+0xbc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e043      	b.n	8001858 <Sensor_Receive+0xb0>
//	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET);
	pData = 0;
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <Sensor_Receive+0xbc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

	// Read ChA Gain 128
	for(int i=0; i<24; i++){
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	e020      	b.n	800181e <Sensor_Receive+0x76>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e2:	481f      	ldr	r0, [pc, #124]	; (8001860 <Sensor_Receive+0xb8>)
 80017e4:	f001 fdc2 	bl	800336c <HAL_GPIO_WritePin>
		pData = pData<<1;
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <Sensor_Receive+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <Sensor_Receive+0xbc>)
 80017f0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f8:	4819      	ldr	r0, [pc, #100]	; (8001860 <Sensor_Receive+0xb8>)
 80017fa:	f001 fdb7 	bl	800336c <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) pData++;
 80017fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001802:	4817      	ldr	r0, [pc, #92]	; (8001860 <Sensor_Receive+0xb8>)
 8001804:	f001 fd9a 	bl	800333c <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	2b01      	cmp	r3, #1
 800180c:	d104      	bne.n	8001818 <Sensor_Receive+0x70>
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <Sensor_Receive+0xbc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <Sensor_Receive+0xbc>)
 8001816:	6013      	str	r3, [r2, #0]
	for(int i=0; i<24; i++){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3301      	adds	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b17      	cmp	r3, #23
 8001822:	dddb      	ble.n	80017dc <Sensor_Receive+0x34>
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <Sensor_Receive+0xb8>)
 800182c:	f001 fd9e 	bl	800336c <HAL_GPIO_WritePin>
	//pData=pData^0x800000;
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001836:	480a      	ldr	r0, [pc, #40]	; (8001860 <Sensor_Receive+0xb8>)
 8001838:	f001 fd98 	bl	800336c <HAL_GPIO_WritePin>

	if(pData&0x00800000) pData |= 0xff000000; // Convert 24bits 2's complement into 32bits
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <Sensor_Receive+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <Sensor_Receive+0xac>
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <Sensor_Receive+0xbc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <Sensor_Receive+0xbc>)
 8001852:	6013      	str	r3, [r2, #0]
	return pData;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <Sensor_Receive+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020c00 	.word	0x40020c00
 8001864:	20000718 	.word	0x20000718

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	ed2d 8b02 	vpush	{d8}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f000 fe91 	bl	8002598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f93b 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 fa87 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 800187e:	f000 fa65 	bl	8001d4c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001882:	f000 fa39 	bl	8001cf8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001886:	f000 f99d 	bl	8001bc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800188a:	f000 f9e7 	bl	8001c5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800188e:	4884      	ldr	r0, [pc, #528]	; (8001aa0 <main+0x238>)
 8001890:	f002 faa0 	bl	8003dd4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001894:	4883      	ldr	r0, [pc, #524]	; (8001aa4 <main+0x23c>)
 8001896:	f002 fb05 	bl	8003ea4 <HAL_TIM_Base_Start_IT>
  UART1_Init();
 800189a:	f7ff fe81 	bl	80015a0 <UART1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	uint32_t timeStamp = 0; /* Timer for UART tx */
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]

  	//force emulation
	int32_t fOffset = 412;
 80018a2:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 80018a6:	613b      	str	r3, [r7, #16]
	float scalingFactor_N = 175.471;  // bits per Newton
 80018a8:	4b7f      	ldr	r3, [pc, #508]	; (8001aa8 <main+0x240>)
 80018aa:	60fb      	str	r3, [r7, #12]

	hmod1.dt = 1200; 	// us
 80018ac:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <main+0x244>)
 80018ae:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80018b2:	601a      	str	r2, [r3, #0]

	hmod1.m = 1;
 80018b4:	497d      	ldr	r1, [pc, #500]	; (8001aac <main+0x244>)
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <main+0x248>)
 80018bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hmod1.c = 20; 		// N.s/m
 80018c0:	497a      	ldr	r1, [pc, #488]	; (8001aac <main+0x244>)
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <main+0x24c>)
 80018c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	hmod1.k = 100; 		// N/m
 80018cc:	4977      	ldr	r1, [pc, #476]	; (8001aac <main+0x244>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b79      	ldr	r3, [pc, #484]	; (8001ab8 <main+0x250>)
 80018d4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	hmod1.us = 0.8; 	// Dynamic friction coefficient
 80018d8:	4974      	ldr	r1, [pc, #464]	; (8001aac <main+0x244>)
 80018da:	a36b      	add	r3, pc, #428	; (adr r3, 8001a88 <main+0x220>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	hmod1.ud = 0.4; 	// Static friction coefficient
 80018e4:	4971      	ldr	r1, [pc, #452]	; (8001aac <main+0x244>)
 80018e6:	a36a      	add	r3, pc, #424	; (adr r3, 8001a90 <main+0x228>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	hmod1.N = 2; 		// Normal Force (Weight)
 80018f0:	496e      	ldr	r1, [pc, #440]	; (8001aac <main+0x244>)
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	hmod1.dfv = 0.0001;	// m/s
 80018fe:	496b      	ldr	r1, [pc, #428]	; (8001aac <main+0x244>)
 8001900:	a365      	add	r3, pc, #404	; (adr r3, 8001a98 <main+0x230>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	hmod1.posMaxLim = 0.12; // Model Hard Stops
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <main+0x244>)
 800190c:	4a6b      	ldr	r2, [pc, #428]	; (8001abc <main+0x254>)
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
	hmod1.posMinLim = -0.12;
 8001910:	4b66      	ldr	r3, [pc, #408]	; (8001aac <main+0x244>)
 8001912:	4a6b      	ldr	r2, [pc, #428]	; (8001ac0 <main+0x258>)
 8001914:	645a      	str	r2, [r3, #68]	; 0x44

	hcon1.Kp = 10;
 8001916:	496b      	ldr	r1, [pc, #428]	; (8001ac4 <main+0x25c>)
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <main+0x260>)
 800191e:	e9c1 2300 	strd	r2, r3, [r1]
	hcon1.Ki = 1;
 8001922:	4968      	ldr	r1, [pc, #416]	; (8001ac4 <main+0x25c>)
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <main+0x248>)
 800192a:	e9c1 2302 	strd	r2, r3, [r1, #8]

	Sensor_Receive();
 800192e:	f7ff ff3b 	bl	80017a8 <Sensor_Receive>

  while (1)
  {

	  UART1_Handler();
 8001932:	f7ff fe43 	bl	80015bc <UART1_Handler>

	  int16_t raw = ((Sensor_Receive() & 0x00FFFF00)>>8) + fOffset;
 8001936:	f7ff ff37 	bl	80017a8 <Sensor_Receive>
 800193a:	4603      	mov	r3, r0
 800193c:	121b      	asrs	r3, r3, #8
 800193e:	b29a      	uxth	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	817b      	strh	r3, [r7, #10]
	  force = (float)raw / scalingFactor_N;
 800194a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001956:	ed97 7a03 	vldr	s14, [r7, #12]
 800195a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195e:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <main+0x264>)
 8001960:	edc3 7a00 	vstr	s15, [r3]

	// Filter Force
	  static float smoothForce = 0;
	  float LPF_Beta = 0.2; // 0<ß<1
 8001964:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <main+0x268>)
 8001966:	607b      	str	r3, [r7, #4]
	  smoothForce = smoothForce - (LPF_Beta * (smoothForce - force));
 8001968:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <main+0x26c>)
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <main+0x26c>)
 8001970:	edd3 6a00 	vldr	s13, [r3]
 8001974:	4b55      	ldr	r3, [pc, #340]	; (8001acc <main+0x264>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800197e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198a:	4b52      	ldr	r3, [pc, #328]	; (8001ad4 <main+0x26c>)
 800198c:	edc3 7a00 	vstr	s15, [r3]

	// Reference model
	//------------------------------------------//
	 refModel_Tick(&hmod1, smoothForce, (StepCon_GetPosition()/1000));
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <main+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fde7 	bl	8000568 <__aeabi_f2d>
 800199a:	4604      	mov	r4, r0
 800199c:	460d      	mov	r5, r1
 800199e:	f7ff fcd9 	bl	8001354 <StepCon_GetPosition>
 80019a2:	eef0 7a40 	vmov.f32	s15, s0
 80019a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001ad8 <main+0x270>
 80019aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019ae:	ee16 0a90 	vmov	r0, s13
 80019b2:	f7fe fdd9 	bl	8000568 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	ec43 2b11 	vmov	d1, r2, r3
 80019be:	ec45 4b10 	vmov	d0, r4, r5
 80019c2:	483a      	ldr	r0, [pc, #232]	; (8001aac <main+0x244>)
 80019c4:	f7ff fb20 	bl	8001008 <refModel_Tick>
	//------------------------------------------//

	// Position Controller
	//------------------------------------------//
	 posCont_Tick(&hcon1, hmod1.pos, (StepCon_GetPosition()/1000));
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <main+0x244>)
 80019ca:	ed93 8b16 	vldr	d8, [r3, #88]	; 0x58
 80019ce:	f7ff fcc1 	bl	8001354 <StepCon_GetPosition>
 80019d2:	eef0 7a40 	vmov.f32	s15, s0
 80019d6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ad8 <main+0x270>
 80019da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019de:	ee16 0a90 	vmov	r0, s13
 80019e2:	f7fe fdc1 	bl	8000568 <__aeabi_f2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	ec43 2b11 	vmov	d1, r2, r3
 80019ee:	eeb0 0a48 	vmov.f32	s0, s16
 80019f2:	eef0 0a68 	vmov.f32	s1, s17
 80019f6:	4833      	ldr	r0, [pc, #204]	; (8001ac4 <main+0x25c>)
 80019f8:	f7ff faba 	bl	8000f70 <posCont_Tick>
	//------------------------------------------//

	 /* Drive motor Speed with corrected ref velocity */
	 speed = (/*hmod1.vel*/  hcon1.vel) * 1000; // to mm/s
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <main+0x25c>)
 80019fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <main+0x274>)
 8001a08:	f7fe fe06 	bl	8000618 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f8d8 	bl	8000bc8 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <main+0x278>)
 8001a1c:	6013      	str	r3, [r2, #0]

	 if(enable) StepCon_Speed(speed);
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <main+0x27c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <main+0x1ce>
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <main+0x278>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	f7ff fca2 	bl	8001378 <StepCon_Speed>
 8001a34:	e003      	b.n	8001a3e <main+0x1d6>
	 else 		StepCon_Speed(0);
 8001a36:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001ae8 <main+0x280>
 8001a3a:	f7ff fc9d 	bl	8001378 <StepCon_Speed>

	 // Console logs
	 if(timeStamp + 500 < HAL_GetTick()){
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8001a44:	f000 fdde 	bl	8002604 <HAL_GetTick>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	429c      	cmp	r4, r3
 8001a4c:	d202      	bcs.n	8001a54 <main+0x1ec>
		 //UART1_printf("%.4f | %.4f\n\r", smoothForce, (hmod1.pos * 1000));
		 timeStamp = HAL_GetTick();
 8001a4e:	f000 fdd9 	bl	8002604 <HAL_GetTick>
 8001a52:	6178      	str	r0, [r7, #20]
	//	 * You can compare the timer counter and trigger an alarm
	//	 * if the time was already gone by the time the program
	//	 * reached this point
	//	 **/

	  if(__HAL_TIM_GET_COUNTER(&htim3) < hmod1.dt){
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <main+0x238>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <main+0x244>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d208      	bcs.n	8001a74 <main+0x20c>

		  while(__HAL_TIM_GET_COUNTER(&htim3) < hmod1.dt);
 8001a62:	bf00      	nop
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <main+0x238>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <main+0x244>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d3f8      	bcc.n	8001a64 <main+0x1fc>
 8001a72:	e002      	b.n	8001a7a <main+0x212>
	  }else{
		  UART1_printf("TIMING ERROR\n\r");
 8001a74:	481d      	ldr	r0, [pc, #116]	; (8001aec <main+0x284>)
 8001a76:	f7ff fddf 	bl	8001638 <UART1_printf>
	  }
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <main+0x238>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  {
 8001a82:	e756      	b.n	8001932 <main+0xca>
 8001a84:	f3af 8000 	nop.w
 8001a88:	9999999a 	.word	0x9999999a
 8001a8c:	3fe99999 	.word	0x3fe99999
 8001a90:	9999999a 	.word	0x9999999a
 8001a94:	3fd99999 	.word	0x3fd99999
 8001a98:	eb1c432d 	.word	0xeb1c432d
 8001a9c:	3f1a36e2 	.word	0x3f1a36e2
 8001aa0:	20000584 	.word	0x20000584
 8001aa4:	2000053c 	.word	0x2000053c
 8001aa8:	432f7893 	.word	0x432f7893
 8001aac:	20000680 	.word	0x20000680
 8001ab0:	3ff00000 	.word	0x3ff00000
 8001ab4:	40340000 	.word	0x40340000
 8001ab8:	40590000 	.word	0x40590000
 8001abc:	3df5c28f 	.word	0x3df5c28f
 8001ac0:	bdf5c28f 	.word	0xbdf5c28f
 8001ac4:	200006f8 	.word	0x200006f8
 8001ac8:	40240000 	.word	0x40240000
 8001acc:	20000674 	.word	0x20000674
 8001ad0:	3e4ccccd 	.word	0x3e4ccccd
 8001ad4:	2000071c 	.word	0x2000071c
 8001ad8:	447a0000 	.word	0x447a0000
 8001adc:	408f4000 	.word	0x408f4000
 8001ae0:	20000670 	.word	0x20000670
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	08008800 	.word	0x08008800

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	; 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2230      	movs	r2, #48	; 0x30
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 ff72 	bl	80059e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <SystemClock_Config+0xd0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b3c:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <SystemClock_Config+0xd0>)
 8001b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <SystemClock_Config+0xd0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b64:	2304      	movs	r3, #4
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b68:	2348      	movs	r3, #72	; 0x48
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b70:	2303      	movs	r3, #3
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b74:	f107 0320 	add.w	r3, r7, #32
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fc11 	bl	80033a0 <HAL_RCC_OscConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b84:	f000 fa48 	bl	8002018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b88:	230f      	movs	r3, #15
 8001b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 fe73 	bl	8003890 <HAL_RCC_ClockConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bb0:	f000 fa32 	bl	8002018 <Error_Handler>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3750      	adds	r7, #80	; 0x50
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001bea:	2247      	movs	r2, #71	; 0x47
 8001bec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001bf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c08:	4813      	ldr	r0, [pc, #76]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001c0a:	f002 f893 	bl	8003d34 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c14:	f000 fa00 	bl	8002018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001c26:	f002 fab5 	bl	8004194 <HAL_TIM_ConfigClockSource>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c30:	f000 f9f2 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_TIM2_Init+0x94>)
 8001c42:	f002 fcd1 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c4c:	f000 f9e4 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000053c 	.word	0x2000053c

08001c5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <MX_TIM3_Init+0x98>)
 8001c7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c80:	2247      	movs	r2, #71	; 0x47
 8001c82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c9e:	4814      	ldr	r0, [pc, #80]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001ca0:	f002 f848 	bl	8003d34 <HAL_TIM_Base_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001caa:	f000 f9b5 	bl	8002018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001cbc:	f002 fa6a 	bl	8004194 <HAL_TIM_ConfigClockSource>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cc6:	f000 f9a7 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001cd8:	f002 fc86 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ce2:	f000 f999 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000584 	.word	0x20000584
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <MX_USART1_UART_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d30:	f002 fcea 	bl	8004708 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f000 f96d 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200005cc 	.word	0x200005cc
 8001d48:	40011000 	.word	0x40011000

08001d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_DMA_Init+0x3c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <MX_DMA_Init+0x3c>)
 8001d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_DMA_Init+0x3c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	203a      	movs	r0, #58	; 0x3a
 8001d74:	f000 fd0a 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001d78:	203a      	movs	r0, #58	; 0x3a
 8001d7a:	f000 fd23 	bl	80027c4 <HAL_NVIC_EnableIRQ>

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a4e      	ldr	r2, [pc, #312]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a47      	ldr	r2, [pc, #284]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a39      	ldr	r2, [pc, #228]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <MX_GPIO_Init+0x158>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e34:	482c      	ldr	r0, [pc, #176]	; (8001ee8 <MX_GPIO_Init+0x15c>)
 8001e36:	f001 fa99 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_7|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f246 01a0 	movw	r1, #24736	; 0x60a0
 8001e40:	482a      	ldr	r0, [pc, #168]	; (8001eec <MX_GPIO_Init+0x160>)
 8001e42:	f001 fa93 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	4829      	ldr	r0, [pc, #164]	; (8001ef0 <MX_GPIO_Init+0x164>)
 8001e4c:	f001 fa8e 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e50:	2301      	movs	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <MX_GPIO_Init+0x168>)
 8001e66:	f001 f8bd 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <MX_GPIO_Init+0x15c>)
 8001e80:	f001 f8b0 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <MX_GPIO_Init+0x15c>)
 8001e9e:	f001 f8a1 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 PG7 LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|LD3_Pin|LD4_Pin;
 8001ea2:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480c      	ldr	r0, [pc, #48]	; (8001eec <MX_GPIO_Init+0x160>)
 8001ebc:	f001 f892 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ec0:	2340      	movs	r3, #64	; 0x40
 8001ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <MX_GPIO_Init+0x164>)
 8001ed8:	f001 f884 	bl	8002fe4 <HAL_GPIO_Init>

}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <UART1_Cmd_Callback>:

/* USER CODE BEGIN 4 */

void UART1_Cmd_Callback(uint8_t* cmd, uint16_t len){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]

	/* Process your commands here */

	if(!len) return;
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d059      	beq.n	8001fbe <UART1_Cmd_Callback+0xc6>

	if(!strncmp((const char*)cmd, "1", len)) {
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	492e      	ldr	r1, [pc, #184]	; (8001fc8 <UART1_Cmd_Callback+0xd0>)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f004 f9db 	bl	80062cc <strncmp>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d110      	bne.n	8001f3e <UART1_Cmd_Callback+0x46>
		//StepCon_Rotate(360, 1000);

		posVariance += 1;
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <UART1_Cmd_Callback+0xd4>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <UART1_Cmd_Callback+0xd4>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
		StepCon_Speed(posVariance);
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <UART1_Cmd_Callback+0xd4>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3a:	f7ff fa1d 	bl	8001378 <StepCon_Speed>
	}


	if(!strncmp((const char*)cmd, "2", len)) {
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4923      	ldr	r1, [pc, #140]	; (8001fd0 <UART1_Cmd_Callback+0xd8>)
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f004 f9c1 	bl	80062cc <strncmp>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d110      	bne.n	8001f72 <UART1_Cmd_Callback+0x7a>
		posVariance -= 1;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <UART1_Cmd_Callback+0xd4>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <UART1_Cmd_Callback+0xd4>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
		StepCon_Speed(posVariance);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <UART1_Cmd_Callback+0xd4>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6e:	f7ff fa03 	bl	8001378 <StepCon_Speed>
	}


	if(!strncmp((const char*)cmd, "4", len)) {
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4917      	ldr	r1, [pc, #92]	; (8001fd4 <UART1_Cmd_Callback+0xdc>)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f004 f9a7 	bl	80062cc <strncmp>
		//StepCon_offfetZero(+10);

	}


	if(!strncmp((const char*)cmd, "5", len)) {
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4915      	ldr	r1, [pc, #84]	; (8001fd8 <UART1_Cmd_Callback+0xe0>)
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f004 f9a1 	bl	80062cc <strncmp>
		//StepCon_offfetZero(-10);

	}

	if(!strncmp((const char*)cmd, "0", len)) {
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4913      	ldr	r1, [pc, #76]	; (8001fdc <UART1_Cmd_Callback+0xe4>)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f004 f99b 	bl	80062cc <strncmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <UART1_Cmd_Callback+0xaa>
		enable = 0;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <UART1_Cmd_Callback+0xe8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]

	}

	if(!strncmp((const char*)cmd, "3", len)) {
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	490f      	ldr	r1, [pc, #60]	; (8001fe4 <UART1_Cmd_Callback+0xec>)
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f004 f98f 	bl	80062cc <strncmp>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <UART1_Cmd_Callback+0xc2>
		enable = 1;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <UART1_Cmd_Callback+0xe8>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]




//
asm("NOP");
 8001fba:	bf00      	nop
 8001fbc:	e000      	b.n	8001fc0 <UART1_Cmd_Callback+0xc8>
	if(!len) return;
 8001fbe:	bf00      	nop
	/*----------------------------*/
}
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08008810 	.word	0x08008810
 8001fcc:	20000678 	.word	0x20000678
 8001fd0:	08008814 	.word	0x08008814
 8001fd4:	08008818 	.word	0x08008818
 8001fd8:	0800881c 	.word	0x0800881c
 8001fdc:	08008820 	.word	0x08008820
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	08008824 	.word	0x08008824

08001fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x16>
		StepCon_pulseTick();
 8001ffa:	f7ff fa3d 	bl	8001478 <StepCon_pulseTick>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8002008:	f000 fae8 	bl	80025dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40001000 	.word	0x40001000

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002020:	e7fe      	b.n	8002020 <Error_Handler+0x8>
	...

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_MspInit+0x4c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_MspInit+0x4c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_MspInit+0x4c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_MspInit+0x4c>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_MspInit+0x4c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d116      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_TIM_Base_MspInit+0x70>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_TIM_Base_MspInit+0x70>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_TIM_Base_MspInit+0x70>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	201c      	movs	r0, #28
 80020a8:	f000 fb70 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ac:	201c      	movs	r0, #28
 80020ae:	f000 fb89 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020b2:	e012      	b.n	80020da <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_TIM_Base_MspInit+0x74>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10d      	bne.n	80020da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_TIM_Base_MspInit+0x70>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_TIM_Base_MspInit+0x70>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_TIM_Base_MspInit+0x70>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40000400 	.word	0x40000400

080020ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a35      	ldr	r2, [pc, #212]	; (80021e0 <HAL_UART_MspInit+0xf4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d163      	bne.n	80021d6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <HAL_UART_MspInit+0xf8>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a33      	ldr	r2, [pc, #204]	; (80021e4 <HAL_UART_MspInit+0xf8>)
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_UART_MspInit+0xf8>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_UART_MspInit+0xf8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <HAL_UART_MspInit+0xf8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_UART_MspInit+0xf8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002146:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002158:	2307      	movs	r3, #7
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4821      	ldr	r0, [pc, #132]	; (80021e8 <HAL_UART_MspInit+0xfc>)
 8002164:	f000 ff3e 	bl	8002fe4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_UART_MspInit+0x100>)
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <HAL_UART_MspInit+0x104>)
 800216c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_UART_MspInit+0x100>)
 8002170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002174:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_UART_MspInit+0x100>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_UART_MspInit+0x100>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_UART_MspInit+0x100>)
 8002184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002188:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_UART_MspInit+0x100>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_UART_MspInit+0x100>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_UART_MspInit+0x100>)
 8002198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800219c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_UART_MspInit+0x100>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_UART_MspInit+0x100>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021aa:	4810      	ldr	r0, [pc, #64]	; (80021ec <HAL_UART_MspInit+0x100>)
 80021ac:	f000 fb18 	bl	80027e0 <HAL_DMA_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021b6:	f7ff ff2f 	bl	8002018 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_UART_MspInit+0x100>)
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_UART_MspInit+0x100>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2025      	movs	r0, #37	; 0x25
 80021cc:	f000 fade 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021d0:	2025      	movs	r0, #37	; 0x25
 80021d2:	f000 faf7 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	20000610 	.word	0x20000610
 80021f0:	40026440 	.word	0x40026440

080021f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <HAL_InitTick+0xe4>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a32      	ldr	r2, [pc, #200]	; (80022d8 <HAL_InitTick+0xe4>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_InitTick+0xe4>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002220:	f107 0210 	add.w	r2, r7, #16
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f001 fd50 	bl	8003cd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800223a:	f001 fd21 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 800223e:	6378      	str	r0, [r7, #52]	; 0x34
 8002240:	e004      	b.n	800224c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002242:	f001 fd1d 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8002246:	4603      	mov	r3, r0
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800224c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_InitTick+0xe8>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	0c9b      	lsrs	r3, r3, #18
 8002256:	3b01      	subs	r3, #1
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_InitTick+0xec>)
 800225c:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_InitTick+0xf0>)
 800225e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_InitTick+0xec>)
 8002262:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002266:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_InitTick+0xec>)
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_InitTick+0xec>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_InitTick+0xec>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_InitTick+0xec>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002280:	4817      	ldr	r0, [pc, #92]	; (80022e0 <HAL_InitTick+0xec>)
 8002282:	f001 fd57 	bl	8003d34 <HAL_TIM_Base_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800228c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11b      	bne.n	80022cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002294:	4812      	ldr	r0, [pc, #72]	; (80022e0 <HAL_InitTick+0xec>)
 8002296:	f001 fe05 	bl	8003ea4 <HAL_TIM_Base_Start_IT>
 800229a:	4603      	mov	r3, r0
 800229c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022a8:	2036      	movs	r0, #54	; 0x36
 80022aa:	f000 fa8b 	bl	80027c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d808      	bhi.n	80022c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	2036      	movs	r0, #54	; 0x36
 80022ba:	f000 fa67 	bl	800278c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_InitTick+0xf4>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e002      	b.n	80022cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3738      	adds	r7, #56	; 0x38
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	20000720 	.word	0x20000720
 80022e4:	40001000 	.word	0x40001000
 80022e8:	20000008 	.word	0x20000008

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <TIM2_IRQHandler+0x10>)
 800234a:	f001 fe1b 	bl	8003f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000053c 	.word	0x2000053c

08002358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <USART1_IRQHandler+0x10>)
 800235e:	f002 fa95 	bl	800488c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200005cc 	.word	0x200005cc

0800236c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <TIM6_DAC_IRQHandler+0x10>)
 8002372:	f001 fe07 	bl	8003f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000720 	.word	0x20000720

08002380 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <DMA2_Stream2_IRQHandler+0x10>)
 8002386:	f000 fbc3 	bl	8002b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000610 	.word	0x20000610

08002394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_kill>:

int _kill(int pid, int sig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ae:	f003 faf1 	bl	8005994 <__errno>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2216      	movs	r2, #22
 80023b6:	601a      	str	r2, [r3, #0]
  return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_exit>:

void _exit (int status)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ffe7 	bl	80023a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d6:	e7fe      	b.n	80023d6 <_exit+0x12>

080023d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e00a      	b.n	8002400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ea:	f3af 8000 	nop.w
 80023ee:	4601      	mov	r1, r0
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	60ba      	str	r2, [r7, #8]
 80023f6:	b2ca      	uxtb	r2, r1
 80023f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	dbf0      	blt.n	80023ea <_read+0x12>
  }

  return len;
 8002408:	687b      	ldr	r3, [r7, #4]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e009      	b.n	8002438 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	60ba      	str	r2, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	dbf1      	blt.n	8002424 <_write+0x12>
  }
  return len;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_close>:

int _close(int file)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002472:	605a      	str	r2, [r3, #4]
  return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_isatty>:

int _isatty(int file)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <_sbrk+0x5c>)
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <_sbrk+0x60>)
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <_sbrk+0x64>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <_sbrk+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d207      	bcs.n	80024f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e4:	f003 fa56 	bl	8005994 <__errno>
 80024e8:	4603      	mov	r3, r0
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	e009      	b.n	8002508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <_sbrk+0x64>)
 8002504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20030000 	.word	0x20030000
 8002514:	00000400 	.word	0x00000400
 8002518:	20000768 	.word	0x20000768
 800251c:	20000780 	.word	0x20000780

08002520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <SystemInit+0x20>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	4a05      	ldr	r2, [pc, #20]	; (8002540 <SystemInit+0x20>)
 800252c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800257c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254a:	490e      	ldr	r1, [pc, #56]	; (8002584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002560:	4c0b      	ldr	r4, [pc, #44]	; (8002590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800256e:	f7ff ffd7 	bl	8002520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f003 fa15 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7ff f977 	bl	8001868 <main>
  bx  lr    
 800257a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800257c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002584:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002588:	08008c34 	.word	0x08008c34
  ldr r2, =_sbss
 800258c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002590:	20000780 	.word	0x20000780

08002594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC_IRQHandler>
	...

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_Init+0x40>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_Init+0x40>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x40>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 f8d8 	bl	8002776 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	200f      	movs	r0, #15
 80025c8:	f7ff fe14 	bl	80021f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fd2a 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	2000076c 	.word	0x2000076c

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000076c 	.word	0x2000076c

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff4c 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279e:	f7ff ff61 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f7ff ffb1 	bl	8002710 <NVIC_EncodePriority>
 80027ae:	4602      	mov	r2, r0
 80027b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff80 	bl	80026bc <__NVIC_SetPriority>
}
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff54 	bl	8002680 <__NVIC_EnableIRQ>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff ff0a 	bl	8002604 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e099      	b.n	8002930 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281c:	e00f      	b.n	800283e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800281e:	f7ff fef1 	bl	8002604 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b05      	cmp	r3, #5
 800282a:	d908      	bls.n	800283e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e078      	b.n	8002930 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e8      	bne.n	800281e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_DMA_Init+0x158>)
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2b04      	cmp	r3, #4
 8002896:	d107      	bne.n	80028a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4313      	orrs	r3, r2
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f023 0307 	bic.w	r3, r3, #7
 80028be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d117      	bne.n	8002902 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00e      	beq.n	8002902 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fb01 	bl	8002eec <DMA_CheckFifoParam>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028fe:	2301      	movs	r3, #1
 8002900:	e016      	b.n	8002930 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fab8 	bl	8002e80 <DMA_CalcBaseAndBitshift>
 8002910:	4603      	mov	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	223f      	movs	r2, #63	; 0x3f
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	f010803f 	.word	0xf010803f

0800293c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Start_IT+0x26>
 800295e:	2302      	movs	r3, #2
 8002960:	e040      	b.n	80029e4 <HAL_DMA_Start_IT+0xa8>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d12f      	bne.n	80029d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fa4a 	bl	8002e24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	223f      	movs	r2, #63	; 0x3f
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0216 	orr.w	r2, r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e005      	b.n	80029e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029fa:	f7ff fe03 	bl	8002604 <HAL_GetTick>
 80029fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d008      	beq.n	8002a1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e052      	b.n	8002ac4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0216 	bic.w	r2, r2, #22
 8002a2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <HAL_DMA_Abort+0x62>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0208 	bic.w	r2, r2, #8
 8002a5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6e:	e013      	b.n	8002a98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a70:	f7ff fdc8 	bl	8002604 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d90c      	bls.n	8002a98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2203      	movs	r2, #3
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e015      	b.n	8002ac4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e4      	bne.n	8002a70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	223f      	movs	r2, #63	; 0x3f
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00c      	b.n	8002b04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2205      	movs	r2, #5
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b1c:	4b8e      	ldr	r3, [pc, #568]	; (8002d58 <HAL_DMA_IRQHandler+0x248>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a8e      	ldr	r2, [pc, #568]	; (8002d5c <HAL_DMA_IRQHandler+0x24c>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0a9b      	lsrs	r3, r3, #10
 8002b28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01a      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2208      	movs	r2, #8
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2201      	movs	r2, #1
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f043 0202 	orr.w	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d012      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00b      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2210      	movs	r2, #16
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d043      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d03c      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d018      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d108      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d024      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
 8002c3e:	e01f      	b.n	8002c80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
 8002c50:	e016      	b.n	8002c80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0208 	bic.w	r2, r2, #8
 8002c6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	2220      	movs	r2, #32
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 808f 	beq.w	8002db0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8087 	beq.w	8002db0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d136      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0216 	bic.w	r2, r2, #22
 8002cc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <HAL_DMA_IRQHandler+0x1da>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0208 	bic.w	r2, r2, #8
 8002cf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	223f      	movs	r2, #63	; 0x3f
 8002d00:	409a      	lsls	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d07e      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
        }
        return;
 8002d26:	e079      	b.n	8002e1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01d      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10d      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d031      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
 8002d54:	e02c      	b.n	8002db0 <HAL_DMA_IRQHandler+0x2a0>
 8002d56:	bf00      	nop
 8002d58:	20000004 	.word	0x20000004
 8002d5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d023      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
 8002d70:	e01e      	b.n	8002db0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10f      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0210 	bic.w	r2, r2, #16
 8002d8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d032      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2205      	movs	r2, #5
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	3301      	adds	r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d307      	bcc.n	8002df8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f2      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x2cc>
 8002df6:	e000      	b.n	8002dfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002df8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e000      	b.n	8002e1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e1c:	bf00      	nop
    }
  }
}
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d108      	bne.n	8002e64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e62:	e007      	b.n	8002e74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	3b10      	subs	r3, #16
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d909      	bls.n	8002ec2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	1d1a      	adds	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8002ec0:	e007      	b.n	8002ed2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	aaaaaaab 	.word	0xaaaaaaab
 8002ee8:	08008840 	.word	0x08008840

08002eec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11f      	bne.n	8002f46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d856      	bhi.n	8002fba <DMA_CheckFifoParam+0xce>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <DMA_CheckFifoParam+0x28>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f37 	.word	0x08002f37
 8002f1c:	08002f25 	.word	0x08002f25
 8002f20:	08002fbb 	.word	0x08002fbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d046      	beq.n	8002fbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f34:	e043      	b.n	8002fbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f3e:	d140      	bne.n	8002fc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f44:	e03d      	b.n	8002fc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4e:	d121      	bne.n	8002f94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d837      	bhi.n	8002fc6 <DMA_CheckFifoParam+0xda>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <DMA_CheckFifoParam+0x70>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f73 	.word	0x08002f73
 8002f64:	08002f6d 	.word	0x08002f6d
 8002f68:	08002f85 	.word	0x08002f85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f70:	e030      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d025      	beq.n	8002fca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f82:	e022      	b.n	8002fca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f8c:	d11f      	bne.n	8002fce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f92:	e01c      	b.n	8002fce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d903      	bls.n	8002fa2 <DMA_CheckFifoParam+0xb6>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d003      	beq.n	8002fa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fa0:	e018      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa6:	e015      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00e      	beq.n	8002fd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	e00b      	b.n	8002fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e00a      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e008      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e006      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e004      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e002      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e177      	b.n	80032f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 8166 	bne.w	80032ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d005      	beq.n	8003036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003032:	2b02      	cmp	r3, #2
 8003034:	d130      	bne.n	8003098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800306c:	2201      	movs	r2, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 0201 	and.w	r2, r3, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d017      	beq.n	80030d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d123      	bne.n	8003128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80c0 	beq.w	80032ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b66      	ldr	r3, [pc, #408]	; (8003308 <HAL_GPIO_Init+0x324>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a65      	ldr	r2, [pc, #404]	; (8003308 <HAL_GPIO_Init+0x324>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_GPIO_Init+0x324>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003186:	4a61      	ldr	r2, [pc, #388]	; (800330c <HAL_GPIO_Init+0x328>)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_GPIO_Init+0x32c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d037      	beq.n	8003222 <HAL_GPIO_Init+0x23e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_GPIO_Init+0x330>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_GPIO_Init+0x23a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a56      	ldr	r2, [pc, #344]	; (8003318 <HAL_GPIO_Init+0x334>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_Init+0x236>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a55      	ldr	r2, [pc, #340]	; (800331c <HAL_GPIO_Init+0x338>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_Init+0x232>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a54      	ldr	r2, [pc, #336]	; (8003320 <HAL_GPIO_Init+0x33c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x22e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a53      	ldr	r2, [pc, #332]	; (8003324 <HAL_GPIO_Init+0x340>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x22a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_GPIO_Init+0x344>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x226>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a51      	ldr	r2, [pc, #324]	; (800332c <HAL_GPIO_Init+0x348>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x222>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_GPIO_Init+0x34c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x21e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_GPIO_Init+0x350>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x21a>
 80031fa:	2309      	movs	r3, #9
 80031fc:	e012      	b.n	8003224 <HAL_GPIO_Init+0x240>
 80031fe:	230a      	movs	r3, #10
 8003200:	e010      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003202:	2308      	movs	r3, #8
 8003204:	e00e      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003206:	2307      	movs	r3, #7
 8003208:	e00c      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800320a:	2306      	movs	r3, #6
 800320c:	e00a      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800320e:	2305      	movs	r3, #5
 8003210:	e008      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003212:	2304      	movs	r3, #4
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003222:	2300      	movs	r3, #0
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003234:	4935      	ldr	r1, [pc, #212]	; (800330c <HAL_GPIO_Init+0x328>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <HAL_GPIO_Init+0x354>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a34      	ldr	r2, [pc, #208]	; (8003338 <HAL_GPIO_Init+0x354>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_GPIO_Init+0x354>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a29      	ldr	r2, [pc, #164]	; (8003338 <HAL_GPIO_Init+0x354>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003296:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_GPIO_Init+0x354>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ba:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_GPIO_Init+0x354>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_GPIO_Init+0x354>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <HAL_GPIO_Init+0x354>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f ae84 	bls.w	8003000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40013800 	.word	0x40013800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400
 8003318:	40020800 	.word	0x40020800
 800331c:	40020c00 	.word	0x40020c00
 8003320:	40021000 	.word	0x40021000
 8003324:	40021400 	.word	0x40021400
 8003328:	40021800 	.word	0x40021800
 800332c:	40021c00 	.word	0x40021c00
 8003330:	40022000 	.word	0x40022000
 8003334:	40022400 	.word	0x40022400
 8003338:	40013c00 	.word	0x40013c00

0800333c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e001      	b.n	800335e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
 8003378:	4613      	mov	r3, r2
 800337a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800337c:	787b      	ldrb	r3, [r7, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003388:	e003      	b.n	8003392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	041a      	lsls	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e267      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d075      	beq.n	80034aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d00c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ca:	4b85      	ldr	r3, [pc, #532]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d112      	bne.n	80033fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d6:	4b82      	ldr	r3, [pc, #520]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e2:	d10b      	bne.n	80033fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d05b      	beq.n	80034a8 <HAL_RCC_OscConfig+0x108>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d157      	bne.n	80034a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e242      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d106      	bne.n	8003414 <HAL_RCC_OscConfig+0x74>
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a75      	ldr	r2, [pc, #468]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e01d      	b.n	8003450 <HAL_RCC_OscConfig+0xb0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x98>
 800341e:	4b70      	ldr	r3, [pc, #448]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6f      	ldr	r2, [pc, #444]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6c      	ldr	r2, [pc, #432]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0xb0>
 8003438:	4b69      	ldr	r3, [pc, #420]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a68      	ldr	r2, [pc, #416]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b66      	ldr	r3, [pc, #408]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a65      	ldr	r2, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800344a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7ff f8d4 	bl	8002604 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7ff f8d0 	bl	8002604 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e207      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0xc0>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7ff f8c0 	bl	8002604 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003488:	f7ff f8bc 	bl	8002604 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1f3      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0xe8>
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d063      	beq.n	800357e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d11c      	bne.n	8003508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d116      	bne.n	8003508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_RCC_OscConfig+0x152>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1c7      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	e03a      	b.n	800357e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003510:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <HAL_RCC_OscConfig+0x244>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7ff f875 	bl	8002604 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800351e:	f7ff f871 	bl	8002604 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e1a8      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4925      	ldr	r1, [pc, #148]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCC_OscConfig+0x244>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7ff f854 	bl	8002604 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003560:	f7ff f850 	bl	8002604 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e187      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d036      	beq.n	80035f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_RCC_OscConfig+0x248>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7ff f834 	bl	8002604 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a0:	f7ff f830 	bl	8002604 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e167      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_OscConfig+0x240>)
 80035b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x200>
 80035be:	e01b      	b.n	80035f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_OscConfig+0x248>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7ff f81d 	bl	8002604 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	e00e      	b.n	80035ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ce:	f7ff f819 	bl	8002604 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d907      	bls.n	80035ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e150      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470000 	.word	0x42470000
 80035e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	4b88      	ldr	r3, [pc, #544]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ea      	bne.n	80035ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8097 	beq.w	8003734 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360a:	4b81      	ldr	r3, [pc, #516]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	4b7d      	ldr	r3, [pc, #500]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a7c      	ldr	r2, [pc, #496]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
 8003626:	4b7a      	ldr	r3, [pc, #488]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4b77      	ldr	r3, [pc, #476]	; (8003814 <HAL_RCC_OscConfig+0x474>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003642:	4b74      	ldr	r3, [pc, #464]	; (8003814 <HAL_RCC_OscConfig+0x474>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a73      	ldr	r2, [pc, #460]	; (8003814 <HAL_RCC_OscConfig+0x474>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364e:	f7fe ffd9 	bl	8002604 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fe ffd5 	bl	8002604 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e10c      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <HAL_RCC_OscConfig+0x474>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x2ea>
 800367c:	4b64      	ldr	r3, [pc, #400]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a63      	ldr	r2, [pc, #396]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	e01c      	b.n	80036c4 <HAL_RCC_OscConfig+0x324>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x30c>
 8003692:	4b5f      	ldr	r3, [pc, #380]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a5e      	ldr	r2, [pc, #376]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	4b5c      	ldr	r3, [pc, #368]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a5b      	ldr	r2, [pc, #364]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0x324>
 80036ac:	4b58      	ldr	r3, [pc, #352]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a57      	ldr	r2, [pc, #348]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	4b55      	ldr	r3, [pc, #340]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a54      	ldr	r2, [pc, #336]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80036be:	f023 0304 	bic.w	r3, r3, #4
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe ff9a 	bl	8002604 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe ff96 	bl	8002604 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0cb      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	4b49      	ldr	r3, [pc, #292]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0ee      	beq.n	80036d4 <HAL_RCC_OscConfig+0x334>
 80036f6:	e014      	b.n	8003722 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f8:	f7fe ff84 	bl	8002604 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe ff80 	bl	8002604 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0b5      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003716:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ee      	bne.n	8003700 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b39      	ldr	r3, [pc, #228]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	4a38      	ldr	r2, [pc, #224]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a1 	beq.w	8003880 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b08      	cmp	r3, #8
 8003748:	d05c      	beq.n	8003804 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d141      	bne.n	80037d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_OscConfig+0x478>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe ff54 	bl	8002604 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe ff50 	bl	8002604 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e087      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	4b27      	ldr	r3, [pc, #156]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	491b      	ldr	r1, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x478>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe ff29 	bl	8002604 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fe ff25 	bl	8002604 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e05c      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x416>
 80037d4:	e054      	b.n	8003880 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_RCC_OscConfig+0x478>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe ff12 	bl	8002604 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe ff0e 	bl	8002604 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e045      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_OscConfig+0x470>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x444>
 8003802:	e03d      	b.n	8003880 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e038      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
 8003810:	40023800 	.word	0x40023800
 8003814:	40007000 	.word	0x40007000
 8003818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x4ec>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d028      	beq.n	800387c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d121      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d11a      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003854:	4293      	cmp	r3, r2
 8003856:	d111      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	3b01      	subs	r3, #1
 8003866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800

08003890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0cc      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d90c      	bls.n	80038cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b63      	ldr	r3, [pc, #396]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0b8      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e4:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038fc:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a52      	ldr	r2, [pc, #328]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003908:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	494d      	ldr	r1, [pc, #308]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d044      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d119      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e07f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d003      	beq.n	800394e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394a:	2b03      	cmp	r3, #3
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394e:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e06f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e067      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396e:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f023 0203 	bic.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4934      	ldr	r1, [pc, #208]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003980:	f7fe fe40 	bl	8002604 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fe fe3c 	bl	8002604 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e04f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 020c 	and.w	r2, r3, #12
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1eb      	bne.n	8003988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d20c      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e032      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4916      	ldr	r1, [pc, #88]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	490e      	ldr	r1, [pc, #56]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a16:	f000 f821 	bl	8003a5c <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	490a      	ldr	r1, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fbdc 	bl	80021f4 <HAL_InitTick>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023c00 	.word	0x40023c00
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	08008828 	.word	0x08008828
 8003a54:	20000004 	.word	0x20000004
 8003a58:	20000008 	.word	0x20000008

08003a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a60:	b094      	sub	sp, #80	; 0x50
 8003a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	647b      	str	r3, [r7, #68]	; 0x44
 8003a68:	2300      	movs	r3, #0
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a74:	4b79      	ldr	r3, [pc, #484]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d00d      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x40>
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	f200 80e1 	bhi.w	8003c48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x34>
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a8e:	e0db      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4b73      	ldr	r3, [pc, #460]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a94:	e0db      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a96:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a9a:	e0d8      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a9c:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa6:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d063      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	2200      	movs	r2, #0
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003abc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae0:	0150      	lsls	r0, r2, #5
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	1a51      	subs	r1, r2, r1
 8003aea:	6139      	str	r1, [r7, #16]
 8003aec:	4629      	mov	r1, r5
 8003aee:	eb63 0301 	sbc.w	r3, r3, r1
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b00:	4659      	mov	r1, fp
 8003b02:	018b      	lsls	r3, r1, #6
 8003b04:	4651      	mov	r1, sl
 8003b06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	018a      	lsls	r2, r1, #6
 8003b0e:	4651      	mov	r1, sl
 8003b10:	ebb2 0801 	subs.w	r8, r2, r1
 8003b14:	4659      	mov	r1, fp
 8003b16:	eb63 0901 	sbc.w	r9, r3, r1
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b2e:	4690      	mov	r8, r2
 8003b30:	4699      	mov	r9, r3
 8003b32:	4623      	mov	r3, r4
 8003b34:	eb18 0303 	adds.w	r3, r8, r3
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	eb49 0303 	adc.w	r3, r9, r3
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	024b      	lsls	r3, r1, #9
 8003b52:	4621      	mov	r1, r4
 8003b54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b58:	4621      	mov	r1, r4
 8003b5a:	024a      	lsls	r2, r1, #9
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b62:	2200      	movs	r2, #0
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b6c:	f7fd f87c 	bl	8000c68 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b78:	e058      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	2200      	movs	r2, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	4611      	mov	r1, r2
 8003b86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b94:	4642      	mov	r2, r8
 8003b96:	464b      	mov	r3, r9
 8003b98:	f04f 0000 	mov.w	r0, #0
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	0159      	lsls	r1, r3, #5
 8003ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba6:	0150      	lsls	r0, r2, #5
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4641      	mov	r1, r8
 8003bae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bcc:	ebb2 040a 	subs.w	r4, r2, sl
 8003bd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	00eb      	lsls	r3, r5, #3
 8003bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be2:	00e2      	lsls	r2, r4, #3
 8003be4:	4614      	mov	r4, r2
 8003be6:	461d      	mov	r5, r3
 8003be8:	4643      	mov	r3, r8
 8003bea:	18e3      	adds	r3, r4, r3
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	464b      	mov	r3, r9
 8003bf0:	eb45 0303 	adc.w	r3, r5, r3
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c02:	4629      	mov	r1, r5
 8003c04:	028b      	lsls	r3, r1, #10
 8003c06:	4621      	mov	r1, r4
 8003c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	028a      	lsls	r2, r1, #10
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c16:	2200      	movs	r2, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	61fa      	str	r2, [r7, #28]
 8003c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c20:	f7fd f822 	bl	8000c68 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4613      	mov	r3, r2
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c46:	e002      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3750      	adds	r7, #80	; 0x50
 8003c54:	46bd      	mov	sp, r7
 8003c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	007a1200 	.word	0x007a1200

08003c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000004 	.word	0x20000004

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08008838 	.word	0x08008838

08003ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cac:	f7ff ffdc 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0b5b      	lsrs	r3, r3, #13
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08008838 	.word	0x08008838

08003cd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	220f      	movs	r2, #15
 8003cde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCC_GetClockConfig+0x5c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0203 	and.w	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_RCC_GetClockConfig+0x5c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_GetClockConfig+0x5c>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	08db      	lsrs	r3, r3, #3
 8003d0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <HAL_RCC_GetClockConfig+0x60>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40023c00 	.word	0x40023c00

08003d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e041      	b.n	8003dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fe f98a 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 fafe 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d001      	beq.n	8003dec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e046      	b.n	8003e7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_TIM_Base_Start+0xb4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <HAL_TIM_Base_Start+0x70>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d01d      	beq.n	8003e44 <HAL_TIM_Base_Start+0x70>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <HAL_TIM_Base_Start+0xb8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <HAL_TIM_Base_Start+0x70>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_TIM_Base_Start+0xbc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_TIM_Base_Start+0x70>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <HAL_TIM_Base_Start+0xc0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <HAL_TIM_Base_Start+0x70>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_TIM_Base_Start+0xc4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_TIM_Base_Start+0x70>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_TIM_Base_Start+0xc8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_TIM_Base_Start+0x70>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_TIM_Base_Start+0xcc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d111      	bne.n	8003e68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d010      	beq.n	8003e78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	e007      	b.n	8003e78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40001800 	.word	0x40001800

08003ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d001      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e04e      	b.n	8003f5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d022      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d01d      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_TIM_Base_Start_IT+0xc8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d018      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d010      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	e007      	b.n	8003f58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40001800 	.word	0x40001800

08003f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f9b5 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f9a7 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f9b8 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0204 	mvn.w	r2, #4
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f98b 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f97d 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f98e 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b08      	cmp	r3, #8
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0208 	mvn.w	r2, #8
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2204      	movs	r2, #4
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f961 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f953 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f964 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0210 	mvn.w	r2, #16
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2208      	movs	r2, #8
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f937 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f929 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f93a 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0201 	mvn.w	r2, #1
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd ff70 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d10e      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d107      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fae0 	bl	80046f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d10e      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d107      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8ff 	bl	800435e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b20      	cmp	r3, #32
 800416c:	d10e      	bne.n	800418c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b20      	cmp	r3, #32
 800417a:	d107      	bne.n	800418c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0220 	mvn.w	r2, #32
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 faaa 	bl	80046e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_TIM_ConfigClockSource+0x1c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e0b4      	b.n	800431a <HAL_TIM_ConfigClockSource+0x186>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e8:	d03e      	beq.n	8004268 <HAL_TIM_ConfigClockSource+0xd4>
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ee:	f200 8087 	bhi.w	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	f000 8086 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x172>
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d87f      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b70      	cmp	r3, #112	; 0x70
 8004202:	d01a      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xa6>
 8004204:	2b70      	cmp	r3, #112	; 0x70
 8004206:	d87b      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004208:	2b60      	cmp	r3, #96	; 0x60
 800420a:	d050      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x11a>
 800420c:	2b60      	cmp	r3, #96	; 0x60
 800420e:	d877      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004210:	2b50      	cmp	r3, #80	; 0x50
 8004212:	d03c      	beq.n	800428e <HAL_TIM_ConfigClockSource+0xfa>
 8004214:	2b50      	cmp	r3, #80	; 0x50
 8004216:	d873      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d058      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x13a>
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d86f      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004220:	2b30      	cmp	r3, #48	; 0x30
 8004222:	d064      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004224:	2b30      	cmp	r3, #48	; 0x30
 8004226:	d86b      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d060      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	2b20      	cmp	r3, #32
 800422e:	d867      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d05c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004234:	2b10      	cmp	r3, #16
 8004236:	d05a      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004238:	e062      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6899      	ldr	r1, [r3, #8]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f000 f9ad 	bl	80045a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800425c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	609a      	str	r2, [r3, #8]
      break;
 8004266:	e04f      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6899      	ldr	r1, [r3, #8]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f000 f996 	bl	80045a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800428a:	609a      	str	r2, [r3, #8]
      break;
 800428c:	e03c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	461a      	mov	r2, r3
 800429c:	f000 f90a 	bl	80044b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2150      	movs	r1, #80	; 0x50
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f963 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 80042ac:	e02c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 f929 	bl	8004512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2160      	movs	r1, #96	; 0x60
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f953 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 80042cc:	e01c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	461a      	mov	r2, r3
 80042dc:	f000 f8ea 	bl	80044b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f943 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 80042ec:	e00c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f000 f93a 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 80042fe:	e003      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      break;
 8004304:	e000      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a40      	ldr	r2, [pc, #256]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3d      	ldr	r2, [pc, #244]	; (800448c <TIM_Base_SetConfig+0x118>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3c      	ldr	r2, [pc, #240]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3a      	ldr	r2, [pc, #232]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2f      	ldr	r2, [pc, #188]	; (8004488 <TIM_Base_SetConfig+0x114>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d027      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2c      	ldr	r2, [pc, #176]	; (800448c <TIM_Base_SetConfig+0x118>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d023      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2b      	ldr	r2, [pc, #172]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a29      	ldr	r2, [pc, #164]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a28      	ldr	r2, [pc, #160]	; (800449c <TIM_Base_SetConfig+0x128>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <TIM_Base_SetConfig+0x12c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <TIM_Base_SetConfig+0x130>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <TIM_Base_SetConfig+0x134>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a24      	ldr	r2, [pc, #144]	; (80044ac <TIM_Base_SetConfig+0x138>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <TIM_Base_SetConfig+0x13c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d103      	bne.n	8004474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	615a      	str	r2, [r3, #20]
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40010400 	.word	0x40010400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800
 80044a8:	40001800 	.word	0x40001800
 80044ac:	40001c00 	.word	0x40001c00
 80044b0:	40002000 	.word	0x40002000

080044b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 030a 	bic.w	r3, r3, #10
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800453c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800454e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	f043 0307 	orr.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e05a      	b.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d022      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d01d      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d018      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d10c      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4313      	orrs	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40010400 	.word	0x40010400
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40001800 	.word	0x40001800

080046e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e03f      	b.n	800479a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd fcdc 	bl	80020ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fead 	bl	80054ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d130      	bne.n	800481e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_UART_Transmit_IT+0x26>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e029      	b.n	8004820 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_UART_Transmit_IT+0x38>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e022      	b.n	8004820 <HAL_UART_Transmit_IT+0x7e>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2221      	movs	r2, #33	; 0x21
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004818:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b20      	cmp	r3, #32
 8004844:	d11d      	bne.n	8004882 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_UART_Receive_DMA+0x26>
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e016      	b.n	8004884 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UART_Receive_DMA+0x38>
 8004860:	2302      	movs	r3, #2
 8004862:	e00f      	b.n	8004884 <HAL_UART_Receive_DMA+0x58>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	461a      	mov	r2, r3
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fbb7 	bl	8004fec <UART_Start_Receive_DMA>
 800487e:	4603      	mov	r3, r0
 8004880:	e000      	b.n	8004884 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b0ba      	sub	sp, #232	; 0xe8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10f      	bne.n	80048f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_UART_IRQHandler+0x66>
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fd23 	bl	8005336 <UART_Receive_IT>
      return;
 80048f0:	e256      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80de 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x22c>
 80048fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80d1 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_UART_IRQHandler+0xae>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_UART_IRQHandler+0xd2>
 8004946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0202 	orr.w	r2, r3, #2
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00b      	beq.n	8004982 <HAL_UART_IRQHandler+0xf6>
 800496a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f043 0204 	orr.w	r2, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d011      	beq.n	80049b2 <HAL_UART_IRQHandler+0x126>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f043 0208 	orr.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 81ed 	beq.w	8004d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_UART_IRQHandler+0x14e>
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fcae 	bl	8005336 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_UART_IRQHandler+0x17a>
 80049fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04f      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fbb6 	bl	8005178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d141      	bne.n	8004a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3314      	adds	r3, #20
 8004a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1d9      	bne.n	8004a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d013      	beq.n	8004a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	4a7d      	ldr	r2, [pc, #500]	; (8004c68 <HAL_UART_IRQHandler+0x3dc>)
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f826 	bl	8002acc <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e00e      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f99a 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00a      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f996 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e006      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f992 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ab2:	e170      	b.n	8004d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	bf00      	nop
    return;
 8004ab6:	e16e      	b.n	8004d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	f040 814a 	bne.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8143 	beq.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 813c 	beq.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	f040 80b4 	bne.w	8004c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8140 	beq.w	8004d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b22:	429a      	cmp	r2, r3
 8004b24:	f080 8139 	bcs.w	8004d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	f000 8088 	beq.w	8004c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1d9      	bne.n	8004b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e1      	bne.n	8004b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e3      	bne.n	8004c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fd fecf 	bl	80029ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8c0 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c64:	e099      	b.n	8004d9a <HAL_UART_IRQHandler+0x50e>
 8004c66:	bf00      	nop
 8004c68:	0800523f 	.word	0x0800523f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 808b 	beq.w	8004d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e3      	bne.n	8004c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3314      	adds	r3, #20
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cee:	633a      	str	r2, [r7, #48]	; 0x30
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e3      	bne.n	8004cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0310 	bic.w	r3, r3, #16
 8004d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d34:	61fa      	str	r2, [r7, #28]
 8004d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	69b9      	ldr	r1, [r7, #24]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	617b      	str	r3, [r7, #20]
   return(result);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e3      	bne.n	8004d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f848 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d54:	e023      	b.n	8004d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_UART_IRQHandler+0x4ea>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa79 	bl	8005266 <UART_Transmit_IT>
    return;
 8004d74:	e014      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <HAL_UART_IRQHandler+0x514>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fab9 	bl	8005306 <UART_EndTransmit_IT>
    return;
 8004d94:	e004      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
    return;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
      return;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
      return;
 8004d9e:	bf00      	nop
  }
}
 8004da0:	37e8      	adds	r7, #232	; 0xe8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop

08004da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b09c      	sub	sp, #112	; 0x70
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d172      	bne.n	8004efe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	667b      	str	r3, [r7, #100]	; 0x64
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e72:	647a      	str	r2, [r7, #68]	; 0x44
 8004e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	623b      	str	r3, [r7, #32]
   return(result);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e5      	bne.n	8004e86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d119      	bne.n	8004efe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f023 0310 	bic.w	r3, r3, #16
 8004ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eea:	61fa      	str	r2, [r7, #28]
 8004eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	69b9      	ldr	r1, [r7, #24]
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d106      	bne.n	8004f14 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f0e:	f7ff ff69 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f12:	e002      	b.n	8004f1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f16:	f7fc fbc9 	bl	80016ac <HAL_UART_RxCpltCallback>
}
 8004f1a:	bf00      	nop
 8004f1c:	3770      	adds	r7, #112	; 0x70
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f7ff ff4e 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f48:	e002      	b.n	8004f50 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff36 	bl	8004dbc <HAL_UART_RxHalfCpltCallback>
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b21      	cmp	r3, #33	; 0x21
 8004f8a:	d108      	bne.n	8004f9e <UART_DMAError+0x46>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f98:	68b8      	ldr	r0, [r7, #8]
 8004f9a:	f000 f8c5 	bl	8005128 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b22      	cmp	r3, #34	; 0x22
 8004fbe:	d108      	bne.n	8004fd2 <UART_DMAError+0x7a>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	f000 f8d3 	bl	8005178 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f043 0210 	orr.w	r2, r3, #16
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fde:	68b8      	ldr	r0, [r7, #8]
 8004fe0:	f7ff fef6 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b098      	sub	sp, #96	; 0x60
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2222      	movs	r2, #34	; 0x22
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	4a40      	ldr	r2, [pc, #256]	; (800511c <UART_Start_Receive_DMA+0x130>)
 800501a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	4a3f      	ldr	r2, [pc, #252]	; (8005120 <UART_Start_Receive_DMA+0x134>)
 8005022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	4a3e      	ldr	r2, [pc, #248]	; (8005124 <UART_Start_Receive_DMA+0x138>)
 800502a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	2200      	movs	r2, #0
 8005032:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005034:	f107 0308 	add.w	r3, r7, #8
 8005038:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	f7fd fc76 	bl	800293c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d019      	beq.n	80050aa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508c:	65bb      	str	r3, [r7, #88]	; 0x58
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005096:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005098:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800509c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80050a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	657b      	str	r3, [r7, #84]	; 0x54
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3314      	adds	r3, #20
 80050c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e5      	bne.n	80050aa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3314      	adds	r3, #20
 80050e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	617b      	str	r3, [r7, #20]
   return(result);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f4:	653b      	str	r3, [r7, #80]	; 0x50
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3314      	adds	r3, #20
 80050fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	6a39      	ldr	r1, [r7, #32]
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	61fb      	str	r3, [r7, #28]
   return(result);
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e5      	bne.n	80050de <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3760      	adds	r7, #96	; 0x60
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	08004dfd 	.word	0x08004dfd
 8005120:	08004f23 	.word	0x08004f23
 8005124:	08004f59 	.word	0x08004f59

08005128 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	61ba      	str	r2, [r7, #24]
 8005152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6979      	ldr	r1, [r7, #20]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	613b      	str	r3, [r7, #16]
   return(result);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800516c:	bf00      	nop
 800516e:	3724      	adds	r7, #36	; 0x24
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b095      	sub	sp, #84	; 0x54
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051a0:	643a      	str	r2, [r7, #64]	; 0x40
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e5      	bne.n	8005180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d119      	bne.n	8005224 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0310 	bic.w	r3, r3, #16
 8005206:	647b      	str	r3, [r7, #68]	; 0x44
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005210:	61ba      	str	r2, [r7, #24]
 8005212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	613b      	str	r3, [r7, #16]
   return(result);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005232:	bf00      	nop
 8005234:	3754      	adds	r7, #84	; 0x54
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fdb9 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b21      	cmp	r3, #33	; 0x21
 8005278:	d13e      	bne.n	80052f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005282:	d114      	bne.n	80052ae <UART_Transmit_IT+0x48>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d110      	bne.n	80052ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	1c9a      	adds	r2, r3, #2
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	621a      	str	r2, [r3, #32]
 80052ac:	e008      	b.n	80052c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	1c59      	adds	r1, r3, #1
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6211      	str	r1, [r2, #32]
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4619      	mov	r1, r3
 80052ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10f      	bne.n	80052f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	e000      	b.n	80052fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fd3e 	bl	8004da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b08c      	sub	sp, #48	; 0x30
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b22      	cmp	r3, #34	; 0x22
 8005348:	f040 80ab 	bne.w	80054a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d117      	bne.n	8005386 <UART_Receive_IT+0x50>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d113      	bne.n	8005386 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005374:	b29a      	uxth	r2, r3
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28
 8005384:	e026      	b.n	80053d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d007      	beq.n	80053aa <UART_Receive_IT+0x74>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <UART_Receive_IT+0x82>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e008      	b.n	80053ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	4619      	mov	r1, r3
 80053e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d15a      	bne.n	800549e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0220 	bic.w	r2, r2, #32
 80053f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	2b01      	cmp	r3, #1
 8005426:	d135      	bne.n	8005494 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f023 0310 	bic.w	r3, r3, #16
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544e:	623a      	str	r2, [r7, #32]
 8005450:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	69f9      	ldr	r1, [r7, #28]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	61bb      	str	r3, [r7, #24]
   return(result);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e5      	bne.n	800542e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b10      	cmp	r3, #16
 800546e:	d10a      	bne.n	8005486 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fca9 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
 8005492:	e002      	b.n	800549a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fc f909 	bl	80016ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e002      	b.n	80054a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e000      	b.n	80054a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
  }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3730      	adds	r7, #48	; 0x30
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b0:	b0c0      	sub	sp, #256	; 0x100
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	68d9      	ldr	r1, [r3, #12]
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	ea40 0301 	orr.w	r3, r0, r1
 80054d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005504:	f021 010c 	bic.w	r1, r1, #12
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005512:	430b      	orrs	r3, r1
 8005514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005526:	6999      	ldr	r1, [r3, #24]
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	ea40 0301 	orr.w	r3, r0, r1
 8005532:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b8f      	ldr	r3, [pc, #572]	; (8005778 <UART_SetConfig+0x2cc>)
 800553c:	429a      	cmp	r2, r3
 800553e:	d005      	beq.n	800554c <UART_SetConfig+0xa0>
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b8d      	ldr	r3, [pc, #564]	; (800577c <UART_SetConfig+0x2d0>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d104      	bne.n	8005556 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fe fbac 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8005550:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005554:	e003      	b.n	800555e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005556:	f7fe fb93 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 800555a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005568:	f040 810c 	bne.w	8005784 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005570:	2200      	movs	r2, #0
 8005572:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005576:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800557a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800557e:	4622      	mov	r2, r4
 8005580:	462b      	mov	r3, r5
 8005582:	1891      	adds	r1, r2, r2
 8005584:	65b9      	str	r1, [r7, #88]	; 0x58
 8005586:	415b      	adcs	r3, r3
 8005588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800558a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800558e:	4621      	mov	r1, r4
 8005590:	eb12 0801 	adds.w	r8, r2, r1
 8005594:	4629      	mov	r1, r5
 8005596:	eb43 0901 	adc.w	r9, r3, r1
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ae:	4690      	mov	r8, r2
 80055b0:	4699      	mov	r9, r3
 80055b2:	4623      	mov	r3, r4
 80055b4:	eb18 0303 	adds.w	r3, r8, r3
 80055b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055bc:	462b      	mov	r3, r5
 80055be:	eb49 0303 	adc.w	r3, r9, r3
 80055c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055da:	460b      	mov	r3, r1
 80055dc:	18db      	adds	r3, r3, r3
 80055de:	653b      	str	r3, [r7, #80]	; 0x50
 80055e0:	4613      	mov	r3, r2
 80055e2:	eb42 0303 	adc.w	r3, r2, r3
 80055e6:	657b      	str	r3, [r7, #84]	; 0x54
 80055e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055f0:	f7fb fb3a 	bl	8000c68 <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4b61      	ldr	r3, [pc, #388]	; (8005780 <UART_SetConfig+0x2d4>)
 80055fa:	fba3 2302 	umull	r2, r3, r3, r2
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	011c      	lsls	r4, r3, #4
 8005602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005606:	2200      	movs	r2, #0
 8005608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800560c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005610:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	1891      	adds	r1, r2, r2
 800561a:	64b9      	str	r1, [r7, #72]	; 0x48
 800561c:	415b      	adcs	r3, r3
 800561e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005620:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005624:	4641      	mov	r1, r8
 8005626:	eb12 0a01 	adds.w	sl, r2, r1
 800562a:	4649      	mov	r1, r9
 800562c:	eb43 0b01 	adc.w	fp, r3, r1
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800563c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005644:	4692      	mov	sl, r2
 8005646:	469b      	mov	fp, r3
 8005648:	4643      	mov	r3, r8
 800564a:	eb1a 0303 	adds.w	r3, sl, r3
 800564e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005652:	464b      	mov	r3, r9
 8005654:	eb4b 0303 	adc.w	r3, fp, r3
 8005658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005668:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800566c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005670:	460b      	mov	r3, r1
 8005672:	18db      	adds	r3, r3, r3
 8005674:	643b      	str	r3, [r7, #64]	; 0x40
 8005676:	4613      	mov	r3, r2
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	647b      	str	r3, [r7, #68]	; 0x44
 800567e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005686:	f7fb faef 	bl	8000c68 <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4611      	mov	r1, r2
 8005690:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <UART_SetConfig+0x2d4>)
 8005692:	fba3 2301 	umull	r2, r3, r3, r1
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2264      	movs	r2, #100	; 0x64
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	1acb      	subs	r3, r1, r3
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <UART_SetConfig+0x2d4>)
 80056a8:	fba3 2302 	umull	r2, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056b4:	441c      	add	r4, r3
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80056d0:	415b      	adcs	r3, r3
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056d8:	4641      	mov	r1, r8
 80056da:	1851      	adds	r1, r2, r1
 80056dc:	6339      	str	r1, [r7, #48]	; 0x30
 80056de:	4649      	mov	r1, r9
 80056e0:	414b      	adcs	r3, r1
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056f0:	4659      	mov	r1, fp
 80056f2:	00cb      	lsls	r3, r1, #3
 80056f4:	4651      	mov	r1, sl
 80056f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fa:	4651      	mov	r1, sl
 80056fc:	00ca      	lsls	r2, r1, #3
 80056fe:	4610      	mov	r0, r2
 8005700:	4619      	mov	r1, r3
 8005702:	4603      	mov	r3, r0
 8005704:	4642      	mov	r2, r8
 8005706:	189b      	adds	r3, r3, r2
 8005708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800570c:	464b      	mov	r3, r9
 800570e:	460a      	mov	r2, r1
 8005710:	eb42 0303 	adc.w	r3, r2, r3
 8005714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005724:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800572c:	460b      	mov	r3, r1
 800572e:	18db      	adds	r3, r3, r3
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
 8005732:	4613      	mov	r3, r2
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800573e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005742:	f7fb fa91 	bl	8000c68 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <UART_SetConfig+0x2d4>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	; 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	3332      	adds	r3, #50	; 0x32
 800575e:	4a08      	ldr	r2, [pc, #32]	; (8005780 <UART_SetConfig+0x2d4>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 0207 	and.w	r2, r3, #7
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4422      	add	r2, r4
 8005772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005774:	e105      	b.n	8005982 <UART_SetConfig+0x4d6>
 8005776:	bf00      	nop
 8005778:	40011000 	.word	0x40011000
 800577c:	40011400 	.word	0x40011400
 8005780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005788:	2200      	movs	r2, #0
 800578a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800578e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005796:	4642      	mov	r2, r8
 8005798:	464b      	mov	r3, r9
 800579a:	1891      	adds	r1, r2, r2
 800579c:	6239      	str	r1, [r7, #32]
 800579e:	415b      	adcs	r3, r3
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
 80057a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057a6:	4641      	mov	r1, r8
 80057a8:	1854      	adds	r4, r2, r1
 80057aa:	4649      	mov	r1, r9
 80057ac:	eb43 0501 	adc.w	r5, r3, r1
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	00eb      	lsls	r3, r5, #3
 80057ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057be:	00e2      	lsls	r2, r4, #3
 80057c0:	4614      	mov	r4, r2
 80057c2:	461d      	mov	r5, r3
 80057c4:	4643      	mov	r3, r8
 80057c6:	18e3      	adds	r3, r4, r3
 80057c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057cc:	464b      	mov	r3, r9
 80057ce:	eb45 0303 	adc.w	r3, r5, r3
 80057d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057f2:	4629      	mov	r1, r5
 80057f4:	008b      	lsls	r3, r1, #2
 80057f6:	4621      	mov	r1, r4
 80057f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057fc:	4621      	mov	r1, r4
 80057fe:	008a      	lsls	r2, r1, #2
 8005800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005804:	f7fb fa30 	bl	8000c68 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4b60      	ldr	r3, [pc, #384]	; (8005990 <UART_SetConfig+0x4e4>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	011c      	lsls	r4, r3, #4
 8005816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800581a:	2200      	movs	r2, #0
 800581c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005820:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	1891      	adds	r1, r2, r2
 800582e:	61b9      	str	r1, [r7, #24]
 8005830:	415b      	adcs	r3, r3
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005838:	4641      	mov	r1, r8
 800583a:	1851      	adds	r1, r2, r1
 800583c:	6139      	str	r1, [r7, #16]
 800583e:	4649      	mov	r1, r9
 8005840:	414b      	adcs	r3, r1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005850:	4659      	mov	r1, fp
 8005852:	00cb      	lsls	r3, r1, #3
 8005854:	4651      	mov	r1, sl
 8005856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585a:	4651      	mov	r1, sl
 800585c:	00ca      	lsls	r2, r1, #3
 800585e:	4610      	mov	r0, r2
 8005860:	4619      	mov	r1, r3
 8005862:	4603      	mov	r3, r0
 8005864:	4642      	mov	r2, r8
 8005866:	189b      	adds	r3, r3, r2
 8005868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800586c:	464b      	mov	r3, r9
 800586e:	460a      	mov	r2, r1
 8005870:	eb42 0303 	adc.w	r3, r2, r3
 8005874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	67bb      	str	r3, [r7, #120]	; 0x78
 8005882:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005890:	4649      	mov	r1, r9
 8005892:	008b      	lsls	r3, r1, #2
 8005894:	4641      	mov	r1, r8
 8005896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800589a:	4641      	mov	r1, r8
 800589c:	008a      	lsls	r2, r1, #2
 800589e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058a2:	f7fb f9e1 	bl	8000c68 <__aeabi_uldivmod>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4b39      	ldr	r3, [pc, #228]	; (8005990 <UART_SetConfig+0x4e4>)
 80058ac:	fba3 1302 	umull	r1, r3, r3, r2
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	2164      	movs	r1, #100	; 0x64
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	3332      	adds	r3, #50	; 0x32
 80058be:	4a34      	ldr	r2, [pc, #208]	; (8005990 <UART_SetConfig+0x4e4>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ca:	441c      	add	r4, r3
 80058cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d0:	2200      	movs	r2, #0
 80058d2:	673b      	str	r3, [r7, #112]	; 0x70
 80058d4:	677a      	str	r2, [r7, #116]	; 0x74
 80058d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058da:	4642      	mov	r2, r8
 80058dc:	464b      	mov	r3, r9
 80058de:	1891      	adds	r1, r2, r2
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	415b      	adcs	r3, r3
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ea:	4641      	mov	r1, r8
 80058ec:	1851      	adds	r1, r2, r1
 80058ee:	6039      	str	r1, [r7, #0]
 80058f0:	4649      	mov	r1, r9
 80058f2:	414b      	adcs	r3, r1
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005902:	4659      	mov	r1, fp
 8005904:	00cb      	lsls	r3, r1, #3
 8005906:	4651      	mov	r1, sl
 8005908:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800590c:	4651      	mov	r1, sl
 800590e:	00ca      	lsls	r2, r1, #3
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	4603      	mov	r3, r0
 8005916:	4642      	mov	r2, r8
 8005918:	189b      	adds	r3, r3, r2
 800591a:	66bb      	str	r3, [r7, #104]	; 0x68
 800591c:	464b      	mov	r3, r9
 800591e:	460a      	mov	r2, r1
 8005920:	eb42 0303 	adc.w	r3, r2, r3
 8005924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	663b      	str	r3, [r7, #96]	; 0x60
 8005930:	667a      	str	r2, [r7, #100]	; 0x64
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800593e:	4649      	mov	r1, r9
 8005940:	008b      	lsls	r3, r1, #2
 8005942:	4641      	mov	r1, r8
 8005944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005948:	4641      	mov	r1, r8
 800594a:	008a      	lsls	r2, r1, #2
 800594c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005950:	f7fb f98a 	bl	8000c68 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <UART_SetConfig+0x4e4>)
 800595a:	fba3 1302 	umull	r1, r3, r3, r2
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	2164      	movs	r1, #100	; 0x64
 8005962:	fb01 f303 	mul.w	r3, r1, r3
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	3332      	adds	r3, #50	; 0x32
 800596c:	4a08      	ldr	r2, [pc, #32]	; (8005990 <UART_SetConfig+0x4e4>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	f003 020f 	and.w	r2, r3, #15
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4422      	add	r2, r4
 8005980:	609a      	str	r2, [r3, #8]
}
 8005982:	bf00      	nop
 8005984:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005988:	46bd      	mov	sp, r7
 800598a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800598e:	bf00      	nop
 8005990:	51eb851f 	.word	0x51eb851f

08005994 <__errno>:
 8005994:	4b01      	ldr	r3, [pc, #4]	; (800599c <__errno+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000010 	.word	0x20000010

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4d0d      	ldr	r5, [pc, #52]	; (80059d8 <__libc_init_array+0x38>)
 80059a4:	4c0d      	ldr	r4, [pc, #52]	; (80059dc <__libc_init_array+0x3c>)
 80059a6:	1b64      	subs	r4, r4, r5
 80059a8:	10a4      	asrs	r4, r4, #2
 80059aa:	2600      	movs	r6, #0
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	4d0b      	ldr	r5, [pc, #44]	; (80059e0 <__libc_init_array+0x40>)
 80059b2:	4c0c      	ldr	r4, [pc, #48]	; (80059e4 <__libc_init_array+0x44>)
 80059b4:	f002 ff18 	bl	80087e8 <_init>
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	2600      	movs	r6, #0
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	08008c2c 	.word	0x08008c2c
 80059dc:	08008c2c 	.word	0x08008c2c
 80059e0:	08008c2c 	.word	0x08008c2c
 80059e4:	08008c30 	.word	0x08008c30

080059e8 <memset>:
 80059e8:	4402      	add	r2, r0
 80059ea:	4603      	mov	r3, r0
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d100      	bne.n	80059f2 <memset+0xa>
 80059f0:	4770      	bx	lr
 80059f2:	f803 1b01 	strb.w	r1, [r3], #1
 80059f6:	e7f9      	b.n	80059ec <memset+0x4>

080059f8 <__cvt>:
 80059f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	ec55 4b10 	vmov	r4, r5, d0
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	460e      	mov	r6, r1
 8005a04:	4619      	mov	r1, r3
 8005a06:	462b      	mov	r3, r5
 8005a08:	bfbb      	ittet	lt
 8005a0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a0e:	461d      	movlt	r5, r3
 8005a10:	2300      	movge	r3, #0
 8005a12:	232d      	movlt	r3, #45	; 0x2d
 8005a14:	700b      	strb	r3, [r1, #0]
 8005a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a1c:	4691      	mov	r9, r2
 8005a1e:	f023 0820 	bic.w	r8, r3, #32
 8005a22:	bfbc      	itt	lt
 8005a24:	4622      	movlt	r2, r4
 8005a26:	4614      	movlt	r4, r2
 8005a28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a2c:	d005      	beq.n	8005a3a <__cvt+0x42>
 8005a2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a32:	d100      	bne.n	8005a36 <__cvt+0x3e>
 8005a34:	3601      	adds	r6, #1
 8005a36:	2102      	movs	r1, #2
 8005a38:	e000      	b.n	8005a3c <__cvt+0x44>
 8005a3a:	2103      	movs	r1, #3
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	ab02      	add	r3, sp, #8
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	ec45 4b10 	vmov	d0, r4, r5
 8005a48:	4653      	mov	r3, sl
 8005a4a:	4632      	mov	r2, r6
 8005a4c:	f000 fd00 	bl	8006450 <_dtoa_r>
 8005a50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a54:	4607      	mov	r7, r0
 8005a56:	d102      	bne.n	8005a5e <__cvt+0x66>
 8005a58:	f019 0f01 	tst.w	r9, #1
 8005a5c:	d022      	beq.n	8005aa4 <__cvt+0xac>
 8005a5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a62:	eb07 0906 	add.w	r9, r7, r6
 8005a66:	d110      	bne.n	8005a8a <__cvt+0x92>
 8005a68:	783b      	ldrb	r3, [r7, #0]
 8005a6a:	2b30      	cmp	r3, #48	; 0x30
 8005a6c:	d10a      	bne.n	8005a84 <__cvt+0x8c>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2300      	movs	r3, #0
 8005a72:	4620      	mov	r0, r4
 8005a74:	4629      	mov	r1, r5
 8005a76:	f7fb f837 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a7a:	b918      	cbnz	r0, 8005a84 <__cvt+0x8c>
 8005a7c:	f1c6 0601 	rsb	r6, r6, #1
 8005a80:	f8ca 6000 	str.w	r6, [sl]
 8005a84:	f8da 3000 	ldr.w	r3, [sl]
 8005a88:	4499      	add	r9, r3
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fb f829 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a96:	b108      	cbz	r0, 8005a9c <__cvt+0xa4>
 8005a98:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a9c:	2230      	movs	r2, #48	; 0x30
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	454b      	cmp	r3, r9
 8005aa2:	d307      	bcc.n	8005ab4 <__cvt+0xbc>
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aa8:	1bdb      	subs	r3, r3, r7
 8005aaa:	4638      	mov	r0, r7
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	b004      	add	sp, #16
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	1c59      	adds	r1, r3, #1
 8005ab6:	9103      	str	r1, [sp, #12]
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	e7f0      	b.n	8005a9e <__cvt+0xa6>

08005abc <__exponent>:
 8005abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	bfb8      	it	lt
 8005ac4:	4249      	neglt	r1, r1
 8005ac6:	f803 2b02 	strb.w	r2, [r3], #2
 8005aca:	bfb4      	ite	lt
 8005acc:	222d      	movlt	r2, #45	; 0x2d
 8005ace:	222b      	movge	r2, #43	; 0x2b
 8005ad0:	2909      	cmp	r1, #9
 8005ad2:	7042      	strb	r2, [r0, #1]
 8005ad4:	dd2a      	ble.n	8005b2c <__exponent+0x70>
 8005ad6:	f10d 0407 	add.w	r4, sp, #7
 8005ada:	46a4      	mov	ip, r4
 8005adc:	270a      	movs	r7, #10
 8005ade:	46a6      	mov	lr, r4
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ae6:	fb07 1516 	mls	r5, r7, r6, r1
 8005aea:	3530      	adds	r5, #48	; 0x30
 8005aec:	2a63      	cmp	r2, #99	; 0x63
 8005aee:	f104 34ff 	add.w	r4, r4, #4294967295
 8005af2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005af6:	4631      	mov	r1, r6
 8005af8:	dcf1      	bgt.n	8005ade <__exponent+0x22>
 8005afa:	3130      	adds	r1, #48	; 0x30
 8005afc:	f1ae 0502 	sub.w	r5, lr, #2
 8005b00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b04:	1c44      	adds	r4, r0, #1
 8005b06:	4629      	mov	r1, r5
 8005b08:	4561      	cmp	r1, ip
 8005b0a:	d30a      	bcc.n	8005b22 <__exponent+0x66>
 8005b0c:	f10d 0209 	add.w	r2, sp, #9
 8005b10:	eba2 020e 	sub.w	r2, r2, lr
 8005b14:	4565      	cmp	r5, ip
 8005b16:	bf88      	it	hi
 8005b18:	2200      	movhi	r2, #0
 8005b1a:	4413      	add	r3, r2
 8005b1c:	1a18      	subs	r0, r3, r0
 8005b1e:	b003      	add	sp, #12
 8005b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b2a:	e7ed      	b.n	8005b08 <__exponent+0x4c>
 8005b2c:	2330      	movs	r3, #48	; 0x30
 8005b2e:	3130      	adds	r1, #48	; 0x30
 8005b30:	7083      	strb	r3, [r0, #2]
 8005b32:	70c1      	strb	r1, [r0, #3]
 8005b34:	1d03      	adds	r3, r0, #4
 8005b36:	e7f1      	b.n	8005b1c <__exponent+0x60>

08005b38 <_printf_float>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	ed2d 8b02 	vpush	{d8}
 8005b40:	b08d      	sub	sp, #52	; 0x34
 8005b42:	460c      	mov	r4, r1
 8005b44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b48:	4616      	mov	r6, r2
 8005b4a:	461f      	mov	r7, r3
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	f001 fa6d 	bl	800702c <_localeconv_r>
 8005b52:	f8d0 a000 	ldr.w	sl, [r0]
 8005b56:	4650      	mov	r0, sl
 8005b58:	f7fa fb4a 	bl	80001f0 <strlen>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	9305      	str	r3, [sp, #20]
 8005b64:	f8d8 3000 	ldr.w	r3, [r8]
 8005b68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b6c:	3307      	adds	r3, #7
 8005b6e:	f023 0307 	bic.w	r3, r3, #7
 8005b72:	f103 0208 	add.w	r2, r3, #8
 8005b76:	f8c8 2000 	str.w	r2, [r8]
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b8a:	9307      	str	r3, [sp, #28]
 8005b8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b90:	ee08 0a10 	vmov	s16, r0
 8005b94:	4b9f      	ldr	r3, [pc, #636]	; (8005e14 <_printf_float+0x2dc>)
 8005b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9e:	f7fa ffd5 	bl	8000b4c <__aeabi_dcmpun>
 8005ba2:	bb88      	cbnz	r0, 8005c08 <_printf_float+0xd0>
 8005ba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ba8:	4b9a      	ldr	r3, [pc, #616]	; (8005e14 <_printf_float+0x2dc>)
 8005baa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bae:	f7fa ffaf 	bl	8000b10 <__aeabi_dcmple>
 8005bb2:	bb48      	cbnz	r0, 8005c08 <_printf_float+0xd0>
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa ff9e 	bl	8000afc <__aeabi_dcmplt>
 8005bc0:	b110      	cbz	r0, 8005bc8 <_printf_float+0x90>
 8005bc2:	232d      	movs	r3, #45	; 0x2d
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc8:	4b93      	ldr	r3, [pc, #588]	; (8005e18 <_printf_float+0x2e0>)
 8005bca:	4894      	ldr	r0, [pc, #592]	; (8005e1c <_printf_float+0x2e4>)
 8005bcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bd0:	bf94      	ite	ls
 8005bd2:	4698      	movls	r8, r3
 8005bd4:	4680      	movhi	r8, r0
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	9b05      	ldr	r3, [sp, #20]
 8005bdc:	f023 0204 	bic.w	r2, r3, #4
 8005be0:	6022      	str	r2, [r4, #0]
 8005be2:	f04f 0900 	mov.w	r9, #0
 8005be6:	9700      	str	r7, [sp, #0]
 8005be8:	4633      	mov	r3, r6
 8005bea:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f9d8 	bl	8005fa4 <_printf_common>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	f040 8090 	bne.w	8005d1a <_printf_float+0x1e2>
 8005bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfe:	b00d      	add	sp, #52	; 0x34
 8005c00:	ecbd 8b02 	vpop	{d8}
 8005c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4649      	mov	r1, r9
 8005c10:	f7fa ff9c 	bl	8000b4c <__aeabi_dcmpun>
 8005c14:	b140      	cbz	r0, 8005c28 <_printf_float+0xf0>
 8005c16:	464b      	mov	r3, r9
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bfbc      	itt	lt
 8005c1c:	232d      	movlt	r3, #45	; 0x2d
 8005c1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c22:	487f      	ldr	r0, [pc, #508]	; (8005e20 <_printf_float+0x2e8>)
 8005c24:	4b7f      	ldr	r3, [pc, #508]	; (8005e24 <_printf_float+0x2ec>)
 8005c26:	e7d1      	b.n	8005bcc <_printf_float+0x94>
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c2e:	9206      	str	r2, [sp, #24]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	d13f      	bne.n	8005cb4 <_printf_float+0x17c>
 8005c34:	2306      	movs	r3, #6
 8005c36:	6063      	str	r3, [r4, #4]
 8005c38:	9b05      	ldr	r3, [sp, #20]
 8005c3a:	6861      	ldr	r1, [r4, #4]
 8005c3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c40:	2300      	movs	r3, #0
 8005c42:	9303      	str	r3, [sp, #12]
 8005c44:	ab0a      	add	r3, sp, #40	; 0x28
 8005c46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c4a:	ab09      	add	r3, sp, #36	; 0x24
 8005c4c:	ec49 8b10 	vmov	d0, r8, r9
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	6022      	str	r2, [r4, #0]
 8005c54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7ff fecd 	bl	80059f8 <__cvt>
 8005c5e:	9b06      	ldr	r3, [sp, #24]
 8005c60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c62:	2b47      	cmp	r3, #71	; 0x47
 8005c64:	4680      	mov	r8, r0
 8005c66:	d108      	bne.n	8005c7a <_printf_float+0x142>
 8005c68:	1cc8      	adds	r0, r1, #3
 8005c6a:	db02      	blt.n	8005c72 <_printf_float+0x13a>
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	dd41      	ble.n	8005cf6 <_printf_float+0x1be>
 8005c72:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c76:	fa5f fb8b 	uxtb.w	fp, fp
 8005c7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c7e:	d820      	bhi.n	8005cc2 <_printf_float+0x18a>
 8005c80:	3901      	subs	r1, #1
 8005c82:	465a      	mov	r2, fp
 8005c84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c88:	9109      	str	r1, [sp, #36]	; 0x24
 8005c8a:	f7ff ff17 	bl	8005abc <__exponent>
 8005c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c90:	1813      	adds	r3, r2, r0
 8005c92:	2a01      	cmp	r2, #1
 8005c94:	4681      	mov	r9, r0
 8005c96:	6123      	str	r3, [r4, #16]
 8005c98:	dc02      	bgt.n	8005ca0 <_printf_float+0x168>
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	07d2      	lsls	r2, r2, #31
 8005c9e:	d501      	bpl.n	8005ca4 <_printf_float+0x16c>
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	6123      	str	r3, [r4, #16]
 8005ca4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d09c      	beq.n	8005be6 <_printf_float+0xae>
 8005cac:	232d      	movs	r3, #45	; 0x2d
 8005cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb2:	e798      	b.n	8005be6 <_printf_float+0xae>
 8005cb4:	9a06      	ldr	r2, [sp, #24]
 8005cb6:	2a47      	cmp	r2, #71	; 0x47
 8005cb8:	d1be      	bne.n	8005c38 <_printf_float+0x100>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1bc      	bne.n	8005c38 <_printf_float+0x100>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e7b9      	b.n	8005c36 <_printf_float+0xfe>
 8005cc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cc6:	d118      	bne.n	8005cfa <_printf_float+0x1c2>
 8005cc8:	2900      	cmp	r1, #0
 8005cca:	6863      	ldr	r3, [r4, #4]
 8005ccc:	dd0b      	ble.n	8005ce6 <_printf_float+0x1ae>
 8005cce:	6121      	str	r1, [r4, #16]
 8005cd0:	b913      	cbnz	r3, 8005cd8 <_printf_float+0x1a0>
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	07d0      	lsls	r0, r2, #31
 8005cd6:	d502      	bpl.n	8005cde <_printf_float+0x1a6>
 8005cd8:	3301      	adds	r3, #1
 8005cda:	440b      	add	r3, r1
 8005cdc:	6123      	str	r3, [r4, #16]
 8005cde:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ce0:	f04f 0900 	mov.w	r9, #0
 8005ce4:	e7de      	b.n	8005ca4 <_printf_float+0x16c>
 8005ce6:	b913      	cbnz	r3, 8005cee <_printf_float+0x1b6>
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	07d2      	lsls	r2, r2, #31
 8005cec:	d501      	bpl.n	8005cf2 <_printf_float+0x1ba>
 8005cee:	3302      	adds	r3, #2
 8005cf0:	e7f4      	b.n	8005cdc <_printf_float+0x1a4>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e7f2      	b.n	8005cdc <_printf_float+0x1a4>
 8005cf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfc:	4299      	cmp	r1, r3
 8005cfe:	db05      	blt.n	8005d0c <_printf_float+0x1d4>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	6121      	str	r1, [r4, #16]
 8005d04:	07d8      	lsls	r0, r3, #31
 8005d06:	d5ea      	bpl.n	8005cde <_printf_float+0x1a6>
 8005d08:	1c4b      	adds	r3, r1, #1
 8005d0a:	e7e7      	b.n	8005cdc <_printf_float+0x1a4>
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	bfd4      	ite	le
 8005d10:	f1c1 0202 	rsble	r2, r1, #2
 8005d14:	2201      	movgt	r2, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	e7e0      	b.n	8005cdc <_printf_float+0x1a4>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	055a      	lsls	r2, r3, #21
 8005d1e:	d407      	bmi.n	8005d30 <_printf_float+0x1f8>
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	4642      	mov	r2, r8
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d12c      	bne.n	8005d88 <_printf_float+0x250>
 8005d2e:	e764      	b.n	8005bfa <_printf_float+0xc2>
 8005d30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d34:	f240 80e0 	bls.w	8005ef8 <_printf_float+0x3c0>
 8005d38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f7fa fed2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d034      	beq.n	8005db2 <_printf_float+0x27a>
 8005d48:	4a37      	ldr	r2, [pc, #220]	; (8005e28 <_printf_float+0x2f0>)
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f af51 	beq.w	8005bfa <_printf_float+0xc2>
 8005d58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	db02      	blt.n	8005d66 <_printf_float+0x22e>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07d8      	lsls	r0, r3, #31
 8005d64:	d510      	bpl.n	8005d88 <_printf_float+0x250>
 8005d66:	ee18 3a10 	vmov	r3, s16
 8005d6a:	4652      	mov	r2, sl
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4628      	mov	r0, r5
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	f43f af41 	beq.w	8005bfa <_printf_float+0xc2>
 8005d78:	f04f 0800 	mov.w	r8, #0
 8005d7c:	f104 091a 	add.w	r9, r4, #26
 8005d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d82:	3b01      	subs	r3, #1
 8005d84:	4543      	cmp	r3, r8
 8005d86:	dc09      	bgt.n	8005d9c <_printf_float+0x264>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	079b      	lsls	r3, r3, #30
 8005d8c:	f100 8105 	bmi.w	8005f9a <_printf_float+0x462>
 8005d90:	68e0      	ldr	r0, [r4, #12]
 8005d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d94:	4298      	cmp	r0, r3
 8005d96:	bfb8      	it	lt
 8005d98:	4618      	movlt	r0, r3
 8005d9a:	e730      	b.n	8005bfe <_printf_float+0xc6>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	464a      	mov	r2, r9
 8005da0:	4631      	mov	r1, r6
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	f43f af27 	beq.w	8005bfa <_printf_float+0xc2>
 8005dac:	f108 0801 	add.w	r8, r8, #1
 8005db0:	e7e6      	b.n	8005d80 <_printf_float+0x248>
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dc39      	bgt.n	8005e2c <_printf_float+0x2f4>
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <_printf_float+0x2f0>)
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	47b8      	blx	r7
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	f43f af19 	beq.w	8005bfa <_printf_float+0xc2>
 8005dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	d102      	bne.n	8005dd6 <_printf_float+0x29e>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	07d9      	lsls	r1, r3, #31
 8005dd4:	d5d8      	bpl.n	8005d88 <_printf_float+0x250>
 8005dd6:	ee18 3a10 	vmov	r3, s16
 8005dda:	4652      	mov	r2, sl
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	f43f af09 	beq.w	8005bfa <_printf_float+0xc2>
 8005de8:	f04f 0900 	mov.w	r9, #0
 8005dec:	f104 0a1a 	add.w	sl, r4, #26
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	425b      	negs	r3, r3
 8005df4:	454b      	cmp	r3, r9
 8005df6:	dc01      	bgt.n	8005dfc <_printf_float+0x2c4>
 8005df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfa:	e792      	b.n	8005d22 <_printf_float+0x1ea>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f aef7 	beq.w	8005bfa <_printf_float+0xc2>
 8005e0c:	f109 0901 	add.w	r9, r9, #1
 8005e10:	e7ee      	b.n	8005df0 <_printf_float+0x2b8>
 8005e12:	bf00      	nop
 8005e14:	7fefffff 	.word	0x7fefffff
 8005e18:	0800884c 	.word	0x0800884c
 8005e1c:	08008850 	.word	0x08008850
 8005e20:	08008858 	.word	0x08008858
 8005e24:	08008854 	.word	0x08008854
 8005e28:	0800885c 	.word	0x0800885c
 8005e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e30:	429a      	cmp	r2, r3
 8005e32:	bfa8      	it	ge
 8005e34:	461a      	movge	r2, r3
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	4691      	mov	r9, r2
 8005e3a:	dc37      	bgt.n	8005eac <_printf_float+0x374>
 8005e3c:	f04f 0b00 	mov.w	fp, #0
 8005e40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e44:	f104 021a 	add.w	r2, r4, #26
 8005e48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e4a:	9305      	str	r3, [sp, #20]
 8005e4c:	eba3 0309 	sub.w	r3, r3, r9
 8005e50:	455b      	cmp	r3, fp
 8005e52:	dc33      	bgt.n	8005ebc <_printf_float+0x384>
 8005e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	db3b      	blt.n	8005ed4 <_printf_float+0x39c>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	07da      	lsls	r2, r3, #31
 8005e60:	d438      	bmi.n	8005ed4 <_printf_float+0x39c>
 8005e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e64:	9a05      	ldr	r2, [sp, #20]
 8005e66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e68:	1a9a      	subs	r2, r3, r2
 8005e6a:	eba3 0901 	sub.w	r9, r3, r1
 8005e6e:	4591      	cmp	r9, r2
 8005e70:	bfa8      	it	ge
 8005e72:	4691      	movge	r9, r2
 8005e74:	f1b9 0f00 	cmp.w	r9, #0
 8005e78:	dc35      	bgt.n	8005ee6 <_printf_float+0x3ae>
 8005e7a:	f04f 0800 	mov.w	r8, #0
 8005e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e82:	f104 0a1a 	add.w	sl, r4, #26
 8005e86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	eba3 0309 	sub.w	r3, r3, r9
 8005e90:	4543      	cmp	r3, r8
 8005e92:	f77f af79 	ble.w	8005d88 <_printf_float+0x250>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4652      	mov	r2, sl
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	f43f aeaa 	beq.w	8005bfa <_printf_float+0xc2>
 8005ea6:	f108 0801 	add.w	r8, r8, #1
 8005eaa:	e7ec      	b.n	8005e86 <_printf_float+0x34e>
 8005eac:	4613      	mov	r3, r2
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d1c0      	bne.n	8005e3c <_printf_float+0x304>
 8005eba:	e69e      	b.n	8005bfa <_printf_float+0xc2>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	9205      	str	r2, [sp, #20]
 8005ec4:	47b8      	blx	r7
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	f43f ae97 	beq.w	8005bfa <_printf_float+0xc2>
 8005ecc:	9a05      	ldr	r2, [sp, #20]
 8005ece:	f10b 0b01 	add.w	fp, fp, #1
 8005ed2:	e7b9      	b.n	8005e48 <_printf_float+0x310>
 8005ed4:	ee18 3a10 	vmov	r3, s16
 8005ed8:	4652      	mov	r2, sl
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d1be      	bne.n	8005e62 <_printf_float+0x32a>
 8005ee4:	e689      	b.n	8005bfa <_printf_float+0xc2>
 8005ee6:	9a05      	ldr	r2, [sp, #20]
 8005ee8:	464b      	mov	r3, r9
 8005eea:	4442      	add	r2, r8
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d1c1      	bne.n	8005e7a <_printf_float+0x342>
 8005ef6:	e680      	b.n	8005bfa <_printf_float+0xc2>
 8005ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005efa:	2a01      	cmp	r2, #1
 8005efc:	dc01      	bgt.n	8005f02 <_printf_float+0x3ca>
 8005efe:	07db      	lsls	r3, r3, #31
 8005f00:	d538      	bpl.n	8005f74 <_printf_float+0x43c>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4642      	mov	r2, r8
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	f43f ae74 	beq.w	8005bfa <_printf_float+0xc2>
 8005f12:	ee18 3a10 	vmov	r3, s16
 8005f16:	4652      	mov	r2, sl
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	f43f ae6b 	beq.w	8005bfa <_printf_float+0xc2>
 8005f24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f7fa fddc 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f30:	b9d8      	cbnz	r0, 8005f6a <_printf_float+0x432>
 8005f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f34:	f108 0201 	add.w	r2, r8, #1
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	47b8      	blx	r7
 8005f40:	3001      	adds	r0, #1
 8005f42:	d10e      	bne.n	8005f62 <_printf_float+0x42a>
 8005f44:	e659      	b.n	8005bfa <_printf_float+0xc2>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f ae52 	beq.w	8005bfa <_printf_float+0xc2>
 8005f56:	f108 0801 	add.w	r8, r8, #1
 8005f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4543      	cmp	r3, r8
 8005f60:	dcf1      	bgt.n	8005f46 <_printf_float+0x40e>
 8005f62:	464b      	mov	r3, r9
 8005f64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f68:	e6dc      	b.n	8005d24 <_printf_float+0x1ec>
 8005f6a:	f04f 0800 	mov.w	r8, #0
 8005f6e:	f104 0a1a 	add.w	sl, r4, #26
 8005f72:	e7f2      	b.n	8005f5a <_printf_float+0x422>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4642      	mov	r2, r8
 8005f78:	e7df      	b.n	8005f3a <_printf_float+0x402>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	464a      	mov	r2, r9
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f ae38 	beq.w	8005bfa <_printf_float+0xc2>
 8005f8a:	f108 0801 	add.w	r8, r8, #1
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f92:	1a5b      	subs	r3, r3, r1
 8005f94:	4543      	cmp	r3, r8
 8005f96:	dcf0      	bgt.n	8005f7a <_printf_float+0x442>
 8005f98:	e6fa      	b.n	8005d90 <_printf_float+0x258>
 8005f9a:	f04f 0800 	mov.w	r8, #0
 8005f9e:	f104 0919 	add.w	r9, r4, #25
 8005fa2:	e7f4      	b.n	8005f8e <_printf_float+0x456>

08005fa4 <_printf_common>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	4616      	mov	r6, r2
 8005faa:	4699      	mov	r9, r3
 8005fac:	688a      	ldr	r2, [r1, #8]
 8005fae:	690b      	ldr	r3, [r1, #16]
 8005fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	bfb8      	it	lt
 8005fb8:	4613      	movlt	r3, r2
 8005fba:	6033      	str	r3, [r6, #0]
 8005fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	b10a      	cbz	r2, 8005fca <_printf_common+0x26>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	6033      	str	r3, [r6, #0]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	0699      	lsls	r1, r3, #26
 8005fce:	bf42      	ittt	mi
 8005fd0:	6833      	ldrmi	r3, [r6, #0]
 8005fd2:	3302      	addmi	r3, #2
 8005fd4:	6033      	strmi	r3, [r6, #0]
 8005fd6:	6825      	ldr	r5, [r4, #0]
 8005fd8:	f015 0506 	ands.w	r5, r5, #6
 8005fdc:	d106      	bne.n	8005fec <_printf_common+0x48>
 8005fde:	f104 0a19 	add.w	sl, r4, #25
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	6832      	ldr	r2, [r6, #0]
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	dc26      	bgt.n	800603a <_printf_common+0x96>
 8005fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ff0:	1e13      	subs	r3, r2, #0
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	bf18      	it	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	0692      	lsls	r2, r2, #26
 8005ffa:	d42b      	bmi.n	8006054 <_printf_common+0xb0>
 8005ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006000:	4649      	mov	r1, r9
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	3001      	adds	r0, #1
 8006008:	d01e      	beq.n	8006048 <_printf_common+0xa4>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	68e5      	ldr	r5, [r4, #12]
 800600e:	6832      	ldr	r2, [r6, #0]
 8006010:	f003 0306 	and.w	r3, r3, #6
 8006014:	2b04      	cmp	r3, #4
 8006016:	bf08      	it	eq
 8006018:	1aad      	subeq	r5, r5, r2
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	6922      	ldr	r2, [r4, #16]
 800601e:	bf0c      	ite	eq
 8006020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006024:	2500      	movne	r5, #0
 8006026:	4293      	cmp	r3, r2
 8006028:	bfc4      	itt	gt
 800602a:	1a9b      	subgt	r3, r3, r2
 800602c:	18ed      	addgt	r5, r5, r3
 800602e:	2600      	movs	r6, #0
 8006030:	341a      	adds	r4, #26
 8006032:	42b5      	cmp	r5, r6
 8006034:	d11a      	bne.n	800606c <_printf_common+0xc8>
 8006036:	2000      	movs	r0, #0
 8006038:	e008      	b.n	800604c <_printf_common+0xa8>
 800603a:	2301      	movs	r3, #1
 800603c:	4652      	mov	r2, sl
 800603e:	4649      	mov	r1, r9
 8006040:	4638      	mov	r0, r7
 8006042:	47c0      	blx	r8
 8006044:	3001      	adds	r0, #1
 8006046:	d103      	bne.n	8006050 <_printf_common+0xac>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006050:	3501      	adds	r5, #1
 8006052:	e7c6      	b.n	8005fe2 <_printf_common+0x3e>
 8006054:	18e1      	adds	r1, r4, r3
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	2030      	movs	r0, #48	; 0x30
 800605a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800605e:	4422      	add	r2, r4
 8006060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006068:	3302      	adds	r3, #2
 800606a:	e7c7      	b.n	8005ffc <_printf_common+0x58>
 800606c:	2301      	movs	r3, #1
 800606e:	4622      	mov	r2, r4
 8006070:	4649      	mov	r1, r9
 8006072:	4638      	mov	r0, r7
 8006074:	47c0      	blx	r8
 8006076:	3001      	adds	r0, #1
 8006078:	d0e6      	beq.n	8006048 <_printf_common+0xa4>
 800607a:	3601      	adds	r6, #1
 800607c:	e7d9      	b.n	8006032 <_printf_common+0x8e>
	...

08006080 <_printf_i>:
 8006080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	7e0f      	ldrb	r7, [r1, #24]
 8006086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006088:	2f78      	cmp	r7, #120	; 0x78
 800608a:	4691      	mov	r9, r2
 800608c:	4680      	mov	r8, r0
 800608e:	460c      	mov	r4, r1
 8006090:	469a      	mov	sl, r3
 8006092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006096:	d807      	bhi.n	80060a8 <_printf_i+0x28>
 8006098:	2f62      	cmp	r7, #98	; 0x62
 800609a:	d80a      	bhi.n	80060b2 <_printf_i+0x32>
 800609c:	2f00      	cmp	r7, #0
 800609e:	f000 80d8 	beq.w	8006252 <_printf_i+0x1d2>
 80060a2:	2f58      	cmp	r7, #88	; 0x58
 80060a4:	f000 80a3 	beq.w	80061ee <_printf_i+0x16e>
 80060a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060b0:	e03a      	b.n	8006128 <_printf_i+0xa8>
 80060b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060b6:	2b15      	cmp	r3, #21
 80060b8:	d8f6      	bhi.n	80060a8 <_printf_i+0x28>
 80060ba:	a101      	add	r1, pc, #4	; (adr r1, 80060c0 <_printf_i+0x40>)
 80060bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c0:	08006119 	.word	0x08006119
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	080060a9 	.word	0x080060a9
 80060cc:	080060a9 	.word	0x080060a9
 80060d0:	080060a9 	.word	0x080060a9
 80060d4:	080060a9 	.word	0x080060a9
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	080060a9 	.word	0x080060a9
 80060e0:	080060a9 	.word	0x080060a9
 80060e4:	080060a9 	.word	0x080060a9
 80060e8:	080060a9 	.word	0x080060a9
 80060ec:	08006239 	.word	0x08006239
 80060f0:	0800615d 	.word	0x0800615d
 80060f4:	0800621b 	.word	0x0800621b
 80060f8:	080060a9 	.word	0x080060a9
 80060fc:	080060a9 	.word	0x080060a9
 8006100:	0800625b 	.word	0x0800625b
 8006104:	080060a9 	.word	0x080060a9
 8006108:	0800615d 	.word	0x0800615d
 800610c:	080060a9 	.word	0x080060a9
 8006110:	080060a9 	.word	0x080060a9
 8006114:	08006223 	.word	0x08006223
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	1d1a      	adds	r2, r3, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	602a      	str	r2, [r5, #0]
 8006120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006128:	2301      	movs	r3, #1
 800612a:	e0a3      	b.n	8006274 <_printf_i+0x1f4>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	6829      	ldr	r1, [r5, #0]
 8006130:	0606      	lsls	r6, r0, #24
 8006132:	f101 0304 	add.w	r3, r1, #4
 8006136:	d50a      	bpl.n	800614e <_printf_i+0xce>
 8006138:	680e      	ldr	r6, [r1, #0]
 800613a:	602b      	str	r3, [r5, #0]
 800613c:	2e00      	cmp	r6, #0
 800613e:	da03      	bge.n	8006148 <_printf_i+0xc8>
 8006140:	232d      	movs	r3, #45	; 0x2d
 8006142:	4276      	negs	r6, r6
 8006144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006148:	485e      	ldr	r0, [pc, #376]	; (80062c4 <_printf_i+0x244>)
 800614a:	230a      	movs	r3, #10
 800614c:	e019      	b.n	8006182 <_printf_i+0x102>
 800614e:	680e      	ldr	r6, [r1, #0]
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006156:	bf18      	it	ne
 8006158:	b236      	sxthne	r6, r6
 800615a:	e7ef      	b.n	800613c <_printf_i+0xbc>
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	6820      	ldr	r0, [r4, #0]
 8006160:	1d19      	adds	r1, r3, #4
 8006162:	6029      	str	r1, [r5, #0]
 8006164:	0601      	lsls	r1, r0, #24
 8006166:	d501      	bpl.n	800616c <_printf_i+0xec>
 8006168:	681e      	ldr	r6, [r3, #0]
 800616a:	e002      	b.n	8006172 <_printf_i+0xf2>
 800616c:	0646      	lsls	r6, r0, #25
 800616e:	d5fb      	bpl.n	8006168 <_printf_i+0xe8>
 8006170:	881e      	ldrh	r6, [r3, #0]
 8006172:	4854      	ldr	r0, [pc, #336]	; (80062c4 <_printf_i+0x244>)
 8006174:	2f6f      	cmp	r7, #111	; 0x6f
 8006176:	bf0c      	ite	eq
 8006178:	2308      	moveq	r3, #8
 800617a:	230a      	movne	r3, #10
 800617c:	2100      	movs	r1, #0
 800617e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006182:	6865      	ldr	r5, [r4, #4]
 8006184:	60a5      	str	r5, [r4, #8]
 8006186:	2d00      	cmp	r5, #0
 8006188:	bfa2      	ittt	ge
 800618a:	6821      	ldrge	r1, [r4, #0]
 800618c:	f021 0104 	bicge.w	r1, r1, #4
 8006190:	6021      	strge	r1, [r4, #0]
 8006192:	b90e      	cbnz	r6, 8006198 <_printf_i+0x118>
 8006194:	2d00      	cmp	r5, #0
 8006196:	d04d      	beq.n	8006234 <_printf_i+0x1b4>
 8006198:	4615      	mov	r5, r2
 800619a:	fbb6 f1f3 	udiv	r1, r6, r3
 800619e:	fb03 6711 	mls	r7, r3, r1, r6
 80061a2:	5dc7      	ldrb	r7, [r0, r7]
 80061a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061a8:	4637      	mov	r7, r6
 80061aa:	42bb      	cmp	r3, r7
 80061ac:	460e      	mov	r6, r1
 80061ae:	d9f4      	bls.n	800619a <_printf_i+0x11a>
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d10b      	bne.n	80061cc <_printf_i+0x14c>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	07de      	lsls	r6, r3, #31
 80061b8:	d508      	bpl.n	80061cc <_printf_i+0x14c>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	6861      	ldr	r1, [r4, #4]
 80061be:	4299      	cmp	r1, r3
 80061c0:	bfde      	ittt	le
 80061c2:	2330      	movle	r3, #48	; 0x30
 80061c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061cc:	1b52      	subs	r2, r2, r5
 80061ce:	6122      	str	r2, [r4, #16]
 80061d0:	f8cd a000 	str.w	sl, [sp]
 80061d4:	464b      	mov	r3, r9
 80061d6:	aa03      	add	r2, sp, #12
 80061d8:	4621      	mov	r1, r4
 80061da:	4640      	mov	r0, r8
 80061dc:	f7ff fee2 	bl	8005fa4 <_printf_common>
 80061e0:	3001      	adds	r0, #1
 80061e2:	d14c      	bne.n	800627e <_printf_i+0x1fe>
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	b004      	add	sp, #16
 80061ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ee:	4835      	ldr	r0, [pc, #212]	; (80062c4 <_printf_i+0x244>)
 80061f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061f4:	6829      	ldr	r1, [r5, #0]
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80061fc:	6029      	str	r1, [r5, #0]
 80061fe:	061d      	lsls	r5, r3, #24
 8006200:	d514      	bpl.n	800622c <_printf_i+0x1ac>
 8006202:	07df      	lsls	r7, r3, #31
 8006204:	bf44      	itt	mi
 8006206:	f043 0320 	orrmi.w	r3, r3, #32
 800620a:	6023      	strmi	r3, [r4, #0]
 800620c:	b91e      	cbnz	r6, 8006216 <_printf_i+0x196>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	f023 0320 	bic.w	r3, r3, #32
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	2310      	movs	r3, #16
 8006218:	e7b0      	b.n	800617c <_printf_i+0xfc>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	f043 0320 	orr.w	r3, r3, #32
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	2378      	movs	r3, #120	; 0x78
 8006224:	4828      	ldr	r0, [pc, #160]	; (80062c8 <_printf_i+0x248>)
 8006226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800622a:	e7e3      	b.n	80061f4 <_printf_i+0x174>
 800622c:	0659      	lsls	r1, r3, #25
 800622e:	bf48      	it	mi
 8006230:	b2b6      	uxthmi	r6, r6
 8006232:	e7e6      	b.n	8006202 <_printf_i+0x182>
 8006234:	4615      	mov	r5, r2
 8006236:	e7bb      	b.n	80061b0 <_printf_i+0x130>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	6826      	ldr	r6, [r4, #0]
 800623c:	6961      	ldr	r1, [r4, #20]
 800623e:	1d18      	adds	r0, r3, #4
 8006240:	6028      	str	r0, [r5, #0]
 8006242:	0635      	lsls	r5, r6, #24
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	d501      	bpl.n	800624c <_printf_i+0x1cc>
 8006248:	6019      	str	r1, [r3, #0]
 800624a:	e002      	b.n	8006252 <_printf_i+0x1d2>
 800624c:	0670      	lsls	r0, r6, #25
 800624e:	d5fb      	bpl.n	8006248 <_printf_i+0x1c8>
 8006250:	8019      	strh	r1, [r3, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	6123      	str	r3, [r4, #16]
 8006256:	4615      	mov	r5, r2
 8006258:	e7ba      	b.n	80061d0 <_printf_i+0x150>
 800625a:	682b      	ldr	r3, [r5, #0]
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	602a      	str	r2, [r5, #0]
 8006260:	681d      	ldr	r5, [r3, #0]
 8006262:	6862      	ldr	r2, [r4, #4]
 8006264:	2100      	movs	r1, #0
 8006266:	4628      	mov	r0, r5
 8006268:	f7f9 ffca 	bl	8000200 <memchr>
 800626c:	b108      	cbz	r0, 8006272 <_printf_i+0x1f2>
 800626e:	1b40      	subs	r0, r0, r5
 8006270:	6060      	str	r0, [r4, #4]
 8006272:	6863      	ldr	r3, [r4, #4]
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	2300      	movs	r3, #0
 8006278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800627c:	e7a8      	b.n	80061d0 <_printf_i+0x150>
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	462a      	mov	r2, r5
 8006282:	4649      	mov	r1, r9
 8006284:	4640      	mov	r0, r8
 8006286:	47d0      	blx	sl
 8006288:	3001      	adds	r0, #1
 800628a:	d0ab      	beq.n	80061e4 <_printf_i+0x164>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	079b      	lsls	r3, r3, #30
 8006290:	d413      	bmi.n	80062ba <_printf_i+0x23a>
 8006292:	68e0      	ldr	r0, [r4, #12]
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	4298      	cmp	r0, r3
 8006298:	bfb8      	it	lt
 800629a:	4618      	movlt	r0, r3
 800629c:	e7a4      	b.n	80061e8 <_printf_i+0x168>
 800629e:	2301      	movs	r3, #1
 80062a0:	4632      	mov	r2, r6
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d09b      	beq.n	80061e4 <_printf_i+0x164>
 80062ac:	3501      	adds	r5, #1
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	9903      	ldr	r1, [sp, #12]
 80062b2:	1a5b      	subs	r3, r3, r1
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	dcf2      	bgt.n	800629e <_printf_i+0x21e>
 80062b8:	e7eb      	b.n	8006292 <_printf_i+0x212>
 80062ba:	2500      	movs	r5, #0
 80062bc:	f104 0619 	add.w	r6, r4, #25
 80062c0:	e7f5      	b.n	80062ae <_printf_i+0x22e>
 80062c2:	bf00      	nop
 80062c4:	0800885e 	.word	0x0800885e
 80062c8:	0800886f 	.word	0x0800886f

080062cc <strncmp>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	b17a      	cbz	r2, 80062f0 <strncmp+0x24>
 80062d0:	4603      	mov	r3, r0
 80062d2:	3901      	subs	r1, #1
 80062d4:	1884      	adds	r4, r0, r2
 80062d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80062da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80062de:	4290      	cmp	r0, r2
 80062e0:	d101      	bne.n	80062e6 <strncmp+0x1a>
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	d101      	bne.n	80062ea <strncmp+0x1e>
 80062e6:	1a80      	subs	r0, r0, r2
 80062e8:	bd10      	pop	{r4, pc}
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1f3      	bne.n	80062d6 <strncmp+0xa>
 80062ee:	e7fa      	b.n	80062e6 <strncmp+0x1a>
 80062f0:	4610      	mov	r0, r2
 80062f2:	e7f9      	b.n	80062e8 <strncmp+0x1c>

080062f4 <_vsiprintf_r>:
 80062f4:	b500      	push	{lr}
 80062f6:	b09b      	sub	sp, #108	; 0x6c
 80062f8:	9100      	str	r1, [sp, #0]
 80062fa:	9104      	str	r1, [sp, #16]
 80062fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006300:	9105      	str	r1, [sp, #20]
 8006302:	9102      	str	r1, [sp, #8]
 8006304:	4905      	ldr	r1, [pc, #20]	; (800631c <_vsiprintf_r+0x28>)
 8006306:	9103      	str	r1, [sp, #12]
 8006308:	4669      	mov	r1, sp
 800630a:	f001 fb7f 	bl	8007a0c <_svfiprintf_r>
 800630e:	9b00      	ldr	r3, [sp, #0]
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	b01b      	add	sp, #108	; 0x6c
 8006316:	f85d fb04 	ldr.w	pc, [sp], #4
 800631a:	bf00      	nop
 800631c:	ffff0208 	.word	0xffff0208

08006320 <vsiprintf>:
 8006320:	4613      	mov	r3, r2
 8006322:	460a      	mov	r2, r1
 8006324:	4601      	mov	r1, r0
 8006326:	4802      	ldr	r0, [pc, #8]	; (8006330 <vsiprintf+0x10>)
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f7ff bfe3 	b.w	80062f4 <_vsiprintf_r>
 800632e:	bf00      	nop
 8006330:	20000010 	.word	0x20000010

08006334 <quorem>:
 8006334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	6903      	ldr	r3, [r0, #16]
 800633a:	690c      	ldr	r4, [r1, #16]
 800633c:	42a3      	cmp	r3, r4
 800633e:	4607      	mov	r7, r0
 8006340:	f2c0 8081 	blt.w	8006446 <quorem+0x112>
 8006344:	3c01      	subs	r4, #1
 8006346:	f101 0814 	add.w	r8, r1, #20
 800634a:	f100 0514 	add.w	r5, r0, #20
 800634e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800635c:	3301      	adds	r3, #1
 800635e:	429a      	cmp	r2, r3
 8006360:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006368:	fbb2 f6f3 	udiv	r6, r2, r3
 800636c:	d331      	bcc.n	80063d2 <quorem+0x9e>
 800636e:	f04f 0e00 	mov.w	lr, #0
 8006372:	4640      	mov	r0, r8
 8006374:	46ac      	mov	ip, r5
 8006376:	46f2      	mov	sl, lr
 8006378:	f850 2b04 	ldr.w	r2, [r0], #4
 800637c:	b293      	uxth	r3, r2
 800637e:	fb06 e303 	mla	r3, r6, r3, lr
 8006382:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006386:	b29b      	uxth	r3, r3
 8006388:	ebaa 0303 	sub.w	r3, sl, r3
 800638c:	f8dc a000 	ldr.w	sl, [ip]
 8006390:	0c12      	lsrs	r2, r2, #16
 8006392:	fa13 f38a 	uxtah	r3, r3, sl
 8006396:	fb06 e202 	mla	r2, r6, r2, lr
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	9b00      	ldr	r3, [sp, #0]
 800639e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063a2:	b292      	uxth	r2, r2
 80063a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80063b0:	4581      	cmp	r9, r0
 80063b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063b6:	f84c 3b04 	str.w	r3, [ip], #4
 80063ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063be:	d2db      	bcs.n	8006378 <quorem+0x44>
 80063c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80063c4:	b92b      	cbnz	r3, 80063d2 <quorem+0x9e>
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	3b04      	subs	r3, #4
 80063ca:	429d      	cmp	r5, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	d32e      	bcc.n	800642e <quorem+0xfa>
 80063d0:	613c      	str	r4, [r7, #16]
 80063d2:	4638      	mov	r0, r7
 80063d4:	f001 f8c6 	bl	8007564 <__mcmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	db24      	blt.n	8006426 <quorem+0xf2>
 80063dc:	3601      	adds	r6, #1
 80063de:	4628      	mov	r0, r5
 80063e0:	f04f 0c00 	mov.w	ip, #0
 80063e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80063e8:	f8d0 e000 	ldr.w	lr, [r0]
 80063ec:	b293      	uxth	r3, r2
 80063ee:	ebac 0303 	sub.w	r3, ip, r3
 80063f2:	0c12      	lsrs	r2, r2, #16
 80063f4:	fa13 f38e 	uxtah	r3, r3, lr
 80063f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006400:	b29b      	uxth	r3, r3
 8006402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006406:	45c1      	cmp	r9, r8
 8006408:	f840 3b04 	str.w	r3, [r0], #4
 800640c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006410:	d2e8      	bcs.n	80063e4 <quorem+0xb0>
 8006412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641a:	b922      	cbnz	r2, 8006426 <quorem+0xf2>
 800641c:	3b04      	subs	r3, #4
 800641e:	429d      	cmp	r5, r3
 8006420:	461a      	mov	r2, r3
 8006422:	d30a      	bcc.n	800643a <quorem+0x106>
 8006424:	613c      	str	r4, [r7, #16]
 8006426:	4630      	mov	r0, r6
 8006428:	b003      	add	sp, #12
 800642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	3b04      	subs	r3, #4
 8006432:	2a00      	cmp	r2, #0
 8006434:	d1cc      	bne.n	80063d0 <quorem+0x9c>
 8006436:	3c01      	subs	r4, #1
 8006438:	e7c7      	b.n	80063ca <quorem+0x96>
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	3b04      	subs	r3, #4
 800643e:	2a00      	cmp	r2, #0
 8006440:	d1f0      	bne.n	8006424 <quorem+0xf0>
 8006442:	3c01      	subs	r4, #1
 8006444:	e7eb      	b.n	800641e <quorem+0xea>
 8006446:	2000      	movs	r0, #0
 8006448:	e7ee      	b.n	8006428 <quorem+0xf4>
 800644a:	0000      	movs	r0, r0
 800644c:	0000      	movs	r0, r0
	...

08006450 <_dtoa_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	ed2d 8b04 	vpush	{d8-d9}
 8006458:	ec57 6b10 	vmov	r6, r7, d0
 800645c:	b093      	sub	sp, #76	; 0x4c
 800645e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006464:	9106      	str	r1, [sp, #24]
 8006466:	ee10 aa10 	vmov	sl, s0
 800646a:	4604      	mov	r4, r0
 800646c:	9209      	str	r2, [sp, #36]	; 0x24
 800646e:	930c      	str	r3, [sp, #48]	; 0x30
 8006470:	46bb      	mov	fp, r7
 8006472:	b975      	cbnz	r5, 8006492 <_dtoa_r+0x42>
 8006474:	2010      	movs	r0, #16
 8006476:	f000 fddd 	bl	8007034 <malloc>
 800647a:	4602      	mov	r2, r0
 800647c:	6260      	str	r0, [r4, #36]	; 0x24
 800647e:	b920      	cbnz	r0, 800648a <_dtoa_r+0x3a>
 8006480:	4ba7      	ldr	r3, [pc, #668]	; (8006720 <_dtoa_r+0x2d0>)
 8006482:	21ea      	movs	r1, #234	; 0xea
 8006484:	48a7      	ldr	r0, [pc, #668]	; (8006724 <_dtoa_r+0x2d4>)
 8006486:	f001 fbd1 	bl	8007c2c <__assert_func>
 800648a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800648e:	6005      	str	r5, [r0, #0]
 8006490:	60c5      	str	r5, [r0, #12]
 8006492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	b151      	cbz	r1, 80064ae <_dtoa_r+0x5e>
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	604a      	str	r2, [r1, #4]
 800649c:	2301      	movs	r3, #1
 800649e:	4093      	lsls	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 fe1c 	bl	80070e0 <_Bfree>
 80064a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	1e3b      	subs	r3, r7, #0
 80064b0:	bfaa      	itet	ge
 80064b2:	2300      	movge	r3, #0
 80064b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064b8:	f8c8 3000 	strge.w	r3, [r8]
 80064bc:	4b9a      	ldr	r3, [pc, #616]	; (8006728 <_dtoa_r+0x2d8>)
 80064be:	bfbc      	itt	lt
 80064c0:	2201      	movlt	r2, #1
 80064c2:	f8c8 2000 	strlt.w	r2, [r8]
 80064c6:	ea33 030b 	bics.w	r3, r3, fp
 80064ca:	d11b      	bne.n	8006504 <_dtoa_r+0xb4>
 80064cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064d8:	4333      	orrs	r3, r6
 80064da:	f000 8592 	beq.w	8007002 <_dtoa_r+0xbb2>
 80064de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064e0:	b963      	cbnz	r3, 80064fc <_dtoa_r+0xac>
 80064e2:	4b92      	ldr	r3, [pc, #584]	; (800672c <_dtoa_r+0x2dc>)
 80064e4:	e022      	b.n	800652c <_dtoa_r+0xdc>
 80064e6:	4b92      	ldr	r3, [pc, #584]	; (8006730 <_dtoa_r+0x2e0>)
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	3308      	adds	r3, #8
 80064ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	9801      	ldr	r0, [sp, #4]
 80064f2:	b013      	add	sp, #76	; 0x4c
 80064f4:	ecbd 8b04 	vpop	{d8-d9}
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	4b8b      	ldr	r3, [pc, #556]	; (800672c <_dtoa_r+0x2dc>)
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	3303      	adds	r3, #3
 8006502:	e7f3      	b.n	80064ec <_dtoa_r+0x9c>
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	4650      	mov	r0, sl
 800650a:	4659      	mov	r1, fp
 800650c:	f7fa faec 	bl	8000ae8 <__aeabi_dcmpeq>
 8006510:	ec4b ab19 	vmov	d9, sl, fp
 8006514:	4680      	mov	r8, r0
 8006516:	b158      	cbz	r0, 8006530 <_dtoa_r+0xe0>
 8006518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800651a:	2301      	movs	r3, #1
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 856b 	beq.w	8006ffc <_dtoa_r+0xbac>
 8006526:	4883      	ldr	r0, [pc, #524]	; (8006734 <_dtoa_r+0x2e4>)
 8006528:	6018      	str	r0, [r3, #0]
 800652a:	1e43      	subs	r3, r0, #1
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	e7df      	b.n	80064f0 <_dtoa_r+0xa0>
 8006530:	ec4b ab10 	vmov	d0, sl, fp
 8006534:	aa10      	add	r2, sp, #64	; 0x40
 8006536:	a911      	add	r1, sp, #68	; 0x44
 8006538:	4620      	mov	r0, r4
 800653a:	f001 f8b9 	bl	80076b0 <__d2b>
 800653e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006542:	ee08 0a10 	vmov	s16, r0
 8006546:	2d00      	cmp	r5, #0
 8006548:	f000 8084 	beq.w	8006654 <_dtoa_r+0x204>
 800654c:	ee19 3a90 	vmov	r3, s19
 8006550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006558:	4656      	mov	r6, sl
 800655a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800655e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006566:	4b74      	ldr	r3, [pc, #464]	; (8006738 <_dtoa_r+0x2e8>)
 8006568:	2200      	movs	r2, #0
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7f9 fe9b 	bl	80002a8 <__aeabi_dsub>
 8006572:	a365      	add	r3, pc, #404	; (adr r3, 8006708 <_dtoa_r+0x2b8>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7fa f84e 	bl	8000618 <__aeabi_dmul>
 800657c:	a364      	add	r3, pc, #400	; (adr r3, 8006710 <_dtoa_r+0x2c0>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7f9 fe93 	bl	80002ac <__adddf3>
 8006586:	4606      	mov	r6, r0
 8006588:	4628      	mov	r0, r5
 800658a:	460f      	mov	r7, r1
 800658c:	f7f9 ffda 	bl	8000544 <__aeabi_i2d>
 8006590:	a361      	add	r3, pc, #388	; (adr r3, 8006718 <_dtoa_r+0x2c8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7fa f83f 	bl	8000618 <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4630      	mov	r0, r6
 80065a0:	4639      	mov	r1, r7
 80065a2:	f7f9 fe83 	bl	80002ac <__adddf3>
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	f7fa fae5 	bl	8000b78 <__aeabi_d2iz>
 80065ae:	2200      	movs	r2, #0
 80065b0:	9000      	str	r0, [sp, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa faa0 	bl	8000afc <__aeabi_dcmplt>
 80065bc:	b150      	cbz	r0, 80065d4 <_dtoa_r+0x184>
 80065be:	9800      	ldr	r0, [sp, #0]
 80065c0:	f7f9 ffc0 	bl	8000544 <__aeabi_i2d>
 80065c4:	4632      	mov	r2, r6
 80065c6:	463b      	mov	r3, r7
 80065c8:	f7fa fa8e 	bl	8000ae8 <__aeabi_dcmpeq>
 80065cc:	b910      	cbnz	r0, 80065d4 <_dtoa_r+0x184>
 80065ce:	9b00      	ldr	r3, [sp, #0]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	9b00      	ldr	r3, [sp, #0]
 80065d6:	2b16      	cmp	r3, #22
 80065d8:	d85a      	bhi.n	8006690 <_dtoa_r+0x240>
 80065da:	9a00      	ldr	r2, [sp, #0]
 80065dc:	4b57      	ldr	r3, [pc, #348]	; (800673c <_dtoa_r+0x2ec>)
 80065de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	ec51 0b19 	vmov	r0, r1, d9
 80065ea:	f7fa fa87 	bl	8000afc <__aeabi_dcmplt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d050      	beq.n	8006694 <_dtoa_r+0x244>
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80065fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065fe:	1b5d      	subs	r5, r3, r5
 8006600:	1e6b      	subs	r3, r5, #1
 8006602:	9305      	str	r3, [sp, #20]
 8006604:	bf45      	ittet	mi
 8006606:	f1c5 0301 	rsbmi	r3, r5, #1
 800660a:	9304      	strmi	r3, [sp, #16]
 800660c:	2300      	movpl	r3, #0
 800660e:	2300      	movmi	r3, #0
 8006610:	bf4c      	ite	mi
 8006612:	9305      	strmi	r3, [sp, #20]
 8006614:	9304      	strpl	r3, [sp, #16]
 8006616:	9b00      	ldr	r3, [sp, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	db3d      	blt.n	8006698 <_dtoa_r+0x248>
 800661c:	9b05      	ldr	r3, [sp, #20]
 800661e:	9a00      	ldr	r2, [sp, #0]
 8006620:	920a      	str	r2, [sp, #40]	; 0x28
 8006622:	4413      	add	r3, r2
 8006624:	9305      	str	r3, [sp, #20]
 8006626:	2300      	movs	r3, #0
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	9b06      	ldr	r3, [sp, #24]
 800662c:	2b09      	cmp	r3, #9
 800662e:	f200 8089 	bhi.w	8006744 <_dtoa_r+0x2f4>
 8006632:	2b05      	cmp	r3, #5
 8006634:	bfc4      	itt	gt
 8006636:	3b04      	subgt	r3, #4
 8006638:	9306      	strgt	r3, [sp, #24]
 800663a:	9b06      	ldr	r3, [sp, #24]
 800663c:	f1a3 0302 	sub.w	r3, r3, #2
 8006640:	bfcc      	ite	gt
 8006642:	2500      	movgt	r5, #0
 8006644:	2501      	movle	r5, #1
 8006646:	2b03      	cmp	r3, #3
 8006648:	f200 8087 	bhi.w	800675a <_dtoa_r+0x30a>
 800664c:	e8df f003 	tbb	[pc, r3]
 8006650:	59383a2d 	.word	0x59383a2d
 8006654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006658:	441d      	add	r5, r3
 800665a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800665e:	2b20      	cmp	r3, #32
 8006660:	bfc1      	itttt	gt
 8006662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800666a:	fa0b f303 	lslgt.w	r3, fp, r3
 800666e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006672:	bfda      	itte	le
 8006674:	f1c3 0320 	rsble	r3, r3, #32
 8006678:	fa06 f003 	lslle.w	r0, r6, r3
 800667c:	4318      	orrgt	r0, r3
 800667e:	f7f9 ff51 	bl	8000524 <__aeabi_ui2d>
 8006682:	2301      	movs	r3, #1
 8006684:	4606      	mov	r6, r0
 8006686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800668a:	3d01      	subs	r5, #1
 800668c:	930e      	str	r3, [sp, #56]	; 0x38
 800668e:	e76a      	b.n	8006566 <_dtoa_r+0x116>
 8006690:	2301      	movs	r3, #1
 8006692:	e7b2      	b.n	80065fa <_dtoa_r+0x1aa>
 8006694:	900b      	str	r0, [sp, #44]	; 0x2c
 8006696:	e7b1      	b.n	80065fc <_dtoa_r+0x1ac>
 8006698:	9b04      	ldr	r3, [sp, #16]
 800669a:	9a00      	ldr	r2, [sp, #0]
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	4253      	negs	r3, r2
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	2300      	movs	r3, #0
 80066a6:	930a      	str	r3, [sp, #40]	; 0x28
 80066a8:	e7bf      	b.n	800662a <_dtoa_r+0x1da>
 80066aa:	2300      	movs	r3, #0
 80066ac:	9308      	str	r3, [sp, #32]
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	dc55      	bgt.n	8006760 <_dtoa_r+0x310>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066ba:	461a      	mov	r2, r3
 80066bc:	9209      	str	r2, [sp, #36]	; 0x24
 80066be:	e00c      	b.n	80066da <_dtoa_r+0x28a>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e7f3      	b.n	80066ac <_dtoa_r+0x25c>
 80066c4:	2300      	movs	r3, #0
 80066c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c8:	9308      	str	r3, [sp, #32]
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	4413      	add	r3, r2
 80066ce:	9302      	str	r3, [sp, #8]
 80066d0:	3301      	adds	r3, #1
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	9303      	str	r3, [sp, #12]
 80066d6:	bfb8      	it	lt
 80066d8:	2301      	movlt	r3, #1
 80066da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066dc:	2200      	movs	r2, #0
 80066de:	6042      	str	r2, [r0, #4]
 80066e0:	2204      	movs	r2, #4
 80066e2:	f102 0614 	add.w	r6, r2, #20
 80066e6:	429e      	cmp	r6, r3
 80066e8:	6841      	ldr	r1, [r0, #4]
 80066ea:	d93d      	bls.n	8006768 <_dtoa_r+0x318>
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fcb7 	bl	8007060 <_Balloc>
 80066f2:	9001      	str	r0, [sp, #4]
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d13b      	bne.n	8006770 <_dtoa_r+0x320>
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <_dtoa_r+0x2f0>)
 80066fa:	4602      	mov	r2, r0
 80066fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006700:	e6c0      	b.n	8006484 <_dtoa_r+0x34>
 8006702:	2301      	movs	r3, #1
 8006704:	e7df      	b.n	80066c6 <_dtoa_r+0x276>
 8006706:	bf00      	nop
 8006708:	636f4361 	.word	0x636f4361
 800670c:	3fd287a7 	.word	0x3fd287a7
 8006710:	8b60c8b3 	.word	0x8b60c8b3
 8006714:	3fc68a28 	.word	0x3fc68a28
 8006718:	509f79fb 	.word	0x509f79fb
 800671c:	3fd34413 	.word	0x3fd34413
 8006720:	0800888d 	.word	0x0800888d
 8006724:	080088a4 	.word	0x080088a4
 8006728:	7ff00000 	.word	0x7ff00000
 800672c:	08008889 	.word	0x08008889
 8006730:	08008880 	.word	0x08008880
 8006734:	0800885d 	.word	0x0800885d
 8006738:	3ff80000 	.word	0x3ff80000
 800673c:	08008998 	.word	0x08008998
 8006740:	080088ff 	.word	0x080088ff
 8006744:	2501      	movs	r5, #1
 8006746:	2300      	movs	r3, #0
 8006748:	9306      	str	r3, [sp, #24]
 800674a:	9508      	str	r5, [sp, #32]
 800674c:	f04f 33ff 	mov.w	r3, #4294967295
 8006750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	2312      	movs	r3, #18
 8006758:	e7b0      	b.n	80066bc <_dtoa_r+0x26c>
 800675a:	2301      	movs	r3, #1
 800675c:	9308      	str	r3, [sp, #32]
 800675e:	e7f5      	b.n	800674c <_dtoa_r+0x2fc>
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006766:	e7b8      	b.n	80066da <_dtoa_r+0x28a>
 8006768:	3101      	adds	r1, #1
 800676a:	6041      	str	r1, [r0, #4]
 800676c:	0052      	lsls	r2, r2, #1
 800676e:	e7b8      	b.n	80066e2 <_dtoa_r+0x292>
 8006770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006772:	9a01      	ldr	r2, [sp, #4]
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	2b0e      	cmp	r3, #14
 800677a:	f200 809d 	bhi.w	80068b8 <_dtoa_r+0x468>
 800677e:	2d00      	cmp	r5, #0
 8006780:	f000 809a 	beq.w	80068b8 <_dtoa_r+0x468>
 8006784:	9b00      	ldr	r3, [sp, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	dd32      	ble.n	80067f0 <_dtoa_r+0x3a0>
 800678a:	4ab7      	ldr	r2, [pc, #732]	; (8006a68 <_dtoa_r+0x618>)
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006798:	9b00      	ldr	r3, [sp, #0]
 800679a:	05d8      	lsls	r0, r3, #23
 800679c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067a0:	d516      	bpl.n	80067d0 <_dtoa_r+0x380>
 80067a2:	4bb2      	ldr	r3, [pc, #712]	; (8006a6c <_dtoa_r+0x61c>)
 80067a4:	ec51 0b19 	vmov	r0, r1, d9
 80067a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067ac:	f7fa f85e 	bl	800086c <__aeabi_ddiv>
 80067b0:	f007 070f 	and.w	r7, r7, #15
 80067b4:	4682      	mov	sl, r0
 80067b6:	468b      	mov	fp, r1
 80067b8:	2503      	movs	r5, #3
 80067ba:	4eac      	ldr	r6, [pc, #688]	; (8006a6c <_dtoa_r+0x61c>)
 80067bc:	b957      	cbnz	r7, 80067d4 <_dtoa_r+0x384>
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	4650      	mov	r0, sl
 80067c4:	4659      	mov	r1, fp
 80067c6:	f7fa f851 	bl	800086c <__aeabi_ddiv>
 80067ca:	4682      	mov	sl, r0
 80067cc:	468b      	mov	fp, r1
 80067ce:	e028      	b.n	8006822 <_dtoa_r+0x3d2>
 80067d0:	2502      	movs	r5, #2
 80067d2:	e7f2      	b.n	80067ba <_dtoa_r+0x36a>
 80067d4:	07f9      	lsls	r1, r7, #31
 80067d6:	d508      	bpl.n	80067ea <_dtoa_r+0x39a>
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067e0:	f7f9 ff1a 	bl	8000618 <__aeabi_dmul>
 80067e4:	3501      	adds	r5, #1
 80067e6:	4680      	mov	r8, r0
 80067e8:	4689      	mov	r9, r1
 80067ea:	107f      	asrs	r7, r7, #1
 80067ec:	3608      	adds	r6, #8
 80067ee:	e7e5      	b.n	80067bc <_dtoa_r+0x36c>
 80067f0:	f000 809b 	beq.w	800692a <_dtoa_r+0x4da>
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	4f9d      	ldr	r7, [pc, #628]	; (8006a6c <_dtoa_r+0x61c>)
 80067f8:	425e      	negs	r6, r3
 80067fa:	4b9b      	ldr	r3, [pc, #620]	; (8006a68 <_dtoa_r+0x618>)
 80067fc:	f006 020f 	and.w	r2, r6, #15
 8006800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	ec51 0b19 	vmov	r0, r1, d9
 800680c:	f7f9 ff04 	bl	8000618 <__aeabi_dmul>
 8006810:	1136      	asrs	r6, r6, #4
 8006812:	4682      	mov	sl, r0
 8006814:	468b      	mov	fp, r1
 8006816:	2300      	movs	r3, #0
 8006818:	2502      	movs	r5, #2
 800681a:	2e00      	cmp	r6, #0
 800681c:	d17a      	bne.n	8006914 <_dtoa_r+0x4c4>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1d3      	bne.n	80067ca <_dtoa_r+0x37a>
 8006822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8082 	beq.w	800692e <_dtoa_r+0x4de>
 800682a:	4b91      	ldr	r3, [pc, #580]	; (8006a70 <_dtoa_r+0x620>)
 800682c:	2200      	movs	r2, #0
 800682e:	4650      	mov	r0, sl
 8006830:	4659      	mov	r1, fp
 8006832:	f7fa f963 	bl	8000afc <__aeabi_dcmplt>
 8006836:	2800      	cmp	r0, #0
 8006838:	d079      	beq.n	800692e <_dtoa_r+0x4de>
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d076      	beq.n	800692e <_dtoa_r+0x4de>
 8006840:	9b02      	ldr	r3, [sp, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd36      	ble.n	80068b4 <_dtoa_r+0x464>
 8006846:	9b00      	ldr	r3, [sp, #0]
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	1e5f      	subs	r7, r3, #1
 800684e:	2200      	movs	r2, #0
 8006850:	4b88      	ldr	r3, [pc, #544]	; (8006a74 <_dtoa_r+0x624>)
 8006852:	f7f9 fee1 	bl	8000618 <__aeabi_dmul>
 8006856:	9e02      	ldr	r6, [sp, #8]
 8006858:	4682      	mov	sl, r0
 800685a:	468b      	mov	fp, r1
 800685c:	3501      	adds	r5, #1
 800685e:	4628      	mov	r0, r5
 8006860:	f7f9 fe70 	bl	8000544 <__aeabi_i2d>
 8006864:	4652      	mov	r2, sl
 8006866:	465b      	mov	r3, fp
 8006868:	f7f9 fed6 	bl	8000618 <__aeabi_dmul>
 800686c:	4b82      	ldr	r3, [pc, #520]	; (8006a78 <_dtoa_r+0x628>)
 800686e:	2200      	movs	r2, #0
 8006870:	f7f9 fd1c 	bl	80002ac <__adddf3>
 8006874:	46d0      	mov	r8, sl
 8006876:	46d9      	mov	r9, fp
 8006878:	4682      	mov	sl, r0
 800687a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800687e:	2e00      	cmp	r6, #0
 8006880:	d158      	bne.n	8006934 <_dtoa_r+0x4e4>
 8006882:	4b7e      	ldr	r3, [pc, #504]	; (8006a7c <_dtoa_r+0x62c>)
 8006884:	2200      	movs	r2, #0
 8006886:	4640      	mov	r0, r8
 8006888:	4649      	mov	r1, r9
 800688a:	f7f9 fd0d 	bl	80002a8 <__aeabi_dsub>
 800688e:	4652      	mov	r2, sl
 8006890:	465b      	mov	r3, fp
 8006892:	4680      	mov	r8, r0
 8006894:	4689      	mov	r9, r1
 8006896:	f7fa f94f 	bl	8000b38 <__aeabi_dcmpgt>
 800689a:	2800      	cmp	r0, #0
 800689c:	f040 8295 	bne.w	8006dca <_dtoa_r+0x97a>
 80068a0:	4652      	mov	r2, sl
 80068a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7fa f927 	bl	8000afc <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f040 8289 	bne.w	8006dc6 <_dtoa_r+0x976>
 80068b4:	ec5b ab19 	vmov	sl, fp, d9
 80068b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f2c0 8148 	blt.w	8006b50 <_dtoa_r+0x700>
 80068c0:	9a00      	ldr	r2, [sp, #0]
 80068c2:	2a0e      	cmp	r2, #14
 80068c4:	f300 8144 	bgt.w	8006b50 <_dtoa_r+0x700>
 80068c8:	4b67      	ldr	r3, [pc, #412]	; (8006a68 <_dtoa_r+0x618>)
 80068ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f280 80d5 	bge.w	8006a84 <_dtoa_r+0x634>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f300 80d1 	bgt.w	8006a84 <_dtoa_r+0x634>
 80068e2:	f040 826f 	bne.w	8006dc4 <_dtoa_r+0x974>
 80068e6:	4b65      	ldr	r3, [pc, #404]	; (8006a7c <_dtoa_r+0x62c>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	4640      	mov	r0, r8
 80068ec:	4649      	mov	r1, r9
 80068ee:	f7f9 fe93 	bl	8000618 <__aeabi_dmul>
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	f7fa f915 	bl	8000b24 <__aeabi_dcmpge>
 80068fa:	9e03      	ldr	r6, [sp, #12]
 80068fc:	4637      	mov	r7, r6
 80068fe:	2800      	cmp	r0, #0
 8006900:	f040 8245 	bne.w	8006d8e <_dtoa_r+0x93e>
 8006904:	9d01      	ldr	r5, [sp, #4]
 8006906:	2331      	movs	r3, #49	; 0x31
 8006908:	f805 3b01 	strb.w	r3, [r5], #1
 800690c:	9b00      	ldr	r3, [sp, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	e240      	b.n	8006d96 <_dtoa_r+0x946>
 8006914:	07f2      	lsls	r2, r6, #31
 8006916:	d505      	bpl.n	8006924 <_dtoa_r+0x4d4>
 8006918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691c:	f7f9 fe7c 	bl	8000618 <__aeabi_dmul>
 8006920:	3501      	adds	r5, #1
 8006922:	2301      	movs	r3, #1
 8006924:	1076      	asrs	r6, r6, #1
 8006926:	3708      	adds	r7, #8
 8006928:	e777      	b.n	800681a <_dtoa_r+0x3ca>
 800692a:	2502      	movs	r5, #2
 800692c:	e779      	b.n	8006822 <_dtoa_r+0x3d2>
 800692e:	9f00      	ldr	r7, [sp, #0]
 8006930:	9e03      	ldr	r6, [sp, #12]
 8006932:	e794      	b.n	800685e <_dtoa_r+0x40e>
 8006934:	9901      	ldr	r1, [sp, #4]
 8006936:	4b4c      	ldr	r3, [pc, #304]	; (8006a68 <_dtoa_r+0x618>)
 8006938:	4431      	add	r1, r6
 800693a:	910d      	str	r1, [sp, #52]	; 0x34
 800693c:	9908      	ldr	r1, [sp, #32]
 800693e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006946:	2900      	cmp	r1, #0
 8006948:	d043      	beq.n	80069d2 <_dtoa_r+0x582>
 800694a:	494d      	ldr	r1, [pc, #308]	; (8006a80 <_dtoa_r+0x630>)
 800694c:	2000      	movs	r0, #0
 800694e:	f7f9 ff8d 	bl	800086c <__aeabi_ddiv>
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	f7f9 fca7 	bl	80002a8 <__aeabi_dsub>
 800695a:	9d01      	ldr	r5, [sp, #4]
 800695c:	4682      	mov	sl, r0
 800695e:	468b      	mov	fp, r1
 8006960:	4649      	mov	r1, r9
 8006962:	4640      	mov	r0, r8
 8006964:	f7fa f908 	bl	8000b78 <__aeabi_d2iz>
 8006968:	4606      	mov	r6, r0
 800696a:	f7f9 fdeb 	bl	8000544 <__aeabi_i2d>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4640      	mov	r0, r8
 8006974:	4649      	mov	r1, r9
 8006976:	f7f9 fc97 	bl	80002a8 <__aeabi_dsub>
 800697a:	3630      	adds	r6, #48	; 0x30
 800697c:	f805 6b01 	strb.w	r6, [r5], #1
 8006980:	4652      	mov	r2, sl
 8006982:	465b      	mov	r3, fp
 8006984:	4680      	mov	r8, r0
 8006986:	4689      	mov	r9, r1
 8006988:	f7fa f8b8 	bl	8000afc <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d163      	bne.n	8006a58 <_dtoa_r+0x608>
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	4936      	ldr	r1, [pc, #216]	; (8006a70 <_dtoa_r+0x620>)
 8006996:	2000      	movs	r0, #0
 8006998:	f7f9 fc86 	bl	80002a8 <__aeabi_dsub>
 800699c:	4652      	mov	r2, sl
 800699e:	465b      	mov	r3, fp
 80069a0:	f7fa f8ac 	bl	8000afc <__aeabi_dcmplt>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f040 80b5 	bne.w	8006b14 <_dtoa_r+0x6c4>
 80069aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ac:	429d      	cmp	r5, r3
 80069ae:	d081      	beq.n	80068b4 <_dtoa_r+0x464>
 80069b0:	4b30      	ldr	r3, [pc, #192]	; (8006a74 <_dtoa_r+0x624>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7f9 fe2e 	bl	8000618 <__aeabi_dmul>
 80069bc:	4b2d      	ldr	r3, [pc, #180]	; (8006a74 <_dtoa_r+0x624>)
 80069be:	4682      	mov	sl, r0
 80069c0:	468b      	mov	fp, r1
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	2200      	movs	r2, #0
 80069c8:	f7f9 fe26 	bl	8000618 <__aeabi_dmul>
 80069cc:	4680      	mov	r8, r0
 80069ce:	4689      	mov	r9, r1
 80069d0:	e7c6      	b.n	8006960 <_dtoa_r+0x510>
 80069d2:	4650      	mov	r0, sl
 80069d4:	4659      	mov	r1, fp
 80069d6:	f7f9 fe1f 	bl	8000618 <__aeabi_dmul>
 80069da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069dc:	9d01      	ldr	r5, [sp, #4]
 80069de:	930f      	str	r3, [sp, #60]	; 0x3c
 80069e0:	4682      	mov	sl, r0
 80069e2:	468b      	mov	fp, r1
 80069e4:	4649      	mov	r1, r9
 80069e6:	4640      	mov	r0, r8
 80069e8:	f7fa f8c6 	bl	8000b78 <__aeabi_d2iz>
 80069ec:	4606      	mov	r6, r0
 80069ee:	f7f9 fda9 	bl	8000544 <__aeabi_i2d>
 80069f2:	3630      	adds	r6, #48	; 0x30
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7f9 fc54 	bl	80002a8 <__aeabi_dsub>
 8006a00:	f805 6b01 	strb.w	r6, [r5], #1
 8006a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a06:	429d      	cmp	r5, r3
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	d124      	bne.n	8006a5c <_dtoa_r+0x60c>
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <_dtoa_r+0x630>)
 8006a14:	4650      	mov	r0, sl
 8006a16:	4659      	mov	r1, fp
 8006a18:	f7f9 fc48 	bl	80002ac <__adddf3>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7fa f888 	bl	8000b38 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d173      	bne.n	8006b14 <_dtoa_r+0x6c4>
 8006a2c:	4652      	mov	r2, sl
 8006a2e:	465b      	mov	r3, fp
 8006a30:	4913      	ldr	r1, [pc, #76]	; (8006a80 <_dtoa_r+0x630>)
 8006a32:	2000      	movs	r0, #0
 8006a34:	f7f9 fc38 	bl	80002a8 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	4649      	mov	r1, r9
 8006a40:	f7fa f85c 	bl	8000afc <__aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	f43f af35 	beq.w	80068b4 <_dtoa_r+0x464>
 8006a4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a4c:	1e6b      	subs	r3, r5, #1
 8006a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d0f8      	beq.n	8006a4a <_dtoa_r+0x5fa>
 8006a58:	9700      	str	r7, [sp, #0]
 8006a5a:	e049      	b.n	8006af0 <_dtoa_r+0x6a0>
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <_dtoa_r+0x624>)
 8006a5e:	f7f9 fddb 	bl	8000618 <__aeabi_dmul>
 8006a62:	4680      	mov	r8, r0
 8006a64:	4689      	mov	r9, r1
 8006a66:	e7bd      	b.n	80069e4 <_dtoa_r+0x594>
 8006a68:	08008998 	.word	0x08008998
 8006a6c:	08008970 	.word	0x08008970
 8006a70:	3ff00000 	.word	0x3ff00000
 8006a74:	40240000 	.word	0x40240000
 8006a78:	401c0000 	.word	0x401c0000
 8006a7c:	40140000 	.word	0x40140000
 8006a80:	3fe00000 	.word	0x3fe00000
 8006a84:	9d01      	ldr	r5, [sp, #4]
 8006a86:	4656      	mov	r6, sl
 8006a88:	465f      	mov	r7, fp
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	4630      	mov	r0, r6
 8006a90:	4639      	mov	r1, r7
 8006a92:	f7f9 feeb 	bl	800086c <__aeabi_ddiv>
 8006a96:	f7fa f86f 	bl	8000b78 <__aeabi_d2iz>
 8006a9a:	4682      	mov	sl, r0
 8006a9c:	f7f9 fd52 	bl	8000544 <__aeabi_i2d>
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f7f9 fdb8 	bl	8000618 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ab4:	f7f9 fbf8 	bl	80002a8 <__aeabi_dsub>
 8006ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8006abc:	9e01      	ldr	r6, [sp, #4]
 8006abe:	9f03      	ldr	r7, [sp, #12]
 8006ac0:	1bae      	subs	r6, r5, r6
 8006ac2:	42b7      	cmp	r7, r6
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	d135      	bne.n	8006b36 <_dtoa_r+0x6e6>
 8006aca:	f7f9 fbef 	bl	80002ac <__adddf3>
 8006ace:	4642      	mov	r2, r8
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	460f      	mov	r7, r1
 8006ad6:	f7fa f82f 	bl	8000b38 <__aeabi_dcmpgt>
 8006ada:	b9d0      	cbnz	r0, 8006b12 <_dtoa_r+0x6c2>
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7fa f800 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ae8:	b110      	cbz	r0, 8006af0 <_dtoa_r+0x6a0>
 8006aea:	f01a 0f01 	tst.w	sl, #1
 8006aee:	d110      	bne.n	8006b12 <_dtoa_r+0x6c2>
 8006af0:	4620      	mov	r0, r4
 8006af2:	ee18 1a10 	vmov	r1, s16
 8006af6:	f000 faf3 	bl	80070e0 <_Bfree>
 8006afa:	2300      	movs	r3, #0
 8006afc:	9800      	ldr	r0, [sp, #0]
 8006afe:	702b      	strb	r3, [r5, #0]
 8006b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b02:	3001      	adds	r0, #1
 8006b04:	6018      	str	r0, [r3, #0]
 8006b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f43f acf1 	beq.w	80064f0 <_dtoa_r+0xa0>
 8006b0e:	601d      	str	r5, [r3, #0]
 8006b10:	e4ee      	b.n	80064f0 <_dtoa_r+0xa0>
 8006b12:	9f00      	ldr	r7, [sp, #0]
 8006b14:	462b      	mov	r3, r5
 8006b16:	461d      	mov	r5, r3
 8006b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b1c:	2a39      	cmp	r2, #57	; 0x39
 8006b1e:	d106      	bne.n	8006b2e <_dtoa_r+0x6de>
 8006b20:	9a01      	ldr	r2, [sp, #4]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d1f7      	bne.n	8006b16 <_dtoa_r+0x6c6>
 8006b26:	9901      	ldr	r1, [sp, #4]
 8006b28:	2230      	movs	r2, #48	; 0x30
 8006b2a:	3701      	adds	r7, #1
 8006b2c:	700a      	strb	r2, [r1, #0]
 8006b2e:	781a      	ldrb	r2, [r3, #0]
 8006b30:	3201      	adds	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e790      	b.n	8006a58 <_dtoa_r+0x608>
 8006b36:	4ba6      	ldr	r3, [pc, #664]	; (8006dd0 <_dtoa_r+0x980>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f7f9 fd6d 	bl	8000618 <__aeabi_dmul>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	4606      	mov	r6, r0
 8006b44:	460f      	mov	r7, r1
 8006b46:	f7f9 ffcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d09d      	beq.n	8006a8a <_dtoa_r+0x63a>
 8006b4e:	e7cf      	b.n	8006af0 <_dtoa_r+0x6a0>
 8006b50:	9a08      	ldr	r2, [sp, #32]
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	f000 80d7 	beq.w	8006d06 <_dtoa_r+0x8b6>
 8006b58:	9a06      	ldr	r2, [sp, #24]
 8006b5a:	2a01      	cmp	r2, #1
 8006b5c:	f300 80ba 	bgt.w	8006cd4 <_dtoa_r+0x884>
 8006b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	f000 80b2 	beq.w	8006ccc <_dtoa_r+0x87c>
 8006b68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b6c:	9e07      	ldr	r6, [sp, #28]
 8006b6e:	9d04      	ldr	r5, [sp, #16]
 8006b70:	9a04      	ldr	r2, [sp, #16]
 8006b72:	441a      	add	r2, r3
 8006b74:	9204      	str	r2, [sp, #16]
 8006b76:	9a05      	ldr	r2, [sp, #20]
 8006b78:	2101      	movs	r1, #1
 8006b7a:	441a      	add	r2, r3
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	9205      	str	r2, [sp, #20]
 8006b80:	f000 fb66 	bl	8007250 <__i2b>
 8006b84:	4607      	mov	r7, r0
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	dd0c      	ble.n	8006ba4 <_dtoa_r+0x754>
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd09      	ble.n	8006ba4 <_dtoa_r+0x754>
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	9a04      	ldr	r2, [sp, #16]
 8006b94:	bfa8      	it	ge
 8006b96:	462b      	movge	r3, r5
 8006b98:	1ad2      	subs	r2, r2, r3
 8006b9a:	9204      	str	r2, [sp, #16]
 8006b9c:	9a05      	ldr	r2, [sp, #20]
 8006b9e:	1aed      	subs	r5, r5, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	9b07      	ldr	r3, [sp, #28]
 8006ba6:	b31b      	cbz	r3, 8006bf0 <_dtoa_r+0x7a0>
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80af 	beq.w	8006d0e <_dtoa_r+0x8be>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	dd13      	ble.n	8006bdc <_dtoa_r+0x78c>
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fc09 	bl	80073d0 <__pow5mult>
 8006bbe:	ee18 2a10 	vmov	r2, s16
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fb58 	bl	800727c <__multiply>
 8006bcc:	ee18 1a10 	vmov	r1, s16
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fa84 	bl	80070e0 <_Bfree>
 8006bd8:	ee08 8a10 	vmov	s16, r8
 8006bdc:	9b07      	ldr	r3, [sp, #28]
 8006bde:	1b9a      	subs	r2, r3, r6
 8006be0:	d006      	beq.n	8006bf0 <_dtoa_r+0x7a0>
 8006be2:	ee18 1a10 	vmov	r1, s16
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fbf2 	bl	80073d0 <__pow5mult>
 8006bec:	ee08 0a10 	vmov	s16, r0
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fb2c 	bl	8007250 <__i2b>
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	f340 8088 	ble.w	8006d12 <_dtoa_r+0x8c2>
 8006c02:	461a      	mov	r2, r3
 8006c04:	4601      	mov	r1, r0
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fbe2 	bl	80073d0 <__pow5mult>
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	4606      	mov	r6, r0
 8006c12:	f340 8081 	ble.w	8006d18 <_dtoa_r+0x8c8>
 8006c16:	f04f 0800 	mov.w	r8, #0
 8006c1a:	6933      	ldr	r3, [r6, #16]
 8006c1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c20:	6918      	ldr	r0, [r3, #16]
 8006c22:	f000 fac5 	bl	80071b0 <__hi0bits>
 8006c26:	f1c0 0020 	rsb	r0, r0, #32
 8006c2a:	9b05      	ldr	r3, [sp, #20]
 8006c2c:	4418      	add	r0, r3
 8006c2e:	f010 001f 	ands.w	r0, r0, #31
 8006c32:	f000 8092 	beq.w	8006d5a <_dtoa_r+0x90a>
 8006c36:	f1c0 0320 	rsb	r3, r0, #32
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	f340 808a 	ble.w	8006d54 <_dtoa_r+0x904>
 8006c40:	f1c0 001c 	rsb	r0, r0, #28
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	4403      	add	r3, r0
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	9b05      	ldr	r3, [sp, #20]
 8006c4c:	4403      	add	r3, r0
 8006c4e:	4405      	add	r5, r0
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	9b04      	ldr	r3, [sp, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dd07      	ble.n	8006c68 <_dtoa_r+0x818>
 8006c58:	ee18 1a10 	vmov	r1, s16
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fc10 	bl	8007484 <__lshift>
 8006c64:	ee08 0a10 	vmov	s16, r0
 8006c68:	9b05      	ldr	r3, [sp, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dd05      	ble.n	8006c7a <_dtoa_r+0x82a>
 8006c6e:	4631      	mov	r1, r6
 8006c70:	461a      	mov	r2, r3
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fc06 	bl	8007484 <__lshift>
 8006c78:	4606      	mov	r6, r0
 8006c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d06e      	beq.n	8006d5e <_dtoa_r+0x90e>
 8006c80:	ee18 0a10 	vmov	r0, s16
 8006c84:	4631      	mov	r1, r6
 8006c86:	f000 fc6d 	bl	8007564 <__mcmp>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	da67      	bge.n	8006d5e <_dtoa_r+0x90e>
 8006c8e:	9b00      	ldr	r3, [sp, #0]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	ee18 1a10 	vmov	r1, s16
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	220a      	movs	r2, #10
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fa41 	bl	8007124 <__multadd>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	ee08 0a10 	vmov	s16, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 81b1 	beq.w	8007010 <_dtoa_r+0xbc0>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 fa35 	bl	8007124 <__multadd>
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	f300 808e 	bgt.w	8006de0 <_dtoa_r+0x990>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	dc51      	bgt.n	8006d6e <_dtoa_r+0x91e>
 8006cca:	e089      	b.n	8006de0 <_dtoa_r+0x990>
 8006ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cd2:	e74b      	b.n	8006b6c <_dtoa_r+0x71c>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	1e5e      	subs	r6, r3, #1
 8006cd8:	9b07      	ldr	r3, [sp, #28]
 8006cda:	42b3      	cmp	r3, r6
 8006cdc:	bfbf      	itttt	lt
 8006cde:	9b07      	ldrlt	r3, [sp, #28]
 8006ce0:	9607      	strlt	r6, [sp, #28]
 8006ce2:	1af2      	sublt	r2, r6, r3
 8006ce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ce6:	bfb6      	itet	lt
 8006ce8:	189b      	addlt	r3, r3, r2
 8006cea:	1b9e      	subge	r6, r3, r6
 8006cec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	bfb8      	it	lt
 8006cf2:	2600      	movlt	r6, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bfb7      	itett	lt
 8006cf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006cfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d00:	1a9d      	sublt	r5, r3, r2
 8006d02:	2300      	movlt	r3, #0
 8006d04:	e734      	b.n	8006b70 <_dtoa_r+0x720>
 8006d06:	9e07      	ldr	r6, [sp, #28]
 8006d08:	9d04      	ldr	r5, [sp, #16]
 8006d0a:	9f08      	ldr	r7, [sp, #32]
 8006d0c:	e73b      	b.n	8006b86 <_dtoa_r+0x736>
 8006d0e:	9a07      	ldr	r2, [sp, #28]
 8006d10:	e767      	b.n	8006be2 <_dtoa_r+0x792>
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	dc18      	bgt.n	8006d4a <_dtoa_r+0x8fa>
 8006d18:	f1ba 0f00 	cmp.w	sl, #0
 8006d1c:	d115      	bne.n	8006d4a <_dtoa_r+0x8fa>
 8006d1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d22:	b993      	cbnz	r3, 8006d4a <_dtoa_r+0x8fa>
 8006d24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d28:	0d1b      	lsrs	r3, r3, #20
 8006d2a:	051b      	lsls	r3, r3, #20
 8006d2c:	b183      	cbz	r3, 8006d50 <_dtoa_r+0x900>
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	3301      	adds	r3, #1
 8006d32:	9304      	str	r3, [sp, #16]
 8006d34:	9b05      	ldr	r3, [sp, #20]
 8006d36:	3301      	adds	r3, #1
 8006d38:	9305      	str	r3, [sp, #20]
 8006d3a:	f04f 0801 	mov.w	r8, #1
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f af6a 	bne.w	8006c1a <_dtoa_r+0x7ca>
 8006d46:	2001      	movs	r0, #1
 8006d48:	e76f      	b.n	8006c2a <_dtoa_r+0x7da>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	e7f6      	b.n	8006d3e <_dtoa_r+0x8ee>
 8006d50:	4698      	mov	r8, r3
 8006d52:	e7f4      	b.n	8006d3e <_dtoa_r+0x8ee>
 8006d54:	f43f af7d 	beq.w	8006c52 <_dtoa_r+0x802>
 8006d58:	4618      	mov	r0, r3
 8006d5a:	301c      	adds	r0, #28
 8006d5c:	e772      	b.n	8006c44 <_dtoa_r+0x7f4>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc37      	bgt.n	8006dd4 <_dtoa_r+0x984>
 8006d64:	9b06      	ldr	r3, [sp, #24]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	dd34      	ble.n	8006dd4 <_dtoa_r+0x984>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	9302      	str	r3, [sp, #8]
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	b96b      	cbnz	r3, 8006d8e <_dtoa_r+0x93e>
 8006d72:	4631      	mov	r1, r6
 8006d74:	2205      	movs	r2, #5
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f9d4 	bl	8007124 <__multadd>
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	4606      	mov	r6, r0
 8006d80:	ee18 0a10 	vmov	r0, s16
 8006d84:	f000 fbee 	bl	8007564 <__mcmp>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f73f adbb 	bgt.w	8006904 <_dtoa_r+0x4b4>
 8006d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d90:	9d01      	ldr	r5, [sp, #4]
 8006d92:	43db      	mvns	r3, r3
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	f04f 0800 	mov.w	r8, #0
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f99f 	bl	80070e0 <_Bfree>
 8006da2:	2f00      	cmp	r7, #0
 8006da4:	f43f aea4 	beq.w	8006af0 <_dtoa_r+0x6a0>
 8006da8:	f1b8 0f00 	cmp.w	r8, #0
 8006dac:	d005      	beq.n	8006dba <_dtoa_r+0x96a>
 8006dae:	45b8      	cmp	r8, r7
 8006db0:	d003      	beq.n	8006dba <_dtoa_r+0x96a>
 8006db2:	4641      	mov	r1, r8
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 f993 	bl	80070e0 <_Bfree>
 8006dba:	4639      	mov	r1, r7
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 f98f 	bl	80070e0 <_Bfree>
 8006dc2:	e695      	b.n	8006af0 <_dtoa_r+0x6a0>
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	4637      	mov	r7, r6
 8006dc8:	e7e1      	b.n	8006d8e <_dtoa_r+0x93e>
 8006dca:	9700      	str	r7, [sp, #0]
 8006dcc:	4637      	mov	r7, r6
 8006dce:	e599      	b.n	8006904 <_dtoa_r+0x4b4>
 8006dd0:	40240000 	.word	0x40240000
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80ca 	beq.w	8006f70 <_dtoa_r+0xb20>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	9302      	str	r3, [sp, #8]
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	dd05      	ble.n	8006df0 <_dtoa_r+0x9a0>
 8006de4:	4639      	mov	r1, r7
 8006de6:	462a      	mov	r2, r5
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fb4b 	bl	8007484 <__lshift>
 8006dee:	4607      	mov	r7, r0
 8006df0:	f1b8 0f00 	cmp.w	r8, #0
 8006df4:	d05b      	beq.n	8006eae <_dtoa_r+0xa5e>
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 f931 	bl	8007060 <_Balloc>
 8006dfe:	4605      	mov	r5, r0
 8006e00:	b928      	cbnz	r0, 8006e0e <_dtoa_r+0x9be>
 8006e02:	4b87      	ldr	r3, [pc, #540]	; (8007020 <_dtoa_r+0xbd0>)
 8006e04:	4602      	mov	r2, r0
 8006e06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e0a:	f7ff bb3b 	b.w	8006484 <_dtoa_r+0x34>
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	3202      	adds	r2, #2
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	f107 010c 	add.w	r1, r7, #12
 8006e18:	300c      	adds	r0, #12
 8006e1a:	f000 f913 	bl	8007044 <memcpy>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4629      	mov	r1, r5
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 fb2e 	bl	8007484 <__lshift>
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	f103 0901 	add.w	r9, r3, #1
 8006e2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e32:	4413      	add	r3, r2
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	f00a 0301 	and.w	r3, sl, #1
 8006e3a:	46b8      	mov	r8, r7
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	4607      	mov	r7, r0
 8006e40:	4631      	mov	r1, r6
 8006e42:	ee18 0a10 	vmov	r0, s16
 8006e46:	f7ff fa75 	bl	8006334 <quorem>
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	9002      	str	r0, [sp, #8]
 8006e4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e52:	ee18 0a10 	vmov	r0, s16
 8006e56:	f000 fb85 	bl	8007564 <__mcmp>
 8006e5a:	463a      	mov	r2, r7
 8006e5c:	9003      	str	r0, [sp, #12]
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fb9b 	bl	800759c <__mdiff>
 8006e66:	68c2      	ldr	r2, [r0, #12]
 8006e68:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	bb02      	cbnz	r2, 8006eb2 <_dtoa_r+0xa62>
 8006e70:	4601      	mov	r1, r0
 8006e72:	ee18 0a10 	vmov	r0, s16
 8006e76:	f000 fb75 	bl	8007564 <__mcmp>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4620      	mov	r0, r4
 8006e80:	9207      	str	r2, [sp, #28]
 8006e82:	f000 f92d 	bl	80070e0 <_Bfree>
 8006e86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e8a:	ea43 0102 	orr.w	r1, r3, r2
 8006e8e:	9b04      	ldr	r3, [sp, #16]
 8006e90:	430b      	orrs	r3, r1
 8006e92:	464d      	mov	r5, r9
 8006e94:	d10f      	bne.n	8006eb6 <_dtoa_r+0xa66>
 8006e96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e9a:	d02a      	beq.n	8006ef2 <_dtoa_r+0xaa2>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dd02      	ble.n	8006ea8 <_dtoa_r+0xa58>
 8006ea2:	9b02      	ldr	r3, [sp, #8]
 8006ea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ea8:	f88b a000 	strb.w	sl, [fp]
 8006eac:	e775      	b.n	8006d9a <_dtoa_r+0x94a>
 8006eae:	4638      	mov	r0, r7
 8006eb0:	e7ba      	b.n	8006e28 <_dtoa_r+0x9d8>
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	e7e2      	b.n	8006e7c <_dtoa_r+0xa2c>
 8006eb6:	9b03      	ldr	r3, [sp, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	db04      	blt.n	8006ec6 <_dtoa_r+0xa76>
 8006ebc:	9906      	ldr	r1, [sp, #24]
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	9904      	ldr	r1, [sp, #16]
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	d122      	bne.n	8006f0c <_dtoa_r+0xabc>
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	ddee      	ble.n	8006ea8 <_dtoa_r+0xa58>
 8006eca:	ee18 1a10 	vmov	r1, s16
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fad7 	bl	8007484 <__lshift>
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	ee08 0a10 	vmov	s16, r0
 8006edc:	f000 fb42 	bl	8007564 <__mcmp>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	dc03      	bgt.n	8006eec <_dtoa_r+0xa9c>
 8006ee4:	d1e0      	bne.n	8006ea8 <_dtoa_r+0xa58>
 8006ee6:	f01a 0f01 	tst.w	sl, #1
 8006eea:	d0dd      	beq.n	8006ea8 <_dtoa_r+0xa58>
 8006eec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ef0:	d1d7      	bne.n	8006ea2 <_dtoa_r+0xa52>
 8006ef2:	2339      	movs	r3, #57	; 0x39
 8006ef4:	f88b 3000 	strb.w	r3, [fp]
 8006ef8:	462b      	mov	r3, r5
 8006efa:	461d      	mov	r5, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f02:	2a39      	cmp	r2, #57	; 0x39
 8006f04:	d071      	beq.n	8006fea <_dtoa_r+0xb9a>
 8006f06:	3201      	adds	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	e746      	b.n	8006d9a <_dtoa_r+0x94a>
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	dd07      	ble.n	8006f20 <_dtoa_r+0xad0>
 8006f10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f14:	d0ed      	beq.n	8006ef2 <_dtoa_r+0xaa2>
 8006f16:	f10a 0301 	add.w	r3, sl, #1
 8006f1a:	f88b 3000 	strb.w	r3, [fp]
 8006f1e:	e73c      	b.n	8006d9a <_dtoa_r+0x94a>
 8006f20:	9b05      	ldr	r3, [sp, #20]
 8006f22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f26:	4599      	cmp	r9, r3
 8006f28:	d047      	beq.n	8006fba <_dtoa_r+0xb6a>
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	2300      	movs	r3, #0
 8006f30:	220a      	movs	r2, #10
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f8f6 	bl	8007124 <__multadd>
 8006f38:	45b8      	cmp	r8, r7
 8006f3a:	ee08 0a10 	vmov	s16, r0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	f04f 020a 	mov.w	r2, #10
 8006f46:	4641      	mov	r1, r8
 8006f48:	4620      	mov	r0, r4
 8006f4a:	d106      	bne.n	8006f5a <_dtoa_r+0xb0a>
 8006f4c:	f000 f8ea 	bl	8007124 <__multadd>
 8006f50:	4680      	mov	r8, r0
 8006f52:	4607      	mov	r7, r0
 8006f54:	f109 0901 	add.w	r9, r9, #1
 8006f58:	e772      	b.n	8006e40 <_dtoa_r+0x9f0>
 8006f5a:	f000 f8e3 	bl	8007124 <__multadd>
 8006f5e:	4639      	mov	r1, r7
 8006f60:	4680      	mov	r8, r0
 8006f62:	2300      	movs	r3, #0
 8006f64:	220a      	movs	r2, #10
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f8dc 	bl	8007124 <__multadd>
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	e7f1      	b.n	8006f54 <_dtoa_r+0xb04>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	9302      	str	r3, [sp, #8]
 8006f74:	9d01      	ldr	r5, [sp, #4]
 8006f76:	ee18 0a10 	vmov	r0, s16
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	f7ff f9da 	bl	8006334 <quorem>
 8006f80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	f805 ab01 	strb.w	sl, [r5], #1
 8006f8a:	1aea      	subs	r2, r5, r3
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	dd09      	ble.n	8006fa6 <_dtoa_r+0xb56>
 8006f92:	ee18 1a10 	vmov	r1, s16
 8006f96:	2300      	movs	r3, #0
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 f8c2 	bl	8007124 <__multadd>
 8006fa0:	ee08 0a10 	vmov	s16, r0
 8006fa4:	e7e7      	b.n	8006f76 <_dtoa_r+0xb26>
 8006fa6:	9b02      	ldr	r3, [sp, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bfc8      	it	gt
 8006fac:	461d      	movgt	r5, r3
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	bfd8      	it	le
 8006fb2:	2501      	movle	r5, #1
 8006fb4:	441d      	add	r5, r3
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	ee18 1a10 	vmov	r1, s16
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f000 fa5f 	bl	8007484 <__lshift>
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	ee08 0a10 	vmov	s16, r0
 8006fcc:	f000 faca 	bl	8007564 <__mcmp>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	dc91      	bgt.n	8006ef8 <_dtoa_r+0xaa8>
 8006fd4:	d102      	bne.n	8006fdc <_dtoa_r+0xb8c>
 8006fd6:	f01a 0f01 	tst.w	sl, #1
 8006fda:	d18d      	bne.n	8006ef8 <_dtoa_r+0xaa8>
 8006fdc:	462b      	mov	r3, r5
 8006fde:	461d      	mov	r5, r3
 8006fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fe4:	2a30      	cmp	r2, #48	; 0x30
 8006fe6:	d0fa      	beq.n	8006fde <_dtoa_r+0xb8e>
 8006fe8:	e6d7      	b.n	8006d9a <_dtoa_r+0x94a>
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d184      	bne.n	8006efa <_dtoa_r+0xaaa>
 8006ff0:	9b00      	ldr	r3, [sp, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	2331      	movs	r3, #49	; 0x31
 8006ff8:	7013      	strb	r3, [r2, #0]
 8006ffa:	e6ce      	b.n	8006d9a <_dtoa_r+0x94a>
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <_dtoa_r+0xbd4>)
 8006ffe:	f7ff ba95 	b.w	800652c <_dtoa_r+0xdc>
 8007002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f aa6e 	bne.w	80064e6 <_dtoa_r+0x96>
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <_dtoa_r+0xbd8>)
 800700c:	f7ff ba8e 	b.w	800652c <_dtoa_r+0xdc>
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	dcae      	bgt.n	8006f74 <_dtoa_r+0xb24>
 8007016:	9b06      	ldr	r3, [sp, #24]
 8007018:	2b02      	cmp	r3, #2
 800701a:	f73f aea8 	bgt.w	8006d6e <_dtoa_r+0x91e>
 800701e:	e7a9      	b.n	8006f74 <_dtoa_r+0xb24>
 8007020:	080088ff 	.word	0x080088ff
 8007024:	0800885c 	.word	0x0800885c
 8007028:	08008880 	.word	0x08008880

0800702c <_localeconv_r>:
 800702c:	4800      	ldr	r0, [pc, #0]	; (8007030 <_localeconv_r+0x4>)
 800702e:	4770      	bx	lr
 8007030:	20000164 	.word	0x20000164

08007034 <malloc>:
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <malloc+0xc>)
 8007036:	4601      	mov	r1, r0
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	f000 bc17 	b.w	800786c <_malloc_r>
 800703e:	bf00      	nop
 8007040:	20000010 	.word	0x20000010

08007044 <memcpy>:
 8007044:	440a      	add	r2, r1
 8007046:	4291      	cmp	r1, r2
 8007048:	f100 33ff 	add.w	r3, r0, #4294967295
 800704c:	d100      	bne.n	8007050 <memcpy+0xc>
 800704e:	4770      	bx	lr
 8007050:	b510      	push	{r4, lr}
 8007052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800705a:	4291      	cmp	r1, r2
 800705c:	d1f9      	bne.n	8007052 <memcpy+0xe>
 800705e:	bd10      	pop	{r4, pc}

08007060 <_Balloc>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	b976      	cbnz	r6, 8007088 <_Balloc+0x28>
 800706a:	2010      	movs	r0, #16
 800706c:	f7ff ffe2 	bl	8007034 <malloc>
 8007070:	4602      	mov	r2, r0
 8007072:	6260      	str	r0, [r4, #36]	; 0x24
 8007074:	b920      	cbnz	r0, 8007080 <_Balloc+0x20>
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <_Balloc+0x78>)
 8007078:	4818      	ldr	r0, [pc, #96]	; (80070dc <_Balloc+0x7c>)
 800707a:	2166      	movs	r1, #102	; 0x66
 800707c:	f000 fdd6 	bl	8007c2c <__assert_func>
 8007080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007084:	6006      	str	r6, [r0, #0]
 8007086:	60c6      	str	r6, [r0, #12]
 8007088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800708a:	68f3      	ldr	r3, [r6, #12]
 800708c:	b183      	cbz	r3, 80070b0 <_Balloc+0x50>
 800708e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007096:	b9b8      	cbnz	r0, 80070c8 <_Balloc+0x68>
 8007098:	2101      	movs	r1, #1
 800709a:	fa01 f605 	lsl.w	r6, r1, r5
 800709e:	1d72      	adds	r2, r6, #5
 80070a0:	0092      	lsls	r2, r2, #2
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fb60 	bl	8007768 <_calloc_r>
 80070a8:	b160      	cbz	r0, 80070c4 <_Balloc+0x64>
 80070aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070ae:	e00e      	b.n	80070ce <_Balloc+0x6e>
 80070b0:	2221      	movs	r2, #33	; 0x21
 80070b2:	2104      	movs	r1, #4
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fb57 	bl	8007768 <_calloc_r>
 80070ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070bc:	60f0      	str	r0, [r6, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e4      	bne.n	800708e <_Balloc+0x2e>
 80070c4:	2000      	movs	r0, #0
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	6802      	ldr	r2, [r0, #0]
 80070ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070ce:	2300      	movs	r3, #0
 80070d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070d4:	e7f7      	b.n	80070c6 <_Balloc+0x66>
 80070d6:	bf00      	nop
 80070d8:	0800888d 	.word	0x0800888d
 80070dc:	08008910 	.word	0x08008910

080070e0 <_Bfree>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070e4:	4605      	mov	r5, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	b976      	cbnz	r6, 8007108 <_Bfree+0x28>
 80070ea:	2010      	movs	r0, #16
 80070ec:	f7ff ffa2 	bl	8007034 <malloc>
 80070f0:	4602      	mov	r2, r0
 80070f2:	6268      	str	r0, [r5, #36]	; 0x24
 80070f4:	b920      	cbnz	r0, 8007100 <_Bfree+0x20>
 80070f6:	4b09      	ldr	r3, [pc, #36]	; (800711c <_Bfree+0x3c>)
 80070f8:	4809      	ldr	r0, [pc, #36]	; (8007120 <_Bfree+0x40>)
 80070fa:	218a      	movs	r1, #138	; 0x8a
 80070fc:	f000 fd96 	bl	8007c2c <__assert_func>
 8007100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007104:	6006      	str	r6, [r0, #0]
 8007106:	60c6      	str	r6, [r0, #12]
 8007108:	b13c      	cbz	r4, 800711a <_Bfree+0x3a>
 800710a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800710c:	6862      	ldr	r2, [r4, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007114:	6021      	str	r1, [r4, #0]
 8007116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	0800888d 	.word	0x0800888d
 8007120:	08008910 	.word	0x08008910

08007124 <__multadd>:
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	690d      	ldr	r5, [r1, #16]
 800712a:	4607      	mov	r7, r0
 800712c:	460c      	mov	r4, r1
 800712e:	461e      	mov	r6, r3
 8007130:	f101 0c14 	add.w	ip, r1, #20
 8007134:	2000      	movs	r0, #0
 8007136:	f8dc 3000 	ldr.w	r3, [ip]
 800713a:	b299      	uxth	r1, r3
 800713c:	fb02 6101 	mla	r1, r2, r1, r6
 8007140:	0c1e      	lsrs	r6, r3, #16
 8007142:	0c0b      	lsrs	r3, r1, #16
 8007144:	fb02 3306 	mla	r3, r2, r6, r3
 8007148:	b289      	uxth	r1, r1
 800714a:	3001      	adds	r0, #1
 800714c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007150:	4285      	cmp	r5, r0
 8007152:	f84c 1b04 	str.w	r1, [ip], #4
 8007156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800715a:	dcec      	bgt.n	8007136 <__multadd+0x12>
 800715c:	b30e      	cbz	r6, 80071a2 <__multadd+0x7e>
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	42ab      	cmp	r3, r5
 8007162:	dc19      	bgt.n	8007198 <__multadd+0x74>
 8007164:	6861      	ldr	r1, [r4, #4]
 8007166:	4638      	mov	r0, r7
 8007168:	3101      	adds	r1, #1
 800716a:	f7ff ff79 	bl	8007060 <_Balloc>
 800716e:	4680      	mov	r8, r0
 8007170:	b928      	cbnz	r0, 800717e <__multadd+0x5a>
 8007172:	4602      	mov	r2, r0
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <__multadd+0x84>)
 8007176:	480d      	ldr	r0, [pc, #52]	; (80071ac <__multadd+0x88>)
 8007178:	21b5      	movs	r1, #181	; 0xb5
 800717a:	f000 fd57 	bl	8007c2c <__assert_func>
 800717e:	6922      	ldr	r2, [r4, #16]
 8007180:	3202      	adds	r2, #2
 8007182:	f104 010c 	add.w	r1, r4, #12
 8007186:	0092      	lsls	r2, r2, #2
 8007188:	300c      	adds	r0, #12
 800718a:	f7ff ff5b 	bl	8007044 <memcpy>
 800718e:	4621      	mov	r1, r4
 8007190:	4638      	mov	r0, r7
 8007192:	f7ff ffa5 	bl	80070e0 <_Bfree>
 8007196:	4644      	mov	r4, r8
 8007198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800719c:	3501      	adds	r5, #1
 800719e:	615e      	str	r6, [r3, #20]
 80071a0:	6125      	str	r5, [r4, #16]
 80071a2:	4620      	mov	r0, r4
 80071a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a8:	080088ff 	.word	0x080088ff
 80071ac:	08008910 	.word	0x08008910

080071b0 <__hi0bits>:
 80071b0:	0c03      	lsrs	r3, r0, #16
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	b9d3      	cbnz	r3, 80071ec <__hi0bits+0x3c>
 80071b6:	0400      	lsls	r0, r0, #16
 80071b8:	2310      	movs	r3, #16
 80071ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071be:	bf04      	itt	eq
 80071c0:	0200      	lsleq	r0, r0, #8
 80071c2:	3308      	addeq	r3, #8
 80071c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071c8:	bf04      	itt	eq
 80071ca:	0100      	lsleq	r0, r0, #4
 80071cc:	3304      	addeq	r3, #4
 80071ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071d2:	bf04      	itt	eq
 80071d4:	0080      	lsleq	r0, r0, #2
 80071d6:	3302      	addeq	r3, #2
 80071d8:	2800      	cmp	r0, #0
 80071da:	db05      	blt.n	80071e8 <__hi0bits+0x38>
 80071dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071e0:	f103 0301 	add.w	r3, r3, #1
 80071e4:	bf08      	it	eq
 80071e6:	2320      	moveq	r3, #32
 80071e8:	4618      	mov	r0, r3
 80071ea:	4770      	bx	lr
 80071ec:	2300      	movs	r3, #0
 80071ee:	e7e4      	b.n	80071ba <__hi0bits+0xa>

080071f0 <__lo0bits>:
 80071f0:	6803      	ldr	r3, [r0, #0]
 80071f2:	f013 0207 	ands.w	r2, r3, #7
 80071f6:	4601      	mov	r1, r0
 80071f8:	d00b      	beq.n	8007212 <__lo0bits+0x22>
 80071fa:	07da      	lsls	r2, r3, #31
 80071fc:	d423      	bmi.n	8007246 <__lo0bits+0x56>
 80071fe:	0798      	lsls	r0, r3, #30
 8007200:	bf49      	itett	mi
 8007202:	085b      	lsrmi	r3, r3, #1
 8007204:	089b      	lsrpl	r3, r3, #2
 8007206:	2001      	movmi	r0, #1
 8007208:	600b      	strmi	r3, [r1, #0]
 800720a:	bf5c      	itt	pl
 800720c:	600b      	strpl	r3, [r1, #0]
 800720e:	2002      	movpl	r0, #2
 8007210:	4770      	bx	lr
 8007212:	b298      	uxth	r0, r3
 8007214:	b9a8      	cbnz	r0, 8007242 <__lo0bits+0x52>
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	2010      	movs	r0, #16
 800721a:	b2da      	uxtb	r2, r3
 800721c:	b90a      	cbnz	r2, 8007222 <__lo0bits+0x32>
 800721e:	3008      	adds	r0, #8
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	071a      	lsls	r2, r3, #28
 8007224:	bf04      	itt	eq
 8007226:	091b      	lsreq	r3, r3, #4
 8007228:	3004      	addeq	r0, #4
 800722a:	079a      	lsls	r2, r3, #30
 800722c:	bf04      	itt	eq
 800722e:	089b      	lsreq	r3, r3, #2
 8007230:	3002      	addeq	r0, #2
 8007232:	07da      	lsls	r2, r3, #31
 8007234:	d403      	bmi.n	800723e <__lo0bits+0x4e>
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	f100 0001 	add.w	r0, r0, #1
 800723c:	d005      	beq.n	800724a <__lo0bits+0x5a>
 800723e:	600b      	str	r3, [r1, #0]
 8007240:	4770      	bx	lr
 8007242:	4610      	mov	r0, r2
 8007244:	e7e9      	b.n	800721a <__lo0bits+0x2a>
 8007246:	2000      	movs	r0, #0
 8007248:	4770      	bx	lr
 800724a:	2020      	movs	r0, #32
 800724c:	4770      	bx	lr
	...

08007250 <__i2b>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	2101      	movs	r1, #1
 8007256:	f7ff ff03 	bl	8007060 <_Balloc>
 800725a:	4602      	mov	r2, r0
 800725c:	b928      	cbnz	r0, 800726a <__i2b+0x1a>
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <__i2b+0x24>)
 8007260:	4805      	ldr	r0, [pc, #20]	; (8007278 <__i2b+0x28>)
 8007262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007266:	f000 fce1 	bl	8007c2c <__assert_func>
 800726a:	2301      	movs	r3, #1
 800726c:	6144      	str	r4, [r0, #20]
 800726e:	6103      	str	r3, [r0, #16]
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	080088ff 	.word	0x080088ff
 8007278:	08008910 	.word	0x08008910

0800727c <__multiply>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	4691      	mov	r9, r2
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007288:	429a      	cmp	r2, r3
 800728a:	bfb8      	it	lt
 800728c:	460b      	movlt	r3, r1
 800728e:	460c      	mov	r4, r1
 8007290:	bfbc      	itt	lt
 8007292:	464c      	movlt	r4, r9
 8007294:	4699      	movlt	r9, r3
 8007296:	6927      	ldr	r7, [r4, #16]
 8007298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	6861      	ldr	r1, [r4, #4]
 80072a0:	eb07 060a 	add.w	r6, r7, sl
 80072a4:	42b3      	cmp	r3, r6
 80072a6:	b085      	sub	sp, #20
 80072a8:	bfb8      	it	lt
 80072aa:	3101      	addlt	r1, #1
 80072ac:	f7ff fed8 	bl	8007060 <_Balloc>
 80072b0:	b930      	cbnz	r0, 80072c0 <__multiply+0x44>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b44      	ldr	r3, [pc, #272]	; (80073c8 <__multiply+0x14c>)
 80072b6:	4845      	ldr	r0, [pc, #276]	; (80073cc <__multiply+0x150>)
 80072b8:	f240 115d 	movw	r1, #349	; 0x15d
 80072bc:	f000 fcb6 	bl	8007c2c <__assert_func>
 80072c0:	f100 0514 	add.w	r5, r0, #20
 80072c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072c8:	462b      	mov	r3, r5
 80072ca:	2200      	movs	r2, #0
 80072cc:	4543      	cmp	r3, r8
 80072ce:	d321      	bcc.n	8007314 <__multiply+0x98>
 80072d0:	f104 0314 	add.w	r3, r4, #20
 80072d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072d8:	f109 0314 	add.w	r3, r9, #20
 80072dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072e0:	9202      	str	r2, [sp, #8]
 80072e2:	1b3a      	subs	r2, r7, r4
 80072e4:	3a15      	subs	r2, #21
 80072e6:	f022 0203 	bic.w	r2, r2, #3
 80072ea:	3204      	adds	r2, #4
 80072ec:	f104 0115 	add.w	r1, r4, #21
 80072f0:	428f      	cmp	r7, r1
 80072f2:	bf38      	it	cc
 80072f4:	2204      	movcc	r2, #4
 80072f6:	9201      	str	r2, [sp, #4]
 80072f8:	9a02      	ldr	r2, [sp, #8]
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d80c      	bhi.n	800731a <__multiply+0x9e>
 8007300:	2e00      	cmp	r6, #0
 8007302:	dd03      	ble.n	800730c <__multiply+0x90>
 8007304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007308:	2b00      	cmp	r3, #0
 800730a:	d05a      	beq.n	80073c2 <__multiply+0x146>
 800730c:	6106      	str	r6, [r0, #16]
 800730e:	b005      	add	sp, #20
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	f843 2b04 	str.w	r2, [r3], #4
 8007318:	e7d8      	b.n	80072cc <__multiply+0x50>
 800731a:	f8b3 a000 	ldrh.w	sl, [r3]
 800731e:	f1ba 0f00 	cmp.w	sl, #0
 8007322:	d024      	beq.n	800736e <__multiply+0xf2>
 8007324:	f104 0e14 	add.w	lr, r4, #20
 8007328:	46a9      	mov	r9, r5
 800732a:	f04f 0c00 	mov.w	ip, #0
 800732e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007332:	f8d9 1000 	ldr.w	r1, [r9]
 8007336:	fa1f fb82 	uxth.w	fp, r2
 800733a:	b289      	uxth	r1, r1
 800733c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007344:	f8d9 2000 	ldr.w	r2, [r9]
 8007348:	4461      	add	r1, ip
 800734a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800734e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007356:	b289      	uxth	r1, r1
 8007358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800735c:	4577      	cmp	r7, lr
 800735e:	f849 1b04 	str.w	r1, [r9], #4
 8007362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007366:	d8e2      	bhi.n	800732e <__multiply+0xb2>
 8007368:	9a01      	ldr	r2, [sp, #4]
 800736a:	f845 c002 	str.w	ip, [r5, r2]
 800736e:	9a03      	ldr	r2, [sp, #12]
 8007370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007374:	3304      	adds	r3, #4
 8007376:	f1b9 0f00 	cmp.w	r9, #0
 800737a:	d020      	beq.n	80073be <__multiply+0x142>
 800737c:	6829      	ldr	r1, [r5, #0]
 800737e:	f104 0c14 	add.w	ip, r4, #20
 8007382:	46ae      	mov	lr, r5
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	f8bc b000 	ldrh.w	fp, [ip]
 800738c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007390:	fb09 220b 	mla	r2, r9, fp, r2
 8007394:	4492      	add	sl, r2
 8007396:	b289      	uxth	r1, r1
 8007398:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800739c:	f84e 1b04 	str.w	r1, [lr], #4
 80073a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073a4:	f8be 1000 	ldrh.w	r1, [lr]
 80073a8:	0c12      	lsrs	r2, r2, #16
 80073aa:	fb09 1102 	mla	r1, r9, r2, r1
 80073ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073b2:	4567      	cmp	r7, ip
 80073b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073b8:	d8e6      	bhi.n	8007388 <__multiply+0x10c>
 80073ba:	9a01      	ldr	r2, [sp, #4]
 80073bc:	50a9      	str	r1, [r5, r2]
 80073be:	3504      	adds	r5, #4
 80073c0:	e79a      	b.n	80072f8 <__multiply+0x7c>
 80073c2:	3e01      	subs	r6, #1
 80073c4:	e79c      	b.n	8007300 <__multiply+0x84>
 80073c6:	bf00      	nop
 80073c8:	080088ff 	.word	0x080088ff
 80073cc:	08008910 	.word	0x08008910

080073d0 <__pow5mult>:
 80073d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d4:	4615      	mov	r5, r2
 80073d6:	f012 0203 	ands.w	r2, r2, #3
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	d007      	beq.n	80073f0 <__pow5mult+0x20>
 80073e0:	4c25      	ldr	r4, [pc, #148]	; (8007478 <__pow5mult+0xa8>)
 80073e2:	3a01      	subs	r2, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ea:	f7ff fe9b 	bl	8007124 <__multadd>
 80073ee:	4607      	mov	r7, r0
 80073f0:	10ad      	asrs	r5, r5, #2
 80073f2:	d03d      	beq.n	8007470 <__pow5mult+0xa0>
 80073f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073f6:	b97c      	cbnz	r4, 8007418 <__pow5mult+0x48>
 80073f8:	2010      	movs	r0, #16
 80073fa:	f7ff fe1b 	bl	8007034 <malloc>
 80073fe:	4602      	mov	r2, r0
 8007400:	6270      	str	r0, [r6, #36]	; 0x24
 8007402:	b928      	cbnz	r0, 8007410 <__pow5mult+0x40>
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <__pow5mult+0xac>)
 8007406:	481e      	ldr	r0, [pc, #120]	; (8007480 <__pow5mult+0xb0>)
 8007408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800740c:	f000 fc0e 	bl	8007c2c <__assert_func>
 8007410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007414:	6004      	str	r4, [r0, #0]
 8007416:	60c4      	str	r4, [r0, #12]
 8007418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800741c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007420:	b94c      	cbnz	r4, 8007436 <__pow5mult+0x66>
 8007422:	f240 2171 	movw	r1, #625	; 0x271
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff12 	bl	8007250 <__i2b>
 800742c:	2300      	movs	r3, #0
 800742e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007432:	4604      	mov	r4, r0
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	07eb      	lsls	r3, r5, #31
 800743c:	d50a      	bpl.n	8007454 <__pow5mult+0x84>
 800743e:	4639      	mov	r1, r7
 8007440:	4622      	mov	r2, r4
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ff1a 	bl	800727c <__multiply>
 8007448:	4639      	mov	r1, r7
 800744a:	4680      	mov	r8, r0
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fe47 	bl	80070e0 <_Bfree>
 8007452:	4647      	mov	r7, r8
 8007454:	106d      	asrs	r5, r5, #1
 8007456:	d00b      	beq.n	8007470 <__pow5mult+0xa0>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	b938      	cbnz	r0, 800746c <__pow5mult+0x9c>
 800745c:	4622      	mov	r2, r4
 800745e:	4621      	mov	r1, r4
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ff0b 	bl	800727c <__multiply>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f8c0 9000 	str.w	r9, [r0]
 800746c:	4604      	mov	r4, r0
 800746e:	e7e4      	b.n	800743a <__pow5mult+0x6a>
 8007470:	4638      	mov	r0, r7
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	bf00      	nop
 8007478:	08008a60 	.word	0x08008a60
 800747c:	0800888d 	.word	0x0800888d
 8007480:	08008910 	.word	0x08008910

08007484 <__lshift>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	6849      	ldr	r1, [r1, #4]
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	4607      	mov	r7, r0
 8007496:	4691      	mov	r9, r2
 8007498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800749c:	f108 0601 	add.w	r6, r8, #1
 80074a0:	42b3      	cmp	r3, r6
 80074a2:	db0b      	blt.n	80074bc <__lshift+0x38>
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff fddb 	bl	8007060 <_Balloc>
 80074aa:	4605      	mov	r5, r0
 80074ac:	b948      	cbnz	r0, 80074c2 <__lshift+0x3e>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4b2a      	ldr	r3, [pc, #168]	; (800755c <__lshift+0xd8>)
 80074b2:	482b      	ldr	r0, [pc, #172]	; (8007560 <__lshift+0xdc>)
 80074b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074b8:	f000 fbb8 	bl	8007c2c <__assert_func>
 80074bc:	3101      	adds	r1, #1
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	e7ee      	b.n	80074a0 <__lshift+0x1c>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f100 0114 	add.w	r1, r0, #20
 80074c8:	f100 0210 	add.w	r2, r0, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	4553      	cmp	r3, sl
 80074d0:	db37      	blt.n	8007542 <__lshift+0xbe>
 80074d2:	6920      	ldr	r0, [r4, #16]
 80074d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d8:	f104 0314 	add.w	r3, r4, #20
 80074dc:	f019 091f 	ands.w	r9, r9, #31
 80074e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074e8:	d02f      	beq.n	800754a <__lshift+0xc6>
 80074ea:	f1c9 0e20 	rsb	lr, r9, #32
 80074ee:	468a      	mov	sl, r1
 80074f0:	f04f 0c00 	mov.w	ip, #0
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	fa02 f209 	lsl.w	r2, r2, r9
 80074fa:	ea42 020c 	orr.w	r2, r2, ip
 80074fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007502:	f853 2b04 	ldr.w	r2, [r3], #4
 8007506:	4298      	cmp	r0, r3
 8007508:	fa22 fc0e 	lsr.w	ip, r2, lr
 800750c:	d8f2      	bhi.n	80074f4 <__lshift+0x70>
 800750e:	1b03      	subs	r3, r0, r4
 8007510:	3b15      	subs	r3, #21
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	3304      	adds	r3, #4
 8007518:	f104 0215 	add.w	r2, r4, #21
 800751c:	4290      	cmp	r0, r2
 800751e:	bf38      	it	cc
 8007520:	2304      	movcc	r3, #4
 8007522:	f841 c003 	str.w	ip, [r1, r3]
 8007526:	f1bc 0f00 	cmp.w	ip, #0
 800752a:	d001      	beq.n	8007530 <__lshift+0xac>
 800752c:	f108 0602 	add.w	r6, r8, #2
 8007530:	3e01      	subs	r6, #1
 8007532:	4638      	mov	r0, r7
 8007534:	612e      	str	r6, [r5, #16]
 8007536:	4621      	mov	r1, r4
 8007538:	f7ff fdd2 	bl	80070e0 <_Bfree>
 800753c:	4628      	mov	r0, r5
 800753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007542:	f842 0f04 	str.w	r0, [r2, #4]!
 8007546:	3301      	adds	r3, #1
 8007548:	e7c1      	b.n	80074ce <__lshift+0x4a>
 800754a:	3904      	subs	r1, #4
 800754c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007550:	f841 2f04 	str.w	r2, [r1, #4]!
 8007554:	4298      	cmp	r0, r3
 8007556:	d8f9      	bhi.n	800754c <__lshift+0xc8>
 8007558:	e7ea      	b.n	8007530 <__lshift+0xac>
 800755a:	bf00      	nop
 800755c:	080088ff 	.word	0x080088ff
 8007560:	08008910 	.word	0x08008910

08007564 <__mcmp>:
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	6902      	ldr	r2, [r0, #16]
 8007568:	690c      	ldr	r4, [r1, #16]
 800756a:	1b12      	subs	r2, r2, r4
 800756c:	d10e      	bne.n	800758c <__mcmp+0x28>
 800756e:	f100 0314 	add.w	r3, r0, #20
 8007572:	3114      	adds	r1, #20
 8007574:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007578:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800757c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007580:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007584:	42a5      	cmp	r5, r4
 8007586:	d003      	beq.n	8007590 <__mcmp+0x2c>
 8007588:	d305      	bcc.n	8007596 <__mcmp+0x32>
 800758a:	2201      	movs	r2, #1
 800758c:	4610      	mov	r0, r2
 800758e:	bd30      	pop	{r4, r5, pc}
 8007590:	4283      	cmp	r3, r0
 8007592:	d3f3      	bcc.n	800757c <__mcmp+0x18>
 8007594:	e7fa      	b.n	800758c <__mcmp+0x28>
 8007596:	f04f 32ff 	mov.w	r2, #4294967295
 800759a:	e7f7      	b.n	800758c <__mcmp+0x28>

0800759c <__mdiff>:
 800759c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	460c      	mov	r4, r1
 80075a2:	4606      	mov	r6, r0
 80075a4:	4611      	mov	r1, r2
 80075a6:	4620      	mov	r0, r4
 80075a8:	4690      	mov	r8, r2
 80075aa:	f7ff ffdb 	bl	8007564 <__mcmp>
 80075ae:	1e05      	subs	r5, r0, #0
 80075b0:	d110      	bne.n	80075d4 <__mdiff+0x38>
 80075b2:	4629      	mov	r1, r5
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7ff fd53 	bl	8007060 <_Balloc>
 80075ba:	b930      	cbnz	r0, 80075ca <__mdiff+0x2e>
 80075bc:	4b3a      	ldr	r3, [pc, #232]	; (80076a8 <__mdiff+0x10c>)
 80075be:	4602      	mov	r2, r0
 80075c0:	f240 2132 	movw	r1, #562	; 0x232
 80075c4:	4839      	ldr	r0, [pc, #228]	; (80076ac <__mdiff+0x110>)
 80075c6:	f000 fb31 	bl	8007c2c <__assert_func>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	bfa4      	itt	ge
 80075d6:	4643      	movge	r3, r8
 80075d8:	46a0      	movge	r8, r4
 80075da:	4630      	mov	r0, r6
 80075dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075e0:	bfa6      	itte	ge
 80075e2:	461c      	movge	r4, r3
 80075e4:	2500      	movge	r5, #0
 80075e6:	2501      	movlt	r5, #1
 80075e8:	f7ff fd3a 	bl	8007060 <_Balloc>
 80075ec:	b920      	cbnz	r0, 80075f8 <__mdiff+0x5c>
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <__mdiff+0x10c>)
 80075f0:	4602      	mov	r2, r0
 80075f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075f6:	e7e5      	b.n	80075c4 <__mdiff+0x28>
 80075f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075fc:	6926      	ldr	r6, [r4, #16]
 80075fe:	60c5      	str	r5, [r0, #12]
 8007600:	f104 0914 	add.w	r9, r4, #20
 8007604:	f108 0514 	add.w	r5, r8, #20
 8007608:	f100 0e14 	add.w	lr, r0, #20
 800760c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007614:	f108 0210 	add.w	r2, r8, #16
 8007618:	46f2      	mov	sl, lr
 800761a:	2100      	movs	r1, #0
 800761c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007620:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007624:	fa1f f883 	uxth.w	r8, r3
 8007628:	fa11 f18b 	uxtah	r1, r1, fp
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	eba1 0808 	sub.w	r8, r1, r8
 8007632:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007636:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800763a:	fa1f f888 	uxth.w	r8, r8
 800763e:	1419      	asrs	r1, r3, #16
 8007640:	454e      	cmp	r6, r9
 8007642:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007646:	f84a 3b04 	str.w	r3, [sl], #4
 800764a:	d8e7      	bhi.n	800761c <__mdiff+0x80>
 800764c:	1b33      	subs	r3, r6, r4
 800764e:	3b15      	subs	r3, #21
 8007650:	f023 0303 	bic.w	r3, r3, #3
 8007654:	3304      	adds	r3, #4
 8007656:	3415      	adds	r4, #21
 8007658:	42a6      	cmp	r6, r4
 800765a:	bf38      	it	cc
 800765c:	2304      	movcc	r3, #4
 800765e:	441d      	add	r5, r3
 8007660:	4473      	add	r3, lr
 8007662:	469e      	mov	lr, r3
 8007664:	462e      	mov	r6, r5
 8007666:	4566      	cmp	r6, ip
 8007668:	d30e      	bcc.n	8007688 <__mdiff+0xec>
 800766a:	f10c 0203 	add.w	r2, ip, #3
 800766e:	1b52      	subs	r2, r2, r5
 8007670:	f022 0203 	bic.w	r2, r2, #3
 8007674:	3d03      	subs	r5, #3
 8007676:	45ac      	cmp	ip, r5
 8007678:	bf38      	it	cc
 800767a:	2200      	movcc	r2, #0
 800767c:	441a      	add	r2, r3
 800767e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007682:	b17b      	cbz	r3, 80076a4 <__mdiff+0x108>
 8007684:	6107      	str	r7, [r0, #16]
 8007686:	e7a3      	b.n	80075d0 <__mdiff+0x34>
 8007688:	f856 8b04 	ldr.w	r8, [r6], #4
 800768c:	fa11 f288 	uxtah	r2, r1, r8
 8007690:	1414      	asrs	r4, r2, #16
 8007692:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007696:	b292      	uxth	r2, r2
 8007698:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800769c:	f84e 2b04 	str.w	r2, [lr], #4
 80076a0:	1421      	asrs	r1, r4, #16
 80076a2:	e7e0      	b.n	8007666 <__mdiff+0xca>
 80076a4:	3f01      	subs	r7, #1
 80076a6:	e7ea      	b.n	800767e <__mdiff+0xe2>
 80076a8:	080088ff 	.word	0x080088ff
 80076ac:	08008910 	.word	0x08008910

080076b0 <__d2b>:
 80076b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	4689      	mov	r9, r1
 80076b6:	2101      	movs	r1, #1
 80076b8:	ec57 6b10 	vmov	r6, r7, d0
 80076bc:	4690      	mov	r8, r2
 80076be:	f7ff fccf 	bl	8007060 <_Balloc>
 80076c2:	4604      	mov	r4, r0
 80076c4:	b930      	cbnz	r0, 80076d4 <__d2b+0x24>
 80076c6:	4602      	mov	r2, r0
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <__d2b+0xb0>)
 80076ca:	4826      	ldr	r0, [pc, #152]	; (8007764 <__d2b+0xb4>)
 80076cc:	f240 310a 	movw	r1, #778	; 0x30a
 80076d0:	f000 faac 	bl	8007c2c <__assert_func>
 80076d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076dc:	bb35      	cbnz	r5, 800772c <__d2b+0x7c>
 80076de:	2e00      	cmp	r6, #0
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	d028      	beq.n	8007736 <__d2b+0x86>
 80076e4:	4668      	mov	r0, sp
 80076e6:	9600      	str	r6, [sp, #0]
 80076e8:	f7ff fd82 	bl	80071f0 <__lo0bits>
 80076ec:	9900      	ldr	r1, [sp, #0]
 80076ee:	b300      	cbz	r0, 8007732 <__d2b+0x82>
 80076f0:	9a01      	ldr	r2, [sp, #4]
 80076f2:	f1c0 0320 	rsb	r3, r0, #32
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	430b      	orrs	r3, r1
 80076fc:	40c2      	lsrs	r2, r0
 80076fe:	6163      	str	r3, [r4, #20]
 8007700:	9201      	str	r2, [sp, #4]
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	61a3      	str	r3, [r4, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	bf14      	ite	ne
 800770a:	2202      	movne	r2, #2
 800770c:	2201      	moveq	r2, #1
 800770e:	6122      	str	r2, [r4, #16]
 8007710:	b1d5      	cbz	r5, 8007748 <__d2b+0x98>
 8007712:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007716:	4405      	add	r5, r0
 8007718:	f8c9 5000 	str.w	r5, [r9]
 800771c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007720:	f8c8 0000 	str.w	r0, [r8]
 8007724:	4620      	mov	r0, r4
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800772c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007730:	e7d5      	b.n	80076de <__d2b+0x2e>
 8007732:	6161      	str	r1, [r4, #20]
 8007734:	e7e5      	b.n	8007702 <__d2b+0x52>
 8007736:	a801      	add	r0, sp, #4
 8007738:	f7ff fd5a 	bl	80071f0 <__lo0bits>
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	2201      	movs	r2, #1
 8007742:	6122      	str	r2, [r4, #16]
 8007744:	3020      	adds	r0, #32
 8007746:	e7e3      	b.n	8007710 <__d2b+0x60>
 8007748:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800774c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007750:	f8c9 0000 	str.w	r0, [r9]
 8007754:	6918      	ldr	r0, [r3, #16]
 8007756:	f7ff fd2b 	bl	80071b0 <__hi0bits>
 800775a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800775e:	e7df      	b.n	8007720 <__d2b+0x70>
 8007760:	080088ff 	.word	0x080088ff
 8007764:	08008910 	.word	0x08008910

08007768 <_calloc_r>:
 8007768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776a:	fba1 2402 	umull	r2, r4, r1, r2
 800776e:	b94c      	cbnz	r4, 8007784 <_calloc_r+0x1c>
 8007770:	4611      	mov	r1, r2
 8007772:	9201      	str	r2, [sp, #4]
 8007774:	f000 f87a 	bl	800786c <_malloc_r>
 8007778:	9a01      	ldr	r2, [sp, #4]
 800777a:	4605      	mov	r5, r0
 800777c:	b930      	cbnz	r0, 800778c <_calloc_r+0x24>
 800777e:	4628      	mov	r0, r5
 8007780:	b003      	add	sp, #12
 8007782:	bd30      	pop	{r4, r5, pc}
 8007784:	220c      	movs	r2, #12
 8007786:	6002      	str	r2, [r0, #0]
 8007788:	2500      	movs	r5, #0
 800778a:	e7f8      	b.n	800777e <_calloc_r+0x16>
 800778c:	4621      	mov	r1, r4
 800778e:	f7fe f92b 	bl	80059e8 <memset>
 8007792:	e7f4      	b.n	800777e <_calloc_r+0x16>

08007794 <_free_r>:
 8007794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007796:	2900      	cmp	r1, #0
 8007798:	d044      	beq.n	8007824 <_free_r+0x90>
 800779a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800779e:	9001      	str	r0, [sp, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f1a1 0404 	sub.w	r4, r1, #4
 80077a6:	bfb8      	it	lt
 80077a8:	18e4      	addlt	r4, r4, r3
 80077aa:	f000 fa9b 	bl	8007ce4 <__malloc_lock>
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <_free_r+0x94>)
 80077b0:	9801      	ldr	r0, [sp, #4]
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	b933      	cbnz	r3, 80077c4 <_free_r+0x30>
 80077b6:	6063      	str	r3, [r4, #4]
 80077b8:	6014      	str	r4, [r2, #0]
 80077ba:	b003      	add	sp, #12
 80077bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c0:	f000 ba96 	b.w	8007cf0 <__malloc_unlock>
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d908      	bls.n	80077da <_free_r+0x46>
 80077c8:	6825      	ldr	r5, [r4, #0]
 80077ca:	1961      	adds	r1, r4, r5
 80077cc:	428b      	cmp	r3, r1
 80077ce:	bf01      	itttt	eq
 80077d0:	6819      	ldreq	r1, [r3, #0]
 80077d2:	685b      	ldreq	r3, [r3, #4]
 80077d4:	1949      	addeq	r1, r1, r5
 80077d6:	6021      	streq	r1, [r4, #0]
 80077d8:	e7ed      	b.n	80077b6 <_free_r+0x22>
 80077da:	461a      	mov	r2, r3
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	b10b      	cbz	r3, 80077e4 <_free_r+0x50>
 80077e0:	42a3      	cmp	r3, r4
 80077e2:	d9fa      	bls.n	80077da <_free_r+0x46>
 80077e4:	6811      	ldr	r1, [r2, #0]
 80077e6:	1855      	adds	r5, r2, r1
 80077e8:	42a5      	cmp	r5, r4
 80077ea:	d10b      	bne.n	8007804 <_free_r+0x70>
 80077ec:	6824      	ldr	r4, [r4, #0]
 80077ee:	4421      	add	r1, r4
 80077f0:	1854      	adds	r4, r2, r1
 80077f2:	42a3      	cmp	r3, r4
 80077f4:	6011      	str	r1, [r2, #0]
 80077f6:	d1e0      	bne.n	80077ba <_free_r+0x26>
 80077f8:	681c      	ldr	r4, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	6053      	str	r3, [r2, #4]
 80077fe:	4421      	add	r1, r4
 8007800:	6011      	str	r1, [r2, #0]
 8007802:	e7da      	b.n	80077ba <_free_r+0x26>
 8007804:	d902      	bls.n	800780c <_free_r+0x78>
 8007806:	230c      	movs	r3, #12
 8007808:	6003      	str	r3, [r0, #0]
 800780a:	e7d6      	b.n	80077ba <_free_r+0x26>
 800780c:	6825      	ldr	r5, [r4, #0]
 800780e:	1961      	adds	r1, r4, r5
 8007810:	428b      	cmp	r3, r1
 8007812:	bf04      	itt	eq
 8007814:	6819      	ldreq	r1, [r3, #0]
 8007816:	685b      	ldreq	r3, [r3, #4]
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	bf04      	itt	eq
 800781c:	1949      	addeq	r1, r1, r5
 800781e:	6021      	streq	r1, [r4, #0]
 8007820:	6054      	str	r4, [r2, #4]
 8007822:	e7ca      	b.n	80077ba <_free_r+0x26>
 8007824:	b003      	add	sp, #12
 8007826:	bd30      	pop	{r4, r5, pc}
 8007828:	20000770 	.word	0x20000770

0800782c <sbrk_aligned>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4e0e      	ldr	r6, [pc, #56]	; (8007868 <sbrk_aligned+0x3c>)
 8007830:	460c      	mov	r4, r1
 8007832:	6831      	ldr	r1, [r6, #0]
 8007834:	4605      	mov	r5, r0
 8007836:	b911      	cbnz	r1, 800783e <sbrk_aligned+0x12>
 8007838:	f000 f9e8 	bl	8007c0c <_sbrk_r>
 800783c:	6030      	str	r0, [r6, #0]
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	f000 f9e3 	bl	8007c0c <_sbrk_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d00a      	beq.n	8007860 <sbrk_aligned+0x34>
 800784a:	1cc4      	adds	r4, r0, #3
 800784c:	f024 0403 	bic.w	r4, r4, #3
 8007850:	42a0      	cmp	r0, r4
 8007852:	d007      	beq.n	8007864 <sbrk_aligned+0x38>
 8007854:	1a21      	subs	r1, r4, r0
 8007856:	4628      	mov	r0, r5
 8007858:	f000 f9d8 	bl	8007c0c <_sbrk_r>
 800785c:	3001      	adds	r0, #1
 800785e:	d101      	bne.n	8007864 <sbrk_aligned+0x38>
 8007860:	f04f 34ff 	mov.w	r4, #4294967295
 8007864:	4620      	mov	r0, r4
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	20000774 	.word	0x20000774

0800786c <_malloc_r>:
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	1ccd      	adds	r5, r1, #3
 8007872:	f025 0503 	bic.w	r5, r5, #3
 8007876:	3508      	adds	r5, #8
 8007878:	2d0c      	cmp	r5, #12
 800787a:	bf38      	it	cc
 800787c:	250c      	movcc	r5, #12
 800787e:	2d00      	cmp	r5, #0
 8007880:	4607      	mov	r7, r0
 8007882:	db01      	blt.n	8007888 <_malloc_r+0x1c>
 8007884:	42a9      	cmp	r1, r5
 8007886:	d905      	bls.n	8007894 <_malloc_r+0x28>
 8007888:	230c      	movs	r3, #12
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	2600      	movs	r6, #0
 800788e:	4630      	mov	r0, r6
 8007890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007894:	4e2e      	ldr	r6, [pc, #184]	; (8007950 <_malloc_r+0xe4>)
 8007896:	f000 fa25 	bl	8007ce4 <__malloc_lock>
 800789a:	6833      	ldr	r3, [r6, #0]
 800789c:	461c      	mov	r4, r3
 800789e:	bb34      	cbnz	r4, 80078ee <_malloc_r+0x82>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4638      	mov	r0, r7
 80078a4:	f7ff ffc2 	bl	800782c <sbrk_aligned>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	4604      	mov	r4, r0
 80078ac:	d14d      	bne.n	800794a <_malloc_r+0xde>
 80078ae:	6834      	ldr	r4, [r6, #0]
 80078b0:	4626      	mov	r6, r4
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	d140      	bne.n	8007938 <_malloc_r+0xcc>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	4631      	mov	r1, r6
 80078ba:	4638      	mov	r0, r7
 80078bc:	eb04 0803 	add.w	r8, r4, r3
 80078c0:	f000 f9a4 	bl	8007c0c <_sbrk_r>
 80078c4:	4580      	cmp	r8, r0
 80078c6:	d13a      	bne.n	800793e <_malloc_r+0xd2>
 80078c8:	6821      	ldr	r1, [r4, #0]
 80078ca:	3503      	adds	r5, #3
 80078cc:	1a6d      	subs	r5, r5, r1
 80078ce:	f025 0503 	bic.w	r5, r5, #3
 80078d2:	3508      	adds	r5, #8
 80078d4:	2d0c      	cmp	r5, #12
 80078d6:	bf38      	it	cc
 80078d8:	250c      	movcc	r5, #12
 80078da:	4629      	mov	r1, r5
 80078dc:	4638      	mov	r0, r7
 80078de:	f7ff ffa5 	bl	800782c <sbrk_aligned>
 80078e2:	3001      	adds	r0, #1
 80078e4:	d02b      	beq.n	800793e <_malloc_r+0xd2>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	442b      	add	r3, r5
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	e00e      	b.n	800790c <_malloc_r+0xa0>
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	1b52      	subs	r2, r2, r5
 80078f2:	d41e      	bmi.n	8007932 <_malloc_r+0xc6>
 80078f4:	2a0b      	cmp	r2, #11
 80078f6:	d916      	bls.n	8007926 <_malloc_r+0xba>
 80078f8:	1961      	adds	r1, r4, r5
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	6025      	str	r5, [r4, #0]
 80078fe:	bf18      	it	ne
 8007900:	6059      	strne	r1, [r3, #4]
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	bf08      	it	eq
 8007906:	6031      	streq	r1, [r6, #0]
 8007908:	5162      	str	r2, [r4, r5]
 800790a:	604b      	str	r3, [r1, #4]
 800790c:	4638      	mov	r0, r7
 800790e:	f104 060b 	add.w	r6, r4, #11
 8007912:	f000 f9ed 	bl	8007cf0 <__malloc_unlock>
 8007916:	f026 0607 	bic.w	r6, r6, #7
 800791a:	1d23      	adds	r3, r4, #4
 800791c:	1af2      	subs	r2, r6, r3
 800791e:	d0b6      	beq.n	800788e <_malloc_r+0x22>
 8007920:	1b9b      	subs	r3, r3, r6
 8007922:	50a3      	str	r3, [r4, r2]
 8007924:	e7b3      	b.n	800788e <_malloc_r+0x22>
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	42a3      	cmp	r3, r4
 800792a:	bf0c      	ite	eq
 800792c:	6032      	streq	r2, [r6, #0]
 800792e:	605a      	strne	r2, [r3, #4]
 8007930:	e7ec      	b.n	800790c <_malloc_r+0xa0>
 8007932:	4623      	mov	r3, r4
 8007934:	6864      	ldr	r4, [r4, #4]
 8007936:	e7b2      	b.n	800789e <_malloc_r+0x32>
 8007938:	4634      	mov	r4, r6
 800793a:	6876      	ldr	r6, [r6, #4]
 800793c:	e7b9      	b.n	80078b2 <_malloc_r+0x46>
 800793e:	230c      	movs	r3, #12
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4638      	mov	r0, r7
 8007944:	f000 f9d4 	bl	8007cf0 <__malloc_unlock>
 8007948:	e7a1      	b.n	800788e <_malloc_r+0x22>
 800794a:	6025      	str	r5, [r4, #0]
 800794c:	e7de      	b.n	800790c <_malloc_r+0xa0>
 800794e:	bf00      	nop
 8007950:	20000770 	.word	0x20000770

08007954 <__ssputs_r>:
 8007954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007958:	688e      	ldr	r6, [r1, #8]
 800795a:	429e      	cmp	r6, r3
 800795c:	4682      	mov	sl, r0
 800795e:	460c      	mov	r4, r1
 8007960:	4690      	mov	r8, r2
 8007962:	461f      	mov	r7, r3
 8007964:	d838      	bhi.n	80079d8 <__ssputs_r+0x84>
 8007966:	898a      	ldrh	r2, [r1, #12]
 8007968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800796c:	d032      	beq.n	80079d4 <__ssputs_r+0x80>
 800796e:	6825      	ldr	r5, [r4, #0]
 8007970:	6909      	ldr	r1, [r1, #16]
 8007972:	eba5 0901 	sub.w	r9, r5, r1
 8007976:	6965      	ldr	r5, [r4, #20]
 8007978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800797c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007980:	3301      	adds	r3, #1
 8007982:	444b      	add	r3, r9
 8007984:	106d      	asrs	r5, r5, #1
 8007986:	429d      	cmp	r5, r3
 8007988:	bf38      	it	cc
 800798a:	461d      	movcc	r5, r3
 800798c:	0553      	lsls	r3, r2, #21
 800798e:	d531      	bpl.n	80079f4 <__ssputs_r+0xa0>
 8007990:	4629      	mov	r1, r5
 8007992:	f7ff ff6b 	bl	800786c <_malloc_r>
 8007996:	4606      	mov	r6, r0
 8007998:	b950      	cbnz	r0, 80079b0 <__ssputs_r+0x5c>
 800799a:	230c      	movs	r3, #12
 800799c:	f8ca 3000 	str.w	r3, [sl]
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a6:	81a3      	strh	r3, [r4, #12]
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b0:	6921      	ldr	r1, [r4, #16]
 80079b2:	464a      	mov	r2, r9
 80079b4:	f7ff fb46 	bl	8007044 <memcpy>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	6126      	str	r6, [r4, #16]
 80079c6:	6165      	str	r5, [r4, #20]
 80079c8:	444e      	add	r6, r9
 80079ca:	eba5 0509 	sub.w	r5, r5, r9
 80079ce:	6026      	str	r6, [r4, #0]
 80079d0:	60a5      	str	r5, [r4, #8]
 80079d2:	463e      	mov	r6, r7
 80079d4:	42be      	cmp	r6, r7
 80079d6:	d900      	bls.n	80079da <__ssputs_r+0x86>
 80079d8:	463e      	mov	r6, r7
 80079da:	6820      	ldr	r0, [r4, #0]
 80079dc:	4632      	mov	r2, r6
 80079de:	4641      	mov	r1, r8
 80079e0:	f000 f966 	bl	8007cb0 <memmove>
 80079e4:	68a3      	ldr	r3, [r4, #8]
 80079e6:	1b9b      	subs	r3, r3, r6
 80079e8:	60a3      	str	r3, [r4, #8]
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	4433      	add	r3, r6
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	2000      	movs	r0, #0
 80079f2:	e7db      	b.n	80079ac <__ssputs_r+0x58>
 80079f4:	462a      	mov	r2, r5
 80079f6:	f000 f981 	bl	8007cfc <_realloc_r>
 80079fa:	4606      	mov	r6, r0
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d1e1      	bne.n	80079c4 <__ssputs_r+0x70>
 8007a00:	6921      	ldr	r1, [r4, #16]
 8007a02:	4650      	mov	r0, sl
 8007a04:	f7ff fec6 	bl	8007794 <_free_r>
 8007a08:	e7c7      	b.n	800799a <__ssputs_r+0x46>
	...

08007a0c <_svfiprintf_r>:
 8007a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	4698      	mov	r8, r3
 8007a12:	898b      	ldrh	r3, [r1, #12]
 8007a14:	061b      	lsls	r3, r3, #24
 8007a16:	b09d      	sub	sp, #116	; 0x74
 8007a18:	4607      	mov	r7, r0
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	d50e      	bpl.n	8007a3e <_svfiprintf_r+0x32>
 8007a20:	690b      	ldr	r3, [r1, #16]
 8007a22:	b963      	cbnz	r3, 8007a3e <_svfiprintf_r+0x32>
 8007a24:	2140      	movs	r1, #64	; 0x40
 8007a26:	f7ff ff21 	bl	800786c <_malloc_r>
 8007a2a:	6028      	str	r0, [r5, #0]
 8007a2c:	6128      	str	r0, [r5, #16]
 8007a2e:	b920      	cbnz	r0, 8007a3a <_svfiprintf_r+0x2e>
 8007a30:	230c      	movs	r3, #12
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	e0d1      	b.n	8007bde <_svfiprintf_r+0x1d2>
 8007a3a:	2340      	movs	r3, #64	; 0x40
 8007a3c:	616b      	str	r3, [r5, #20]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9309      	str	r3, [sp, #36]	; 0x24
 8007a42:	2320      	movs	r3, #32
 8007a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a4c:	2330      	movs	r3, #48	; 0x30
 8007a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bf8 <_svfiprintf_r+0x1ec>
 8007a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a56:	f04f 0901 	mov.w	r9, #1
 8007a5a:	4623      	mov	r3, r4
 8007a5c:	469a      	mov	sl, r3
 8007a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a62:	b10a      	cbz	r2, 8007a68 <_svfiprintf_r+0x5c>
 8007a64:	2a25      	cmp	r2, #37	; 0x25
 8007a66:	d1f9      	bne.n	8007a5c <_svfiprintf_r+0x50>
 8007a68:	ebba 0b04 	subs.w	fp, sl, r4
 8007a6c:	d00b      	beq.n	8007a86 <_svfiprintf_r+0x7a>
 8007a6e:	465b      	mov	r3, fp
 8007a70:	4622      	mov	r2, r4
 8007a72:	4629      	mov	r1, r5
 8007a74:	4638      	mov	r0, r7
 8007a76:	f7ff ff6d 	bl	8007954 <__ssputs_r>
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f000 80aa 	beq.w	8007bd4 <_svfiprintf_r+0x1c8>
 8007a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a82:	445a      	add	r2, fp
 8007a84:	9209      	str	r2, [sp, #36]	; 0x24
 8007a86:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80a2 	beq.w	8007bd4 <_svfiprintf_r+0x1c8>
 8007a90:	2300      	movs	r3, #0
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a9a:	f10a 0a01 	add.w	sl, sl, #1
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	9307      	str	r3, [sp, #28]
 8007aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8007aa8:	4654      	mov	r4, sl
 8007aaa:	2205      	movs	r2, #5
 8007aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab0:	4851      	ldr	r0, [pc, #324]	; (8007bf8 <_svfiprintf_r+0x1ec>)
 8007ab2:	f7f8 fba5 	bl	8000200 <memchr>
 8007ab6:	9a04      	ldr	r2, [sp, #16]
 8007ab8:	b9d8      	cbnz	r0, 8007af2 <_svfiprintf_r+0xe6>
 8007aba:	06d0      	lsls	r0, r2, #27
 8007abc:	bf44      	itt	mi
 8007abe:	2320      	movmi	r3, #32
 8007ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac4:	0711      	lsls	r1, r2, #28
 8007ac6:	bf44      	itt	mi
 8007ac8:	232b      	movmi	r3, #43	; 0x2b
 8007aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ace:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad4:	d015      	beq.n	8007b02 <_svfiprintf_r+0xf6>
 8007ad6:	9a07      	ldr	r2, [sp, #28]
 8007ad8:	4654      	mov	r4, sl
 8007ada:	2000      	movs	r0, #0
 8007adc:	f04f 0c0a 	mov.w	ip, #10
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae6:	3b30      	subs	r3, #48	; 0x30
 8007ae8:	2b09      	cmp	r3, #9
 8007aea:	d94e      	bls.n	8007b8a <_svfiprintf_r+0x17e>
 8007aec:	b1b0      	cbz	r0, 8007b1c <_svfiprintf_r+0x110>
 8007aee:	9207      	str	r2, [sp, #28]
 8007af0:	e014      	b.n	8007b1c <_svfiprintf_r+0x110>
 8007af2:	eba0 0308 	sub.w	r3, r0, r8
 8007af6:	fa09 f303 	lsl.w	r3, r9, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	46a2      	mov	sl, r4
 8007b00:	e7d2      	b.n	8007aa8 <_svfiprintf_r+0x9c>
 8007b02:	9b03      	ldr	r3, [sp, #12]
 8007b04:	1d19      	adds	r1, r3, #4
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	9103      	str	r1, [sp, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bfbb      	ittet	lt
 8007b0e:	425b      	neglt	r3, r3
 8007b10:	f042 0202 	orrlt.w	r2, r2, #2
 8007b14:	9307      	strge	r3, [sp, #28]
 8007b16:	9307      	strlt	r3, [sp, #28]
 8007b18:	bfb8      	it	lt
 8007b1a:	9204      	strlt	r2, [sp, #16]
 8007b1c:	7823      	ldrb	r3, [r4, #0]
 8007b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b20:	d10c      	bne.n	8007b3c <_svfiprintf_r+0x130>
 8007b22:	7863      	ldrb	r3, [r4, #1]
 8007b24:	2b2a      	cmp	r3, #42	; 0x2a
 8007b26:	d135      	bne.n	8007b94 <_svfiprintf_r+0x188>
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	9203      	str	r2, [sp, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfb8      	it	lt
 8007b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b38:	3402      	adds	r4, #2
 8007b3a:	9305      	str	r3, [sp, #20]
 8007b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c08 <_svfiprintf_r+0x1fc>
 8007b40:	7821      	ldrb	r1, [r4, #0]
 8007b42:	2203      	movs	r2, #3
 8007b44:	4650      	mov	r0, sl
 8007b46:	f7f8 fb5b 	bl	8000200 <memchr>
 8007b4a:	b140      	cbz	r0, 8007b5e <_svfiprintf_r+0x152>
 8007b4c:	2340      	movs	r3, #64	; 0x40
 8007b4e:	eba0 000a 	sub.w	r0, r0, sl
 8007b52:	fa03 f000 	lsl.w	r0, r3, r0
 8007b56:	9b04      	ldr	r3, [sp, #16]
 8007b58:	4303      	orrs	r3, r0
 8007b5a:	3401      	adds	r4, #1
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b62:	4826      	ldr	r0, [pc, #152]	; (8007bfc <_svfiprintf_r+0x1f0>)
 8007b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b68:	2206      	movs	r2, #6
 8007b6a:	f7f8 fb49 	bl	8000200 <memchr>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d038      	beq.n	8007be4 <_svfiprintf_r+0x1d8>
 8007b72:	4b23      	ldr	r3, [pc, #140]	; (8007c00 <_svfiprintf_r+0x1f4>)
 8007b74:	bb1b      	cbnz	r3, 8007bbe <_svfiprintf_r+0x1b2>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	3307      	adds	r3, #7
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	3308      	adds	r3, #8
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b84:	4433      	add	r3, r6
 8007b86:	9309      	str	r3, [sp, #36]	; 0x24
 8007b88:	e767      	b.n	8007a5a <_svfiprintf_r+0x4e>
 8007b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b8e:	460c      	mov	r4, r1
 8007b90:	2001      	movs	r0, #1
 8007b92:	e7a5      	b.n	8007ae0 <_svfiprintf_r+0xd4>
 8007b94:	2300      	movs	r3, #0
 8007b96:	3401      	adds	r4, #1
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	f04f 0c0a 	mov.w	ip, #10
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba6:	3a30      	subs	r2, #48	; 0x30
 8007ba8:	2a09      	cmp	r2, #9
 8007baa:	d903      	bls.n	8007bb4 <_svfiprintf_r+0x1a8>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0c5      	beq.n	8007b3c <_svfiprintf_r+0x130>
 8007bb0:	9105      	str	r1, [sp, #20]
 8007bb2:	e7c3      	b.n	8007b3c <_svfiprintf_r+0x130>
 8007bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb8:	4604      	mov	r4, r0
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e7f0      	b.n	8007ba0 <_svfiprintf_r+0x194>
 8007bbe:	ab03      	add	r3, sp, #12
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <_svfiprintf_r+0x1f8>)
 8007bc6:	a904      	add	r1, sp, #16
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7fd ffb5 	bl	8005b38 <_printf_float>
 8007bce:	1c42      	adds	r2, r0, #1
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	d1d6      	bne.n	8007b82 <_svfiprintf_r+0x176>
 8007bd4:	89ab      	ldrh	r3, [r5, #12]
 8007bd6:	065b      	lsls	r3, r3, #25
 8007bd8:	f53f af2c 	bmi.w	8007a34 <_svfiprintf_r+0x28>
 8007bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bde:	b01d      	add	sp, #116	; 0x74
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <_svfiprintf_r+0x1f8>)
 8007bec:	a904      	add	r1, sp, #16
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f7fe fa46 	bl	8006080 <_printf_i>
 8007bf4:	e7eb      	b.n	8007bce <_svfiprintf_r+0x1c2>
 8007bf6:	bf00      	nop
 8007bf8:	08008a6c 	.word	0x08008a6c
 8007bfc:	08008a76 	.word	0x08008a76
 8007c00:	08005b39 	.word	0x08005b39
 8007c04:	08007955 	.word	0x08007955
 8007c08:	08008a72 	.word	0x08008a72

08007c0c <_sbrk_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4d06      	ldr	r5, [pc, #24]	; (8007c28 <_sbrk_r+0x1c>)
 8007c10:	2300      	movs	r3, #0
 8007c12:	4604      	mov	r4, r0
 8007c14:	4608      	mov	r0, r1
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	f7fa fc4c 	bl	80024b4 <_sbrk>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_sbrk_r+0x1a>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_sbrk_r+0x1a>
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	20000778 	.word	0x20000778

08007c2c <__assert_func>:
 8007c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c2e:	4614      	mov	r4, r2
 8007c30:	461a      	mov	r2, r3
 8007c32:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <__assert_func+0x2c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4605      	mov	r5, r0
 8007c38:	68d8      	ldr	r0, [r3, #12]
 8007c3a:	b14c      	cbz	r4, 8007c50 <__assert_func+0x24>
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <__assert_func+0x30>)
 8007c3e:	9100      	str	r1, [sp, #0]
 8007c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c44:	4906      	ldr	r1, [pc, #24]	; (8007c60 <__assert_func+0x34>)
 8007c46:	462b      	mov	r3, r5
 8007c48:	f000 f80e 	bl	8007c68 <fiprintf>
 8007c4c:	f000 faac 	bl	80081a8 <abort>
 8007c50:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <__assert_func+0x38>)
 8007c52:	461c      	mov	r4, r3
 8007c54:	e7f3      	b.n	8007c3e <__assert_func+0x12>
 8007c56:	bf00      	nop
 8007c58:	20000010 	.word	0x20000010
 8007c5c:	08008a7d 	.word	0x08008a7d
 8007c60:	08008a8a 	.word	0x08008a8a
 8007c64:	08008ab8 	.word	0x08008ab8

08007c68 <fiprintf>:
 8007c68:	b40e      	push	{r1, r2, r3}
 8007c6a:	b503      	push	{r0, r1, lr}
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	ab03      	add	r3, sp, #12
 8007c70:	4805      	ldr	r0, [pc, #20]	; (8007c88 <fiprintf+0x20>)
 8007c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c76:	6800      	ldr	r0, [r0, #0]
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	f000 f897 	bl	8007dac <_vfiprintf_r>
 8007c7e:	b002      	add	sp, #8
 8007c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c84:	b003      	add	sp, #12
 8007c86:	4770      	bx	lr
 8007c88:	20000010 	.word	0x20000010

08007c8c <__ascii_mbtowc>:
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	b901      	cbnz	r1, 8007c92 <__ascii_mbtowc+0x6>
 8007c90:	a901      	add	r1, sp, #4
 8007c92:	b142      	cbz	r2, 8007ca6 <__ascii_mbtowc+0x1a>
 8007c94:	b14b      	cbz	r3, 8007caa <__ascii_mbtowc+0x1e>
 8007c96:	7813      	ldrb	r3, [r2, #0]
 8007c98:	600b      	str	r3, [r1, #0]
 8007c9a:	7812      	ldrb	r2, [r2, #0]
 8007c9c:	1e10      	subs	r0, r2, #0
 8007c9e:	bf18      	it	ne
 8007ca0:	2001      	movne	r0, #1
 8007ca2:	b002      	add	sp, #8
 8007ca4:	4770      	bx	lr
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	e7fb      	b.n	8007ca2 <__ascii_mbtowc+0x16>
 8007caa:	f06f 0001 	mvn.w	r0, #1
 8007cae:	e7f8      	b.n	8007ca2 <__ascii_mbtowc+0x16>

08007cb0 <memmove>:
 8007cb0:	4288      	cmp	r0, r1
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	eb01 0402 	add.w	r4, r1, r2
 8007cb8:	d902      	bls.n	8007cc0 <memmove+0x10>
 8007cba:	4284      	cmp	r4, r0
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	d807      	bhi.n	8007cd0 <memmove+0x20>
 8007cc0:	1e43      	subs	r3, r0, #1
 8007cc2:	42a1      	cmp	r1, r4
 8007cc4:	d008      	beq.n	8007cd8 <memmove+0x28>
 8007cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cce:	e7f8      	b.n	8007cc2 <memmove+0x12>
 8007cd0:	4402      	add	r2, r0
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	428a      	cmp	r2, r1
 8007cd6:	d100      	bne.n	8007cda <memmove+0x2a>
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ce2:	e7f7      	b.n	8007cd4 <memmove+0x24>

08007ce4 <__malloc_lock>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__malloc_lock+0x8>)
 8007ce6:	f000 bc1f 	b.w	8008528 <__retarget_lock_acquire_recursive>
 8007cea:	bf00      	nop
 8007cec:	2000077c 	.word	0x2000077c

08007cf0 <__malloc_unlock>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__malloc_unlock+0x8>)
 8007cf2:	f000 bc1a 	b.w	800852a <__retarget_lock_release_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	2000077c 	.word	0x2000077c

08007cfc <_realloc_r>:
 8007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	4680      	mov	r8, r0
 8007d02:	4614      	mov	r4, r2
 8007d04:	460e      	mov	r6, r1
 8007d06:	b921      	cbnz	r1, 8007d12 <_realloc_r+0x16>
 8007d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	f7ff bdad 	b.w	800786c <_malloc_r>
 8007d12:	b92a      	cbnz	r2, 8007d20 <_realloc_r+0x24>
 8007d14:	f7ff fd3e 	bl	8007794 <_free_r>
 8007d18:	4625      	mov	r5, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	f000 fc6a 	bl	80085f8 <_malloc_usable_size_r>
 8007d24:	4284      	cmp	r4, r0
 8007d26:	4607      	mov	r7, r0
 8007d28:	d802      	bhi.n	8007d30 <_realloc_r+0x34>
 8007d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d2e:	d812      	bhi.n	8007d56 <_realloc_r+0x5a>
 8007d30:	4621      	mov	r1, r4
 8007d32:	4640      	mov	r0, r8
 8007d34:	f7ff fd9a 	bl	800786c <_malloc_r>
 8007d38:	4605      	mov	r5, r0
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d0ed      	beq.n	8007d1a <_realloc_r+0x1e>
 8007d3e:	42bc      	cmp	r4, r7
 8007d40:	4622      	mov	r2, r4
 8007d42:	4631      	mov	r1, r6
 8007d44:	bf28      	it	cs
 8007d46:	463a      	movcs	r2, r7
 8007d48:	f7ff f97c 	bl	8007044 <memcpy>
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f7ff fd20 	bl	8007794 <_free_r>
 8007d54:	e7e1      	b.n	8007d1a <_realloc_r+0x1e>
 8007d56:	4635      	mov	r5, r6
 8007d58:	e7df      	b.n	8007d1a <_realloc_r+0x1e>

08007d5a <__sfputc_r>:
 8007d5a:	6893      	ldr	r3, [r2, #8]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	b410      	push	{r4}
 8007d62:	6093      	str	r3, [r2, #8]
 8007d64:	da08      	bge.n	8007d78 <__sfputc_r+0x1e>
 8007d66:	6994      	ldr	r4, [r2, #24]
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	db01      	blt.n	8007d70 <__sfputc_r+0x16>
 8007d6c:	290a      	cmp	r1, #10
 8007d6e:	d103      	bne.n	8007d78 <__sfputc_r+0x1e>
 8007d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d74:	f000 b94a 	b.w	800800c <__swbuf_r>
 8007d78:	6813      	ldr	r3, [r2, #0]
 8007d7a:	1c58      	adds	r0, r3, #1
 8007d7c:	6010      	str	r0, [r2, #0]
 8007d7e:	7019      	strb	r1, [r3, #0]
 8007d80:	4608      	mov	r0, r1
 8007d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <__sfputs_r>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460f      	mov	r7, r1
 8007d8e:	4614      	mov	r4, r2
 8007d90:	18d5      	adds	r5, r2, r3
 8007d92:	42ac      	cmp	r4, r5
 8007d94:	d101      	bne.n	8007d9a <__sfputs_r+0x12>
 8007d96:	2000      	movs	r0, #0
 8007d98:	e007      	b.n	8007daa <__sfputs_r+0x22>
 8007d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9e:	463a      	mov	r2, r7
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff ffda 	bl	8007d5a <__sfputc_r>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d1f3      	bne.n	8007d92 <__sfputs_r+0xa>
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007dac <_vfiprintf_r>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	460d      	mov	r5, r1
 8007db2:	b09d      	sub	sp, #116	; 0x74
 8007db4:	4614      	mov	r4, r2
 8007db6:	4698      	mov	r8, r3
 8007db8:	4606      	mov	r6, r0
 8007dba:	b118      	cbz	r0, 8007dc4 <_vfiprintf_r+0x18>
 8007dbc:	6983      	ldr	r3, [r0, #24]
 8007dbe:	b90b      	cbnz	r3, 8007dc4 <_vfiprintf_r+0x18>
 8007dc0:	f000 fb14 	bl	80083ec <__sinit>
 8007dc4:	4b89      	ldr	r3, [pc, #548]	; (8007fec <_vfiprintf_r+0x240>)
 8007dc6:	429d      	cmp	r5, r3
 8007dc8:	d11b      	bne.n	8007e02 <_vfiprintf_r+0x56>
 8007dca:	6875      	ldr	r5, [r6, #4]
 8007dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dce:	07d9      	lsls	r1, r3, #31
 8007dd0:	d405      	bmi.n	8007dde <_vfiprintf_r+0x32>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	059a      	lsls	r2, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_vfiprintf_r+0x32>
 8007dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dda:	f000 fba5 	bl	8008528 <__retarget_lock_acquire_recursive>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	071b      	lsls	r3, r3, #28
 8007de2:	d501      	bpl.n	8007de8 <_vfiprintf_r+0x3c>
 8007de4:	692b      	ldr	r3, [r5, #16]
 8007de6:	b9eb      	cbnz	r3, 8007e24 <_vfiprintf_r+0x78>
 8007de8:	4629      	mov	r1, r5
 8007dea:	4630      	mov	r0, r6
 8007dec:	f000 f96e 	bl	80080cc <__swsetup_r>
 8007df0:	b1c0      	cbz	r0, 8007e24 <_vfiprintf_r+0x78>
 8007df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df4:	07dc      	lsls	r4, r3, #31
 8007df6:	d50e      	bpl.n	8007e16 <_vfiprintf_r+0x6a>
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	b01d      	add	sp, #116	; 0x74
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	4b7b      	ldr	r3, [pc, #492]	; (8007ff0 <_vfiprintf_r+0x244>)
 8007e04:	429d      	cmp	r5, r3
 8007e06:	d101      	bne.n	8007e0c <_vfiprintf_r+0x60>
 8007e08:	68b5      	ldr	r5, [r6, #8]
 8007e0a:	e7df      	b.n	8007dcc <_vfiprintf_r+0x20>
 8007e0c:	4b79      	ldr	r3, [pc, #484]	; (8007ff4 <_vfiprintf_r+0x248>)
 8007e0e:	429d      	cmp	r5, r3
 8007e10:	bf08      	it	eq
 8007e12:	68f5      	ldreq	r5, [r6, #12]
 8007e14:	e7da      	b.n	8007dcc <_vfiprintf_r+0x20>
 8007e16:	89ab      	ldrh	r3, [r5, #12]
 8007e18:	0598      	lsls	r0, r3, #22
 8007e1a:	d4ed      	bmi.n	8007df8 <_vfiprintf_r+0x4c>
 8007e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e1e:	f000 fb84 	bl	800852a <__retarget_lock_release_recursive>
 8007e22:	e7e9      	b.n	8007df8 <_vfiprintf_r+0x4c>
 8007e24:	2300      	movs	r3, #0
 8007e26:	9309      	str	r3, [sp, #36]	; 0x24
 8007e28:	2320      	movs	r3, #32
 8007e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e32:	2330      	movs	r3, #48	; 0x30
 8007e34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ff8 <_vfiprintf_r+0x24c>
 8007e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e3c:	f04f 0901 	mov.w	r9, #1
 8007e40:	4623      	mov	r3, r4
 8007e42:	469a      	mov	sl, r3
 8007e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e48:	b10a      	cbz	r2, 8007e4e <_vfiprintf_r+0xa2>
 8007e4a:	2a25      	cmp	r2, #37	; 0x25
 8007e4c:	d1f9      	bne.n	8007e42 <_vfiprintf_r+0x96>
 8007e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e52:	d00b      	beq.n	8007e6c <_vfiprintf_r+0xc0>
 8007e54:	465b      	mov	r3, fp
 8007e56:	4622      	mov	r2, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f7ff ff94 	bl	8007d88 <__sfputs_r>
 8007e60:	3001      	adds	r0, #1
 8007e62:	f000 80aa 	beq.w	8007fba <_vfiprintf_r+0x20e>
 8007e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e68:	445a      	add	r2, fp
 8007e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80a2 	beq.w	8007fba <_vfiprintf_r+0x20e>
 8007e76:	2300      	movs	r3, #0
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e80:	f10a 0a01 	add.w	sl, sl, #1
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e8e:	4654      	mov	r4, sl
 8007e90:	2205      	movs	r2, #5
 8007e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e96:	4858      	ldr	r0, [pc, #352]	; (8007ff8 <_vfiprintf_r+0x24c>)
 8007e98:	f7f8 f9b2 	bl	8000200 <memchr>
 8007e9c:	9a04      	ldr	r2, [sp, #16]
 8007e9e:	b9d8      	cbnz	r0, 8007ed8 <_vfiprintf_r+0x12c>
 8007ea0:	06d1      	lsls	r1, r2, #27
 8007ea2:	bf44      	itt	mi
 8007ea4:	2320      	movmi	r3, #32
 8007ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eaa:	0713      	lsls	r3, r2, #28
 8007eac:	bf44      	itt	mi
 8007eae:	232b      	movmi	r3, #43	; 0x2b
 8007eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eba:	d015      	beq.n	8007ee8 <_vfiprintf_r+0x13c>
 8007ebc:	9a07      	ldr	r2, [sp, #28]
 8007ebe:	4654      	mov	r4, sl
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f04f 0c0a 	mov.w	ip, #10
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ecc:	3b30      	subs	r3, #48	; 0x30
 8007ece:	2b09      	cmp	r3, #9
 8007ed0:	d94e      	bls.n	8007f70 <_vfiprintf_r+0x1c4>
 8007ed2:	b1b0      	cbz	r0, 8007f02 <_vfiprintf_r+0x156>
 8007ed4:	9207      	str	r2, [sp, #28]
 8007ed6:	e014      	b.n	8007f02 <_vfiprintf_r+0x156>
 8007ed8:	eba0 0308 	sub.w	r3, r0, r8
 8007edc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	46a2      	mov	sl, r4
 8007ee6:	e7d2      	b.n	8007e8e <_vfiprintf_r+0xe2>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	1d19      	adds	r1, r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	9103      	str	r1, [sp, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bfbb      	ittet	lt
 8007ef4:	425b      	neglt	r3, r3
 8007ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8007efa:	9307      	strge	r3, [sp, #28]
 8007efc:	9307      	strlt	r3, [sp, #28]
 8007efe:	bfb8      	it	lt
 8007f00:	9204      	strlt	r2, [sp, #16]
 8007f02:	7823      	ldrb	r3, [r4, #0]
 8007f04:	2b2e      	cmp	r3, #46	; 0x2e
 8007f06:	d10c      	bne.n	8007f22 <_vfiprintf_r+0x176>
 8007f08:	7863      	ldrb	r3, [r4, #1]
 8007f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f0c:	d135      	bne.n	8007f7a <_vfiprintf_r+0x1ce>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	1d1a      	adds	r2, r3, #4
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	9203      	str	r2, [sp, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bfb8      	it	lt
 8007f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f1e:	3402      	adds	r4, #2
 8007f20:	9305      	str	r3, [sp, #20]
 8007f22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008008 <_vfiprintf_r+0x25c>
 8007f26:	7821      	ldrb	r1, [r4, #0]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	f7f8 f968 	bl	8000200 <memchr>
 8007f30:	b140      	cbz	r0, 8007f44 <_vfiprintf_r+0x198>
 8007f32:	2340      	movs	r3, #64	; 0x40
 8007f34:	eba0 000a 	sub.w	r0, r0, sl
 8007f38:	fa03 f000 	lsl.w	r0, r3, r0
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	4303      	orrs	r3, r0
 8007f40:	3401      	adds	r4, #1
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f48:	482c      	ldr	r0, [pc, #176]	; (8007ffc <_vfiprintf_r+0x250>)
 8007f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f4e:	2206      	movs	r2, #6
 8007f50:	f7f8 f956 	bl	8000200 <memchr>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d03f      	beq.n	8007fd8 <_vfiprintf_r+0x22c>
 8007f58:	4b29      	ldr	r3, [pc, #164]	; (8008000 <_vfiprintf_r+0x254>)
 8007f5a:	bb1b      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x1f8>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	3307      	adds	r3, #7
 8007f60:	f023 0307 	bic.w	r3, r3, #7
 8007f64:	3308      	adds	r3, #8
 8007f66:	9303      	str	r3, [sp, #12]
 8007f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6a:	443b      	add	r3, r7
 8007f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6e:	e767      	b.n	8007e40 <_vfiprintf_r+0x94>
 8007f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f74:	460c      	mov	r4, r1
 8007f76:	2001      	movs	r0, #1
 8007f78:	e7a5      	b.n	8007ec6 <_vfiprintf_r+0x11a>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	3401      	adds	r4, #1
 8007f7e:	9305      	str	r3, [sp, #20]
 8007f80:	4619      	mov	r1, r3
 8007f82:	f04f 0c0a 	mov.w	ip, #10
 8007f86:	4620      	mov	r0, r4
 8007f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f8c:	3a30      	subs	r2, #48	; 0x30
 8007f8e:	2a09      	cmp	r2, #9
 8007f90:	d903      	bls.n	8007f9a <_vfiprintf_r+0x1ee>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0c5      	beq.n	8007f22 <_vfiprintf_r+0x176>
 8007f96:	9105      	str	r1, [sp, #20]
 8007f98:	e7c3      	b.n	8007f22 <_vfiprintf_r+0x176>
 8007f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7f0      	b.n	8007f86 <_vfiprintf_r+0x1da>
 8007fa4:	ab03      	add	r3, sp, #12
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4b16      	ldr	r3, [pc, #88]	; (8008004 <_vfiprintf_r+0x258>)
 8007fac:	a904      	add	r1, sp, #16
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7fd fdc2 	bl	8005b38 <_printf_float>
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	1c78      	adds	r0, r7, #1
 8007fb8:	d1d6      	bne.n	8007f68 <_vfiprintf_r+0x1bc>
 8007fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fbc:	07d9      	lsls	r1, r3, #31
 8007fbe:	d405      	bmi.n	8007fcc <_vfiprintf_r+0x220>
 8007fc0:	89ab      	ldrh	r3, [r5, #12]
 8007fc2:	059a      	lsls	r2, r3, #22
 8007fc4:	d402      	bmi.n	8007fcc <_vfiprintf_r+0x220>
 8007fc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fc8:	f000 faaf 	bl	800852a <__retarget_lock_release_recursive>
 8007fcc:	89ab      	ldrh	r3, [r5, #12]
 8007fce:	065b      	lsls	r3, r3, #25
 8007fd0:	f53f af12 	bmi.w	8007df8 <_vfiprintf_r+0x4c>
 8007fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fd6:	e711      	b.n	8007dfc <_vfiprintf_r+0x50>
 8007fd8:	ab03      	add	r3, sp, #12
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	462a      	mov	r2, r5
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <_vfiprintf_r+0x258>)
 8007fe0:	a904      	add	r1, sp, #16
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7fe f84c 	bl	8006080 <_printf_i>
 8007fe8:	e7e4      	b.n	8007fb4 <_vfiprintf_r+0x208>
 8007fea:	bf00      	nop
 8007fec:	08008be4 	.word	0x08008be4
 8007ff0:	08008c04 	.word	0x08008c04
 8007ff4:	08008bc4 	.word	0x08008bc4
 8007ff8:	08008a6c 	.word	0x08008a6c
 8007ffc:	08008a76 	.word	0x08008a76
 8008000:	08005b39 	.word	0x08005b39
 8008004:	08007d89 	.word	0x08007d89
 8008008:	08008a72 	.word	0x08008a72

0800800c <__swbuf_r>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	460e      	mov	r6, r1
 8008010:	4614      	mov	r4, r2
 8008012:	4605      	mov	r5, r0
 8008014:	b118      	cbz	r0, 800801e <__swbuf_r+0x12>
 8008016:	6983      	ldr	r3, [r0, #24]
 8008018:	b90b      	cbnz	r3, 800801e <__swbuf_r+0x12>
 800801a:	f000 f9e7 	bl	80083ec <__sinit>
 800801e:	4b21      	ldr	r3, [pc, #132]	; (80080a4 <__swbuf_r+0x98>)
 8008020:	429c      	cmp	r4, r3
 8008022:	d12b      	bne.n	800807c <__swbuf_r+0x70>
 8008024:	686c      	ldr	r4, [r5, #4]
 8008026:	69a3      	ldr	r3, [r4, #24]
 8008028:	60a3      	str	r3, [r4, #8]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	071a      	lsls	r2, r3, #28
 800802e:	d52f      	bpl.n	8008090 <__swbuf_r+0x84>
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	b36b      	cbz	r3, 8008090 <__swbuf_r+0x84>
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	6820      	ldr	r0, [r4, #0]
 8008038:	1ac0      	subs	r0, r0, r3
 800803a:	6963      	ldr	r3, [r4, #20]
 800803c:	b2f6      	uxtb	r6, r6
 800803e:	4283      	cmp	r3, r0
 8008040:	4637      	mov	r7, r6
 8008042:	dc04      	bgt.n	800804e <__swbuf_r+0x42>
 8008044:	4621      	mov	r1, r4
 8008046:	4628      	mov	r0, r5
 8008048:	f000 f93c 	bl	80082c4 <_fflush_r>
 800804c:	bb30      	cbnz	r0, 800809c <__swbuf_r+0x90>
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	3b01      	subs	r3, #1
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	6022      	str	r2, [r4, #0]
 800805a:	701e      	strb	r6, [r3, #0]
 800805c:	6963      	ldr	r3, [r4, #20]
 800805e:	3001      	adds	r0, #1
 8008060:	4283      	cmp	r3, r0
 8008062:	d004      	beq.n	800806e <__swbuf_r+0x62>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	07db      	lsls	r3, r3, #31
 8008068:	d506      	bpl.n	8008078 <__swbuf_r+0x6c>
 800806a:	2e0a      	cmp	r6, #10
 800806c:	d104      	bne.n	8008078 <__swbuf_r+0x6c>
 800806e:	4621      	mov	r1, r4
 8008070:	4628      	mov	r0, r5
 8008072:	f000 f927 	bl	80082c4 <_fflush_r>
 8008076:	b988      	cbnz	r0, 800809c <__swbuf_r+0x90>
 8008078:	4638      	mov	r0, r7
 800807a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <__swbuf_r+0x9c>)
 800807e:	429c      	cmp	r4, r3
 8008080:	d101      	bne.n	8008086 <__swbuf_r+0x7a>
 8008082:	68ac      	ldr	r4, [r5, #8]
 8008084:	e7cf      	b.n	8008026 <__swbuf_r+0x1a>
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <__swbuf_r+0xa0>)
 8008088:	429c      	cmp	r4, r3
 800808a:	bf08      	it	eq
 800808c:	68ec      	ldreq	r4, [r5, #12]
 800808e:	e7ca      	b.n	8008026 <__swbuf_r+0x1a>
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f000 f81a 	bl	80080cc <__swsetup_r>
 8008098:	2800      	cmp	r0, #0
 800809a:	d0cb      	beq.n	8008034 <__swbuf_r+0x28>
 800809c:	f04f 37ff 	mov.w	r7, #4294967295
 80080a0:	e7ea      	b.n	8008078 <__swbuf_r+0x6c>
 80080a2:	bf00      	nop
 80080a4:	08008be4 	.word	0x08008be4
 80080a8:	08008c04 	.word	0x08008c04
 80080ac:	08008bc4 	.word	0x08008bc4

080080b0 <__ascii_wctomb>:
 80080b0:	b149      	cbz	r1, 80080c6 <__ascii_wctomb+0x16>
 80080b2:	2aff      	cmp	r2, #255	; 0xff
 80080b4:	bf85      	ittet	hi
 80080b6:	238a      	movhi	r3, #138	; 0x8a
 80080b8:	6003      	strhi	r3, [r0, #0]
 80080ba:	700a      	strbls	r2, [r1, #0]
 80080bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80080c0:	bf98      	it	ls
 80080c2:	2001      	movls	r0, #1
 80080c4:	4770      	bx	lr
 80080c6:	4608      	mov	r0, r1
 80080c8:	4770      	bx	lr
	...

080080cc <__swsetup_r>:
 80080cc:	4b32      	ldr	r3, [pc, #200]	; (8008198 <__swsetup_r+0xcc>)
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	b125      	cbz	r5, 80080e2 <__swsetup_r+0x16>
 80080d8:	69ab      	ldr	r3, [r5, #24]
 80080da:	b913      	cbnz	r3, 80080e2 <__swsetup_r+0x16>
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 f985 	bl	80083ec <__sinit>
 80080e2:	4b2e      	ldr	r3, [pc, #184]	; (800819c <__swsetup_r+0xd0>)
 80080e4:	429c      	cmp	r4, r3
 80080e6:	d10f      	bne.n	8008108 <__swsetup_r+0x3c>
 80080e8:	686c      	ldr	r4, [r5, #4]
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f0:	0719      	lsls	r1, r3, #28
 80080f2:	d42c      	bmi.n	800814e <__swsetup_r+0x82>
 80080f4:	06dd      	lsls	r5, r3, #27
 80080f6:	d411      	bmi.n	800811c <__swsetup_r+0x50>
 80080f8:	2309      	movs	r3, #9
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	f04f 30ff 	mov.w	r0, #4294967295
 8008106:	e03e      	b.n	8008186 <__swsetup_r+0xba>
 8008108:	4b25      	ldr	r3, [pc, #148]	; (80081a0 <__swsetup_r+0xd4>)
 800810a:	429c      	cmp	r4, r3
 800810c:	d101      	bne.n	8008112 <__swsetup_r+0x46>
 800810e:	68ac      	ldr	r4, [r5, #8]
 8008110:	e7eb      	b.n	80080ea <__swsetup_r+0x1e>
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <__swsetup_r+0xd8>)
 8008114:	429c      	cmp	r4, r3
 8008116:	bf08      	it	eq
 8008118:	68ec      	ldreq	r4, [r5, #12]
 800811a:	e7e6      	b.n	80080ea <__swsetup_r+0x1e>
 800811c:	0758      	lsls	r0, r3, #29
 800811e:	d512      	bpl.n	8008146 <__swsetup_r+0x7a>
 8008120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008122:	b141      	cbz	r1, 8008136 <__swsetup_r+0x6a>
 8008124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008128:	4299      	cmp	r1, r3
 800812a:	d002      	beq.n	8008132 <__swsetup_r+0x66>
 800812c:	4630      	mov	r0, r6
 800812e:	f7ff fb31 	bl	8007794 <_free_r>
 8008132:	2300      	movs	r3, #0
 8008134:	6363      	str	r3, [r4, #52]	; 0x34
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	2300      	movs	r3, #0
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f043 0308 	orr.w	r3, r3, #8
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	b94b      	cbnz	r3, 8008166 <__swsetup_r+0x9a>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800815c:	d003      	beq.n	8008166 <__swsetup_r+0x9a>
 800815e:	4621      	mov	r1, r4
 8008160:	4630      	mov	r0, r6
 8008162:	f000 fa09 	bl	8008578 <__smakebuf_r>
 8008166:	89a0      	ldrh	r0, [r4, #12]
 8008168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800816c:	f010 0301 	ands.w	r3, r0, #1
 8008170:	d00a      	beq.n	8008188 <__swsetup_r+0xbc>
 8008172:	2300      	movs	r3, #0
 8008174:	60a3      	str	r3, [r4, #8]
 8008176:	6963      	ldr	r3, [r4, #20]
 8008178:	425b      	negs	r3, r3
 800817a:	61a3      	str	r3, [r4, #24]
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	b943      	cbnz	r3, 8008192 <__swsetup_r+0xc6>
 8008180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008184:	d1ba      	bne.n	80080fc <__swsetup_r+0x30>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	0781      	lsls	r1, r0, #30
 800818a:	bf58      	it	pl
 800818c:	6963      	ldrpl	r3, [r4, #20]
 800818e:	60a3      	str	r3, [r4, #8]
 8008190:	e7f4      	b.n	800817c <__swsetup_r+0xb0>
 8008192:	2000      	movs	r0, #0
 8008194:	e7f7      	b.n	8008186 <__swsetup_r+0xba>
 8008196:	bf00      	nop
 8008198:	20000010 	.word	0x20000010
 800819c:	08008be4 	.word	0x08008be4
 80081a0:	08008c04 	.word	0x08008c04
 80081a4:	08008bc4 	.word	0x08008bc4

080081a8 <abort>:
 80081a8:	b508      	push	{r3, lr}
 80081aa:	2006      	movs	r0, #6
 80081ac:	f000 fa54 	bl	8008658 <raise>
 80081b0:	2001      	movs	r0, #1
 80081b2:	f7fa f907 	bl	80023c4 <_exit>
	...

080081b8 <__sflush_r>:
 80081b8:	898a      	ldrh	r2, [r1, #12]
 80081ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081be:	4605      	mov	r5, r0
 80081c0:	0710      	lsls	r0, r2, #28
 80081c2:	460c      	mov	r4, r1
 80081c4:	d458      	bmi.n	8008278 <__sflush_r+0xc0>
 80081c6:	684b      	ldr	r3, [r1, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc05      	bgt.n	80081d8 <__sflush_r+0x20>
 80081cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dc02      	bgt.n	80081d8 <__sflush_r+0x20>
 80081d2:	2000      	movs	r0, #0
 80081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d0f9      	beq.n	80081d2 <__sflush_r+0x1a>
 80081de:	2300      	movs	r3, #0
 80081e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081e4:	682f      	ldr	r7, [r5, #0]
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	d032      	beq.n	8008250 <__sflush_r+0x98>
 80081ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	075a      	lsls	r2, r3, #29
 80081f0:	d505      	bpl.n	80081fe <__sflush_r+0x46>
 80081f2:	6863      	ldr	r3, [r4, #4]
 80081f4:	1ac0      	subs	r0, r0, r3
 80081f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081f8:	b10b      	cbz	r3, 80081fe <__sflush_r+0x46>
 80081fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081fc:	1ac0      	subs	r0, r0, r3
 80081fe:	2300      	movs	r3, #0
 8008200:	4602      	mov	r2, r0
 8008202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008204:	6a21      	ldr	r1, [r4, #32]
 8008206:	4628      	mov	r0, r5
 8008208:	47b0      	blx	r6
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	d106      	bne.n	800821e <__sflush_r+0x66>
 8008210:	6829      	ldr	r1, [r5, #0]
 8008212:	291d      	cmp	r1, #29
 8008214:	d82c      	bhi.n	8008270 <__sflush_r+0xb8>
 8008216:	4a2a      	ldr	r2, [pc, #168]	; (80082c0 <__sflush_r+0x108>)
 8008218:	40ca      	lsrs	r2, r1
 800821a:	07d6      	lsls	r6, r2, #31
 800821c:	d528      	bpl.n	8008270 <__sflush_r+0xb8>
 800821e:	2200      	movs	r2, #0
 8008220:	6062      	str	r2, [r4, #4]
 8008222:	04d9      	lsls	r1, r3, #19
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	6022      	str	r2, [r4, #0]
 8008228:	d504      	bpl.n	8008234 <__sflush_r+0x7c>
 800822a:	1c42      	adds	r2, r0, #1
 800822c:	d101      	bne.n	8008232 <__sflush_r+0x7a>
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	b903      	cbnz	r3, 8008234 <__sflush_r+0x7c>
 8008232:	6560      	str	r0, [r4, #84]	; 0x54
 8008234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008236:	602f      	str	r7, [r5, #0]
 8008238:	2900      	cmp	r1, #0
 800823a:	d0ca      	beq.n	80081d2 <__sflush_r+0x1a>
 800823c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008240:	4299      	cmp	r1, r3
 8008242:	d002      	beq.n	800824a <__sflush_r+0x92>
 8008244:	4628      	mov	r0, r5
 8008246:	f7ff faa5 	bl	8007794 <_free_r>
 800824a:	2000      	movs	r0, #0
 800824c:	6360      	str	r0, [r4, #52]	; 0x34
 800824e:	e7c1      	b.n	80081d4 <__sflush_r+0x1c>
 8008250:	6a21      	ldr	r1, [r4, #32]
 8008252:	2301      	movs	r3, #1
 8008254:	4628      	mov	r0, r5
 8008256:	47b0      	blx	r6
 8008258:	1c41      	adds	r1, r0, #1
 800825a:	d1c7      	bne.n	80081ec <__sflush_r+0x34>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0c4      	beq.n	80081ec <__sflush_r+0x34>
 8008262:	2b1d      	cmp	r3, #29
 8008264:	d001      	beq.n	800826a <__sflush_r+0xb2>
 8008266:	2b16      	cmp	r3, #22
 8008268:	d101      	bne.n	800826e <__sflush_r+0xb6>
 800826a:	602f      	str	r7, [r5, #0]
 800826c:	e7b1      	b.n	80081d2 <__sflush_r+0x1a>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	e7ad      	b.n	80081d4 <__sflush_r+0x1c>
 8008278:	690f      	ldr	r7, [r1, #16]
 800827a:	2f00      	cmp	r7, #0
 800827c:	d0a9      	beq.n	80081d2 <__sflush_r+0x1a>
 800827e:	0793      	lsls	r3, r2, #30
 8008280:	680e      	ldr	r6, [r1, #0]
 8008282:	bf08      	it	eq
 8008284:	694b      	ldreq	r3, [r1, #20]
 8008286:	600f      	str	r7, [r1, #0]
 8008288:	bf18      	it	ne
 800828a:	2300      	movne	r3, #0
 800828c:	eba6 0807 	sub.w	r8, r6, r7
 8008290:	608b      	str	r3, [r1, #8]
 8008292:	f1b8 0f00 	cmp.w	r8, #0
 8008296:	dd9c      	ble.n	80081d2 <__sflush_r+0x1a>
 8008298:	6a21      	ldr	r1, [r4, #32]
 800829a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800829c:	4643      	mov	r3, r8
 800829e:	463a      	mov	r2, r7
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b0      	blx	r6
 80082a4:	2800      	cmp	r0, #0
 80082a6:	dc06      	bgt.n	80082b6 <__sflush_r+0xfe>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e78e      	b.n	80081d4 <__sflush_r+0x1c>
 80082b6:	4407      	add	r7, r0
 80082b8:	eba8 0800 	sub.w	r8, r8, r0
 80082bc:	e7e9      	b.n	8008292 <__sflush_r+0xda>
 80082be:	bf00      	nop
 80082c0:	20400001 	.word	0x20400001

080082c4 <_fflush_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	4605      	mov	r5, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	b913      	cbnz	r3, 80082d4 <_fflush_r+0x10>
 80082ce:	2500      	movs	r5, #0
 80082d0:	4628      	mov	r0, r5
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	b118      	cbz	r0, 80082de <_fflush_r+0x1a>
 80082d6:	6983      	ldr	r3, [r0, #24]
 80082d8:	b90b      	cbnz	r3, 80082de <_fflush_r+0x1a>
 80082da:	f000 f887 	bl	80083ec <__sinit>
 80082de:	4b14      	ldr	r3, [pc, #80]	; (8008330 <_fflush_r+0x6c>)
 80082e0:	429c      	cmp	r4, r3
 80082e2:	d11b      	bne.n	800831c <_fflush_r+0x58>
 80082e4:	686c      	ldr	r4, [r5, #4]
 80082e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0ef      	beq.n	80082ce <_fflush_r+0xa>
 80082ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082f0:	07d0      	lsls	r0, r2, #31
 80082f2:	d404      	bmi.n	80082fe <_fflush_r+0x3a>
 80082f4:	0599      	lsls	r1, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_fflush_r+0x3a>
 80082f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fa:	f000 f915 	bl	8008528 <__retarget_lock_acquire_recursive>
 80082fe:	4628      	mov	r0, r5
 8008300:	4621      	mov	r1, r4
 8008302:	f7ff ff59 	bl	80081b8 <__sflush_r>
 8008306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008308:	07da      	lsls	r2, r3, #31
 800830a:	4605      	mov	r5, r0
 800830c:	d4e0      	bmi.n	80082d0 <_fflush_r+0xc>
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	059b      	lsls	r3, r3, #22
 8008312:	d4dd      	bmi.n	80082d0 <_fflush_r+0xc>
 8008314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008316:	f000 f908 	bl	800852a <__retarget_lock_release_recursive>
 800831a:	e7d9      	b.n	80082d0 <_fflush_r+0xc>
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <_fflush_r+0x70>)
 800831e:	429c      	cmp	r4, r3
 8008320:	d101      	bne.n	8008326 <_fflush_r+0x62>
 8008322:	68ac      	ldr	r4, [r5, #8]
 8008324:	e7df      	b.n	80082e6 <_fflush_r+0x22>
 8008326:	4b04      	ldr	r3, [pc, #16]	; (8008338 <_fflush_r+0x74>)
 8008328:	429c      	cmp	r4, r3
 800832a:	bf08      	it	eq
 800832c:	68ec      	ldreq	r4, [r5, #12]
 800832e:	e7da      	b.n	80082e6 <_fflush_r+0x22>
 8008330:	08008be4 	.word	0x08008be4
 8008334:	08008c04 	.word	0x08008c04
 8008338:	08008bc4 	.word	0x08008bc4

0800833c <std>:
 800833c:	2300      	movs	r3, #0
 800833e:	b510      	push	{r4, lr}
 8008340:	4604      	mov	r4, r0
 8008342:	e9c0 3300 	strd	r3, r3, [r0]
 8008346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800834a:	6083      	str	r3, [r0, #8]
 800834c:	8181      	strh	r1, [r0, #12]
 800834e:	6643      	str	r3, [r0, #100]	; 0x64
 8008350:	81c2      	strh	r2, [r0, #14]
 8008352:	6183      	str	r3, [r0, #24]
 8008354:	4619      	mov	r1, r3
 8008356:	2208      	movs	r2, #8
 8008358:	305c      	adds	r0, #92	; 0x5c
 800835a:	f7fd fb45 	bl	80059e8 <memset>
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <std+0x38>)
 8008360:	6263      	str	r3, [r4, #36]	; 0x24
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <std+0x3c>)
 8008364:	62a3      	str	r3, [r4, #40]	; 0x28
 8008366:	4b05      	ldr	r3, [pc, #20]	; (800837c <std+0x40>)
 8008368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800836a:	4b05      	ldr	r3, [pc, #20]	; (8008380 <std+0x44>)
 800836c:	6224      	str	r4, [r4, #32]
 800836e:	6323      	str	r3, [r4, #48]	; 0x30
 8008370:	bd10      	pop	{r4, pc}
 8008372:	bf00      	nop
 8008374:	08008691 	.word	0x08008691
 8008378:	080086b3 	.word	0x080086b3
 800837c:	080086eb 	.word	0x080086eb
 8008380:	0800870f 	.word	0x0800870f

08008384 <_cleanup_r>:
 8008384:	4901      	ldr	r1, [pc, #4]	; (800838c <_cleanup_r+0x8>)
 8008386:	f000 b8af 	b.w	80084e8 <_fwalk_reent>
 800838a:	bf00      	nop
 800838c:	080082c5 	.word	0x080082c5

08008390 <__sfmoreglue>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	2268      	movs	r2, #104	; 0x68
 8008394:	1e4d      	subs	r5, r1, #1
 8008396:	4355      	muls	r5, r2
 8008398:	460e      	mov	r6, r1
 800839a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800839e:	f7ff fa65 	bl	800786c <_malloc_r>
 80083a2:	4604      	mov	r4, r0
 80083a4:	b140      	cbz	r0, 80083b8 <__sfmoreglue+0x28>
 80083a6:	2100      	movs	r1, #0
 80083a8:	e9c0 1600 	strd	r1, r6, [r0]
 80083ac:	300c      	adds	r0, #12
 80083ae:	60a0      	str	r0, [r4, #8]
 80083b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083b4:	f7fd fb18 	bl	80059e8 <memset>
 80083b8:	4620      	mov	r0, r4
 80083ba:	bd70      	pop	{r4, r5, r6, pc}

080083bc <__sfp_lock_acquire>:
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <__sfp_lock_acquire+0x8>)
 80083be:	f000 b8b3 	b.w	8008528 <__retarget_lock_acquire_recursive>
 80083c2:	bf00      	nop
 80083c4:	2000077d 	.word	0x2000077d

080083c8 <__sfp_lock_release>:
 80083c8:	4801      	ldr	r0, [pc, #4]	; (80083d0 <__sfp_lock_release+0x8>)
 80083ca:	f000 b8ae 	b.w	800852a <__retarget_lock_release_recursive>
 80083ce:	bf00      	nop
 80083d0:	2000077d 	.word	0x2000077d

080083d4 <__sinit_lock_acquire>:
 80083d4:	4801      	ldr	r0, [pc, #4]	; (80083dc <__sinit_lock_acquire+0x8>)
 80083d6:	f000 b8a7 	b.w	8008528 <__retarget_lock_acquire_recursive>
 80083da:	bf00      	nop
 80083dc:	2000077e 	.word	0x2000077e

080083e0 <__sinit_lock_release>:
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <__sinit_lock_release+0x8>)
 80083e2:	f000 b8a2 	b.w	800852a <__retarget_lock_release_recursive>
 80083e6:	bf00      	nop
 80083e8:	2000077e 	.word	0x2000077e

080083ec <__sinit>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	f7ff fff0 	bl	80083d4 <__sinit_lock_acquire>
 80083f4:	69a3      	ldr	r3, [r4, #24]
 80083f6:	b11b      	cbz	r3, 8008400 <__sinit+0x14>
 80083f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083fc:	f7ff bff0 	b.w	80083e0 <__sinit_lock_release>
 8008400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008404:	6523      	str	r3, [r4, #80]	; 0x50
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <__sinit+0x68>)
 8008408:	4a13      	ldr	r2, [pc, #76]	; (8008458 <__sinit+0x6c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	62a2      	str	r2, [r4, #40]	; 0x28
 800840e:	42a3      	cmp	r3, r4
 8008410:	bf04      	itt	eq
 8008412:	2301      	moveq	r3, #1
 8008414:	61a3      	streq	r3, [r4, #24]
 8008416:	4620      	mov	r0, r4
 8008418:	f000 f820 	bl	800845c <__sfp>
 800841c:	6060      	str	r0, [r4, #4]
 800841e:	4620      	mov	r0, r4
 8008420:	f000 f81c 	bl	800845c <__sfp>
 8008424:	60a0      	str	r0, [r4, #8]
 8008426:	4620      	mov	r0, r4
 8008428:	f000 f818 	bl	800845c <__sfp>
 800842c:	2200      	movs	r2, #0
 800842e:	60e0      	str	r0, [r4, #12]
 8008430:	2104      	movs	r1, #4
 8008432:	6860      	ldr	r0, [r4, #4]
 8008434:	f7ff ff82 	bl	800833c <std>
 8008438:	68a0      	ldr	r0, [r4, #8]
 800843a:	2201      	movs	r2, #1
 800843c:	2109      	movs	r1, #9
 800843e:	f7ff ff7d 	bl	800833c <std>
 8008442:	68e0      	ldr	r0, [r4, #12]
 8008444:	2202      	movs	r2, #2
 8008446:	2112      	movs	r1, #18
 8008448:	f7ff ff78 	bl	800833c <std>
 800844c:	2301      	movs	r3, #1
 800844e:	61a3      	str	r3, [r4, #24]
 8008450:	e7d2      	b.n	80083f8 <__sinit+0xc>
 8008452:	bf00      	nop
 8008454:	08008848 	.word	0x08008848
 8008458:	08008385 	.word	0x08008385

0800845c <__sfp>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	4607      	mov	r7, r0
 8008460:	f7ff ffac 	bl	80083bc <__sfp_lock_acquire>
 8008464:	4b1e      	ldr	r3, [pc, #120]	; (80084e0 <__sfp+0x84>)
 8008466:	681e      	ldr	r6, [r3, #0]
 8008468:	69b3      	ldr	r3, [r6, #24]
 800846a:	b913      	cbnz	r3, 8008472 <__sfp+0x16>
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff ffbd 	bl	80083ec <__sinit>
 8008472:	3648      	adds	r6, #72	; 0x48
 8008474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008478:	3b01      	subs	r3, #1
 800847a:	d503      	bpl.n	8008484 <__sfp+0x28>
 800847c:	6833      	ldr	r3, [r6, #0]
 800847e:	b30b      	cbz	r3, 80084c4 <__sfp+0x68>
 8008480:	6836      	ldr	r6, [r6, #0]
 8008482:	e7f7      	b.n	8008474 <__sfp+0x18>
 8008484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008488:	b9d5      	cbnz	r5, 80084c0 <__sfp+0x64>
 800848a:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <__sfp+0x88>)
 800848c:	60e3      	str	r3, [r4, #12]
 800848e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008492:	6665      	str	r5, [r4, #100]	; 0x64
 8008494:	f000 f847 	bl	8008526 <__retarget_lock_init_recursive>
 8008498:	f7ff ff96 	bl	80083c8 <__sfp_lock_release>
 800849c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084a4:	6025      	str	r5, [r4, #0]
 80084a6:	61a5      	str	r5, [r4, #24]
 80084a8:	2208      	movs	r2, #8
 80084aa:	4629      	mov	r1, r5
 80084ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084b0:	f7fd fa9a 	bl	80059e8 <memset>
 80084b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084bc:	4620      	mov	r0, r4
 80084be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c0:	3468      	adds	r4, #104	; 0x68
 80084c2:	e7d9      	b.n	8008478 <__sfp+0x1c>
 80084c4:	2104      	movs	r1, #4
 80084c6:	4638      	mov	r0, r7
 80084c8:	f7ff ff62 	bl	8008390 <__sfmoreglue>
 80084cc:	4604      	mov	r4, r0
 80084ce:	6030      	str	r0, [r6, #0]
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d1d5      	bne.n	8008480 <__sfp+0x24>
 80084d4:	f7ff ff78 	bl	80083c8 <__sfp_lock_release>
 80084d8:	230c      	movs	r3, #12
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	e7ee      	b.n	80084bc <__sfp+0x60>
 80084de:	bf00      	nop
 80084e0:	08008848 	.word	0x08008848
 80084e4:	ffff0001 	.word	0xffff0001

080084e8 <_fwalk_reent>:
 80084e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ec:	4606      	mov	r6, r0
 80084ee:	4688      	mov	r8, r1
 80084f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084f4:	2700      	movs	r7, #0
 80084f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084fa:	f1b9 0901 	subs.w	r9, r9, #1
 80084fe:	d505      	bpl.n	800850c <_fwalk_reent+0x24>
 8008500:	6824      	ldr	r4, [r4, #0]
 8008502:	2c00      	cmp	r4, #0
 8008504:	d1f7      	bne.n	80084f6 <_fwalk_reent+0xe>
 8008506:	4638      	mov	r0, r7
 8008508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850c:	89ab      	ldrh	r3, [r5, #12]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d907      	bls.n	8008522 <_fwalk_reent+0x3a>
 8008512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008516:	3301      	adds	r3, #1
 8008518:	d003      	beq.n	8008522 <_fwalk_reent+0x3a>
 800851a:	4629      	mov	r1, r5
 800851c:	4630      	mov	r0, r6
 800851e:	47c0      	blx	r8
 8008520:	4307      	orrs	r7, r0
 8008522:	3568      	adds	r5, #104	; 0x68
 8008524:	e7e9      	b.n	80084fa <_fwalk_reent+0x12>

08008526 <__retarget_lock_init_recursive>:
 8008526:	4770      	bx	lr

08008528 <__retarget_lock_acquire_recursive>:
 8008528:	4770      	bx	lr

0800852a <__retarget_lock_release_recursive>:
 800852a:	4770      	bx	lr

0800852c <__swhatbuf_r>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	460e      	mov	r6, r1
 8008530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008534:	2900      	cmp	r1, #0
 8008536:	b096      	sub	sp, #88	; 0x58
 8008538:	4614      	mov	r4, r2
 800853a:	461d      	mov	r5, r3
 800853c:	da08      	bge.n	8008550 <__swhatbuf_r+0x24>
 800853e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	602a      	str	r2, [r5, #0]
 8008546:	061a      	lsls	r2, r3, #24
 8008548:	d410      	bmi.n	800856c <__swhatbuf_r+0x40>
 800854a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800854e:	e00e      	b.n	800856e <__swhatbuf_r+0x42>
 8008550:	466a      	mov	r2, sp
 8008552:	f000 f903 	bl	800875c <_fstat_r>
 8008556:	2800      	cmp	r0, #0
 8008558:	dbf1      	blt.n	800853e <__swhatbuf_r+0x12>
 800855a:	9a01      	ldr	r2, [sp, #4]
 800855c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008560:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008564:	425a      	negs	r2, r3
 8008566:	415a      	adcs	r2, r3
 8008568:	602a      	str	r2, [r5, #0]
 800856a:	e7ee      	b.n	800854a <__swhatbuf_r+0x1e>
 800856c:	2340      	movs	r3, #64	; 0x40
 800856e:	2000      	movs	r0, #0
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	b016      	add	sp, #88	; 0x58
 8008574:	bd70      	pop	{r4, r5, r6, pc}
	...

08008578 <__smakebuf_r>:
 8008578:	898b      	ldrh	r3, [r1, #12]
 800857a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800857c:	079d      	lsls	r5, r3, #30
 800857e:	4606      	mov	r6, r0
 8008580:	460c      	mov	r4, r1
 8008582:	d507      	bpl.n	8008594 <__smakebuf_r+0x1c>
 8008584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	6123      	str	r3, [r4, #16]
 800858c:	2301      	movs	r3, #1
 800858e:	6163      	str	r3, [r4, #20]
 8008590:	b002      	add	sp, #8
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	ab01      	add	r3, sp, #4
 8008596:	466a      	mov	r2, sp
 8008598:	f7ff ffc8 	bl	800852c <__swhatbuf_r>
 800859c:	9900      	ldr	r1, [sp, #0]
 800859e:	4605      	mov	r5, r0
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff f963 	bl	800786c <_malloc_r>
 80085a6:	b948      	cbnz	r0, 80085bc <__smakebuf_r+0x44>
 80085a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ac:	059a      	lsls	r2, r3, #22
 80085ae:	d4ef      	bmi.n	8008590 <__smakebuf_r+0x18>
 80085b0:	f023 0303 	bic.w	r3, r3, #3
 80085b4:	f043 0302 	orr.w	r3, r3, #2
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	e7e3      	b.n	8008584 <__smakebuf_r+0xc>
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <__smakebuf_r+0x7c>)
 80085be:	62b3      	str	r3, [r6, #40]	; 0x28
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	9b00      	ldr	r3, [sp, #0]
 80085cc:	6163      	str	r3, [r4, #20]
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	6120      	str	r0, [r4, #16]
 80085d2:	b15b      	cbz	r3, 80085ec <__smakebuf_r+0x74>
 80085d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085d8:	4630      	mov	r0, r6
 80085da:	f000 f8d1 	bl	8008780 <_isatty_r>
 80085de:	b128      	cbz	r0, 80085ec <__smakebuf_r+0x74>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f023 0303 	bic.w	r3, r3, #3
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	89a0      	ldrh	r0, [r4, #12]
 80085ee:	4305      	orrs	r5, r0
 80085f0:	81a5      	strh	r5, [r4, #12]
 80085f2:	e7cd      	b.n	8008590 <__smakebuf_r+0x18>
 80085f4:	08008385 	.word	0x08008385

080085f8 <_malloc_usable_size_r>:
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f18      	subs	r0, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfbc      	itt	lt
 8008602:	580b      	ldrlt	r3, [r1, r0]
 8008604:	18c0      	addlt	r0, r0, r3
 8008606:	4770      	bx	lr

08008608 <_raise_r>:
 8008608:	291f      	cmp	r1, #31
 800860a:	b538      	push	{r3, r4, r5, lr}
 800860c:	4604      	mov	r4, r0
 800860e:	460d      	mov	r5, r1
 8008610:	d904      	bls.n	800861c <_raise_r+0x14>
 8008612:	2316      	movs	r3, #22
 8008614:	6003      	str	r3, [r0, #0]
 8008616:	f04f 30ff 	mov.w	r0, #4294967295
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800861e:	b112      	cbz	r2, 8008626 <_raise_r+0x1e>
 8008620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008624:	b94b      	cbnz	r3, 800863a <_raise_r+0x32>
 8008626:	4620      	mov	r0, r4
 8008628:	f000 f830 	bl	800868c <_getpid_r>
 800862c:	462a      	mov	r2, r5
 800862e:	4601      	mov	r1, r0
 8008630:	4620      	mov	r0, r4
 8008632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008636:	f000 b817 	b.w	8008668 <_kill_r>
 800863a:	2b01      	cmp	r3, #1
 800863c:	d00a      	beq.n	8008654 <_raise_r+0x4c>
 800863e:	1c59      	adds	r1, r3, #1
 8008640:	d103      	bne.n	800864a <_raise_r+0x42>
 8008642:	2316      	movs	r3, #22
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	2001      	movs	r0, #1
 8008648:	e7e7      	b.n	800861a <_raise_r+0x12>
 800864a:	2400      	movs	r4, #0
 800864c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008650:	4628      	mov	r0, r5
 8008652:	4798      	blx	r3
 8008654:	2000      	movs	r0, #0
 8008656:	e7e0      	b.n	800861a <_raise_r+0x12>

08008658 <raise>:
 8008658:	4b02      	ldr	r3, [pc, #8]	; (8008664 <raise+0xc>)
 800865a:	4601      	mov	r1, r0
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	f7ff bfd3 	b.w	8008608 <_raise_r>
 8008662:	bf00      	nop
 8008664:	20000010 	.word	0x20000010

08008668 <_kill_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d07      	ldr	r5, [pc, #28]	; (8008688 <_kill_r+0x20>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	4611      	mov	r1, r2
 8008674:	602b      	str	r3, [r5, #0]
 8008676:	f7f9 fe95 	bl	80023a4 <_kill>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	d102      	bne.n	8008684 <_kill_r+0x1c>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	b103      	cbz	r3, 8008684 <_kill_r+0x1c>
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	bd38      	pop	{r3, r4, r5, pc}
 8008686:	bf00      	nop
 8008688:	20000778 	.word	0x20000778

0800868c <_getpid_r>:
 800868c:	f7f9 be82 	b.w	8002394 <_getpid>

08008690 <__sread>:
 8008690:	b510      	push	{r4, lr}
 8008692:	460c      	mov	r4, r1
 8008694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008698:	f000 f894 	bl	80087c4 <_read_r>
 800869c:	2800      	cmp	r0, #0
 800869e:	bfab      	itete	ge
 80086a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086a2:	89a3      	ldrhlt	r3, [r4, #12]
 80086a4:	181b      	addge	r3, r3, r0
 80086a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086aa:	bfac      	ite	ge
 80086ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80086ae:	81a3      	strhlt	r3, [r4, #12]
 80086b0:	bd10      	pop	{r4, pc}

080086b2 <__swrite>:
 80086b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b6:	461f      	mov	r7, r3
 80086b8:	898b      	ldrh	r3, [r1, #12]
 80086ba:	05db      	lsls	r3, r3, #23
 80086bc:	4605      	mov	r5, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	4616      	mov	r6, r2
 80086c2:	d505      	bpl.n	80086d0 <__swrite+0x1e>
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	2302      	movs	r3, #2
 80086ca:	2200      	movs	r2, #0
 80086cc:	f000 f868 	bl	80087a0 <_lseek_r>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	4632      	mov	r2, r6
 80086de:	463b      	mov	r3, r7
 80086e0:	4628      	mov	r0, r5
 80086e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	f000 b817 	b.w	8008718 <_write_r>

080086ea <__sseek>:
 80086ea:	b510      	push	{r4, lr}
 80086ec:	460c      	mov	r4, r1
 80086ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f2:	f000 f855 	bl	80087a0 <_lseek_r>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	bf15      	itete	ne
 80086fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80086fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008706:	81a3      	strheq	r3, [r4, #12]
 8008708:	bf18      	it	ne
 800870a:	81a3      	strhne	r3, [r4, #12]
 800870c:	bd10      	pop	{r4, pc}

0800870e <__sclose>:
 800870e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008712:	f000 b813 	b.w	800873c <_close_r>
	...

08008718 <_write_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	; (8008738 <_write_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7f9 fe73 	bl	8002412 <_write>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_write_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_write_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20000778 	.word	0x20000778

0800873c <_close_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_close_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	f7f9 fe7f 	bl	800244a <_close>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_close_r+0x1a>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_close_r+0x1a>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20000778 	.word	0x20000778

0800875c <_fstat_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4d07      	ldr	r5, [pc, #28]	; (800877c <_fstat_r+0x20>)
 8008760:	2300      	movs	r3, #0
 8008762:	4604      	mov	r4, r0
 8008764:	4608      	mov	r0, r1
 8008766:	4611      	mov	r1, r2
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	f7f9 fe7a 	bl	8002462 <_fstat>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d102      	bne.n	8008778 <_fstat_r+0x1c>
 8008772:	682b      	ldr	r3, [r5, #0]
 8008774:	b103      	cbz	r3, 8008778 <_fstat_r+0x1c>
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	bf00      	nop
 800877c:	20000778 	.word	0x20000778

08008780 <_isatty_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d06      	ldr	r5, [pc, #24]	; (800879c <_isatty_r+0x1c>)
 8008784:	2300      	movs	r3, #0
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	602b      	str	r3, [r5, #0]
 800878c:	f7f9 fe79 	bl	8002482 <_isatty>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_isatty_r+0x1a>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	b103      	cbz	r3, 800879a <_isatty_r+0x1a>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20000778 	.word	0x20000778

080087a0 <_lseek_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4d07      	ldr	r5, [pc, #28]	; (80087c0 <_lseek_r+0x20>)
 80087a4:	4604      	mov	r4, r0
 80087a6:	4608      	mov	r0, r1
 80087a8:	4611      	mov	r1, r2
 80087aa:	2200      	movs	r2, #0
 80087ac:	602a      	str	r2, [r5, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	f7f9 fe72 	bl	8002498 <_lseek>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_lseek_r+0x1e>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	b103      	cbz	r3, 80087be <_lseek_r+0x1e>
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	20000778 	.word	0x20000778

080087c4 <_read_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d07      	ldr	r5, [pc, #28]	; (80087e4 <_read_r+0x20>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f7f9 fe00 	bl	80023d8 <_read>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_read_r+0x1e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_read_r+0x1e>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000778 	.word	0x20000778

080087e8 <_init>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr

080087f4 <_fini>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	bf00      	nop
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr
